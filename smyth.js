//# 1 "main.bc.runtime.js"
// Generated by js_of_ocaml 3.8.0
(function(a){"use strict";var
cx=" : flags Open_text and Open_binary are not compatible",cw=0x100,cQ="_nat",dm=0x0000FFFF,dl="Invalid_argument",cP=0.001,c6=180,cv=0.5,cO="caml_bigstring_blit_ba_to_ba: kind mismatch",cN="2d",bs=1255,c5=0x7F,dk="\\",cL=255,cM=0x800,F=0xffff,c4=0x04,br="caml_bigstring_blit_string_to_ba: kind mismatch",cK="jsError",O=0x8000,c3=12520,bA=0x0A,aa=256,cu=0x01,cJ="End_of_file",ct="lexing: empty token",cI="Failure",h=0xff,cs=0x07,ab=1000,cr=0x02,cq="Stack_overflow",e="",bu="^",cH="Bigarray.blit: dimension mismatch",cp=0x3F,cG=200,c2=86400000,x="0",ax=0x3f,co="Not_found",bn=65599,bq=0xf,dj=0x8495A6BE,c1=0x12,aH=128,cF=0xdc00,dg="Sys_blocked_io",dh="fd ",di="p",c0="Match_failure",D=248,cn="px ",cm="static/",cE="Division_by_zero",bt=252,dd=0x05,de=0x06,df=1027,v=0x00,dc=0x18,cl=0xFE,cD="Sys_error",aF=".",l=0xFF,cZ=0x08,aw="+",cY=0xf0,ck=0x3FFFFFFF,cj=1026,cX=4294967296,bp=1900,db=0x03,$="int_of_string",av=65536,da="_bigarray",cC="Illegal seek",bz=127,aG=1024,ci=251,_=" ",w=0x80,P=1023,by="e",ch="Undefined_recursive_module",c$=" : flags Open_rdonly and Open_wronly are not compatible",cg=1074,c_="([^/]*)",cB=512,aj="-",cW="nan",cz="canvas",cA=0x7ff0,c9=0x19,bo=0x09,cV=0xe0,c8=" : file already exists",cU=0xFF00,cT=0xdfff,G=0xffffff,bm="compare: functional value",cR="Assert_failure",cS="Str.replace: reference to unmatched group",z="/",cy="0x",bx=0x40,au=0x20,c7="Out_of_memory",N=254,bw="index out of bounds",aV=250,bv="_bigarr02";/*<<+int64.js 235 0>>*/function
d3(a){/*<<+int64.js 235 33>>*/return+/*<<+int64.js 235 41>>*/a.isZero()/*<<+int64.js 235 53>>*/}/*<<+mlBytes.js 50 0>>*/function
as(b,a){/*<<+mlBytes.js 51 2>>*/if(b==0)/*<<+mlBytes.js 51 13>>*/return e;/*<<+mlBytes.js 52 2>>*/if(a.repeat)/*<<+mlBytes.js 52 16>>*/return/*<<+mlBytes.js 52 24>>*/a.repeat(b);/*<<+mlBytes.js 53 2>>*/var/*<<+mlBytes.js 53 8>>*/d=e,/*<<+mlBytes.js 53 16>>*/c=0;/*<<+mlBytes.js 54 2>>*/for(;;)/*<<+mlBytes.js 54 10>>*/{/*<<+mlBytes.js 55 4>>*/if(b&1)d+=a;b>>=1;/*<<+mlBytes.js 57 4>>*/if(b==0)/*<<+mlBytes.js 57 16>>*/return d;a+=a;c++;/*<<+mlBytes.js 60 4>>*/if(c==9)/*<<+mlBytes.js 60 16>>*/ /*<<+mlBytes.js 61 6>>*/a.slice(0,1)}/*<<+mlBytes.js 66 0>>*/}/*<<+int64.js 21 0>>*/ /*<<+int64.js 21 22>>*/var
aD=/*<<+int64.js 21 24>>*/Math.pow(2,-24);/*<<+fail.js 21 0>>*/function
bg(a){/*<<+fail.js 21 37>>*/throw a/*<<+fail.js 21 48>>*/}/*<<+stdlib.js 64 0>>*/ /*<<+stdlib.js 64 21>>*/var
i=[0];/*<<+fail.js 56 0>>*/function
aP(){/*<<+fail.js 57 2>>*/bg(i.Division_by_zero)/*<<+fail.js 58 0>>*/}/*<<+int64.js 25 0>>*/function
b(b,c,a){this.lo=b&G;this.mi=c&G;this.hi=a&F/*<<+int64.js 29 0>>*/}b.prototype.caml_custom="_j";b.prototype.copy=function(){/*<<+int64.js 32 2>>*/return new
b(this.lo,this.mi,this.hi)/*<<+int64.js 31 25>>*/};b.prototype.ucompare=function(a){/*<<+int64.js 36 2>>*/if(this.hi>a.hi)/*<<+int64.js 36 22>>*/return 1;/*<<+int64.js 37 2>>*/if(this.hi<a.hi)/*<<+int64.js 37 22>>*/return-1;/*<<+int64.js 38 2>>*/if(this.mi>a.mi)/*<<+int64.js 38 22>>*/return 1;/*<<+int64.js 39 2>>*/if(this.mi<a.mi)/*<<+int64.js 39 22>>*/return-1;/*<<+int64.js 40 2>>*/if(this.lo>a.lo)/*<<+int64.js 40 22>>*/return 1;/*<<+int64.js 41 2>>*/if(this.lo<a.lo)/*<<+int64.js 41 22>>*/return-1;/*<<+int64.js 42 2>>*/return 0/*<<+int64.js 35 29>>*/};b.prototype.compare=function(a){/*<<+int64.js 45 2>>*/var/*<<+int64.js 45 9>>*/b=this.hi<<16,/*<<+int64.js 46 10>>*/c=a.hi<<16;/*<<+int64.js 47 2>>*/if(b>c)/*<<+int64.js 47 16>>*/return 1;/*<<+int64.js 48 2>>*/if(b<c)/*<<+int64.js 48 16>>*/return-1;/*<<+int64.js 49 2>>*/if(this.mi>a.mi)/*<<+int64.js 49 22>>*/return 1;/*<<+int64.js 50 2>>*/if(this.mi<a.mi)/*<<+int64.js 50 22>>*/return-1;/*<<+int64.js 51 2>>*/if(this.lo>a.lo)/*<<+int64.js 51 22>>*/return 1;/*<<+int64.js 52 2>>*/if(this.lo<a.lo)/*<<+int64.js 52 22>>*/return-1;/*<<+int64.js 53 2>>*/return 0/*<<+int64.js 44 28>>*/};b.prototype.neg=function(){/*<<+int64.js 56 2>>*/var/*<<+int64.js 56 9>>*/a=-this.lo,/*<<+int64.js 57 9>>*/c=-this.mi+(a>>24),/*<<+int64.js 58 9>>*/d=-this.hi+(c>>24);/*<<+int64.js 59 2>>*/return new
b(a,c,d)/*<<+int64.js 55 24>>*/};b.prototype.add=function(a){/*<<+int64.js 62 2>>*/var/*<<+int64.js 62 9>>*/c=this.lo+a.lo,/*<<+int64.js 63 9>>*/d=this.mi+a.mi+(c>>24),/*<<+int64.js 64 9>>*/e=this.hi+a.hi+(d>>24);/*<<+int64.js 65 2>>*/return new
b(c,d,e)/*<<+int64.js 61 24>>*/};b.prototype.sub=function(a){/*<<+int64.js 68 2>>*/var/*<<+int64.js 68 9>>*/c=this.lo-a.lo,/*<<+int64.js 69 9>>*/d=this.mi-a.mi+(c>>24),/*<<+int64.js 70 9>>*/e=this.hi-a.hi+(d>>24);/*<<+int64.js 71 2>>*/return new
b(c,d,e)/*<<+int64.js 67 24>>*/};b.prototype.mul=function(a){/*<<+int64.js 74 2>>*/var/*<<+int64.js 74 9>>*/c=this.lo*a.lo,/*<<+int64.js 75 9>>*/d=(c*aD|0)+this.mi*a.lo+this.lo*a.mi,/*<<+int64.js 76 9>>*/e=(d*aD|0)+this.hi*a.lo+this.mi*a.mi+this.lo*a.hi;/*<<+int64.js 77 2>>*/return new
b(c,d,e)/*<<+int64.js 73 24>>*/};b.prototype.isZero=function(){/*<<+int64.js 80 2>>*/return(this.lo|this.mi|this.hi)==0/*<<+int64.js 79 27>>*/};b.prototype.isNeg=function(){/*<<+int64.js 83 2>>*/return this.hi<<16<0/*<<+int64.js 82 26>>*/};b.prototype.and=function(a){/*<<+int64.js 86 2>>*/return new
b(this.lo&a.lo,this.mi&a.mi,this.hi&a.hi)/*<<+int64.js 85 24>>*/};b.prototype.or=function(a){/*<<+int64.js 89 2>>*/return new
b(this.lo|a.lo,this.mi|a.mi,this.hi|a.hi)/*<<+int64.js 88 23>>*/};b.prototype.xor=function(a){/*<<+int64.js 92 2>>*/return new
b(this.lo^a.lo,this.mi^a.mi,this.hi^a.hi)/*<<+int64.js 91 24>>*/};b.prototype.shift_left=function(a){a=a&63;/*<<+int64.js 96 2>>*/if(a==0)/*<<+int64.js 96 14>>*/return this;/*<<+int64.js 97 2>>*/if(a<24)/*<<+int64.js 97 14>>*/return new
b(this.lo<<a,this.mi<<a|this.lo>>24-a,this.hi<<a|this.mi>>24-a);/*<<+int64.js 102 2>>*/if(a<48)/*<<+int64.js 103 4>>*/return new
b(0,this.lo<<a-24,this.mi<<a-24|this.lo>>48-a);/*<<+int64.js 106 2>>*/return new
b(0,0,this.lo<<a-48)/*<<+int64.js 94 31>>*/};b.prototype.shift_right_unsigned=function(a){a=a&63;/*<<+int64.js 110 2>>*/if(a==0)/*<<+int64.js 110 14>>*/return this;/*<<+int64.js 111 2>>*/if(a<24)/*<<+int64.js 112 4>>*/return new
b(this.lo>>a|this.mi<<24-a,this.mi>>a|this.hi<<24-a,this.hi>>a);/*<<+int64.js 116 2>>*/if(a<48)/*<<+int64.js 117 4>>*/return new
b(this.mi>>a-24|this.hi<<48-a,this.hi>>a-24,0);/*<<+int64.js 121 2>>*/return new
b(this.hi>>a-48,0,0)/*<<+int64.js 108 41>>*/};b.prototype.shift_right=function(a){a=a&63;/*<<+int64.js 125 2>>*/if(a==0)/*<<+int64.js 125 14>>*/return this;/*<<+int64.js 126 2>>*/ /*<<+int64.js 126 8>>*/var
d=this.hi<<16>>16;/*<<+int64.js 127 2>>*/if(a<24)/*<<+int64.js 128 4>>*/return new
b(this.lo>>a|this.mi<<24-a,this.mi>>a|d<<24-a,this.hi<<16>>a>>>16);/*<<+int64.js 126 2>>*/ /*<<+int64.js 132 11>>*/var
c=this.hi<<16>>31;/*<<+int64.js 133 2>>*/if(a<48)/*<<+int64.js 134 4>>*/return new
b(this.mi>>a-24|this.hi<<48-a,this.hi<<16>>a-24>>16,c&F);/*<<+int64.js 138 2>>*/return new
b(this.hi<<16>>a-32,c,c)/*<<+int64.js 123 32>>*/};b.prototype.lsl1=function(){this.hi=this.hi<<1|this.mi>>23;this.mi=(this.mi<<1|this.lo>>23)&G;this.lo=this.lo<<1&G/*<<+int64.js 140 25>>*/};b.prototype.lsr1=function(){this.lo=(this.lo>>>1|this.mi<<23)&G;this.mi=(this.mi>>>1|this.hi<<23)&G;this.hi=this.hi>>>1/*<<+int64.js 145 25>>*/};b.prototype.udivmod=function(f){/*<<+int64.js 151 2>>*/var/*<<+int64.js 151 13>>*/d=0,/*<<+int64.js 152 14>>*/c=/*<<+int64.js 152 16>>*/this.copy(),/*<<+int64.js 153 14>>*/a=/*<<+int64.js 153 16>>*/f.copy(),/*<<+int64.js 154 15>>*/e=new
b(0,0,0);/*<<+int64.js 155 2>>*/while(/*<<+int64.js 155 9>>*/c.ucompare(a)>0)/*<<+int64.js 155 40>>*/{d++;/*<<+int64.js 157 4>>*/a.lsl1()}/*<<+int64.js 159 2>>*/while(d>=0)/*<<+int64.js 159 22>>*/{d--;/*<<+int64.js 161 4>>*/e.lsl1();/*<<+int64.js 162 4>>*/if(/*<<+int64.js 162 8>>*/c.ucompare(a)>=0)/*<<+int64.js 162 40>>*/{e.lo++;c=/*<<+int64.js 164 16>>*/c.sub(a)}/*<<+int64.js 166 4>>*/a.lsr1()}/*<<+int64.js 168 2>>*/return{quotient:e,modulus:c}/*<<+int64.js 150 28>>*/};b.prototype.div=function(a){/*<<+int64.js 172 2>>*/ /*<<+int64.js 172 8>>*/var
b=this;/*<<+int64.js 173 2>>*/if(/*<<+int64.js 173 6>>*/a.isZero())/*<<+int64.js 173 18>>*/aP();/*<<+int64.js 172 2>>*/ /*<<+int64.js 174 11>>*/var
d=b.hi^a.hi;/*<<+int64.js 175 2>>*/if(b.hi&O)b=/*<<+int64.js 175 25>>*/b.neg();/*<<+int64.js 176 2>>*/if(a.hi&O)a=/*<<+int64.js 176 25>>*/a.neg();/*<<+int64.js 172 2>>*/ /*<<+int64.js 177 8>>*/var
c=/*<<+int64.js 177 10>>*/b.udivmod(a).quotient;/*<<+int64.js 178 2>>*/if(d&O)c=/*<<+int64.js 178 25>>*/c.neg();/*<<+int64.js 179 2>>*/return c/*<<+int64.js 170 24>>*/};b.prototype.mod=function(b){/*<<+int64.js 183 2>>*/ /*<<+int64.js 183 8>>*/var
a=this;/*<<+int64.js 184 2>>*/if(/*<<+int64.js 184 6>>*/b.isZero())/*<<+int64.js 184 18>>*/aP();/*<<+int64.js 183 2>>*/ /*<<+int64.js 185 11>>*/var
d=a.hi;/*<<+int64.js 186 2>>*/if(a.hi&O)a=/*<<+int64.js 186 25>>*/a.neg();/*<<+int64.js 187 2>>*/if(b.hi&O)b=/*<<+int64.js 187 25>>*/b.neg();/*<<+int64.js 183 2>>*/ /*<<+int64.js 188 8>>*/var
c=/*<<+int64.js 188 10>>*/a.udivmod(b).modulus;/*<<+int64.js 189 2>>*/if(d&O)c=/*<<+int64.js 189 25>>*/c.neg();/*<<+int64.js 190 2>>*/return c/*<<+int64.js 181 24>>*/};b.prototype.toInt=function(){/*<<+int64.js 193 2>>*/return this.lo|this.mi<<24/*<<+int64.js 192 26>>*/};b.prototype.toFloat=function(){/*<<+int64.js 196 2>>*/return(this.hi<<16)*/*<<+int64.js 196 28>>*/Math.pow(2,32)+this.mi*/*<<+int64.js 196 56>>*/Math.pow(2,24)+this.lo/*<<+int64.js 195 28>>*/};b.prototype.toArray=function(){/*<<+int64.js 199 2>>*/return[this.hi>>8,this.hi&h,this.mi>>16,this.mi>>8&h,this.mi&h,this.lo>>16,this.lo>>8&h,this.lo&h]/*<<+int64.js 198 28>>*/};b.prototype.lo32=function(){/*<<+int64.js 209 2>>*/return this.lo|(this.mi&h)<<24/*<<+int64.js 208 25>>*/};b.prototype.hi32=function(){/*<<+int64.js 212 2>>*/return this.mi>>>8&F|this.hi<<16/*<<+int64.js 211 25>>*/};/*<<+int64.js 266 0>>*/function
aC(a){/*<<+int64.js 267 2>>*/return new
b(a&G,a>>24&G,a>>31&F)/*<<+int64.js 268 0>>*/}/*<<+int64.js 271 0>>*/function
d7(a){/*<<+int64.js 271 35>>*/return/*<<+int64.js 271 42>>*/a.toInt()/*<<+int64.js 271 52>>*/}/*<<+int64.js 238 0>>*/function
d2(a){/*<<+int64.js 238 37>>*/return+/*<<+int64.js 238 45>>*/a.isNeg()/*<<+int64.js 238 56>>*/}/*<<+int64.js 222 0>>*/function
bV(a){/*<<+int64.js 222 30>>*/return/*<<+int64.js 222 37>>*/a.neg()/*<<+int64.js 222 45>>*/}/*<<+mlBytes.js 73 0>>*/function
aS(c,b,a){/*<<+mlBytes.js 74 2>>*/ /*<<+mlBytes.js 74 8>>*/var
d=String.fromCharCode;/*<<+mlBytes.js 75 2>>*/if(b==0&&a<=4096&&a==c.length)/*<<+mlBytes.js 75 48>>*/return/*<<+mlBytes.js 75 55>>*/d.apply(null,c);/*<<+mlBytes.js 74 2>>*/ /*<<+mlBytes.js 76 8>>*/var
f=e;/*<<+mlBytes.js 77 2>>*/for(;0<a;b+=aG,a-=aG)f+=/*<<+mlBytes.js 78 9>>*/d.apply(null,/*<<+mlBytes.js 78 24>>*/c.slice(b,b+/*<<+mlBytes.js 78 38>>*/Math.min(a,aG)));/*<<+mlBytes.js 79 2>>*/return f/*<<+mlBytes.js 80 0>>*/}/*<<+mlBytes.js 443 0>>*/function
B(a){/*<<+mlBytes.js 445 2>>*/if(a.t==2)a.c+=/*<<+mlBytes.js 446 11>>*/as(a.l-a.c.length,"\0");else
a.c=/*<<+mlBytes.js 448 10>>*/aS(a.c,0,a.c.length);a.t=0/*<<+mlBytes.js 450 0>>*/}/*<<+mlBytes.js 808 0>>*/function
o(a){/*<<+mlBytes.js 809 2>>*/if((a.t&6)!=0)/*<<+mlBytes.js 809 34>>*/B(a);/*<<+mlBytes.js 810 2>>*/return a.c/*<<+mlBytes.js 810 13>>*/}/*<<+fail.js 27 0>>*/function
b2(b,a){/*<<+fail.js 27 42>>*/throw[0,b,a]/*<<+fail.js 27 63>>*/}/*<<+mlBytes.js 165 0>>*/function
cb(a){/*<<+mlBytes.js 167 2>>*/if(a.length<24)/*<<+mlBytes.js 167 21>>*/{/*<<+mlBytes.js 169 4>>*/for(/*<<+mlBytes.js 169 15>>*/var
b=0;b<a.length;b++)/*<<+mlBytes.js 169 39>>*/if(/*<<+mlBytes.js 169 43>>*/a.charCodeAt(b)>bz)/*<<+mlBytes.js 169 66>>*/return false;/*<<+mlBytes.js 170 4>>*/return true}else/*<<+mlBytes.js 172 4>>*/return!/*<<+mlBytes.js 172 12>>*/ /[^\x00-\x7f]/.test(a)/*<<+mlBytes.js 173 0>>*/}/*<<+mlBytes.js 118 0>>*/function
bk(f){/*<<+mlBytes.js 119 2>>*/for(var/*<<+mlBytes.js 119 13>>*/k=e,/*<<+mlBytes.js 119 21>>*/c=e,h,g,i,a,/*<<+mlBytes.js 119 43>>*/b=0,/*<<+mlBytes.js 119 50>>*/j=f.length;b<j;b++)/*<<+mlBytes.js 119 74>>*/{g=/*<<+mlBytes.js 120 9>>*/f.charCodeAt(b);/*<<+mlBytes.js 121 4>>*/if(g<w)/*<<+mlBytes.js 121 19>>*/{/*<<+mlBytes.js 122 6>>*/for(/*<<+mlBytes.js 122 17>>*/var
d=b+1;d<j&&(g=/*<<+mlBytes.js 122 43>>*/f.charCodeAt(d))<w;d++)/*<<+mlBytes.js 122 72>>*/;/*<<+mlBytes.js 123 6>>*/if(d-b>cB)/*<<+mlBytes.js 123 23>>*/{/*<<+mlBytes.js 123 25>>*/c.substr(0,1);k+=c;c=e;k+=/*<<+mlBytes.js 123 62>>*/f.slice(b,d)}else
c+=/*<<+mlBytes.js 124 16>>*/f.slice(b,d);/*<<+mlBytes.js 125 6>>*/if(d==j)/*<<+mlBytes.js 125 18>>*/break;b=d}a=1;/*<<+mlBytes.js 129 4>>*/if(++b<j&&((i=/*<<+mlBytes.js 129 29>>*/f.charCodeAt(b))&-64)==aH)/*<<+mlBytes.js 129 62>>*/{h=i+(g<<6);/*<<+mlBytes.js 131 6>>*/if(g<cV)/*<<+mlBytes.js 131 21>>*/{a=h-0x3080;/*<<+mlBytes.js 133 8>>*/if(a<w)a=1}else/*<<+mlBytes.js 134 13>>*/{a=2;/*<<+mlBytes.js 136 8>>*/if(++b<j&&((i=/*<<+mlBytes.js 136 33>>*/f.charCodeAt(b))&-64)==aH)/*<<+mlBytes.js 136 66>>*/{h=i+(h<<6);/*<<+mlBytes.js 138 10>>*/if(g<cY)/*<<+mlBytes.js 138 25>>*/{a=h-0xe2080;/*<<+mlBytes.js 140 12>>*/if(a<cM||a>=0xd7ff&&a<0xe000)a=2}else/*<<+mlBytes.js 141 17>>*/{a=3;/*<<+mlBytes.js 143 12>>*/if(++b<j&&((i=/*<<+mlBytes.js 143 37>>*/f.charCodeAt(b))&-64)==aH&&g<0xf5)/*<<+mlBytes.js 144 29>>*/{a=i-0x3c82080+(h<<6);/*<<+mlBytes.js 146 14>>*/if(a<0x10000||a>0x10ffff)a=3}}}}}/*<<+mlBytes.js 152 4>>*/if(a<4)/*<<+mlBytes.js 152 15>>*/{b-=a;c+="\ufffd"}else/*<<+mlBytes.js 155 11>>*/if(a>F)c+=/*<<+mlBytes.js 156 11>>*/String.fromCharCode(0xd7c0+(a>>10),cF+(a&0x3FF));else
c+=/*<<+mlBytes.js 158 11>>*/String.fromCharCode(a);/*<<+mlBytes.js 159 4>>*/if(c.length>aG)/*<<+mlBytes.js 159 25>>*/{/*<<+mlBytes.js 159 26>>*/c.substr(0,1);k+=c;c=e}}/*<<+mlBytes.js 161 2>>*/return k+c/*<<+mlBytes.js 162 0>>*/}/*<<+mlBytes.js 412 0>>*/function
Q(c,a,b){this.t=c;this.c=a;this.l=b/*<<+mlBytes.js 414 0>>*/}Q.prototype.toString=function(){/*<<+mlBytes.js 416 2>>*/switch(this.t){case
9:/*<<+mlBytes.js 418 4>>*/return this.c;default:/*<<+mlBytes.js 420 4>>*/B(this);case
0:/*<<+mlBytes.js 422 4>>*/if(/*<<+mlBytes.js 422 8>>*/cb(this.c))/*<<+mlBytes.js 422 31>>*/{this.t=9;/*<<+mlBytes.js 424 6>>*/return this.c}this.t=8;case
8:/*<<+mlBytes.js 428 4>>*/return this.c}/*<<+mlBytes.js 415 29>>*/};Q.prototype.toUtf16=function(){/*<<+mlBytes.js 432 2>>*/ /*<<+mlBytes.js 432 8>>*/var
a=/*<<+mlBytes.js 432 10>>*/this.toString();/*<<+mlBytes.js 433 2>>*/if(this.t==9)/*<<+mlBytes.js 433 18>>*/return a;/*<<+mlBytes.js 434 2>>*/return/*<<+mlBytes.js 434 9>>*/bk(a)/*<<+mlBytes.js 431 28>>*/};Q.prototype.slice=function(){/*<<+mlBytes.js 437 2>>*/ /*<<+mlBytes.js 437 14>>*/var
a=this.t==4?/*<<+mlBytes.js 437 30>>*/this.c.slice():this.c;/*<<+mlBytes.js 438 2>>*/return new
Q(this.t,a,this.l)/*<<+mlBytes.js 436 26>>*/};/*<<+mlBytes.js 738 0>>*/function
bM(a){/*<<+mlBytes.js 738 36>>*/return new
Q(0,a,a.length)/*<<+mlBytes.js 738 70>>*/}/*<<+mlBytes.js 803 0>>*/function
f(a){/*<<+mlBytes.js 803 37>>*/return/*<<+mlBytes.js 803 44>>*/bM(a)/*<<+mlBytes.js 803 70>>*/}/*<<+fail.js 31 0>>*/function
bi(b,a){/*<<+fail.js 32 2>>*/b2(b,/*<<+fail.js 32 28>>*/f(a))/*<<+fail.js 33 0>>*/}/*<<+fail.js 44 0>>*/function
d(a){/*<<+fail.js 45 2>>*/bi(i.Invalid_argument,a)/*<<+fail.js 46 0>>*/}/*<<+format.js 22 0>>*/function
bf(e){e=/*<<+format.js 23 8>>*/o(e);/*<<+format.js 24 2>>*/ /*<<+format.js 24 10>>*/var
f=e.length;/*<<+format.js 25 2>>*/if(f>31)/*<<+format.js 25 16>>*/d("format_int: format too long");/*<<+format.js 24 2>>*/ /*<<+format.js 26 8>>*/var
a={justify:aw,signstyle:aj,filler:_,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:"f"};/*<<+format.js 30 2>>*/for(/*<<+format.js 30 13>>*/var
c=0;c<f;c++)/*<<+format.js 30 32>>*/{/*<<+format.js 31 4>>*/ /*<<+format.js 31 10>>*/var
b=/*<<+format.js 31 12>>*/e.charAt(c);/*<<+format.js 32 4>>*/switch(b){case"-":a.justify=aj;/*<<+format.js 34 23>>*/break;case"+":case" ":a.signstyle=b;/*<<+format.js 36 23>>*/break;case"0":a.filler=x;/*<<+format.js 38 22>>*/break;case"#":a.alternate=true;/*<<+format.js 40 26>>*/break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":a.width=0;/*<<+format.js 44 6>>*/while(b=/*<<+format.js 44 15>>*/e.charCodeAt(c)-48,b>=0&&b<=9)/*<<+format.js 44 57>>*/{a.width=a.width*10+b;c++}c--;/*<<+format.js 48 6>>*/break;case".":a.prec=0;c++;/*<<+format.js 52 6>>*/while(b=/*<<+format.js 52 15>>*/e.charCodeAt(c)-48,b>=0&&b<=9)/*<<+format.js 52 57>>*/{a.prec=a.prec*10+b;c++}c--;case"d":case"i":a.signedconv=true;case"u":a.base=10;/*<<+format.js 59 19>>*/break;case"x":a.base=16;/*<<+format.js 61 19>>*/break;case"X":a.base=16;a.uppercase=true;/*<<+format.js 63 39>>*/break;case"o":a.base=8;/*<<+format.js 65 18>>*/break;case"e":case"f":case"g":a.signedconv=true;a.conv=b;/*<<+format.js 67 39>>*/break;case"E":case"F":case"G":a.signedconv=true;a.uppercase=true;a.conv=/*<<+format.js 70 15>>*/b.toLowerCase();/*<<+format.js 70 33>>*/break}}/*<<+format.js 73 2>>*/return a/*<<+format.js 74 0>>*/}/*<<+format.js 78 0>>*/function
a1(a,g){/*<<+format.js 79 2>>*/if(a.uppercase)g=/*<<+format.js 79 31>>*/g.toUpperCase();/*<<+format.js 80 2>>*/ /*<<+format.js 80 10>>*/var
d=g.length;/*<<+format.js 82 2>>*/if(a.signedconv&&(a.sign<0||a.signstyle!=aj))d++;/*<<+format.js 83 2>>*/if(a.alternate)/*<<+format.js 83 19>>*/{/*<<+format.js 84 4>>*/if(a.base==8)d+=1;/*<<+format.js 85 4>>*/if(a.base==16)d+=2}/*<<+format.js 80 2>>*/ /*<<+format.js 88 13>>*/var
b=e;/*<<+format.js 89 2>>*/if(a.justify==aw&&a.filler==_)/*<<+format.js 90 4>>*/for(/*<<+format.js 90 15>>*/var
c=d;c<a.width;c++)b+=_;/*<<+format.js 91 2>>*/if(a.signedconv)/*<<+format.js 91 20>>*/if(a.sign<0)b+=aj;else/*<<+format.js 93 9>>*/if(a.signstyle!=aj)b+=a.signstyle;/*<<+format.js 95 2>>*/if(a.alternate&&a.base==8)b+=x;/*<<+format.js 96 2>>*/if(a.alternate&&a.base==16)b+=cy;/*<<+format.js 97 2>>*/if(a.justify==aw&&a.filler==x)/*<<+format.js 98 4>>*/for(/*<<+format.js 98 15>>*/var
c=d;c<a.width;c++)b+=x;b+=g;/*<<+format.js 100 2>>*/if(a.justify==aj)/*<<+format.js 101 4>>*/for(/*<<+format.js 101 15>>*/var
c=d;c<a.width;c++)b+=_;/*<<+format.js 102 2>>*/return/*<<+format.js 102 9>>*/f(b)/*<<+format.js 103 0>>*/}/*<<+int64.js 291 0>>*/function
g8(h,c){/*<<+int64.js 292 2>>*/ /*<<+int64.js 292 8>>*/var
a=/*<<+int64.js 292 10>>*/bf(h);/*<<+int64.js 293 2>>*/if(a.signedconv&&/*<<+int64.js 293 22>>*/d2(c))/*<<+int64.js 293 49>>*/{a.sign=-1;c=/*<<+int64.js 294 21>>*/bV(c)}/*<<+int64.js 292 2>>*/var/*<<+int64.js 296 13>>*/b=e,/*<<+int64.js 297 12>>*/i=/*<<+int64.js 297 14>>*/aC(a.base),/*<<+int64.js 298 12>>*/g="0123456789abcdef";/*<<+int64.js 299 2>>*/do/*<<+int64.js 299 5>>*/{/*<<+int64.js 300 4>>*/ /*<<+int64.js 300 10>>*/var
f=/*<<+int64.js 300 12>>*/c.udivmod(i);c=f.quotient;b=/*<<+int64.js 302 13>>*/g.charAt(/*<<+int64.js 302 26>>*/d7(f.modulus))+b}while(!/*<<+int64.js 303 13>>*/d3(c));/*<<+int64.js 304 2>>*/if(a.prec>=0)/*<<+int64.js 304 19>>*/{a.filler=_;/*<<+int64.js 306 4>>*/ /*<<+int64.js 306 10>>*/var
d=a.prec-b.length;/*<<+int64.js 307 4>>*/if(d>0)b=/*<<+int64.js 307 24>>*/as(d,x)+b}/*<<+int64.js 309 2>>*/return/*<<+int64.js 309 9>>*/a1(a,b)/*<<+int64.js 310 0>>*/}/*<<+ieee_754.js 267 0>>*/function
fY(a){/*<<+ieee_754.js 268 2>>*/var/*<<+ieee_754.js 268 8>>*/c=/*<<+ieee_754.js 268 10>>*/Math.exp(a),/*<<+ieee_754.js 268 25>>*/b=c-1;/*<<+ieee_754.js 269 2>>*/return/*<<+ieee_754.js 269 10>>*/Math.abs(a)>1?b:b==0?a:a*b/ /*<<+ieee_754.js 269 38>>*/Math.log(c)/*<<+ieee_754.js 270 0>>*/}/*<<+mlBytes.js 814 0>>*/function
t(a){/*<<+mlBytes.js 815 2>>*/return/*<<+mlBytes.js 815 9>>*/a.toUtf16()/*<<+mlBytes.js 816 0>>*/}/*<<+fs.js 23 0>>*/if(a.process&&a.process.cwd)/*<<+fs.js 24 2>>*/ /*<<+fs.js 24 23>>*/var
ae=/*<<+fs.js 24 25>>*/ /*<<+fs.js 24 25>>*/a.process.cwd().replace(/\\/g,z);else/*<<+fs.js 26 2>>*/ /*<<+fs.js 26 23>>*/var
ae="/static";/*<<+fs.js 27 0>>*/if(/*<<+fs.js 27 3>>*/ae.slice(-1)!==z)ae+=z;/*<<+fs.js 40 0>>*/function
a$(a){a=/*<<+fs.js 41 7>>*/t(a);/*<<+fs.js 42 2>>*/if(/*<<+fs.js 42 5>>*/a.charCodeAt(0)!=47)a=ae+a;/*<<+fs.js 44 2>>*/var/*<<+fs.js 44 11>>*/d=/*<<+fs.js 44 13>>*/a.split(z),/*<<+fs.js 45 12>>*/b=[];/*<<+fs.js 46 2>>*/for(/*<<+fs.js 46 12>>*/var
c=0;c<d.length;c++)/*<<+fs.js 46 36>>*/switch(d[c]){case"..":/*<<+fs.js 48 15>>*/if(b.length>1)/*<<+fs.js 48 34>>*/b.pop();/*<<+fs.js 48 47>>*/break;case".":/*<<+fs.js 49 14>>*/break;case"":/*<<+fs.js 50 13>>*/if(b.length==0)/*<<+fs.js 50 35>>*/b.push(e);/*<<+fs.js 50 51>>*/break;default:/*<<+fs.js 51 13>>*/b.push(d[c]);/*<<+fs.js 51 33>>*/break}b.orig=a;/*<<+fs.js 55 2>>*/return b/*<<+fs.js 56 0>>*/}/*<<+mlBytes.js 827 0>>*/function
af(a){/*<<+mlBytes.js 828 2>>*/return a
instanceof
Q/*<<+mlBytes.js 829 0>>*/}/*<<+mlBytes.js 841 0>>*/function
ap(a){/*<<+mlBytes.js 842 2>>*/return/*<<+mlBytes.js 842 9>>*/af(a)/*<<+mlBytes.js 843 0>>*/}/*<<+mlBytes.js 516 0>>*/function
aZ(a){/*<<+mlBytes.js 517 2>>*/return new
Q(4,a,a.length)/*<<+mlBytes.js 518 0>>*/}/*<<+mlBytes.js 798 0>>*/function
am(a){/*<<+mlBytes.js 798 35>>*/return a/*<<+mlBytes.js 798 44>>*/}/*<<+mlBytes.js 83 0>>*/function
eq(f){/*<<+mlBytes.js 84 2>>*/for(var/*<<+mlBytes.js 84 13>>*/g=e,/*<<+mlBytes.js 84 21>>*/b=g,a,i,/*<<+mlBytes.js 84 34>>*/c=0,/*<<+mlBytes.js 84 41>>*/h=f.length;c<h;c++)/*<<+mlBytes.js 84 65>>*/{a=/*<<+mlBytes.js 85 8>>*/f.charCodeAt(c);/*<<+mlBytes.js 86 4>>*/if(a<w)/*<<+mlBytes.js 86 18>>*/{/*<<+mlBytes.js 87 6>>*/for(/*<<+mlBytes.js 87 17>>*/var
d=c+1;d<h&&(a=/*<<+mlBytes.js 87 42>>*/f.charCodeAt(d))<w;d++)/*<<+mlBytes.js 87 71>>*/;/*<<+mlBytes.js 88 6>>*/if(d-c>cB)/*<<+mlBytes.js 88 23>>*/{/*<<+mlBytes.js 88 25>>*/b.substr(0,1);g+=b;b=e;g+=/*<<+mlBytes.js 88 62>>*/f.slice(c,d)}else
b+=/*<<+mlBytes.js 89 16>>*/f.slice(c,d);/*<<+mlBytes.js 90 6>>*/if(d==h)/*<<+mlBytes.js 90 18>>*/break;c=d}/*<<+mlBytes.js 93 4>>*/if(a<cM)/*<<+mlBytes.js 93 19>>*/{b+=/*<<+mlBytes.js 94 11>>*/String.fromCharCode(0xc0|a>>6);b+=/*<<+mlBytes.js 95 11>>*/String.fromCharCode(w|a&ax)}else/*<<+mlBytes.js 96 11>>*/if(a<0xd800||a>=cT)/*<<+mlBytes.js 96 42>>*/b+=/*<<+mlBytes.js 97 11>>*/String.fromCharCode(cV|a>>12,w|a>>6&ax,w|a&ax);else/*<<+mlBytes.js 100 11>>*/if(a>=0xdbff||c+1==h||(i=/*<<+mlBytes.js 101 20>>*/f.charCodeAt(c+1))<cF||i>cT)/*<<+mlBytes.js 101 65>>*/b+="\xef\xbf\xbd";else/*<<+mlBytes.js 104 11>>*/{c++;a=(a<<10)+i-0x35fdc00;b+=/*<<+mlBytes.js 107 11>>*/String.fromCharCode(cY|a>>18,w|a>>12&ax,w|a>>6&ax,w|a&ax)}/*<<+mlBytes.js 112 4>>*/if(b.length>aG)/*<<+mlBytes.js 112 25>>*/{/*<<+mlBytes.js 112 26>>*/b.substr(0,1);g+=b;b=e}}/*<<+mlBytes.js 114 2>>*/return g+b/*<<+mlBytes.js 115 0>>*/}/*<<+mlBytes.js 402 0>>*/function
dA(a){/*<<+mlBytes.js 403 2>>*/ /*<<+mlBytes.js 403 10>>*/var
b=9;/*<<+mlBytes.js 404 2>>*/if(!/*<<+mlBytes.js 404 7>>*/cb(a))b=8,a=/*<<+mlBytes.js 405 41>>*/eq(a);/*<<+mlBytes.js 406 2>>*/return new
Q(b,a,a.length)/*<<+mlBytes.js 407 0>>*/}/*<<+mlBytes.js 821 0>>*/function
V(a){/*<<+mlBytes.js 822 2>>*/return/*<<+mlBytes.js 822 9>>*/dA(a)/*<<+mlBytes.js 823 0>>*/}/*<<+sys.js 22 0>>*/function
j(a){/*<<+sys.js 23 2>>*/bi(i.Sys_error,a)/*<<+sys.js 24 0>>*/}/*<<+fs.js 139 0>>*/function
aO(a){a=/*<<+fs.js 140 9>>*/o(a);/*<<+fs.js 141 2>>*/j(a+": No such file or directory")/*<<+fs.js 142 0>>*/}/*<<+mlBytes.js 212 0>>*/function
ad(){/*<<+mlBytes.js 213 2>>*/d(bw)/*<<+mlBytes.js 214 0>>*/}/*<<+mlBytes.js 176 0>>*/function
y(a,b){/*<<+mlBytes.js 177 2>>*/switch(a.t&6){default:/*<<+mlBytes.js 179 4>>*/if(b>=a.c.length)/*<<+mlBytes.js 179 25>>*/return 0;case
0:/*<<+mlBytes.js 181 4>>*/return/*<<+mlBytes.js 181 11>>*/a.c.charCodeAt(b);case
4:/*<<+mlBytes.js 183 4>>*/return a.c[b]}/*<<+mlBytes.js 185 0>>*/}/*<<+mlBytes.js 293 0>>*/function
dz(b,a){/*<<+mlBytes.js 294 2>>*/if(a>>>0>=b.l)/*<<+mlBytes.js 294 22>>*/ad();/*<<+mlBytes.js 295 2>>*/return/*<<+mlBytes.js 295 9>>*/y(b,a)/*<<+mlBytes.js 296 0>>*/}/*<<+mlBytes.js 503 0>>*/function
I(a){/*<<+mlBytes.js 504 2>>*/if(a<0)/*<<+mlBytes.js 504 15>>*/d("Bytes.create");/*<<+mlBytes.js 505 2>>*/return new
Q(a?2:9,e,a)/*<<+mlBytes.js 506 0>>*/}/*<<+mlBytes.js 650 0>>*/function
ag(a){/*<<+mlBytes.js 650 35>>*/return a.l/*<<+mlBytes.js 650 46>>*/}/*<<+mlBytes.js 453 0>>*/function
aK(c){/*<<+mlBytes.js 455 2>>*/if(a.Uint8Array)/*<<+mlBytes.js 455 35>>*/ /*<<+mlBytes.js 456 10>>*/var
d=new(a.Uint8Array)(c.l);else/*<<+mlBytes.js 457 9>>*/ /*<<+mlBytes.js 458 10>>*/var
d=new
Array(c.l);/*<<+mlBytes.js 460 2>>*/var/*<<+mlBytes.js 460 8>>*/f=c.c,/*<<+mlBytes.js 460 17>>*/e=f.length,/*<<+mlBytes.js 460 31>>*/b=0;/*<<+mlBytes.js 461 2>>*/for(;b<e;b++)d[b]=/*<<+mlBytes.js 461 28>>*/f.charCodeAt(b);/*<<+mlBytes.js 462 2>>*/for(e=c.l;b<e;b++)d[b]=0;c.c=d;c.t=4;/*<<+mlBytes.js 465 2>>*/return d/*<<+mlBytes.js 466 0>>*/}/*<<+mlBytes.js 611 0>>*/function
ah(d,e,b,f,c){/*<<+mlBytes.js 612 2>>*/if(c==0)/*<<+mlBytes.js 612 16>>*/return 0;/*<<+mlBytes.js 613 2>>*/if(f==0&&(c>=b.l||b.t==2&&c>=b.c.length))/*<<+mlBytes.js 614 72>>*/{b.c=d.t==4?/*<<+mlBytes.js 616 6>>*/aS(d.c,e,c):e==0&&d.c.length==c?d.c:/*<<+mlBytes.js 617 43>>*/d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else/*<<+mlBytes.js 619 9>>*/if(b.t==2&&f==b.c.length)/*<<+mlBytes.js 619 59>>*/{b.c+=d.t==4?/*<<+mlBytes.js 621 6>>*/aS(d.c,e,c):e==0&&d.c.length==c?d.c:/*<<+mlBytes.js 622 43>>*/d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else/*<<+mlBytes.js 624 9>>*/{/*<<+mlBytes.js 625 4>>*/if(b.t!=4)/*<<+mlBytes.js 625 31>>*/aK(b);/*<<+mlBytes.js 626 4>>*/var/*<<+mlBytes.js 626 11>>*/g=d.c,/*<<+mlBytes.js 626 22>>*/h=b.c;/*<<+mlBytes.js 627 4>>*/if(d.t==4)/*<<+mlBytes.js 627 31>>*/if(f<=e)/*<<+mlBytes.js 628 20>>*/for(/*<<+mlBytes.js 629 19>>*/var
a=0;a<c;a++)h[f+a]=g[e+a];else/*<<+mlBytes.js 630 13>>*/for(/*<<+mlBytes.js 631 19>>*/var
a=c-1;a>=0;a--)h[f+a]=g[e+a];else/*<<+mlBytes.js 633 11>>*/{/*<<+mlBytes.js 634 6>>*/ /*<<+mlBytes.js 634 12>>*/var
i=/*<<+mlBytes.js 634 14>>*/Math.min(c,g.length-e);/*<<+mlBytes.js 635 6>>*/for(/*<<+mlBytes.js 635 17>>*/var
a=0;a<i;a++)h[f+a]=/*<<+mlBytes.js 635 48>>*/g.charCodeAt(e+a);/*<<+mlBytes.js 636 6>>*/for(;a<c;a++)h[f+a]=0}}/*<<+mlBytes.js 639 2>>*/return 0/*<<+mlBytes.js 640 0>>*/}/*<<+mlBytes.js 644 0>>*/function
dx(a,b,c,d,e){/*<<+mlBytes.js 645 4>>*/ah(/*<<+mlBytes.js 645 20>>*/am(a),b,c,d,e);/*<<+mlBytes.js 646 4>>*/return 0/*<<+mlBytes.js 647 0>>*/}/*<<+fs.js 35 0>>*/function
bB(){/*<<+fs.js 35 20>>*/}/*<<+fs_fake.js 122 0>>*/function
p(a){this.data=a/*<<+fs_fake.js 124 0>>*/}p.prototype=new
bB();p.prototype.truncate=function(a){/*<<+fs_fake.js 127 2>>*/ /*<<+fs_fake.js 127 10>>*/var
b=this.data;this.data=/*<<+fs_fake.js 128 14>>*/I(a|0);/*<<+fs_fake.js 129 2>>*/ah(b,0,this.data,0,a)/*<<+fs_fake.js 126 32>>*/};p.prototype.length=function(){/*<<+fs_fake.js 132 2>>*/return/*<<+fs_fake.js 132 9>>*/ag(this.data)/*<<+fs_fake.js 131 30>>*/};p.prototype.write=function(b,d,g,a){/*<<+fs_fake.js 135 2>>*/ /*<<+fs_fake.js 135 11>>*/var
c=/*<<+fs_fake.js 135 13>>*/this.length();/*<<+fs_fake.js 136 2>>*/if(b+a>=c)/*<<+fs_fake.js 136 27>>*/{/*<<+fs_fake.js 137 4>>*/var/*<<+fs_fake.js 137 16>>*/e=/*<<+fs_fake.js 137 18>>*/I(b+a),/*<<+fs_fake.js 138 17>>*/f=this.data;this.data=e;/*<<+fs_fake.js 140 4>>*/ah(f,0,this.data,0,c)}/*<<+fs_fake.js 142 2>>*/dx(d,g,this.data,b,a);/*<<+fs_fake.js 143 2>>*/return 0/*<<+fs_fake.js 134 29>>*/};p.prototype.read=function(c,a,d,b){/*<<+fs_fake.js 146 2>>*/ /*<<+fs_fake.js 146 11>>*/var
e=/*<<+fs_fake.js 146 13>>*/this.length();/*<<+fs_fake.js 147 2>>*/ah(this.data,c,a,d,b);/*<<+fs_fake.js 148 2>>*/return 0/*<<+fs_fake.js 145 28>>*/};p.prototype.read_one=function(a){/*<<+fs_fake.js 151 2>>*/return/*<<+fs_fake.js 151 9>>*/dz(this.data,a)/*<<+fs_fake.js 150 32>>*/};p.prototype.close=function(){/*<<+fs_fake.js 153 29>>*/};p.prototype.constructor=p;/*<<+fs_fake.js 26 0>>*/function
A(b,a){this.content={};this.root=b;this.lookupFun=a/*<<+fs_fake.js 30 0>>*/}A.prototype.nm=function(a){/*<<+fs_fake.js 32 2>>*/return this.root+a/*<<+fs_fake.js 31 28>>*/};A.prototype.lookup=function(a){/*<<+fs_fake.js 35 2>>*/if(!this.content[a]&&this.lookupFun)/*<<+fs_fake.js 35 44>>*/{/*<<+fs_fake.js 36 4>>*/ /*<<+fs_fake.js 36 12>>*/var
b=/*<<+fs_fake.js 36 14>>*/this.lookupFun(/*<<+fs_fake.js 36 29>>*/f(this.root),/*<<+fs_fake.js 36 64>>*/f(a));/*<<+fs_fake.js 37 4>>*/if(b!==0)this.content[a]=new
p(/*<<+fs_fake.js 37 52>>*/am(b[1]))}/*<<+fs_fake.js 34 32>>*/};A.prototype.exists=function(a){/*<<+fs_fake.js 42 2>>*/if(a==e)/*<<+fs_fake.js 42 17>>*/return 1;/*<<+fs_fake.js 44 2>>*/var/*<<+fs_fake.js 44 17>>*/c=a+z,/*<<+fs_fake.js 45 8>>*/d=new
RegExp(bu+c);/*<<+fs_fake.js 46 2>>*/for(var
b
in
this.content)/*<<+fs_fake.js 46 29>>*/if(/*<<+fs_fake.js 47 8>>*/b.match(d))/*<<+fs_fake.js 47 20>>*/return 1;/*<<+fs_fake.js 50 2>>*/this.lookup(a);/*<<+fs_fake.js 51 2>>*/return this.content[a]?1:0/*<<+fs_fake.js 40 32>>*/};A.prototype.readdir=function(c){/*<<+fs_fake.js 54 2>>*/var/*<<+fs_fake.js 54 17>>*/g=c==e?e:c+z,/*<<+fs_fake.js 55 8>>*/h=new
RegExp(bu+g+c_),/*<<+fs_fake.js 56 11>>*/d={},/*<<+fs_fake.js 57 8>>*/b=[];/*<<+fs_fake.js 58 2>>*/for(var
f
in
this.content)/*<<+fs_fake.js 58 29>>*/{/*<<+fs_fake.js 59 4>>*/ /*<<+fs_fake.js 59 10>>*/var
a=/*<<+fs_fake.js 59 12>>*/f.match(h);/*<<+fs_fake.js 60 4>>*/if(a&&!d[a[1]])/*<<+fs_fake.js 60 25>>*/{d[a[1]]=true;/*<<+fs_fake.js 60 45>>*/b.push(a[1])}}/*<<+fs_fake.js 62 2>>*/return b/*<<+fs_fake.js 53 33>>*/};A.prototype.is_dir=function(a){/*<<+fs_fake.js 65 2>>*/var/*<<+fs_fake.js 65 17>>*/d=a==e?e:a+z,/*<<+fs_fake.js 66 8>>*/f=new
RegExp(bu+d+c_),/*<<+fs_fake.js 67 8>>*/g=[];/*<<+fs_fake.js 68 2>>*/for(var
c
in
this.content)/*<<+fs_fake.js 68 29>>*/{/*<<+fs_fake.js 69 4>>*/ /*<<+fs_fake.js 69 10>>*/var
b=/*<<+fs_fake.js 69 12>>*/c.match(f);/*<<+fs_fake.js 70 4>>*/if(b)/*<<+fs_fake.js 70 10>>*/return 1}/*<<+fs_fake.js 72 2>>*/return 0/*<<+fs_fake.js 64 32>>*/};A.prototype.unlink=function(a){/*<<+fs_fake.js 75 2>>*/ /*<<+fs_fake.js 75 9>>*/var
b=this.content[a]?true:false;delete
this.content[a];/*<<+fs_fake.js 77 2>>*/return b/*<<+fs_fake.js 74 32>>*/};A.prototype.open=function(a,b){/*<<+fs_fake.js 80 2>>*/if(b.rdonly&&b.wronly)/*<<+fs_fake.js 81 4>>*/j(/*<<+fs_fake.js 81 25>>*/this.nm(a)+c$);/*<<+fs_fake.js 82 2>>*/if(b.text&&b.binary)/*<<+fs_fake.js 83 4>>*/j(/*<<+fs_fake.js 83 25>>*/this.nm(a)+cx);/*<<+fs_fake.js 84 2>>*/this.lookup(a);/*<<+fs_fake.js 85 2>>*/if(this.content[a])/*<<+fs_fake.js 85 26>>*/{/*<<+fs_fake.js 86 4>>*/if(/*<<+fs_fake.js 86 8>>*/this.is_dir(a))/*<<+fs_fake.js 86 27>>*/j(/*<<+fs_fake.js 86 48>>*/this.nm(a)+" : is a directory");/*<<+fs_fake.js 87 4>>*/if(b.create&&b.excl)/*<<+fs_fake.js 87 28>>*/j(/*<<+fs_fake.js 87 49>>*/this.nm(a)+c8);/*<<+fs_fake.js 88 4>>*/ /*<<+fs_fake.js 88 13>>*/var
c=this.content[a];/*<<+fs_fake.js 89 4>>*/if(b.truncate)/*<<+fs_fake.js 89 19>>*/c.truncate();/*<<+fs_fake.js 90 4>>*/return c}else/*<<+fs_fake.js 91 9>>*/if(b.create)/*<<+fs_fake.js 91 23>>*/{this.content[a]=new
p(/*<<+fs_fake.js 92 40>>*/I(0));/*<<+fs_fake.js 93 4>>*/return this.content[a]}else/*<<+fs_fake.js 94 9>>*/ /*<<+fs_fake.js 95 4>>*/aO(/*<<+fs_fake.js 95 29>>*/this.nm(a))/*<<+fs_fake.js 79 30>>*/};A.prototype.register=function(b,a){/*<<+fs_fake.js 100 2>>*/if(this.content[b])/*<<+fs_fake.js 100 25>>*/j(/*<<+fs_fake.js 100 46>>*/this.nm(b)+c8);/*<<+fs_fake.js 101 2>>*/if(/*<<+fs_fake.js 101 5>>*/af(a))this.content[b]=new
p(a);/*<<+fs_fake.js 103 2>>*/if(/*<<+fs_fake.js 103 5>>*/ap(a))this.content[b]=new
p(/*<<+fs_fake.js 104 40>>*/am(a));else/*<<+fs_fake.js 105 7>>*/if(a
instanceof
Array)this.content[b]=new
p(/*<<+fs_fake.js 106 40>>*/aZ(a));else/*<<+fs_fake.js 107 7>>*/if(typeof
a==="string")this.content[b]=new
p(/*<<+fs_fake.js 108 40>>*/bM(a));else/*<<+fs_fake.js 109 7>>*/if(a.toString)/*<<+fs_fake.js 109 28>>*/{/*<<+fs_fake.js 110 4>>*/ /*<<+fs_fake.js 110 14>>*/var
c=/*<<+fs_fake.js 110 16>>*/am(/*<<+fs_fake.js 110 37>>*/V(/*<<+fs_fake.js 110 61>>*/a.toString()));this.content[b]=new
p(c)}else/*<<+fs_fake.js 113 7>>*/j(/*<<+fs_fake.js 113 28>>*/this.nm(b)+" : registering file with invalid content type")/*<<+fs_fake.js 99 33>>*/};A.prototype.constructor=A;/*<<+mlBytes.js 760 0>>*/function
r(a){/*<<+mlBytes.js 761 2>>*/return/*<<+mlBytes.js 761 9>>*/ag(a)/*<<+mlBytes.js 762 0>>*/}/*<<+mlBytes.js 746 0>>*/function
u(b,a){/*<<+mlBytes.js 747 2>>*/return/*<<+mlBytes.js 747 9>>*/y(b,a)/*<<+mlBytes.js 748 0>>*/}/*<<+mlBytes.js 478 0>>*/function
aX(d){/*<<+mlBytes.js 479 2>>*/var/*<<+mlBytes.js 479 8>>*/c=/*<<+mlBytes.js 479 10>>*/r(d),/*<<+mlBytes.js 480 8>>*/b=new
Array(c),/*<<+mlBytes.js 481 8>>*/a=0;/*<<+mlBytes.js 482 2>>*/for(;a<c;a++)b[a]=/*<<+mlBytes.js 482 28>>*/u(d,a);/*<<+mlBytes.js 483 2>>*/return b/*<<+mlBytes.js 484 0>>*/}/*<<+mlBytes.js 470 0>>*/function
aJ(a){/*<<+mlBytes.js 471 2>>*/if(a.t!=4)/*<<+mlBytes.js 471 28>>*/aK(a);/*<<+mlBytes.js 472 2>>*/return a.c/*<<+mlBytes.js 473 0>>*/}/*<<+mlBytes.js 189 0>>*/function
X(a,c,b){b&=h;/*<<+mlBytes.js 192 2>>*/if(a.t!=4)/*<<+mlBytes.js 192 28>>*/{/*<<+mlBytes.js 193 4>>*/if(c==a.c.length)/*<<+mlBytes.js 193 25>>*/{a.c+=/*<<+mlBytes.js 194 13>>*/String.fromCharCode(b);/*<<+mlBytes.js 195 6>>*/if(c+1==a.l)a.t=0;/*<<+mlBytes.js 196 6>>*/return 0}/*<<+mlBytes.js 198 4>>*/aK(a)}a.c[c]=b;/*<<+mlBytes.js 201 2>>*/return 0/*<<+mlBytes.js 202 0>>*/}/*<<+mlBytes.js 395 0>>*/function
dB(b,a,c){/*<<+mlBytes.js 396 2>>*/if(a>>>0>=b.l)/*<<+mlBytes.js 396 22>>*/ad();/*<<+mlBytes.js 397 2>>*/return/*<<+mlBytes.js 397 9>>*/X(b,a,c)/*<<+mlBytes.js 398 0>>*/}/*<<+fs_node.js 107 0>>*/function
S(a){this.fs=/*<<+fs_node.js 108 12>>*/require("fs");this.fd=a/*<<+fs_node.js 110 0>>*/}S.prototype=new
bB();S.prototype.truncate=function(a){/*<<+fs_node.js 114 2>>*/try{/*<<+fs_node.js 115 4>>*/this.fs.ftruncateSync(this.fd,a|0)}catch(a){/*<<+fs_node.js 117 4>>*/j(/*<<+fs_node.js 117 25>>*/a.toString())}/*<<+fs_node.js 113 32>>*/};S.prototype.length=function(){/*<<+fs_node.js 121 2>>*/try{/*<<+fs_node.js 122 4>>*/return/*<<+fs_node.js 122 11>>*/this.fs.fstatSync(this.fd).size}catch(a){/*<<+fs_node.js 124 4>>*/j(/*<<+fs_node.js 124 25>>*/a.toString())}/*<<+fs_node.js 120 30>>*/};S.prototype.write=function(g,c,d,f){/*<<+fs_node.js 128 2>>*/ /*<<+fs_node.js 128 8>>*/var
b=/*<<+fs_node.js 128 10>>*/aX(c);/*<<+fs_node.js 129 2>>*/if(!(b
instanceof
a.Uint8Array))b=new(a.Uint8Array)(b);/*<<+fs_node.js 128 2>>*/ /*<<+fs_node.js 131 13>>*/var
e=/*<<+fs_node.js 131 15>>*/a.Buffer.from(b);/*<<+fs_node.js 132 2>>*/try{/*<<+fs_node.js 133 4>>*/this.fs.writeSync(this.fd,e,d,f,g)}catch(a){/*<<+fs_node.js 135 4>>*/j(/*<<+fs_node.js 135 25>>*/a.toString())}/*<<+fs_node.js 137 2>>*/return 0/*<<+fs_node.js 127 29>>*/};S.prototype.read=function(h,e,d,g){/*<<+fs_node.js 140 2>>*/ /*<<+fs_node.js 140 8>>*/var
b=/*<<+fs_node.js 140 10>>*/aJ(e);/*<<+fs_node.js 141 2>>*/if(!(b
instanceof
a.Uint8Array))b=new(a.Uint8Array)(b);/*<<+fs_node.js 140 2>>*/ /*<<+fs_node.js 143 13>>*/var
f=/*<<+fs_node.js 143 15>>*/a.Buffer.from(b);/*<<+fs_node.js 144 2>>*/try{/*<<+fs_node.js 145 4>>*/this.fs.readSync(this.fd,f,d,g,h)}catch(a){/*<<+fs_node.js 147 4>>*/j(/*<<+fs_node.js 147 25>>*/a.toString())}/*<<+fs_node.js 149 2>>*/for(/*<<+fs_node.js 149 12>>*/var
c=0;c<g;c++)/*<<+fs_node.js 149 30>>*/ /*<<+fs_node.js 150 4>>*/dB(e,d+c,f[d+c]);/*<<+fs_node.js 152 2>>*/return 0/*<<+fs_node.js 139 28>>*/};S.prototype.read_one=function(d){/*<<+fs_node.js 155 2>>*/var/*<<+fs_node.js 155 8>>*/c=new(a.Uint8Array)(1),/*<<+fs_node.js 156 13>>*/b=/*<<+fs_node.js 156 15>>*/a.Buffer.from(c);/*<<+fs_node.js 157 2>>*/try{/*<<+fs_node.js 158 4>>*/this.fs.readSync(this.fd,b,0,1,d)}catch(a){/*<<+fs_node.js 160 4>>*/j(/*<<+fs_node.js 160 25>>*/a.toString())}/*<<+fs_node.js 162 2>>*/return b[0]/*<<+fs_node.js 154 32>>*/};S.prototype.close=function(){/*<<+fs_node.js 165 2>>*/try{/*<<+fs_node.js 166 4>>*/this.fs.closeSync(this.fd)}catch(a){/*<<+fs_node.js 168 4>>*/j(/*<<+fs_node.js 168 25>>*/a.toString())}/*<<+fs_node.js 164 29>>*/};S.prototype.constructor=S;/*<<+fs_node.js 32 0>>*/function
R(a){this.fs=/*<<+fs_node.js 33 12>>*/require("fs");this.root=a/*<<+fs_node.js 35 0>>*/}R.prototype.nm=function(a){/*<<+fs_node.js 37 2>>*/return this.root+a/*<<+fs_node.js 36 28>>*/};R.prototype.exists=function(a){/*<<+fs_node.js 40 2>>*/try{/*<<+fs_node.js 41 4>>*/return/*<<+fs_node.js 41 11>>*/this.fs.existsSync(/*<<+fs_node.js 41 30>>*/this.nm(a))?1:0}catch(a){/*<<+fs_node.js 43 4>>*/j(/*<<+fs_node.js 43 25>>*/a.toString())}/*<<+fs_node.js 39 32>>*/};R.prototype.readdir=function(a){/*<<+fs_node.js 47 2>>*/try{/*<<+fs_node.js 48 4>>*/return/*<<+fs_node.js 48 11>>*/this.fs.readdirSync(/*<<+fs_node.js 48 31>>*/this.nm(a))}catch(a){/*<<+fs_node.js 50 4>>*/j(/*<<+fs_node.js 50 25>>*/a.toString())}/*<<+fs_node.js 46 33>>*/};R.prototype.is_dir=function(a){/*<<+fs_node.js 54 2>>*/try{/*<<+fs_node.js 55 4>>*/return/*<<+fs_node.js 55 11>>*/ /*<<+fs_node.js 55 11>>*/this.fs.statSync(/*<<+fs_node.js 55 28>>*/this.nm(a)).isDirectory()?1:0}catch(a){/*<<+fs_node.js 57 4>>*/j(/*<<+fs_node.js 57 25>>*/a.toString())}/*<<+fs_node.js 53 32>>*/};R.prototype.unlink=function(a){/*<<+fs_node.js 61 2>>*/try{/*<<+fs_node.js 62 4>>*/ /*<<+fs_node.js 62 10>>*/var
b=/*<<+fs_node.js 62 12>>*/this.fs.existsSync(/*<<+fs_node.js 62 31>>*/this.nm(a))?1:0;/*<<+fs_node.js 63 4>>*/this.fs.unlinkSync(/*<<+fs_node.js 63 23>>*/this.nm(a))}catch(a){/*<<+fs_node.js 65 4>>*/j(/*<<+fs_node.js 65 25>>*/a.toString())}/*<<+fs_node.js 67 2>>*/return b/*<<+fs_node.js 60 32>>*/};R.prototype.open=function(f,c){/*<<+fs_node.js 70 2>>*/var/*<<+fs_node.js 70 13>>*/a=/*<<+fs_node.js 70 15>>*/require("constants"),/*<<+fs_node.js 71 10>>*/b=0;/*<<+fs_node.js 72 2>>*/for(var
e
in
c)/*<<+fs_node.js 72 19>>*/switch(e){case"rdonly":b|=a.O_RDONLY;/*<<+fs_node.js 74 45>>*/break;case"wronly":b|=a.O_WRONLY;/*<<+fs_node.js 75 45>>*/break;case"append":b|=a.O_WRONLY|a.O_APPEND;/*<<+fs_node.js 78 6>>*/break;case"create":b|=a.O_CREAT;/*<<+fs_node.js 79 48>>*/break;case"truncate":b|=a.O_TRUNC;/*<<+fs_node.js 80 48>>*/break;case"excl":b|=a.O_EXCL;/*<<+fs_node.js 81 48>>*/break;case"binary":b|=a.O_BINARY;/*<<+fs_node.js 82 48>>*/break;case"text":b|=a.O_TEXT;/*<<+fs_node.js 83 48>>*/break;case"nonblock":b|=a.O_NONBLOCK;/*<<+fs_node.js 84 48>>*/break}/*<<+fs_node.js 87 2>>*/try{/*<<+fs_node.js 88 4>>*/ /*<<+fs_node.js 88 11>>*/var
d=/*<<+fs_node.js 88 13>>*/this.fs.openSync(/*<<+fs_node.js 88 30>>*/this.nm(f),b);/*<<+fs_node.js 89 4>>*/return new
S(d)}catch(a){/*<<+fs_node.js 91 4>>*/j(/*<<+fs_node.js 91 25>>*/a.toString())}/*<<+fs_node.js 69 30>>*/};R.prototype.rename=function(b,a){/*<<+fs_node.js 96 2>>*/try{/*<<+fs_node.js 97 4>>*/this.fs.renameSync(/*<<+fs_node.js 97 23>>*/this.nm(b),/*<<+fs_node.js 97 35>>*/this.nm(a))}catch(a){/*<<+fs_node.js 99 4>>*/j(/*<<+fs_node.js 99 25>>*/a.toString())}/*<<+fs_node.js 95 32>>*/};R.prototype.constructor=R;/*<<+fs.js 31 0>>*/ /*<<+fs.js 31 14>>*/var
ar=/*<<+fs.js 31 16>>*/ae.match(/[^\/]*\//)[0];/*<<+fs_node.js 21 0>>*/function
b$(){/*<<+fs_node.js 22 2>>*/return typeof
a.process!=="undefined"&&typeof
a.process.versions!=="undefined"&&typeof
a.process.versions.node!=="undefined"&&a.process.platform!=="browser"/*<<+fs_node.js 27 0>>*/}/*<<+fs.js 60 0>>*/ /*<<+fs.js 60 21>>*/var
M=[];/*<<+fs.js 61 0>>*/if(/*<<+fs.js 61 4>>*/b$())/*<<+fs.js 61 25>>*/ /*<<+fs.js 62 2>>*/M.push({path:ar,device:new
R(ar)});else/*<<+fs.js 63 7>>*/ /*<<+fs.js 64 2>>*/M.push({path:ar,device:new
A(ar)});/*<<+fs.js 66 0>>*/M.push({path:ar+cm,device:new
A(ar+cm)});/*<<+fs.js 81 0>>*/function
W(b){/*<<+fs.js 82 2>>*/var/*<<+fs.js 82 11>>*/f=/*<<+fs.js 82 13>>*/a$(b),/*<<+fs.js 83 11>>*/b=/*<<+fs.js 83 13>>*/f.join(z),/*<<+fs.js 84 17>>*/e=b+z,c;/*<<+fs.js 86 2>>*/for(/*<<+fs.js 86 12>>*/var
d=0;d<M.length;d++)/*<<+fs.js 86 51>>*/{/*<<+fs.js 87 4>>*/ /*<<+fs.js 87 10>>*/var
a=M[d];/*<<+fs.js 88 4>>*/if(/*<<+fs.js 88 7>>*/e.search(a.path)==0&&(!c||c.path.length<a.path.length))c={path:a.path,device:a.device,rest:/*<<+fs.js 90 46>>*/b.substring(a.path.length,b.length)}}/*<<+fs.js 92 2>>*/return c/*<<+fs.js 93 0>>*/}/*<<+fs.js 183 0>>*/function
jA(c){/*<<+fs.js 184 2>>*/var/*<<+fs.js 184 11>>*/a=/*<<+fs.js 184 13>>*/W(c),/*<<+fs.js 185 8>>*/b=/*<<+fs.js 185 10>>*/a.device.is_dir(a.rest);/*<<+fs.js 186 2>>*/return b?1:0/*<<+fs.js 187 0>>*/}/*<<+fail.js 62 0>>*/function
eh(){/*<<+fail.js 63 2>>*/bg(i.Not_found)/*<<+fail.js 63 51>>*/}/*<<+sys.js 48 0>>*/function
en(d){/*<<+sys.js 49 2>>*/var/*<<+sys.js 49 8>>*/b=a,/*<<+sys.js 50 8>>*/c=/*<<+sys.js 50 10>>*/t(d);/*<<+sys.js 52 2>>*/if(b.process&&b.process.env&&b.process.env[c]!=undefined)/*<<+sys.js 55 4>>*/return/*<<+sys.js 55 11>>*/V(b.process.env[c]);/*<<+sys.js 56 2>>*/if(a.jsoo_static_env&&a.jsoo_static_env[c])/*<<+sys.js 58 4>>*/return/*<<+sys.js 58 11>>*/V(a.jsoo_static_env[c]);/*<<+sys.js 59 2>>*/eh()/*<<+sys.js 60 0>>*/}/*<<+nat.js 332 0>>*/function
ce(e,g,i,f,h,b){/*<<+nat.js 333 2>>*/if(b==0)/*<<+nat.js 333 17>>*/{f.data[h]=0;/*<<+nat.js 335 4>>*/return 0}/*<<+nat.js 337 2>>*/ /*<<+nat.js 337 11>>*/var
c=0;/*<<+nat.js 338 2>>*/for(/*<<+nat.js 338 12>>*/var
a=i-1;a>=0;a--)/*<<+nat.js 338 35>>*/{/*<<+nat.js 339 4>>*/ /*<<+nat.js 339 10>>*/var
d=e.data[g+a]>>>0;e.data[g+a]=d>>>b|c;c=d<<32-b}f.data[h]=c;/*<<+nat.js 344 2>>*/return 0/*<<+nat.js 345 0>>*/}/*<<+stdlib.js 48 0>>*/ /*<<+stdlib.js 48 22>>*/var
bY={};/*<<+stdlib.js 59 0>>*/function
bd(a){/*<<+stdlib.js 60 2>>*/return bY[a]/*<<+stdlib.js 61 0>>*/}/*<<+graphics.js 20 0>>*/var
C;/*<<+graphics.js 25 0>>*/function
k(){/*<<+graphics.js 26 2>>*/if(C)/*<<+graphics.js 26 20>>*/return C;/*<<+graphics.js 29 2>>*/throw[0,/*<<+graphics.js 29 11>>*/bd("Graphics.Graphic_failure"),/*<<+graphics.js 29 57>>*/f("Not initialized")]/*<<+graphics.js 30 0>>*/}/*<<+graphics.js 218 0>>*/function
gJ(d,e){/*<<+graphics.js 219 2>>*/var/*<<+graphics.js 219 8>>*/b=/*<<+graphics.js 219 10>>*/k(),/*<<+graphics.js 220 8>>*/c=/*<<+graphics.js 220 9>>*/b.context.getImageData(d,b.height-e,1,1),/*<<+graphics.js 221 8>>*/a=c.data;/*<<+graphics.js 222 2>>*/return(a[0]<<16)+(a[1]<<8)+a[2]/*<<+graphics.js 223 0>>*/}/*<<+marshal.js 414 0>>*/var
ay;/*<<+marshal.js 415 0>>*/if(typeof
a.WeakMap==="undefined")/*<<+marshal.js 415 54>>*/ay=/*<<+marshal.js 416 18>>*/function(){/*<<+marshal.js 418 4>>*/function
a(a){this.objs=a/*<<+marshal.js 418 51>>*/}a.prototype.get=function(b){/*<<+marshal.js 420 6>>*/for(/*<<+marshal.js 420 17>>*/var
a=0;a<this.objs.length;a++)/*<<+marshal.js 420 49>>*/if(this.objs[a]===b)/*<<+marshal.js 421 32>>*/return a/*<<+marshal.js 419 32>>*/};a.prototype.set=function(){/*<<+marshal.js 424 32>>*/};/*<<+marshal.js 428 4>>*/return function(){this.objs=[];this.lookup=new
a(this.objs)/*<<+marshal.js 428 11>>*/}/*<<+marshal.js 416 18>>*/}();else/*<<+marshal.js 433 5>>*/ay=function(){this.objs=[];this.lookup=new(a.WeakMap)()/*<<+marshal.js 434 18>>*/};ay.prototype.store=function(a){/*<<+marshal.js 440 2>>*/this.lookup.set(a,this.objs.length);/*<<+marshal.js 441 2>>*/this.objs.push(a)/*<<+marshal.js 439 32>>*/};ay.prototype.recall=function(b){/*<<+marshal.js 445 2>>*/ /*<<+marshal.js 445 8>>*/var
a=/*<<+marshal.js 445 10>>*/this.lookup.get(b);/*<<+marshal.js 446 2>>*/return a===undefined?undefined:this.objs.length-a/*<<+marshal.js 444 33>>*/};/*<<+fail.js 37 0>>*/function
c(a){/*<<+fail.js 38 2>>*/bi(i.Failure,a)/*<<+fail.js 39 0>>*/}/*<<+fs.js 191 0>>*/function
jH(e,d){/*<<+fs.js 192 2>>*/var/*<<+fs.js 192 13>>*/a=/*<<+fs.js 192 15>>*/W(e),/*<<+fs.js 193 13>>*/b=/*<<+fs.js 193 15>>*/W(d);/*<<+fs.js 194 2>>*/if(a.device!=b.device)/*<<+fs.js 195 4>>*/c("caml_sys_rename: cannot move file between two filesystem");/*<<+fs.js 196 2>>*/if(!a.device.rename)/*<<+fs.js 197 4>>*/c("caml_sys_rename: no implemented");/*<<+fs.js 198 2>>*/a.device.rename(a.rest,b.rest)/*<<+fs.js 199 0>>*/}/*<<+ieee_754.js 287 0>>*/function
hZ(a){/*<<+ieee_754.js 287 32>>*/return Math.LOG10E*/*<<+ieee_754.js 287 53>>*/Math.log(a)/*<<+ieee_754.js 287 66>>*/}/*<<+sys.js 212 0>>*/ /*<<+sys.js 212 26>>*/var
b4=0;/*<<+sys.js 216 0>>*/function
h$(a){b4=a;/*<<+sys.js 218 2>>*/return 0/*<<+sys.js 219 0>>*/}/*<<+ieee_754.js 184 0>>*/function
fA(a){/*<<+ieee_754.js 185 2>>*/if(/*<<+ieee_754.js 185 6>>*/isFinite(a))/*<<+ieee_754.js 185 20>>*/{/*<<+ieee_754.js 186 4>>*/if(/*<<+ieee_754.js 186 8>>*/Math.abs(a)>=2.2250738585072014e-308)/*<<+ieee_754.js 186 48>>*/return 0;/*<<+ieee_754.js 187 4>>*/if(a!=0)/*<<+ieee_754.js 187 16>>*/return 1;/*<<+ieee_754.js 188 4>>*/return 2}/*<<+ieee_754.js 190 2>>*/return/*<<+ieee_754.js 190 9>>*/isNaN(a)?4:3/*<<+ieee_754.js 191 0>>*/}/*<<+io.js 212 0>>*/function
bc(a){/*<<+io.js 213 2>>*/var/*<<+io.js 213 10>>*/c=/*<<+io.js 213 12>>*/a.refill(),/*<<+io.js 214 14>>*/b=/*<<+io.js 214 16>>*/r(c);/*<<+io.js 215 2>>*/if(b==0)a.refill=null;/*<<+io.js 216 2>>*/a.file.write(/*<<+io.js 216 18>>*/a.file.length(),c,0,b);/*<<+io.js 217 2>>*/return b/*<<+io.js 218 0>>*/}/*<<+io.js 98 0>>*/ /*<<+io.js 98 21>>*/var
g=new
Array();/*<<+io.js 222 0>>*/function
bX(b){/*<<+io.js 223 2>>*/ /*<<+io.js 223 11>>*/var
a=g[b];/*<<+io.js 224 2>>*/if(a.refill==null)/*<<+io.js 224 27>>*/return;/*<<+io.js 225 2>>*/if(/*<<+io.js 225 6>>*/a.file.length()!=a.offset)/*<<+io.js 225 41>>*/return;/*<<+io.js 226 2>>*/bc(a)/*<<+io.js 227 0>>*/}/*<<+fail.js 68 0>>*/function
n(){/*<<+fail.js 69 2>>*/d(bw)/*<<+fail.js 70 0>>*/}/*<<+io.js 322 0>>*/function
id(c){/*<<+io.js 323 2>>*/ /*<<+io.js 323 11>>*/var
b=g[c];/*<<+io.js 324 2>>*/bX(c);/*<<+io.js 323 2>>*/var/*<<+io.js 325 8>>*/a=b.offset,/*<<+io.js 326 10>>*/d=/*<<+io.js 326 12>>*/b.file.length();/*<<+io.js 327 2>>*/if(a>=d)/*<<+io.js 327 15>>*/return 0;/*<<+io.js 328 2>>*/while(true)/*<<+io.js 328 14>>*/{/*<<+io.js 329 4>>*/if(a>=d)/*<<+io.js 329 17>>*/return-(a-b.offset);/*<<+io.js 330 4>>*/if(/*<<+io.js 330 7>>*/b.file.read_one(a)==10)/*<<+io.js 330 36>>*/return a-b.offset+1;a++}/*<<+io.js 333 0>>*/}/*<<+gc.js 4 0>>*/function
gd(){/*<<+gc.js 4 26>>*/return 0/*<<+gc.js 4 34>>*/}/*<<+int64.js 368 0>>*/function
U(a){/*<<+int64.js 369 2>>*/return new
b(a[7]<<0|a[6]<<8|a[5]<<16,a[4]<<0|a[3]<<8|a[2]<<16,a[1]<<0|a[0]<<8)/*<<+int64.js 372 0>>*/}/*<<+bigarray.js 412 0>>*/function
fh(a,k){/*<<+bigarray.js 413 2>>*/ /*<<+bigarray.js 413 10>>*/var
b=/*<<+bigarray.js 413 12>>*/a.offset(k);/*<<+bigarray.js 414 2>>*/if(b+7>=a.data.length)/*<<+bigarray.js 414 32>>*/n();/*<<+bigarray.js 413 2>>*/var/*<<+bigarray.js 415 9>>*/c=/*<<+bigarray.js 415 11>>*/a.get(b+0),/*<<+bigarray.js 416 9>>*/d=/*<<+bigarray.js 416 11>>*/a.get(b+1),/*<<+bigarray.js 417 9>>*/e=/*<<+bigarray.js 417 11>>*/a.get(b+2),/*<<+bigarray.js 418 9>>*/f=/*<<+bigarray.js 418 11>>*/a.get(b+3),/*<<+bigarray.js 419 9>>*/g=/*<<+bigarray.js 419 11>>*/a.get(b+4),/*<<+bigarray.js 420 9>>*/h=/*<<+bigarray.js 420 11>>*/a.get(b+5),/*<<+bigarray.js 421 9>>*/i=/*<<+bigarray.js 421 11>>*/a.get(b+6),/*<<+bigarray.js 422 9>>*/j=/*<<+bigarray.js 422 11>>*/a.get(b+7);/*<<+bigarray.js 423 2>>*/return/*<<+bigarray.js 423 9>>*/U([j,i,h,g,f,e,d,c])/*<<+bigarray.js 424 0>>*/}/*<<+int64.js 374 0>>*/function
Z(a){/*<<+int64.js 374 34>>*/return/*<<+int64.js 374 41>>*/a.toArray()/*<<+int64.js 374 53>>*/}/*<<+marshal.js 157 0>>*/function
d4(e,d,b){/*<<+marshal.js 158 2>>*/ /*<<+marshal.js 158 8>>*/var
c=/*<<+marshal.js 158 10>>*/Z(d);/*<<+marshal.js 159 2>>*/for(/*<<+marshal.js 159 13>>*/var
a=0;a<8;a++)/*<<+marshal.js 159 30>>*/e.write(8,c[a]);b[0]=8;b[1]=8/*<<+marshal.js 161 0>>*/}/*<<+bigarray.js 348 0>>*/function
e8(a){/*<<+bigarray.js 349 2>>*/return a.dims.length/*<<+bigarray.js 350 0>>*/}/*<<+fail.js 24 0>>*/function
b3(a){/*<<+fail.js 24 42>>*/return a/*<<+fail.js 24 54>>*/}/*<<+jslib.js 141 0>>*/function
jR(b){/*<<+jslib.js 142 2>>*/if(b
instanceof
Array)/*<<+jslib.js 142 25>>*/return b;/*<<+jslib.js 144 2>>*/if(a.RangeError&&b
instanceof
a.RangeError&&b.message&&/*<<+jslib.js 147 8>>*/b.message.match(/maximum call stack/i))/*<<+jslib.js 148 4>>*/return/*<<+jslib.js 148 11>>*/b3(i.Stack_overflow);/*<<+jslib.js 150 2>>*/if(a.InternalError&&b
instanceof
a.InternalError&&b.message&&/*<<+jslib.js 153 8>>*/b.message.match(/too much recursion/i))/*<<+jslib.js 154 4>>*/return/*<<+jslib.js 154 11>>*/b3(i.Stack_overflow);/*<<+jslib.js 156 2>>*/if(b
instanceof
a.Error&&/*<<+jslib.js 156 45>>*/bd(cK))/*<<+jslib.js 157 4>>*/return[0,/*<<+jslib.js 157 14>>*/bd(cK),b];/*<<+jslib.js 159 2>>*/return[0,i.Failure,/*<<+jslib.js 159 37>>*/V(/*<<+jslib.js 159 62>>*/String(b))]/*<<+jslib.js 160 0>>*/}/*<<+fs.js 242 0>>*/function
bP(b,a){/*<<+fs.js 243 2>>*/var/*<<+fs.js 243 11>>*/b=typeof
b=="string"?/*<<+fs.js 243 39>>*/f(b):b,/*<<+fs.js 244 14>>*/a=typeof
a=="string"?/*<<+fs.js 244 45>>*/f(a):a,/*<<+fs.js 245 11>>*/d=/*<<+fs.js 245 13>>*/W(b);/*<<+fs.js 246 2>>*/if(!d.device.register)/*<<+fs.js 246 29>>*/c("cannot register file");/*<<+fs.js 247 2>>*/d.device.register(d.rest,a);/*<<+fs.js 248 2>>*/return 0/*<<+fs.js 249 0>>*/}/*<<+fs.js 228 0>>*/function
dH(){/*<<+fs.js 229 2>>*/ /*<<+fs.js 229 9>>*/var
c=a.caml_fs_tmp;/*<<+fs.js 230 2>>*/if(c)/*<<+fs.js 230 9>>*/for(/*<<+fs.js 231 14>>*/var
b=0;b<c.length;b++)/*<<+fs.js 231 39>>*/ /*<<+fs.js 232 6>>*/bP(c[b].name,c[b].content);a.caml_create_file=bP;a.caml_fs_tmp=[];/*<<+fs.js 237 2>>*/return 0/*<<+fs.js 238 0>>*/}/*<<+parsing.js 236 0>>*/function
i5(){/*<<+parsing.js 236 35>>*/return 0/*<<+parsing.js 236 45>>*/}/*<<+jslib_js_of_ocaml.js 45 0>>*/function
hY(c){/*<<+jslib_js_of_ocaml.js 46 2>>*/ /*<<+jslib_js_of_ocaml.js 46 8>>*/var
b=0;/*<<+jslib_js_of_ocaml.js 47 2>>*/for(/*<<+jslib_js_of_ocaml.js 47 11>>*/var
a=c.length-1;a>=0;a--)/*<<+jslib_js_of_ocaml.js 47 36>>*/{/*<<+jslib_js_of_ocaml.js 48 4>>*/ /*<<+jslib_js_of_ocaml.js 48 10>>*/var
d=c[a];b=[0,d,b]}/*<<+jslib_js_of_ocaml.js 51 2>>*/return b/*<<+jslib_js_of_ocaml.js 52 0>>*/}/*<<+unix.js 2 0>>*/function
eF(){/*<<+unix.js 3 2>>*/return/*<<+unix.js 3 9>>*/new
Date().getTime()/ab/*<<+unix.js 4 0>>*/}/*<<+ints.js 94 0>>*/function
aM(a,b){/*<<+ints.js 95 2>>*/return/*<<+ints.js 95 9>>*/Math.imul(a,b)/*<<+ints.js 96 0>>*/}/*<<+hash.js 88 0>>*/function
q(b,a){a=/*<<+hash.js 89 6>>*/aM(a,0xcc9e2d51|0);a=a<<15|a>>>32-15;a=/*<<+hash.js 91 6>>*/aM(a,0x1b873593);b^=a;b=b<<13|b>>>32-13;/*<<+hash.js 94 2>>*/return(b+(b<<2)|0)+(0xe6546b64|0)|0/*<<+hash.js 95 0>>*/}/*<<+nat.js 89 0>>*/function
bl(c,d,b){/*<<+nat.js 90 2>>*/for(/*<<+nat.js 90 12>>*/var
a=b-1;a>=0;a--)/*<<+nat.js 90 36>>*/if(c.data[d+a]!=0)/*<<+nat.js 91 29>>*/return a+1;/*<<+nat.js 93 2>>*/return 1/*<<+nat.js 94 0>>*/}/*<<+nat.js 24 0>>*/function
dW(c){/*<<+nat.js 25 2>>*/var/*<<+nat.js 25 10>>*/d=/*<<+nat.js 25 12>>*/bl(c,0,c.data.length),/*<<+nat.js 26 8>>*/a=0;/*<<+nat.js 27 2>>*/for(/*<<+nat.js 27 13>>*/var
b=0;b<d;b++)/*<<+nat.js 27 32>>*/a=/*<<+nat.js 28 8>>*/q(a,c.data[b]);/*<<+nat.js 30 2>>*/return a/*<<+nat.js 31 0>>*/}/*<<+stdlib.js 22 0>>*/function
T(c,a){/*<<+stdlib.js 23 2>>*/if(c.fun)/*<<+stdlib.js 24 4>>*/return/*<<+stdlib.js 24 11>>*/T(c.fun,a);/*<<+stdlib.js 26 2>>*/if(typeof
c!=="function")/*<<+stdlib.js 26 30>>*/return c;/*<<+stdlib.js 27 2>>*/ /*<<+stdlib.js 27 8>>*/var
b=c.length|0;/*<<+stdlib.js 28 2>>*/if(b===0)/*<<+stdlib.js 28 14>>*/return/*<<+stdlib.js 28 21>>*/c.apply(null,a);/*<<+stdlib.js 27 2>>*/var/*<<+stdlib.js 29 14>>*/e=a.length|0,/*<<+stdlib.js 30 8>>*/d=b-e|0;/*<<+stdlib.js 31 2>>*/if(d==0)/*<<+stdlib.js 32 4>>*/return/*<<+stdlib.js 32 11>>*/c.apply(null,a);else/*<<+stdlib.js 33 7>>*/if(d<0)/*<<+stdlib.js 33 18>>*/return/*<<+stdlib.js 34 11>>*/T(/*<<+stdlib.js 34 25>>*/c.apply(null,/*<<+stdlib.js 34 38>>*/a.slice(0,b)),/*<<+stdlib.js 34 55>>*/a.slice(b));else/*<<+stdlib.js 36 7>>*/return function(){/*<<+stdlib.js 38 6>>*/var/*<<+stdlib.js 38 21>>*/e=arguments.length==0?1:arguments.length,/*<<+stdlib.js 39 16>>*/d=new
Array(a.length+e);/*<<+stdlib.js 40 6>>*/for(/*<<+stdlib.js 40 16>>*/var
b=0;b<a.length;b++)d[b]=a[b];/*<<+stdlib.js 41 6>>*/for(/*<<+stdlib.js 41 16>>*/var
b=0;b<arguments.length;b++)d[a.length+b]=arguments[b];/*<<+stdlib.js 42 6>>*/return/*<<+stdlib.js 42 13>>*/T(c,d)/*<<+stdlib.js 37 11>>*/}/*<<+stdlib.js 45 0>>*/}/*<<+jslib_js_of_ocaml.js 150 0>>*/function
hL(d){/*<<+jslib_js_of_ocaml.js 151 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 152 4>>*/var/*<<+jslib_js_of_ocaml.js 152 12>>*/c=arguments.length,/*<<+jslib_js_of_ocaml.js 153 13>>*/b=new
Array(c);/*<<+jslib_js_of_ocaml.js 154 4>>*/for(/*<<+jslib_js_of_ocaml.js 154 15>>*/var
a=0;a<c;a++)b[a]=arguments[a];/*<<+jslib_js_of_ocaml.js 155 4>>*/return/*<<+jslib_js_of_ocaml.js 155 11>>*/T(d,[b])/*<<+jslib_js_of_ocaml.js 151 9>>*/}/*<<+jslib_js_of_ocaml.js 157 0>>*/}/*<<+fs.js 124 0>>*/function
jl(b){/*<<+fs.js 125 2>>*/ /*<<+fs.js 125 11>>*/var
a=/*<<+fs.js 125 13>>*/W(b);/*<<+fs.js 126 2>>*/if(/*<<+fs.js 126 5>>*/a.device.exists(a.rest))/*<<+fs.js 126 36>>*/{/*<<+fs.js 127 4>>*/if(a.rest)ae=a.path+a.rest+z;else
ae=a.path;/*<<+fs.js 129 4>>*/return 0}else/*<<+fs.js 131 7>>*/ /*<<+fs.js 132 4>>*/aO(b)/*<<+fs.js 134 0>>*/}/*<<+gc.js 12 0>>*/function
f$(){/*<<+gc.js 12 30>>*/return[N,0,0,0]/*<<+gc.js 12 49>>*/}/*<<+graphics.js 491 0>>*/function
gP(){/*<<+graphics.js 492 2>>*/c("caml_gr_synchronize not Implemented")/*<<+graphics.js 493 0>>*/}/*<<+ieee_754.js 21 0>>*/ /*<<+ieee_754.js 21 12>>*/var
j2=Math.log2&&/*<<+ieee_754.js 21 27>>*/Math.log2(1.1235582092889474E+307)==1020;/*<<+ieee_754.js 22 0>>*/function
ca(a){/*<<+ieee_754.js 23 2>>*/if(j2)/*<<+ieee_754.js 23 14>>*/return/*<<+ieee_754.js 23 21>>*/Math.floor(/*<<+ieee_754.js 23 32>>*/Math.log2(a));/*<<+ieee_754.js 24 2>>*/ /*<<+ieee_754.js 24 8>>*/var
b=0;/*<<+ieee_754.js 25 2>>*/if(a==0)/*<<+ieee_754.js 25 14>>*/return-Infinity;/*<<+ieee_754.js 26 2>>*/if(a>=1)/*<<+ieee_754.js 26 11>>*/while(a>=2)/*<<+ieee_754.js 26 25>>*/{a/=2;b++}else/*<<+ieee_754.js 27 7>>*/while(a<1)/*<<+ieee_754.js 27 22>>*/{a*=2;b--}/*<<+ieee_754.js 28 2>>*/return b/*<<+ieee_754.js 29 0>>*/}/*<<+ieee_754.js 69 0>>*/function
a4(d){/*<<+ieee_754.js 70 2>>*/ /*<<+ieee_754.js 70 15>>*/var
b=new(a.Float32Array)(1);b[0]=d;/*<<+ieee_754.js 70 2>>*/ /*<<+ieee_754.js 72 13>>*/var
c=new(a.Int32Array)(b.buffer);/*<<+ieee_754.js 73 2>>*/return c[0]|0/*<<+ieee_754.js 74 0>>*/}/*<<+int64.js 349 0>>*/function
aL(c,d,a){/*<<+int64.js 350 2>>*/return new
b(c,d,a)/*<<+int64.js 351 0>>*/}/*<<+ieee_754.js 33 0>>*/function
ao(a){/*<<+ieee_754.js 34 2>>*/if(!/*<<+ieee_754.js 34 7>>*/isFinite(a))/*<<+ieee_754.js 34 20>>*/{/*<<+ieee_754.js 35 4>>*/if(/*<<+ieee_754.js 35 8>>*/isNaN(a))/*<<+ieee_754.js 36 6>>*/return/*<<+ieee_754.js 36 13>>*/aL(1,0,cA);/*<<+ieee_754.js 37 4>>*/return a>0?/*<<+ieee_754.js 38 13>>*/aL(0,0,cA):/*<<+ieee_754.js 40 13>>*/aL(0,0,0xfff0)}/*<<+ieee_754.js 42 2>>*/ /*<<+ieee_754.js 42 11>>*/var
f=a==0&&1/a==-Infinity?O:a>=0?0:O;/*<<+ieee_754.js 43 2>>*/if(f)a=-a;/*<<+ieee_754.js 42 2>>*/ /*<<+ieee_754.js 46 10>>*/var
b=/*<<+ieee_754.js 46 12>>*/ca(a)+P;/*<<+ieee_754.js 47 2>>*/if(b<=0)/*<<+ieee_754.js 47 16>>*/{b=0;a/=/*<<+ieee_754.js 49 9>>*/Math.pow(2,-cj)}else/*<<+ieee_754.js 50 9>>*/{a/=/*<<+ieee_754.js 51 9>>*/Math.pow(2,b-df);/*<<+ieee_754.js 52 4>>*/if(a<16)/*<<+ieee_754.js 52 16>>*/{a*=2;b-=1}/*<<+ieee_754.js 54 4>>*/if(b==0)/*<<+ieee_754.js 54 18>>*/a/=2}/*<<+ieee_754.js 42 2>>*/var/*<<+ieee_754.js 57 8>>*/d=/*<<+ieee_754.js 57 10>>*/Math.pow(2,24),/*<<+ieee_754.js 58 9>>*/c=a|0;a=(a-c)*d;/*<<+ieee_754.js 42 2>>*/ /*<<+ieee_754.js 60 9>>*/var
e=a|0;a=(a-e)*d;/*<<+ieee_754.js 42 2>>*/ /*<<+ieee_754.js 62 9>>*/var
g=a|0;c=c&bq|f|b<<4;/*<<+ieee_754.js 64 2>>*/return/*<<+ieee_754.js 64 9>>*/aL(g,e,c)/*<<+ieee_754.js 65 0>>*/}/*<<+bigarray.js 606 0>>*/function
bI(c,b,g){/*<<+bigarray.js 607 2>>*/c.write(32,b.dims.length);/*<<+bigarray.js 608 2>>*/c.write(32,b.kind|b.layout<<8);/*<<+bigarray.js 609 2>>*/if(b.caml_custom==bv)/*<<+bigarray.js 610 4>>*/for(/*<<+bigarray.js 610 14>>*/var
a=0;a<b.dims.length;a++)/*<<+bigarray.js 610 44>>*/if(b.dims[a]<F)/*<<+bigarray.js 612 8>>*/c.write(16,b.dims[a]);else/*<<+bigarray.js 613 11>>*/{/*<<+bigarray.js 614 8>>*/c.write(16,F);/*<<+bigarray.js 615 8>>*/c.write(32,0);/*<<+bigarray.js 616 8>>*/c.write(32,b.dims[a])}else/*<<+bigarray.js 620 4>>*/for(/*<<+bigarray.js 620 14>>*/var
a=0;a<b.dims.length;a++)/*<<+bigarray.js 620 44>>*/c.write(32,b.dims[a]);/*<<+bigarray.js 621 2>>*/switch(b.kind){case
2:case
3:case
12:/*<<+bigarray.js 625 4>>*/for(/*<<+bigarray.js 625 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 625 43>>*/ /*<<+bigarray.js 626 6>>*/c.write(8,b.data[a]);/*<<+bigarray.js 628 4>>*/break;case
4:case
5:/*<<+bigarray.js 631 4>>*/for(/*<<+bigarray.js 631 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 631 43>>*/ /*<<+bigarray.js 632 6>>*/c.write(16,b.data[a]);/*<<+bigarray.js 634 4>>*/break;case
6:/*<<+bigarray.js 636 4>>*/for(/*<<+bigarray.js 636 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 636 43>>*/ /*<<+bigarray.js 637 6>>*/c.write(32,b.data[a]);/*<<+bigarray.js 639 4>>*/break;case
8:case
9:/*<<+bigarray.js 642 4>>*/c.write(8,0);/*<<+bigarray.js 643 4>>*/for(/*<<+bigarray.js 643 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 643 43>>*/ /*<<+bigarray.js 644 6>>*/c.write(32,b.data[a]);/*<<+bigarray.js 646 4>>*/break;case
7:/*<<+bigarray.js 648 4>>*/for(/*<<+bigarray.js 648 14>>*/var
a=0;a<b.data.length/2;a++)/*<<+bigarray.js 648 47>>*/{/*<<+bigarray.js 649 6>>*/ /*<<+bigarray.js 649 12>>*/var
e=/*<<+bigarray.js 649 14>>*/Z(/*<<+bigarray.js 649 34>>*/b.get(a));/*<<+bigarray.js 650 6>>*/for(/*<<+bigarray.js 650 17>>*/var
d=0;d<8;d++)/*<<+bigarray.js 650 34>>*/c.write(8,e[d])}/*<<+bigarray.js 652 4>>*/break;case
1:/*<<+bigarray.js 654 4>>*/for(/*<<+bigarray.js 654 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 654 43>>*/{/*<<+bigarray.js 655 6>>*/ /*<<+bigarray.js 655 12>>*/var
e=/*<<+bigarray.js 655 14>>*/Z(/*<<+bigarray.js 655 34>>*/ao(/*<<+bigarray.js 655 59>>*/b.get(a)));/*<<+bigarray.js 656 6>>*/for(/*<<+bigarray.js 656 17>>*/var
d=0;d<8;d++)/*<<+bigarray.js 656 34>>*/c.write(8,e[d])}/*<<+bigarray.js 658 4>>*/break;case
0:/*<<+bigarray.js 660 4>>*/for(/*<<+bigarray.js 660 14>>*/var
a=0;a<b.data.length;a++)/*<<+bigarray.js 660 43>>*/{/*<<+bigarray.js 661 6>>*/ /*<<+bigarray.js 661 12>>*/var
e=/*<<+bigarray.js 661 14>>*/a4(/*<<+bigarray.js 661 39>>*/b.get(a));/*<<+bigarray.js 662 6>>*/c.write(32,e)}/*<<+bigarray.js 664 4>>*/break;case
10:/*<<+bigarray.js 666 4>>*/for(/*<<+bigarray.js 666 14>>*/var
a=0;a<b.data.length/2;a++)/*<<+bigarray.js 666 47>>*/{/*<<+bigarray.js 667 6>>*/ /*<<+bigarray.js 667 12>>*/var
d=/*<<+bigarray.js 667 14>>*/b.get(a);/*<<+bigarray.js 668 6>>*/c.write(32,/*<<+bigarray.js 668 23>>*/a4(d[1]));/*<<+bigarray.js 669 6>>*/c.write(32,/*<<+bigarray.js 669 23>>*/a4(d[2]))}/*<<+bigarray.js 671 4>>*/break;case
11:/*<<+bigarray.js 673 4>>*/for(/*<<+bigarray.js 673 14>>*/var
a=0;a<b.data.length/2;a++)/*<<+bigarray.js 673 47>>*/{/*<<+bigarray.js 674 6>>*/var/*<<+bigarray.js 674 18>>*/f=/*<<+bigarray.js 674 20>>*/b.get(a),/*<<+bigarray.js 675 12>>*/e=/*<<+bigarray.js 675 14>>*/Z(/*<<+bigarray.js 675 34>>*/ao(f[1]));/*<<+bigarray.js 676 6>>*/for(/*<<+bigarray.js 676 17>>*/var
d=0;d<8;d++)/*<<+bigarray.js 676 34>>*/c.write(8,e[d]);/*<<+bigarray.js 674 6>>*/ /*<<+bigarray.js 677 12>>*/var
e=/*<<+bigarray.js 677 14>>*/Z(/*<<+bigarray.js 677 34>>*/ao(f[2]));/*<<+bigarray.js 678 6>>*/for(/*<<+bigarray.js 678 17>>*/var
d=0;d<8;d++)/*<<+bigarray.js 678 34>>*/c.write(8,e[d])}/*<<+bigarray.js 680 4>>*/break}g[0]=(4+b.dims.length)*4;g[1]=(4+b.dims.length)*8/*<<+bigarray.js 684 0>>*/}/*<<+bigarray.js 46 0>>*/function
aA(a){/*<<+bigarray.js 47 2>>*/switch(a){case
7:case
10:case
11:/*<<+bigarray.js 48 28>>*/return 2;default:/*<<+bigarray.js 49 11>>*/return 1}/*<<+bigarray.js 51 0>>*/}/*<<+bigarray.js 56 0>>*/function
bF(e,g){/*<<+bigarray.js 57 2>>*/var/*<<+bigarray.js 57 8>>*/c=a,b;/*<<+bigarray.js 59 2>>*/switch(e){case
0:b=c.Float32Array;/*<<+bigarray.js 60 34>>*/break;case
1:b=c.Float64Array;/*<<+bigarray.js 61 34>>*/break;case
2:b=c.Int8Array;/*<<+bigarray.js 62 31>>*/break;case
3:b=c.Uint8Array;/*<<+bigarray.js 63 32>>*/break;case
4:b=c.Int16Array;/*<<+bigarray.js 64 32>>*/break;case
5:b=c.Uint16Array;/*<<+bigarray.js 65 33>>*/break;case
6:b=c.Int32Array;/*<<+bigarray.js 66 32>>*/break;case
7:b=c.Int32Array;/*<<+bigarray.js 67 32>>*/break;case
8:b=c.Int32Array;/*<<+bigarray.js 68 32>>*/break;case
9:b=c.Int32Array;/*<<+bigarray.js 69 32>>*/break;case
10:b=c.Float32Array;/*<<+bigarray.js 70 34>>*/break;case
11:b=c.Float64Array;/*<<+bigarray.js 71 34>>*/break;case
12:b=c.Uint8Array;/*<<+bigarray.js 72 32>>*/break}/*<<+bigarray.js 74 2>>*/if(!b)/*<<+bigarray.js 74 13>>*/d("Bigarray.create: unsupported kind");/*<<+bigarray.js 57 2>>*/ /*<<+bigarray.js 75 11>>*/var
f=new
b(g*/*<<+bigarray.js 75 29>>*/aA(e));/*<<+bigarray.js 76 2>>*/return f/*<<+bigarray.js 77 0>>*/}/*<<+ieee_754.js 176 0>>*/function
a5(d){/*<<+ieee_754.js 177 2>>*/ /*<<+ieee_754.js 177 13>>*/var
b=new(a.Int32Array)(1);b[0]=d;/*<<+ieee_754.js 177 2>>*/ /*<<+ieee_754.js 179 15>>*/var
c=new(a.Float32Array)(b.buffer);/*<<+ieee_754.js 180 2>>*/return c[0]/*<<+ieee_754.js 181 0>>*/}/*<<+ieee_754.js 128 0>>*/function
aB(d){/*<<+ieee_754.js 129 2>>*/var/*<<+ieee_754.js 129 9>>*/f=d.lo,/*<<+ieee_754.js 130 9>>*/g=d.mi,/*<<+ieee_754.js 131 9>>*/b=d.hi,/*<<+ieee_754.js 132 10>>*/c=(b&0x7fff)>>4;/*<<+ieee_754.js 133 2>>*/if(c==2047)/*<<+ieee_754.js 133 19>>*/return(f|g|b&bq)==0?b&O?-Infinity:Infinity:NaN;/*<<+ieee_754.js 129 2>>*/var/*<<+ieee_754.js 139 8>>*/e=/*<<+ieee_754.js 139 10>>*/Math.pow(2,-24),/*<<+ieee_754.js 140 10>>*/a=(f*e+g)*e+(b&bq);/*<<+ieee_754.js 141 2>>*/if(c>0)/*<<+ieee_754.js 141 15>>*/{a+=16;a*=/*<<+ieee_754.js 143 11>>*/Math.pow(2,c-df)}else
a*=/*<<+ieee_754.js 145 11>>*/Math.pow(2,-cj);/*<<+ieee_754.js 146 2>>*/if(b&O)a=-a;/*<<+ieee_754.js 147 2>>*/return a/*<<+ieee_754.js 148 0>>*/}/*<<+bigarray.js 34 0>>*/function
al(b){/*<<+bigarray.js 35 2>>*/var/*<<+bigarray.js 35 13>>*/e=b.length,/*<<+bigarray.js 36 11>>*/c=1;/*<<+bigarray.js 37 2>>*/for(/*<<+bigarray.js 37 13>>*/var
a=0;a<e;a++)/*<<+bigarray.js 37 35>>*/{/*<<+bigarray.js 38 4>>*/if(b[a]<0)/*<<+bigarray.js 39 6>>*/d("Bigarray.create: negative dimension");c=c*b[a]}/*<<+bigarray.js 42 2>>*/return c/*<<+bigarray.js 43 0>>*/}/*<<+int64.js 354 0>>*/function
d0(c,a){/*<<+int64.js 355 2>>*/return new
b(c&G,c>>>24&h|(a&F)<<8,a>>>16&F)/*<<+int64.js 359 0>>*/}/*<<+int64.js 364 0>>*/function
a6(a){/*<<+int64.js 364 29>>*/return/*<<+int64.js 364 36>>*/a.hi32()/*<<+int64.js 364 45>>*/}/*<<+int64.js 361 0>>*/function
a7(a){/*<<+int64.js 361 29>>*/return/*<<+int64.js 361 36>>*/a.lo32()/*<<+int64.js 361 45>>*/}/*<<+bigarray.js 81 0>>*/ /*<<+bigarray.js 81 24>>*/var
dr=da;/*<<+bigarray.js 90 0>>*/function
ac(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a/*<<+bigarray.js 96 0>>*/}ac.prototype.caml_custom=dr;ac.prototype.offset=function(b){/*<<+bigarray.js 101 2>>*/ /*<<+bigarray.js 101 10>>*/var
c=0;/*<<+bigarray.js 102 2>>*/if(typeof
b==="number")b=[b];/*<<+bigarray.js 103 2>>*/if(!(b
instanceof
Array))/*<<+bigarray.js 103 32>>*/d("bigarray.js: invalid offset");/*<<+bigarray.js 104 2>>*/if(this.dims.length!=b.length)/*<<+bigarray.js 105 4>>*/d("Bigarray.get/set: bad number of dimensions");/*<<+bigarray.js 106 2>>*/if(this.layout==0)/*<<+bigarray.js 106 38>>*/for(/*<<+bigarray.js 107 15>>*/var
a=0;a<this.dims.length;a++)/*<<+bigarray.js 107 47>>*/{/*<<+bigarray.js 108 6>>*/if(b[a]<0||b[a]>=this.dims[a])/*<<+bigarray.js 109 8>>*/n();c=c*this.dims[a]+b[a]}else/*<<+bigarray.js 112 9>>*/for(/*<<+bigarray.js 113 15>>*/var
a=this.dims.length-1;a>=0;a--)/*<<+bigarray.js 113 52>>*/{/*<<+bigarray.js 114 6>>*/if(b[a]<1||b[a]>this.dims[a])/*<<+bigarray.js 114 46>>*/ /*<<+bigarray.js 115 8>>*/n();c=c*this.dims[a]+(b[a]-1)}/*<<+bigarray.js 120 2>>*/return c/*<<+bigarray.js 100 31>>*/};ac.prototype.get=function(a){/*<<+bigarray.js 124 2>>*/switch(this.kind){case
7:/*<<+bigarray.js 127 4>>*/var/*<<+bigarray.js 127 10>>*/d=this.data[a*2+0],/*<<+bigarray.js 128 10>>*/b=this.data[a*2+1];/*<<+bigarray.js 129 4>>*/return/*<<+bigarray.js 129 11>>*/d0(d,b);case
10:case
11:/*<<+bigarray.js 132 4>>*/var/*<<+bigarray.js 132 10>>*/e=this.data[a*2+0],/*<<+bigarray.js 133 10>>*/c=this.data[a*2+1];/*<<+bigarray.js 134 4>>*/return[N,e,c];default:/*<<+bigarray.js 136 4>>*/return this.data[a]}/*<<+bigarray.js 123 28>>*/};ac.prototype.set=function(a,b){/*<<+bigarray.js 141 2>>*/switch(this.kind){case
7:this.data[a*2+0]=/*<<+bigarray.js 144 29>>*/a7(b);this.data[a*2+1]=/*<<+bigarray.js 145 29>>*/a6(b);/*<<+bigarray.js 146 4>>*/break;case
10:case
11:this.data[a*2+0]=b[1];this.data[a*2+1]=b[2];/*<<+bigarray.js 151 4>>*/break;default:this.data[a]=b;/*<<+bigarray.js 154 4>>*/break}/*<<+bigarray.js 156 2>>*/return 0/*<<+bigarray.js 140 28>>*/};ac.prototype.fill=function(b){/*<<+bigarray.js 161 2>>*/switch(this.kind){case
7:/*<<+bigarray.js 164 4>>*/var/*<<+bigarray.js 164 10>>*/c=/*<<+bigarray.js 164 12>>*/a7(b),/*<<+bigarray.js 165 10>>*/e=/*<<+bigarray.js 165 12>>*/a6(b);/*<<+bigarray.js 166 4>>*/if(c==e)/*<<+bigarray.js 166 14>>*/ /*<<+bigarray.js 167 6>>*/this.data.fill(c);else/*<<+bigarray.js 169 9>>*/for(/*<<+bigarray.js 170 16>>*/var
a=0;a<this.data.length;a++)/*<<+bigarray.js 170 45>>*/this.data[a]=a%2==0?c:e;/*<<+bigarray.js 174 4>>*/break;case
10:case
11:/*<<+bigarray.js 177 4>>*/var/*<<+bigarray.js 177 11>>*/d=b[1],/*<<+bigarray.js 178 11>>*/f=b[2];/*<<+bigarray.js 179 4>>*/if(d==f)/*<<+bigarray.js 179 16>>*/ /*<<+bigarray.js 180 6>>*/this.data.fill(d);else/*<<+bigarray.js 182 9>>*/for(/*<<+bigarray.js 183 16>>*/var
a=0;a<this.data.length;a++)/*<<+bigarray.js 183 45>>*/this.data[a]=a%2==0?d:f;/*<<+bigarray.js 187 4>>*/break;default:/*<<+bigarray.js 189 4>>*/this.data.fill(b);/*<<+bigarray.js 190 4>>*/break}/*<<+bigarray.js 160 29>>*/};ac.prototype.compare=function(b,g){/*<<+bigarray.js 196 2>>*/if(this.layout!=b.layout||this.kind!=b.kind)/*<<+bigarray.js 196 54>>*/{/*<<+bigarray.js 197 4>>*/var/*<<+bigarray.js 197 11>>*/e=this.kind|this.layout<<8,/*<<+bigarray.js 198 11>>*/f=b.kind|b.layout<<8;/*<<+bigarray.js 199 4>>*/return f-e}/*<<+bigarray.js 201 2>>*/if(this.dims.length!=b.dims.length)/*<<+bigarray.js 201 41>>*/return b.dims.length-this.dims.length;/*<<+bigarray.js 204 2>>*/for(/*<<+bigarray.js 204 13>>*/var
a=0;a<this.dims.length;a++)/*<<+bigarray.js 205 4>>*/if(this.dims[a]!=b.dims[a])/*<<+bigarray.js 206 6>>*/return this.dims[a]<b.dims[a]?-1:1;/*<<+bigarray.js 207 2>>*/switch(this.kind){case
0:case
1:case
10:case
11:/*<<+bigarray.js 213 4>>*/var
c,d;/*<<+bigarray.js 214 4>>*/for(/*<<+bigarray.js 214 15>>*/var
a=0;a<this.data.length;a++)/*<<+bigarray.js 214 47>>*/{c=this.data[a];d=b.data[a];/*<<+bigarray.js 217 6>>*/if(c<d)/*<<+bigarray.js 218 8>>*/return-1;/*<<+bigarray.js 219 6>>*/if(c>d)/*<<+bigarray.js 220 8>>*/return 1;/*<<+bigarray.js 221 6>>*/if(c!=d)/*<<+bigarray.js 221 18>>*/{/*<<+bigarray.js 222 8>>*/if(!g)/*<<+bigarray.js 222 20>>*/return NaN;/*<<+bigarray.js 223 8>>*/if(c==c)/*<<+bigarray.js 223 20>>*/return 1;/*<<+bigarray.js 224 8>>*/if(d==d)/*<<+bigarray.js 224 20>>*/return-1}}/*<<+bigarray.js 227 4>>*/break;case
7:/*<<+bigarray.js 230 4>>*/for(/*<<+bigarray.js 230 15>>*/var
a=0;a<this.data.length;a+=2)/*<<+bigarray.js 230 48>>*/{/*<<+bigarray.js 232 6>>*/if(this.data[a+1]<b.data[a+1])/*<<+bigarray.js 233 8>>*/return-1;/*<<+bigarray.js 234 6>>*/if(this.data[a+1]>b.data[a+1])/*<<+bigarray.js 235 8>>*/return 1;/*<<+bigarray.js 236 6>>*/if(this.data[a]>>>0<b.data[a]>>>0)/*<<+bigarray.js 237 8>>*/return-1;/*<<+bigarray.js 238 6>>*/if(this.data[a]>>>0>b.data[a]>>>0)/*<<+bigarray.js 239 8>>*/return 1}/*<<+bigarray.js 241 4>>*/break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:/*<<+bigarray.js 250 4>>*/for(/*<<+bigarray.js 250 15>>*/var
a=0;a<this.data.length;a++)/*<<+bigarray.js 250 47>>*/{/*<<+bigarray.js 251 6>>*/if(this.data[a]<b.data[a])/*<<+bigarray.js 252 8>>*/return-1;/*<<+bigarray.js 253 6>>*/if(this.data[a]>b.data[a])/*<<+bigarray.js 254 8>>*/return 1}/*<<+bigarray.js 256 4>>*/break}/*<<+bigarray.js 258 2>>*/return 0/*<<+bigarray.js 195 32>>*/};/*<<+bigarray.js 263 0>>*/function
ak(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a/*<<+bigarray.js 268 0>>*/}ak.prototype=new
ac();ak.prototype.offset=function(a){/*<<+bigarray.js 272 2>>*/if(typeof
a!=="number")/*<<+bigarray.js 272 29>>*/if(a
instanceof
Array&&a.length==1)a=a[0];else/*<<+bigarray.js 275 9>>*/d("Ml_Bigarray_c_1_1.offset");/*<<+bigarray.js 277 2>>*/if(a<0||a>=this.dims[0])/*<<+bigarray.js 278 4>>*/n();/*<<+bigarray.js 279 2>>*/return a/*<<+bigarray.js 271 37>>*/};ak.prototype.get=function(a){/*<<+bigarray.js 283 2>>*/return this.data[a]/*<<+bigarray.js 282 34>>*/};ak.prototype.set=function(a,b){this.data[a]=b;/*<<+bigarray.js 288 2>>*/return 0/*<<+bigarray.js 286 34>>*/};ak.prototype.fill=function(a){/*<<+bigarray.js 292 2>>*/this.data.fill(a);/*<<+bigarray.js 293 2>>*/return 0/*<<+bigarray.js 291 35>>*/};/*<<+bigarray.js 304 0>>*/function
H(c,e,a,b){/*<<+bigarray.js 305 2>>*/ /*<<+bigarray.js 305 23>>*/var
f=/*<<+bigarray.js 305 25>>*/aA(c);/*<<+bigarray.js 306 2>>*/if(/*<<+bigarray.js 306 5>>*/al(a)*f!=b.length)/*<<+bigarray.js 306 63>>*/ /*<<+bigarray.js 307 4>>*/d("length doesn't match dims");/*<<+bigarray.js 309 2>>*/if(e==0&&a.length==1&&f==1)/*<<+bigarray.js 312 4>>*/return new
ak(c,e,a,b);/*<<+bigarray.js 313 2>>*/return new
ac(c,e,a,b)/*<<+bigarray.js 315 0>>*/}/*<<+bigarray.js 692 0>>*/function
bG(b,x,t){/*<<+bigarray.js 693 2>>*/ /*<<+bigarray.js 693 15>>*/var
k=/*<<+bigarray.js 693 17>>*/b.read32s();/*<<+bigarray.js 694 2>>*/if(k<0||k>16)/*<<+bigarray.js 695 4>>*/c("input_value: wrong number of bigarray dimensions");/*<<+bigarray.js 693 2>>*/var/*<<+bigarray.js 696 10>>*/r=/*<<+bigarray.js 696 12>>*/b.read32s(),/*<<+bigarray.js 697 11>>*/l=r&h,/*<<+bigarray.js 698 13>>*/q=r>>8&1,/*<<+bigarray.js 699 11>>*/j=[];/*<<+bigarray.js 700 2>>*/if(t==bv)/*<<+bigarray.js 701 4>>*/for(/*<<+bigarray.js 701 15>>*/var
a=0;a<k;a++)/*<<+bigarray.js 701 39>>*/{/*<<+bigarray.js 702 6>>*/ /*<<+bigarray.js 702 19>>*/var
p=/*<<+bigarray.js 702 21>>*/b.read16u();/*<<+bigarray.js 703 6>>*/if(p==F)/*<<+bigarray.js 703 28>>*/{/*<<+bigarray.js 704 8>>*/var/*<<+bigarray.js 704 24>>*/v=/*<<+bigarray.js 704 26>>*/b.read32u(),/*<<+bigarray.js 705 24>>*/w=/*<<+bigarray.js 705 26>>*/b.read32u();/*<<+bigarray.js 706 8>>*/if(v!=0)/*<<+bigarray.js 707 10>>*/c("input_value: bigarray dimension overflow in 32bit");p=w}/*<<+bigarray.js 710 6>>*/j.push(p)}else/*<<+bigarray.js 713 4>>*/for(/*<<+bigarray.js 713 15>>*/var
a=0;a<k;a++)/*<<+bigarray.js 713 39>>*/j.push(/*<<+bigarray.js 713 49>>*/b.read32u());/*<<+bigarray.js 693 2>>*/var/*<<+bigarray.js 714 11>>*/e=/*<<+bigarray.js 714 13>>*/al(j),/*<<+bigarray.js 715 11>>*/g=/*<<+bigarray.js 715 13>>*/bF(l,e),/*<<+bigarray.js 716 9>>*/i=/*<<+bigarray.js 716 11>>*/H(l,q,j,g);/*<<+bigarray.js 717 2>>*/switch(l){case
2:/*<<+bigarray.js 719 4>>*/for(/*<<+bigarray.js 719 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 719 33>>*/g[a]=/*<<+bigarray.js 720 16>>*/b.read8s();/*<<+bigarray.js 722 4>>*/break;case
3:case
12:/*<<+bigarray.js 725 4>>*/for(/*<<+bigarray.js 725 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 725 33>>*/g[a]=/*<<+bigarray.js 726 16>>*/b.read8u();/*<<+bigarray.js 728 4>>*/break;case
4:/*<<+bigarray.js 730 4>>*/for(/*<<+bigarray.js 730 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 730 33>>*/g[a]=/*<<+bigarray.js 731 16>>*/b.read16s();/*<<+bigarray.js 733 4>>*/break;case
5:/*<<+bigarray.js 735 4>>*/for(/*<<+bigarray.js 735 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 735 33>>*/g[a]=/*<<+bigarray.js 736 16>>*/b.read16u();/*<<+bigarray.js 738 4>>*/break;case
6:/*<<+bigarray.js 740 4>>*/for(/*<<+bigarray.js 740 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 740 33>>*/g[a]=/*<<+bigarray.js 741 16>>*/b.read32s();/*<<+bigarray.js 743 4>>*/break;case
8:case
9:/*<<+bigarray.js 746 4>>*/ /*<<+bigarray.js 746 14>>*/var
u=/*<<+bigarray.js 746 16>>*/b.read8u();/*<<+bigarray.js 747 4>>*/if(u)/*<<+bigarray.js 747 14>>*/c("input_value: cannot read bigarray with 64-bit OCaml ints");/*<<+bigarray.js 748 4>>*/for(/*<<+bigarray.js 748 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 748 33>>*/g[a]=/*<<+bigarray.js 749 16>>*/b.read32s();/*<<+bigarray.js 751 4>>*/break;case
7:/*<<+bigarray.js 753 4>>*/ /*<<+bigarray.js 753 10>>*/var
f=new
Array(8);/*<<+bigarray.js 754 4>>*/for(/*<<+bigarray.js 754 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 754 33>>*/{/*<<+bigarray.js 755 6>>*/for(/*<<+bigarray.js 755 17>>*/var
d=0;d<8;d++)f[d]=/*<<+bigarray.js 755 39>>*/b.read8u();/*<<+bigarray.js 756 6>>*/ /*<<+bigarray.js 756 16>>*/var
s=/*<<+bigarray.js 756 18>>*/U(f);/*<<+bigarray.js 757 6>>*/i.set(a,s)}/*<<+bigarray.js 759 4>>*/break;case
1:/*<<+bigarray.js 761 4>>*/ /*<<+bigarray.js 761 10>>*/var
f=new
Array(8);/*<<+bigarray.js 762 4>>*/for(/*<<+bigarray.js 762 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 762 33>>*/{/*<<+bigarray.js 763 6>>*/for(/*<<+bigarray.js 763 17>>*/var
d=0;d<8;d++)f[d]=/*<<+bigarray.js 763 39>>*/b.read8u();/*<<+bigarray.js 764 6>>*/ /*<<+bigarray.js 764 12>>*/var
m=/*<<+bigarray.js 764 14>>*/aB(/*<<+bigarray.js 764 39>>*/U(f));/*<<+bigarray.js 765 6>>*/i.set(a,m)}/*<<+bigarray.js 767 4>>*/break;case
0:/*<<+bigarray.js 769 4>>*/for(/*<<+bigarray.js 769 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 769 33>>*/{/*<<+bigarray.js 770 6>>*/ /*<<+bigarray.js 770 12>>*/var
m=/*<<+bigarray.js 770 14>>*/a5(/*<<+bigarray.js 770 39>>*/b.read32s());/*<<+bigarray.js 771 6>>*/i.set(a,m)}/*<<+bigarray.js 773 4>>*/break;case
10:/*<<+bigarray.js 775 4>>*/for(/*<<+bigarray.js 775 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 775 33>>*/{/*<<+bigarray.js 776 6>>*/var/*<<+bigarray.js 776 13>>*/o=/*<<+bigarray.js 776 15>>*/a5(/*<<+bigarray.js 776 40>>*/b.read32s()),/*<<+bigarray.js 777 13>>*/n=/*<<+bigarray.js 777 15>>*/a5(/*<<+bigarray.js 777 40>>*/b.read32s());/*<<+bigarray.js 778 6>>*/i.set(a,[N,o,n])}/*<<+bigarray.js 780 4>>*/break;case
11:/*<<+bigarray.js 782 4>>*/ /*<<+bigarray.js 782 10>>*/var
f=new
Array(8);/*<<+bigarray.js 783 4>>*/for(/*<<+bigarray.js 783 14>>*/var
a=0;a<e;a++)/*<<+bigarray.js 783 33>>*/{/*<<+bigarray.js 784 6>>*/for(/*<<+bigarray.js 784 17>>*/var
d=0;d<8;d++)f[d]=/*<<+bigarray.js 784 39>>*/b.read8u();/*<<+bigarray.js 785 6>>*/ /*<<+bigarray.js 785 13>>*/var
o=/*<<+bigarray.js 785 15>>*/aB(/*<<+bigarray.js 785 40>>*/U(f));/*<<+bigarray.js 786 6>>*/for(/*<<+bigarray.js 786 17>>*/var
d=0;d<8;d++)f[d]=/*<<+bigarray.js 786 39>>*/b.read8u();/*<<+bigarray.js 785 6>>*/ /*<<+bigarray.js 787 13>>*/var
n=/*<<+bigarray.js 787 15>>*/aB(/*<<+bigarray.js 787 40>>*/U(f));/*<<+bigarray.js 788 6>>*/i.set(a,[N,o,n])}/*<<+bigarray.js 790 4>>*/break}x[0]=(4+k)*4;/*<<+bigarray.js 793 2>>*/return/*<<+bigarray.js 793 9>>*/H(l,q,j,g)/*<<+bigarray.js 794 0>>*/}/*<<+bigarray.js 297 0>>*/function
bE(a,b,c){/*<<+bigarray.js 298 2>>*/return/*<<+bigarray.js 298 9>>*/a.compare(b,c)/*<<+bigarray.js 299 0>>*/}/*<<+hash.js 116 0>>*/function
dU(a,b){a=/*<<+hash.js 117 6>>*/q(a,/*<<+hash.js 117 27>>*/a7(b));a=/*<<+hash.js 118 6>>*/q(a,/*<<+hash.js 118 27>>*/a6(b));/*<<+hash.js 119 2>>*/return a/*<<+hash.js 120 0>>*/}/*<<+hash.js 110 0>>*/function
a2(a,b){/*<<+hash.js 111 2>>*/return/*<<+hash.js 111 9>>*/dU(a,/*<<+hash.js 111 32>>*/ao(b))/*<<+hash.js 112 0>>*/}/*<<+bigarray.js 808 0>>*/function
bH(c){/*<<+bigarray.js 809 2>>*/var/*<<+bigarray.js 809 15>>*/b=/*<<+bigarray.js 809 17>>*/al(c.dims),/*<<+bigarray.js 810 8>>*/d=0;/*<<+bigarray.js 811 2>>*/switch(c.kind){case
2:case
3:case
12:/*<<+bigarray.js 815 4>>*/if(b>aa)b=aa;/*<<+bigarray.js 816 4>>*/var/*<<+bigarray.js 816 10>>*/e=0,/*<<+bigarray.js 816 17>>*/a=0;/*<<+bigarray.js 817 4>>*/for(a=0;a+4<=c.data.length;a+=4)/*<<+bigarray.js 817 45>>*/{e=c.data[a+0]|c.data[a+1]<<8|c.data[a+2]<<16|c.data[a+3]<<24;d=/*<<+bigarray.js 819 10>>*/q(d,e)}e=0;/*<<+bigarray.js 822 4>>*/switch(b&3){case
3:e=c.data[a+2]<<16;case
2:e|=c.data[a+1]<<8;case
1:e|=c.data[a+0];d=/*<<+bigarray.js 826 10>>*/q(d,e)}/*<<+bigarray.js 828 4>>*/break;case
4:case
5:/*<<+bigarray.js 831 4>>*/if(b>aH)b=aH;/*<<+bigarray.js 832 4>>*/var/*<<+bigarray.js 832 10>>*/e=0,/*<<+bigarray.js 832 17>>*/a=0;/*<<+bigarray.js 833 4>>*/for(a=0;a+2<=c.data.length;a+=2)/*<<+bigarray.js 833 45>>*/{e=c.data[a+0]|c.data[a+1]<<16;d=/*<<+bigarray.js 835 10>>*/q(d,e)}/*<<+bigarray.js 837 4>>*/if((b&1)!=0)d=/*<<+bigarray.js 838 10>>*/q(d,c.data[a]);/*<<+bigarray.js 839 4>>*/break;case
6:/*<<+bigarray.js 841 4>>*/if(b>64)b=64;/*<<+bigarray.js 842 4>>*/for(/*<<+bigarray.js 842 15>>*/var
a=0;a<b;a++)d=/*<<+bigarray.js 842 43>>*/q(d,c.data[a]);/*<<+bigarray.js 843 4>>*/break;case
8:case
9:/*<<+bigarray.js 846 4>>*/if(b>64)b=64;/*<<+bigarray.js 847 4>>*/for(/*<<+bigarray.js 847 15>>*/var
a=0;a<b;a++)d=/*<<+bigarray.js 847 43>>*/q(d,c.data[a]);/*<<+bigarray.js 848 4>>*/break;case
7:/*<<+bigarray.js 850 4>>*/if(b>32)b=32;b*=2;/*<<+bigarray.js 852 4>>*/for(/*<<+bigarray.js 852 15>>*/var
a=0;a<b;a++)/*<<+bigarray.js 852 39>>*/d=/*<<+bigarray.js 853 10>>*/q(d,c.data[a]);/*<<+bigarray.js 855 4>>*/break;case
10:b*=2;case
0:/*<<+bigarray.js 859 4>>*/if(b>64)b=64;/*<<+bigarray.js 860 4>>*/for(/*<<+bigarray.js 860 15>>*/var
a=0;a<b;a++)d=/*<<+bigarray.js 860 43>>*/a2(d,c.data[a]);/*<<+bigarray.js 861 4>>*/break;case
11:b*=2;case
1:/*<<+bigarray.js 865 4>>*/if(b>32)b=32;/*<<+bigarray.js 866 4>>*/for(/*<<+bigarray.js 866 15>>*/var
a=0;a<b;a++)d=/*<<+bigarray.js 866 43>>*/a2(d,c.data[a]);/*<<+bigarray.js 867 4>>*/break}/*<<+bigarray.js 869 2>>*/return d/*<<+bigarray.js 870 0>>*/}/*<<+marshal.js 164 0>>*/function
dY(a,b){b[0]=4;/*<<+marshal.js 166 2>>*/return/*<<+marshal.js 166 9>>*/a.read32s()/*<<+marshal.js 167 0>>*/}/*<<+marshal.js 171 0>>*/function
ef(a,b){/*<<+marshal.js 172 2>>*/switch(/*<<+marshal.js 172 10>>*/a.read8u()){case
1:b[0]=4;/*<<+marshal.js 175 4>>*/return/*<<+marshal.js 175 11>>*/a.read32s();case
2:/*<<+marshal.js 177 4>>*/c("input_value: native integer value too large");default:/*<<+marshal.js 178 11>>*/c("input_value: ill-formed native integer")}/*<<+marshal.js 180 0>>*/}/*<<+marshal.js 148 0>>*/function
d8(c,d){/*<<+marshal.js 149 2>>*/ /*<<+marshal.js 149 8>>*/var
b=new
Array(8);/*<<+marshal.js 150 2>>*/for(/*<<+marshal.js 150 13>>*/var
a=0;a<8;a++)b[a]=/*<<+marshal.js 150 35>>*/c.read8u();d[0]=8;/*<<+marshal.js 152 2>>*/return/*<<+marshal.js 152 9>>*/U(b)/*<<+marshal.js 153 0>>*/}/*<<+int64.js 219 0>>*/function
dZ(a,b,c){/*<<+int64.js 219 42>>*/return/*<<+int64.js 219 49>>*/a.compare(b)/*<<+int64.js 219 62>>*/}/*<<+int64.js 377 0>>*/function
d1(a){/*<<+int64.js 378 2>>*/return/*<<+int64.js 378 10>>*/a.lo32()^/*<<+int64.js 378 23>>*/a.hi32()/*<<+int64.js 379 0>>*/}/*<<+marshal.js 186 0>>*/ /*<<+marshal.js 186 20>>*/var
J={"_j":{deserialize:d8,serialize:d4,fixed_length:8,compare:dZ,hash:d1},"_i":{deserialize:dY,fixed_length:4},"_n":{deserialize:ef,fixed_length:4},"_bigarray":{deserialize:function(a,b){/*<<+marshal.js 203 45>>*/return/*<<+marshal.js 203 52>>*/bG(a,b,da)/*<<+marshal.js 203 22>>*/},serialize:bI,compare:bE,hash:bH},"_bigarr02":{deserialize:function(a,b){/*<<+marshal.js 209 45>>*/return/*<<+marshal.js 209 52>>*/bG(a,b,bv)/*<<+marshal.js 209 22>>*/},serialize:bI,compare:bE,hash:bH}};/*<<+compare.js 43 0>>*/function
a0(a){/*<<+compare.js 44 2>>*/return J[a.caml_custom]&&J[a.caml_custom].compare/*<<+compare.js 45 0>>*/}/*<<+compare.js 49 0>>*/function
bN(f,c,d,e){/*<<+compare.js 50 2>>*/ /*<<+compare.js 50 11>>*/var
b=/*<<+compare.js 50 13>>*/a0(c);/*<<+compare.js 51 2>>*/if(b)/*<<+compare.js 51 11>>*/{/*<<+compare.js 52 4>>*/ /*<<+compare.js 52 10>>*/var
a=d>0?/*<<+compare.js 52 23>>*/b(c,f,e):/*<<+compare.js 52 46>>*/b(f,c,e);/*<<+compare.js 53 4>>*/if(e&&a!=a)/*<<+compare.js 53 24>>*/return d;/*<<+compare.js 54 4>>*/if(+a!=+a)/*<<+compare.js 54 17>>*/return+a;/*<<+compare.js 55 4>>*/if((a|0)!=0)/*<<+compare.js 55 21>>*/return a|0}/*<<+compare.js 57 2>>*/return d/*<<+compare.js 58 0>>*/}/*<<+compare.js 20 0>>*/function
bO(a){/*<<+compare.js 21 2>>*/if(typeof
a==="number")/*<<+compare.js 21 29>>*/return ab;else/*<<+compare.js 22 7>>*/if(/*<<+compare.js 22 11>>*/af(a))/*<<+compare.js 22 32>>*/return bt;else/*<<+compare.js 23 7>>*/if(/*<<+compare.js 23 11>>*/ap(a))/*<<+compare.js 23 33>>*/return 1252;else/*<<+compare.js 24 7>>*/if(a
instanceof
Array&&a[0]===a[0]>>>0&&a[0]<=cL)/*<<+compare.js 24 69>>*/{/*<<+compare.js 26 4>>*/ /*<<+compare.js 26 12>>*/var
b=a[0]|0;/*<<+compare.js 29 4>>*/return b==N?0:b}else/*<<+compare.js 31 7>>*/if(a
instanceof
String)/*<<+compare.js 31 32>>*/return c3;else/*<<+compare.js 32 7>>*/if(typeof
a=="string")/*<<+compare.js 32 33>>*/return c3;else/*<<+compare.js 33 7>>*/if(a
instanceof
Number)/*<<+compare.js 33 32>>*/return ab;else/*<<+compare.js 34 7>>*/if(a&&a.caml_custom)/*<<+compare.js 34 31>>*/return bs;else/*<<+compare.js 35 7>>*/if(a&&a.compare)/*<<+compare.js 35 27>>*/return 1256;else/*<<+compare.js 36 7>>*/if(typeof
a=="function")/*<<+compare.js 36 35>>*/return 1247;else/*<<+compare.js 37 7>>*/if(typeof
a=="symbol")/*<<+compare.js 37 33>>*/return 1251;/*<<+compare.js 38 2>>*/return 1001/*<<+compare.js 39 0>>*/}/*<<+compare.js 236 0>>*/function
d9(a,b){/*<<+compare.js 237 2>>*/if(a<b)/*<<+compare.js 237 13>>*/return-1;/*<<+compare.js 237 26>>*/if(a==b)/*<<+compare.js 237 38>>*/return 0;/*<<+compare.js 237 48>>*/return 1/*<<+compare.js 238 0>>*/}/*<<+mlBytes.js 522 0>>*/function
bJ(a,b){a.t&6&&/*<<+mlBytes.js 523 16>>*/B(a);b.t&6&&/*<<+mlBytes.js 524 16>>*/B(b);/*<<+mlBytes.js 525 2>>*/return a.c<b.c?-1:a.c>b.c?1:0/*<<+mlBytes.js 526 0>>*/}/*<<+mlBytes.js 767 0>>*/function
i$(a,b){/*<<+mlBytes.js 768 2>>*/return/*<<+mlBytes.js 768 9>>*/bJ(a,b)/*<<+mlBytes.js 769 0>>*/}/*<<+compare.js 65 0>>*/function
ai(a,b,e){/*<<+compare.js 66 2>>*/ /*<<+compare.js 66 12>>*/var
f=[];/*<<+compare.js 67 2>>*/for(;;)/*<<+compare.js 67 10>>*/{/*<<+compare.js 68 4>>*/if(!(e&&a===b))/*<<+compare.js 68 29>>*/{/*<<+compare.js 69 6>>*/ /*<<+compare.js 69 16>>*/var
g=/*<<+compare.js 69 18>>*/bO(a);/*<<+compare.js 71 6>>*/if(g==aV)/*<<+compare.js 71 23>>*/{a=a[1];/*<<+compare.js 71 35>>*/continue}/*<<+compare.js 69 6>>*/ /*<<+compare.js 73 16>>*/var
h=/*<<+compare.js 73 18>>*/bO(b);/*<<+compare.js 75 6>>*/if(h==aV)/*<<+compare.js 75 23>>*/{b=b[1];/*<<+compare.js 75 35>>*/continue}/*<<+compare.js 78 6>>*/if(g!==h)/*<<+compare.js 78 26>>*/{/*<<+compare.js 79 8>>*/if(g==ab)/*<<+compare.js 79 26>>*/{/*<<+compare.js 80 10>>*/if(h==bs)/*<<+compare.js 80 28>>*/return/*<<+compare.js 81 19>>*/bN(a,b,-1,e);/*<<+compare.js 83 10>>*/return-1}/*<<+compare.js 85 8>>*/if(h==ab)/*<<+compare.js 85 26>>*/{/*<<+compare.js 86 10>>*/if(g==bs)/*<<+compare.js 86 28>>*/return/*<<+compare.js 87 19>>*/bN(b,a,1,e);/*<<+compare.js 89 10>>*/return 1}/*<<+compare.js 91 8>>*/return g<h?-1:1}/*<<+compare.js 93 6>>*/switch(g){case
247:/*<<+compare.js 97 8>>*/d(bm);/*<<+compare.js 98 8>>*/break;case
248:/*<<+compare.js 100 8>>*/ /*<<+compare.js 100 14>>*/var
c=/*<<+compare.js 100 16>>*/d9(a[2],b[2]);/*<<+compare.js 101 8>>*/if(c!=0)/*<<+compare.js 101 20>>*/return c|0;/*<<+compare.js 102 8>>*/break;case
249:/*<<+compare.js 105 8>>*/d(bm);/*<<+compare.js 106 8>>*/break;case
250:/*<<+compare.js 109 8>>*/d("equal: got Forward_tag, should not happen");/*<<+compare.js 110 8>>*/break;case
251:/*<<+compare.js 112 8>>*/d("equal: abstract value");/*<<+compare.js 113 8>>*/break;case
252:/*<<+compare.js 115 8>>*/if(a!==b)/*<<+compare.js 115 21>>*/{/*<<+compare.js 116 10>>*/ /*<<+compare.js 116 16>>*/var
c=/*<<+compare.js 116 18>>*/bJ(a,b);/*<<+compare.js 117 10>>*/if(c!=0)/*<<+compare.js 117 22>>*/return c|0}/*<<+compare.js 119 8>>*/break;case
253:/*<<+compare.js 122 8>>*/d("equal: got Double_tag, should not happen");/*<<+compare.js 123 8>>*/break;case
254:/*<<+compare.js 126 8>>*/d("equal: got Double_array_tag, should not happen");/*<<+compare.js 127 8>>*/break;case
255:/*<<+compare.js 129 8>>*/d("equal: got Custom_tag, should not happen");/*<<+compare.js 130 8>>*/break;case
1247:/*<<+compare.js 132 8>>*/d(bm);/*<<+compare.js 133 8>>*/break;case
1255:/*<<+compare.js 135 8>>*/ /*<<+compare.js 135 17>>*/var
j=/*<<+compare.js 135 19>>*/a0(a);/*<<+compare.js 136 8>>*/if(j!=/*<<+compare.js 136 19>>*/a0(b))/*<<+compare.js 136 50>>*/return a.caml_custom<b.caml_custom?-1:1;/*<<+compare.js 139 8>>*/if(!j)/*<<+compare.js 140 10>>*/d("compare: abstract value");/*<<+compare.js 135 8>>*/ /*<<+compare.js 141 14>>*/var
c=/*<<+compare.js 141 16>>*/j(a,b,e);/*<<+compare.js 142 8>>*/if(c!=c)/*<<+compare.js 142 18>>*/return e?-1:c;/*<<+compare.js 145 8>>*/if(c!==(c|0))/*<<+compare.js 145 23>>*/return-1;/*<<+compare.js 148 8>>*/if(c!=0)/*<<+compare.js 148 20>>*/return c|0;/*<<+compare.js 149 8>>*/break;case
1256:/*<<+compare.js 151 8>>*/ /*<<+compare.js 151 14>>*/var
c=/*<<+compare.js 151 16>>*/a.compare(b,e);/*<<+compare.js 152 8>>*/if(c!=c)/*<<+compare.js 152 19>>*/return e?-1:c;/*<<+compare.js 155 8>>*/if(c!==(c|0))/*<<+compare.js 155 23>>*/return-1;/*<<+compare.js 158 8>>*/if(c!=0)/*<<+compare.js 158 20>>*/return c|0;/*<<+compare.js 159 8>>*/break;case
1000:a=+a;b=+b;/*<<+compare.js 163 8>>*/if(a<b)/*<<+compare.js 163 19>>*/return-1;/*<<+compare.js 164 8>>*/if(a>b)/*<<+compare.js 164 19>>*/return 1;/*<<+compare.js 165 8>>*/if(a!=b)/*<<+compare.js 165 20>>*/{/*<<+compare.js 166 10>>*/if(!e)/*<<+compare.js 166 22>>*/return NaN;/*<<+compare.js 167 10>>*/if(a==a)/*<<+compare.js 167 22>>*/return 1;/*<<+compare.js 168 10>>*/if(b==b)/*<<+compare.js 168 22>>*/return-1}/*<<+compare.js 170 8>>*/break;case
1001:/*<<+compare.js 185 8>>*/if(a<b)/*<<+compare.js 185 19>>*/return-1;/*<<+compare.js 186 8>>*/if(a>b)/*<<+compare.js 186 19>>*/return 1;/*<<+compare.js 187 8>>*/if(a!=b)/*<<+compare.js 187 20>>*/{/*<<+compare.js 188 10>>*/if(!e)/*<<+compare.js 188 22>>*/return NaN;/*<<+compare.js 189 10>>*/if(a==a)/*<<+compare.js 189 22>>*/return 1;/*<<+compare.js 190 10>>*/if(b==b)/*<<+compare.js 190 22>>*/return-1}/*<<+compare.js 192 8>>*/break;case
1251:/*<<+compare.js 194 8>>*/if(a!==b)/*<<+compare.js 194 20>>*/{/*<<+compare.js 195 10>>*/if(!e)/*<<+compare.js 195 22>>*/return NaN;/*<<+compare.js 196 10>>*/return 1}/*<<+compare.js 198 8>>*/break;case
1252:/*<<+compare.js 200 8>>*/var/*<<+compare.js 200 14>>*/a=/*<<+compare.js 200 16>>*/o(a),/*<<+compare.js 201 14>>*/b=/*<<+compare.js 201 16>>*/o(b);/*<<+compare.js 202 8>>*/if(a!==b)/*<<+compare.js 202 20>>*/{/*<<+compare.js 203 10>>*/if(a<b)/*<<+compare.js 203 20>>*/return-1;/*<<+compare.js 204 10>>*/if(a>b)/*<<+compare.js 204 20>>*/return 1}/*<<+compare.js 206 8>>*/break;case
12520:/*<<+compare.js 208 8>>*/var/*<<+compare.js 208 14>>*/a=/*<<+compare.js 208 16>>*/a.toString(),/*<<+compare.js 209 14>>*/b=/*<<+compare.js 209 16>>*/b.toString();/*<<+compare.js 210 8>>*/if(a!==b)/*<<+compare.js 210 20>>*/{/*<<+compare.js 211 10>>*/if(a<b)/*<<+compare.js 211 20>>*/return-1;/*<<+compare.js 212 10>>*/if(a>b)/*<<+compare.js 212 20>>*/return 1}/*<<+compare.js 214 8>>*/break;case
246:case
254:default:/*<<+compare.js 218 8>>*/if(a.length!=b.length)/*<<+compare.js 218 34>>*/return a.length<b.length?-1:1;/*<<+compare.js 219 8>>*/if(a.length>1)/*<<+compare.js 219 26>>*/f.push(a,b,1);/*<<+compare.js 220 8>>*/break}}/*<<+compare.js 223 4>>*/if(f.length==0)/*<<+compare.js 223 27>>*/return 0;/*<<+compare.js 224 4>>*/ /*<<+compare.js 224 10>>*/var
i=/*<<+compare.js 224 12>>*/f.pop();b=/*<<+compare.js 225 8>>*/f.pop();a=/*<<+compare.js 226 8>>*/f.pop();/*<<+compare.js 227 4>>*/if(i+1<a.length)/*<<+compare.js 227 26>>*/f.push(a,b,i+1);a=a[i];b=b[i]}/*<<+compare.js 231 0>>*/}/*<<+compare.js 250 0>>*/function
gU(a,b){/*<<+compare.js 250 35>>*/return+(/*<<+compare.js 250 44>>*/ai(a,b,false)>0)/*<<+compare.js 250 78>>*/}/*<<+nat.js 268 0>>*/function
b_(e,b,a){/*<<+nat.js 269 2>>*/var/*<<+nat.js 269 8>>*/d=e*av+(b>>>16),/*<<+nat.js 270 8>>*/f=/*<<+nat.js 270 10>>*/Math.floor(d/a)*av,/*<<+nat.js 271 8>>*/g=d%a*av,/*<<+nat.js 272 8>>*/c=g+(b&dm);/*<<+nat.js 273 2>>*/return[f+/*<<+nat.js 273 14>>*/Math.floor(c/a),c%a]/*<<+nat.js 274 0>>*/}/*<<+nat.js 279 0>>*/function
ey(h,k,i,l,d,e,c,g,j){/*<<+nat.js 280 2>>*/ /*<<+nat.js 280 10>>*/var
b=d.data[e+c-1]>>>0;/*<<+nat.js 283 2>>*/for(/*<<+nat.js 283 12>>*/var
a=c-2;a>=0;a--)/*<<+nat.js 283 34>>*/{/*<<+nat.js 284 4>>*/ /*<<+nat.js 284 10>>*/var
f=/*<<+nat.js 284 12>>*/b_(b,d.data[e+a]>>>0,g.data[j]>>>0);h.data[k+a]=f[0];b=f[1]}i.data[l]=b;/*<<+nat.js 289 2>>*/return 0/*<<+nat.js 290 0>>*/}/*<<+nat.js 97 0>>*/function
eC(c,d){/*<<+nat.js 98 2>>*/var/*<<+nat.js 98 8>>*/a=c.data[d],/*<<+nat.js 99 8>>*/b=0;/*<<+nat.js 100 2>>*/if(a&0xFFFF0000)/*<<+nat.js 100 21>>*/{b+=16;a>>>=16}/*<<+nat.js 101 2>>*/if(a&cU)/*<<+nat.js 101 21>>*/{b+=8;a>>>=8}/*<<+nat.js 102 2>>*/if(a&0xF0)/*<<+nat.js 102 21>>*/{b+=4;a>>>=4}/*<<+nat.js 103 2>>*/if(a&12)/*<<+nat.js 103 21>>*/{b+=2;a>>>=2}/*<<+nat.js 104 2>>*/if(a&2)/*<<+nat.js 104 21>>*/{b+=1;a>>>=1}/*<<+nat.js 105 2>>*/if(a&1)/*<<+nat.js 105 21>>*/b+=1;/*<<+nat.js 106 2>>*/return 32-b/*<<+nat.js 107 0>>*/}/*<<+nat.js 251 0>>*/function
cd(e,g,i,f,h,b){/*<<+nat.js 252 2>>*/if(b==0)/*<<+nat.js 252 17>>*/{f.data[h]=0;/*<<+nat.js 254 4>>*/return 0}/*<<+nat.js 256 2>>*/ /*<<+nat.js 256 11>>*/var
c=0;/*<<+nat.js 257 2>>*/for(/*<<+nat.js 257 12>>*/var
a=0;a<i;a++)/*<<+nat.js 257 32>>*/{/*<<+nat.js 258 4>>*/ /*<<+nat.js 258 10>>*/var
d=e.data[g+a]>>>0;e.data[g+a]=d<<b|c;c=d>>>32-b}f.data[h]=c;/*<<+nat.js 263 2>>*/return 0/*<<+nat.js 264 0>>*/}/*<<+nat.js 13 0>>*/function
aI(b){this.data=new(a.Int32Array)(b);this.length=this.data.length+2/*<<+nat.js 18 0>>*/}aI.prototype.caml_custom=cQ;/*<<+nat.js 42 0>>*/function
ev(c){/*<<+nat.js 43 2>>*/ /*<<+nat.js 43 10>>*/var
b=new
aI(c);/*<<+nat.js 44 2>>*/for(/*<<+nat.js 44 12>>*/var
a=0;a<c;a++)/*<<+nat.js 44 32>>*/b.data[a]=-1;/*<<+nat.js 47 2>>*/return b/*<<+nat.js 48 0>>*/}/*<<+nat.js 51 0>>*/function
eE(c,d,b){/*<<+nat.js 52 2>>*/for(/*<<+nat.js 52 12>>*/var
a=0;a<b;a++)/*<<+nat.js 52 31>>*/c.data[d+a]=0;/*<<+nat.js 55 2>>*/return 0/*<<+nat.js 56 0>>*/}/*<<+nat.js 128 0>>*/function
ez(d,e,g,f){/*<<+nat.js 129 2>>*/ /*<<+nat.js 129 12>>*/var
a=f;/*<<+nat.js 130 2>>*/for(/*<<+nat.js 130 12>>*/var
b=0;b<g;b++)/*<<+nat.js 130 31>>*/{/*<<+nat.js 131 4>>*/ /*<<+nat.js 131 10>>*/var
c=(d.data[e+b]>>>0)+a;d.data[e+b]=c|0;/*<<+nat.js 133 4>>*/if(c==c>>>0)/*<<+nat.js 133 23>>*/{a=0;/*<<+nat.js 135 6>>*/break}else/*<<+nat.js 136 11>>*/a=1}/*<<+nat.js 140 2>>*/return a/*<<+nat.js 141 0>>*/}/*<<+nat.js 146 0>>*/function
bC(d,e,h,i,j,c,g){/*<<+nat.js 147 2>>*/ /*<<+nat.js 147 12>>*/var
b=g;/*<<+nat.js 148 2>>*/for(/*<<+nat.js 148 12>>*/var
a=0;a<c;a++)/*<<+nat.js 148 32>>*/{/*<<+nat.js 149 4>>*/ /*<<+nat.js 149 10>>*/var
f=(d.data[e+a]>>>0)+(i.data[j+a]>>>0)+b;d.data[e+a]=f;/*<<+nat.js 151 4>>*/if(f==f>>>0)/*<<+nat.js 151 23>>*/b=0;else/*<<+nat.js 153 11>>*/b=1}/*<<+nat.js 157 2>>*/return/*<<+nat.js 157 9>>*/ez(d,e+c,h-c,b)/*<<+nat.js 158 0>>*/}/*<<+nat.js 36 0>>*/function
at(a){/*<<+nat.js 37 2>>*/return new
aI(a)/*<<+nat.js 38 0>>*/}/*<<+nat.js 206 0>>*/function
cc(d,e,g,h,i,c,l,m){/*<<+nat.js 207 2>>*/var/*<<+nat.js 207 12>>*/a=0,/*<<+nat.js 208 8>>*/f=l.data[m]>>>0;/*<<+nat.js 209 2>>*/for(/*<<+nat.js 209 12>>*/var
b=0;b<c;b++)/*<<+nat.js 209 32>>*/{/*<<+nat.js 210 4>>*/var/*<<+nat.js 210 11>>*/n=(d.data[e+b]>>>0)+(h.data[i+b]>>>0)*(f&dm)+a,/*<<+nat.js 211 11>>*/j=(h.data[i+b]>>>0)*(f>>>16);a=/*<<+nat.js 212 12>>*/Math.floor(j/av);/*<<+nat.js 210 4>>*/ /*<<+nat.js 213 11>>*/var
k=n+j%av*av;d.data[e+b]=k;a+=/*<<+nat.js 215 13>>*/Math.floor(k/cX)}/*<<+nat.js 218 2>>*/return c<g&&a?/*<<+nat.js 219 11>>*/bC(d,e+c,g-c,/*<<+nat.js 219 47>>*/at([a]),0,1,0):a/*<<+nat.js 223 0>>*/}/*<<+nat.js 169 0>>*/function
ew(c,d,g,f){/*<<+nat.js 170 2>>*/ /*<<+nat.js 170 13>>*/var
a=f==1?0:1;/*<<+nat.js 171 2>>*/for(/*<<+nat.js 171 12>>*/var
b=0;b<g;b++)/*<<+nat.js 171 31>>*/{/*<<+nat.js 172 4>>*/ /*<<+nat.js 172 10>>*/var
e=(c.data[d+b]>>>0)-a;c.data[d+b]=e;/*<<+nat.js 174 4>>*/if(e>=0)/*<<+nat.js 174 16>>*/{a=0;/*<<+nat.js 176 6>>*/break}else/*<<+nat.js 177 11>>*/a=1}/*<<+nat.js 181 2>>*/return a==1?0:1/*<<+nat.js 182 0>>*/}/*<<+nat.js 188 0>>*/function
cf(d,e,h,i,j,c,g){/*<<+nat.js 189 2>>*/ /*<<+nat.js 189 13>>*/var
b=g==1?0:1;/*<<+nat.js 190 2>>*/for(/*<<+nat.js 190 12>>*/var
a=0;a<c;a++)/*<<+nat.js 190 32>>*/{/*<<+nat.js 191 4>>*/ /*<<+nat.js 191 10>>*/var
f=(d.data[e+a]>>>0)-(i.data[j+a]>>>0)-b;d.data[e+a]=f;/*<<+nat.js 193 4>>*/if(f>=0)/*<<+nat.js 193 16>>*/b=0;else/*<<+nat.js 195 11>>*/b=1}/*<<+nat.js 199 2>>*/return/*<<+nat.js 199 9>>*/ew(d,e+c,h-c,b==1?0:1)/*<<+nat.js 200 0>>*/}/*<<+nat.js 356 0>>*/function
b9(b,d,h,c,e,i){/*<<+nat.js 357 2>>*/var/*<<+nat.js 357 8>>*/f=/*<<+nat.js 357 10>>*/bl(b,d,h),/*<<+nat.js 358 8>>*/g=/*<<+nat.js 358 10>>*/bl(c,e,i);/*<<+nat.js 359 2>>*/if(f>g)/*<<+nat.js 359 12>>*/return 1;/*<<+nat.js 360 2>>*/if(f<g)/*<<+nat.js 360 12>>*/return-1;/*<<+nat.js 361 2>>*/for(/*<<+nat.js 361 12>>*/var
a=h-1;a>=0;a--)/*<<+nat.js 361 37>>*/{/*<<+nat.js 362 4>>*/if(b.data[d+a]>>>0>c.data[e+a]>>>0)/*<<+nat.js 362 63>>*/return 1;/*<<+nat.js 363 4>>*/if(b.data[d+a]>>>0<c.data[e+a]>>>0)/*<<+nat.js 363 63>>*/return-1}/*<<+nat.js 365 2>>*/return 0/*<<+nat.js 366 0>>*/}/*<<+nat.js 297 0>>*/function
jW(b,c,j,e,f,a){/*<<+nat.js 298 2>>*/if(a==1)/*<<+nat.js 298 16>>*/{/*<<+nat.js 299 4>>*/ey(b,c+1,b,c,b,c,j,e,f);/*<<+nat.js 300 4>>*/return 0}/*<<+nat.js 303 2>>*/ /*<<+nat.js 303 8>>*/var
h=/*<<+nat.js 303 10>>*/eC(e,f+a-1);/*<<+nat.js 304 2>>*/cd(e,f,a,/*<<+nat.js 304 35>>*/at([0]),0,h);/*<<+nat.js 305 2>>*/cd(b,c,j,/*<<+nat.js 305 35>>*/at([0]),0,h);/*<<+nat.js 303 2>>*/var/*<<+nat.js 307 8>>*/k=(e.data[f+a-1]>>>0)+1,/*<<+nat.js 308 8>>*/i=/*<<+nat.js 308 10>>*/ev(a+1);/*<<+nat.js 309 2>>*/for(/*<<+nat.js 309 13>>*/var
d=j-1;d>=a;d--)/*<<+nat.js 309 41>>*/{/*<<+nat.js 311 4>>*/ /*<<+nat.js 311 12>>*/var
g=k==cX?b.data[c+d]>>>0:/*<<+nat.js 311 60>>*/b_(b.data[c+d]>>>0,b.data[c+d-1]>>>0,k)[0];/*<<+nat.js 312 4>>*/eE(i,0,a+1);/*<<+nat.js 313 4>>*/cc(i,0,a+1,e,f,a,/*<<+nat.js 313 51>>*/at([g]),0);/*<<+nat.js 314 4>>*/cf(b,c+d-a,a+1,i,0,a+1,1);/*<<+nat.js 316 4>>*/while(b.data[c+d]!=0||/*<<+nat.js 316 37>>*/b9(b,c+d-a,a,e,f,a)>=0)/*<<+nat.js 316 98>>*/{g=g+1;/*<<+nat.js 318 6>>*/cf(b,c+d-a,a+1,e,f,a,1)}b.data[c+d]=g}/*<<+nat.js 324 2>>*/ce(b,c,a,/*<<+nat.js 324 36>>*/at([0]),0,h);/*<<+nat.js 325 2>>*/ce(e,f,a,/*<<+nat.js 325 36>>*/at([0]),0,h);/*<<+nat.js 326 2>>*/return 0/*<<+nat.js 327 0>>*/}/*<<+bigarray.js 506 0>>*/function
eS(c,a){/*<<+bigarray.js 507 2>>*/if(a.dims.length!=c.dims.length)/*<<+bigarray.js 508 4>>*/d(cH);/*<<+bigarray.js 509 2>>*/for(/*<<+bigarray.js 509 13>>*/var
b=0;b<a.dims.length;b++)/*<<+bigarray.js 510 4>>*/if(a.dims[b]!=c.dims[b])/*<<+bigarray.js 511 6>>*/d(cH);/*<<+bigarray.js 512 2>>*/a.data.set(c.data);/*<<+bigarray.js 513 2>>*/return 0/*<<+bigarray.js 514 0>>*/}/*<<+nat.js 110 0>>*/function
jY(a,b){/*<<+nat.js 111 2>>*/if(a.data[b]>=0)/*<<+nat.js 111 26>>*/return 1;/*<<+nat.js 112 2>>*/return 0/*<<+nat.js 113 0>>*/}/*<<+int64.js 259 0>>*/function
g7(a,b){/*<<+int64.js 259 33>>*/return/*<<+int64.js 259 40>>*/a.div(b)/*<<+int64.js 259 49>>*/}/*<<+jslib.js 56 0>>*/function
hu(b){/*<<+jslib.js 57 2>>*/ /*<<+jslib.js 57 13>>*/var
e=/^&#?[0-9a-zA-Z]+;$/;/*<<+jslib.js 58 2>>*/if(/*<<+jslib.js 58 5>>*/b.match(e))/*<<+jslib.js 59 2>>*/{/*<<+jslib.js 60 4>>*/var
d,/*<<+jslib.js 60 18>>*/a=/*<<+jslib.js 60 20>>*/document.createElement(di);a.innerHTML=b;d=a.textContent||a.innerText;a=null;/*<<+jslib.js 64 4>>*/return d}else/*<<+jslib.js 66 7>>*/ /*<<+jslib.js 67 4>>*/c("Invalid entity "+b)/*<<+jslib.js 69 0>>*/}/*<<+mlBytes.js 753 0>>*/function
el(c,b,a){/*<<+mlBytes.js 754 2>>*/return/*<<+mlBytes.js 754 9>>*/X(c,b,a)/*<<+mlBytes.js 755 0>>*/}/*<<+int64.js 278 0>>*/function
a8(a){/*<<+int64.js 279 2>>*/if(a<0)a=/*<<+int64.js 279 17>>*/Math.ceil(a);/*<<+int64.js 280 2>>*/return new
b(a&G,/*<<+int64.js 282 4>>*/Math.floor(a*aD)&G,/*<<+int64.js 283 4>>*/Math.floor(a*aD*aD)&F)/*<<+int64.js 284 0>>*/}/*<<+io.js 190 0>>*/function
h9(b){/*<<+io.js 191 2>>*/ /*<<+io.js 191 11>>*/var
a=g[b];/*<<+io.js 192 2>>*/return/*<<+io.js 192 9>>*/a8(/*<<+io.js 192 29>>*/a.file.length())/*<<+io.js 193 0>>*/}/*<<+bigarray.js 487 0>>*/function
e$(a,b,c,d){/*<<+bigarray.js 488 2>>*/a.set(/*<<+bigarray.js 488 9>>*/a.offset([b,c]),d);/*<<+bigarray.js 489 2>>*/return 0/*<<+bigarray.js 490 0>>*/}/*<<+sys.js 70 0>>*/var/*<<+sys.js 70 14>>*/az=/*<<+sys.js 70 17>>*/function(){/*<<+sys.js 71 2>>*/var/*<<+sys.js 71 8>>*/b=a,/*<<+sys.js 72 11>>*/g="a.out",/*<<+sys.js 73 11>>*/c=[];/*<<+sys.js 75 2>>*/if(b.process&&b.process.argv&&b.process.argv.length>1)/*<<+sys.js 77 35>>*/{/*<<+sys.js 78 4>>*/ /*<<+sys.js 78 13>>*/var
f=b.process.argv;g=f[1];c=/*<<+sys.js 81 11>>*/f.slice(2)}/*<<+sys.js 71 2>>*/var/*<<+sys.js 84 8>>*/h=/*<<+sys.js 84 10>>*/V(g),/*<<+sys.js 85 12>>*/e=[0,h];/*<<+sys.js 86 2>>*/for(/*<<+sys.js 86 12>>*/var
d=0;d<c.length;d++)/*<<+sys.js 87 4>>*/e.push(/*<<+sys.js 87 15>>*/V(c[d]));/*<<+sys.js 88 2>>*/return e/*<<+sys.js 70 18>>*/}(),/*<<+sys.js 93 25>>*/dF=az[1];/*<<+jslib_js_of_ocaml.js 217 0>>*/function
hl(a){/*<<+jslib_js_of_ocaml.js 217 34>>*/return/*<<+jslib_js_of_ocaml.js 217 41>>*/eval(/*<<+jslib_js_of_ocaml.js 217 46>>*/t(a))/*<<+jslib_js_of_ocaml.js 217 74>>*/}/*<<+internalMod.js 22 0>>*/function
eM(b,c){/*<<+internalMod.js 23 2>>*/function
f(a){/*<<+internalMod.js 24 4>>*/b2(i.Undefined_recursive_module,b)/*<<+internalMod.js 25 2>>*/}/*<<+internalMod.js 26 2>>*/function
e(b,c,a){/*<<+internalMod.js 27 4>>*/if(typeof
b==="number")/*<<+internalMod.js 28 6>>*/switch(b){case
0:c[a]={fun:f};/*<<+internalMod.js 31 8>>*/break;case
1:c[a]=[246,f];/*<<+internalMod.js 34 8>>*/break;default:c[a]=[]}else/*<<+internalMod.js 39 6>>*/switch(b[0]){case
0:c[a]=[0];/*<<+internalMod.js 42 8>>*/for(/*<<+internalMod.js 42 17>>*/var
d=1;d<b[1].length;d++)/*<<+internalMod.js 43 10>>*/e(b[1][d],c[a],d);/*<<+internalMod.js 44 8>>*/break;default:c[a]=b[1]}/*<<+internalMod.js 48 2>>*/}/*<<+internalMod.js 49 2>>*/ /*<<+internalMod.js 49 10>>*/var
a=[];/*<<+internalMod.js 50 2>>*/e(c,a,0);/*<<+internalMod.js 51 2>>*/return a[0]/*<<+internalMod.js 52 0>>*/}/*<<+nat.js 394 0>>*/function
eD(e,c,d){/*<<+nat.js 395 2>>*/ /*<<+nat.js 395 10>>*/var
a=c.data.length;/*<<+nat.js 396 2>>*/e.write(32,a);/*<<+nat.js 397 2>>*/for(/*<<+nat.js 397 12>>*/var
b=0;b<a;b++)/*<<+nat.js 397 30>>*/ /*<<+nat.js 398 4>>*/e.write(32,c.data[b]);d[0]=a*4;d[1]=a*8/*<<+nat.js 402 0>>*/}/*<<+gc.js 33 0>>*/function
h5(a){/*<<+gc.js 34 2>>*/return 0/*<<+gc.js 35 0>>*/}/*<<+sys.js 28 0>>*/function
jv(c){/*<<+sys.js 29 2>>*/ /*<<+sys.js 29 8>>*/var
b=a;/*<<+sys.js 30 2>>*/if(b.quit)/*<<+sys.js 30 13>>*/b.quit(c);/*<<+sys.js 32 2>>*/if(b.process&&b.process.exit)/*<<+sys.js 33 4>>*/b.process.exit(c);/*<<+sys.js 34 2>>*/d("Function 'exit' not implemented")/*<<+sys.js 35 0>>*/}/*<<+io.js 151 0>>*/function
fy(b){/*<<+io.js 152 2>>*/ /*<<+io.js 152 11>>*/var
a=g[b];/*<<+io.js 153 2>>*/return a.fd/*<<+io.js 154 0>>*/}/*<<+jslib_js_of_ocaml.js 32 0>>*/function
L(a){/*<<+jslib_js_of_ocaml.js 33 2>>*/return/*<<+jslib_js_of_ocaml.js 33 9>>*/a.slice(1)/*<<+jslib_js_of_ocaml.js 34 0>>*/}/*<<+bigarray.js 580 0>>*/function
e9(b,e){e=/*<<+bigarray.js 581 9>>*/L(e);/*<<+bigarray.js 582 2>>*/var/*<<+bigarray.js 582 14>>*/c=[],/*<<+bigarray.js 583 15>>*/f=e.length;/*<<+bigarray.js 585 2>>*/if(f<0||f>16)/*<<+bigarray.js 585 36>>*/ /*<<+bigarray.js 586 4>>*/d("Bigarray.reshape: bad number of dimensions");/*<<+bigarray.js 582 2>>*/ /*<<+bigarray.js 588 15>>*/var
g=1;/*<<+bigarray.js 589 2>>*/for(/*<<+bigarray.js 589 13>>*/var
a=0;a<f;a++)/*<<+bigarray.js 589 37>>*/{c[a]=e[a];/*<<+bigarray.js 591 4>>*/if(c[a]<0)/*<<+bigarray.js 592 6>>*/d("Bigarray.reshape: negative dimension");g=g*c[a]}/*<<+bigarray.js 582 2>>*/ /*<<+bigarray.js 596 11>>*/var
h=/*<<+bigarray.js 596 13>>*/al(b.dims);/*<<+bigarray.js 598 2>>*/if(g!=h)/*<<+bigarray.js 599 4>>*/d("Bigarray.reshape: size mismatch");/*<<+bigarray.js 600 2>>*/return/*<<+bigarray.js 600 9>>*/H(b.kind,b.layout,c,b.data)/*<<+bigarray.js 601 0>>*/}/*<<+obj.js 117 0>>*/ /*<<+obj.js 117 20>>*/var
b0=0;/*<<+obj.js 121 0>>*/function
i4(a){a[2]=b0++;/*<<+obj.js 123 2>>*/return a/*<<+obj.js 124 0>>*/}/*<<+graphics.js 314 0>>*/function
gD(d,e,c,b){/*<<+graphics.js 315 2>>*/ /*<<+graphics.js 315 8>>*/var
a=/*<<+graphics.js 315 10>>*/k();/*<<+graphics.js 316 2>>*/a.context.fillRect(d,a.height-e,c,-b);/*<<+graphics.js 317 2>>*/return 0/*<<+graphics.js 318 0>>*/}/*<<+bigstring.js 69 0>>*/function
dw(f,c,a,g,b){/*<<+bigstring.js 70 2>>*/if(12!=a.kind)/*<<+bigstring.js 71 4>>*/d(br);/*<<+bigstring.js 72 2>>*/if(b==0)/*<<+bigstring.js 72 15>>*/return 0;/*<<+bigstring.js 73 2>>*/ /*<<+bigstring.js 73 11>>*/var
e=/*<<+bigstring.js 73 13>>*/a.offset(g);/*<<+bigstring.js 74 2>>*/if(c+b>/*<<+bigstring.js 74 18>>*/r(f))/*<<+bigstring.js 74 47>>*/ /*<<+bigstring.js 75 4>>*/n();/*<<+bigstring.js 77 2>>*/if(e+b>a.data.length)/*<<+bigstring.js 77 35>>*/ /*<<+bigstring.js 78 4>>*/n();/*<<+bigstring.js 73 2>>*/ /*<<+bigstring.js 80 12>>*/var
h=/*<<+bigstring.js 80 14>>*/ /*<<+bigstring.js 80 14>>*/aX(f).slice(c,c+b);/*<<+bigstring.js 81 2>>*/a.data.set(h,e);/*<<+bigstring.js 82 2>>*/return 0/*<<+bigstring.js 83 0>>*/}/*<<+graphics.js 137 0>>*/function
dO(b){/*<<+graphics.js 138 2>>*/ /*<<+graphics.js 138 8>>*/var
a=/*<<+graphics.js 138 10>>*/k();a.title=b;/*<<+graphics.js 138 2>>*/ /*<<+graphics.js 140 13>>*/var
c=/*<<+graphics.js 140 15>>*/t(b);/*<<+graphics.js 141 2>>*/if(a.set_title)/*<<+graphics.js 141 18>>*/a.set_title(c);/*<<+graphics.js 142 2>>*/return 0/*<<+graphics.js 143 0>>*/}/*<<+stdlib.js 77 0>>*/function
gk(){/*<<+stdlib.js 77 35>>*/return i/*<<+stdlib.js 77 60>>*/}/*<<+int64.js 253 0>>*/function
hc(b,a){/*<<+int64.js 253 50>>*/return/*<<+int64.js 253 57>>*/b.shift_right_unsigned(a)/*<<+int64.js 253 83>>*/}/*<<+bigarray.js 387 0>>*/function
ff(a,e){/*<<+bigarray.js 388 2>>*/ /*<<+bigarray.js 388 10>>*/var
b=/*<<+bigarray.js 388 12>>*/a.offset(e);/*<<+bigarray.js 389 2>>*/if(b+1>=a.data.length)/*<<+bigarray.js 389 32>>*/n();/*<<+bigarray.js 388 2>>*/var/*<<+bigarray.js 390 9>>*/c=/*<<+bigarray.js 390 11>>*/a.get(b),/*<<+bigarray.js 391 9>>*/d=/*<<+bigarray.js 391 11>>*/a.get(b+1);/*<<+bigarray.js 392 2>>*/return c|d<<8/*<<+bigarray.js 393 0>>*/}/*<<+compare.js 234 0>>*/function
fB(a,b){/*<<+compare.js 234 31>>*/return/*<<+compare.js 234 38>>*/ai(a,b,true)/*<<+compare.js 234 69>>*/}/*<<+obj.js 128 0>>*/function
f8(){/*<<+obj.js 129 2>>*/return b0++/*<<+obj.js 130 0>>*/}/*<<+int64.js 274 0>>*/function
bW(a){/*<<+int64.js 274 35>>*/return/*<<+int64.js 274 42>>*/a.toFloat()/*<<+int64.js 274 55>>*/}/*<<+bigarray.js 427 0>>*/function
s(a,b){/*<<+bigarray.js 428 2>>*/return/*<<+bigarray.js 428 9>>*/a.get(/*<<+bigarray.js 428 16>>*/a.offset(b))/*<<+bigarray.js 429 0>>*/}/*<<+bigstring.js 35 0>>*/function
fn(g,e,h,f,d){/*<<+bigstring.js 36 2>>*/for(/*<<+bigstring.js 36 13>>*/var
a=0;a<d;a++)/*<<+bigstring.js 36 32>>*/{/*<<+bigstring.js 37 4>>*/var/*<<+bigstring.js 37 10>>*/b=/*<<+bigstring.js 37 12>>*/s(g,e+a),/*<<+bigstring.js 38 10>>*/c=/*<<+bigstring.js 38 12>>*/s(h,f+a);/*<<+bigstring.js 39 4>>*/if(b<c)/*<<+bigstring.js 39 15>>*/return-1;/*<<+bigstring.js 40 4>>*/if(b>c)/*<<+bigstring.js 40 15>>*/return 1}/*<<+bigstring.js 42 2>>*/return 0/*<<+bigstring.js 43 0>>*/}/*<<+mlBytes.js 853 0>>*/function
iC(a){/*<<+mlBytes.js 853 31>>*/return/*<<+mlBytes.js 853 38>>*/f(a)/*<<+mlBytes.js 853 64>>*/}/*<<+bigarray.js 397 0>>*/function
fg(a,g){/*<<+bigarray.js 398 2>>*/ /*<<+bigarray.js 398 10>>*/var
b=/*<<+bigarray.js 398 12>>*/a.offset(g);/*<<+bigarray.js 399 2>>*/if(b+3>=a.data.length)/*<<+bigarray.js 399 32>>*/n();/*<<+bigarray.js 398 2>>*/var/*<<+bigarray.js 400 9>>*/c=/*<<+bigarray.js 400 11>>*/a.get(b+0),/*<<+bigarray.js 401 9>>*/d=/*<<+bigarray.js 401 11>>*/a.get(b+1),/*<<+bigarray.js 402 9>>*/e=/*<<+bigarray.js 402 11>>*/a.get(b+2),/*<<+bigarray.js 403 9>>*/f=/*<<+bigarray.js 403 11>>*/a.get(b+3);/*<<+bigarray.js 404 2>>*/return c<<0|d<<8|e<<16|f<<24/*<<+bigarray.js 408 0>>*/}/*<<+backtrace.js 29 0>>*/function
iT(){/*<<+backtrace.js 29 39>>*/return 0/*<<+backtrace.js 29 49>>*/}/*<<+obj.js 49 0>>*/function
iF(d,c){/*<<+obj.js 50 2>>*/ /*<<+obj.js 50 8>>*/var
b=new
Array(c+1);b[0]=d;/*<<+obj.js 52 2>>*/for(/*<<+obj.js 52 13>>*/var
a=1;a<=c;a++)b[a]=0;/*<<+obj.js 53 2>>*/return b/*<<+obj.js 54 0>>*/}/*<<+graphics.js 158 0>>*/function
gn(){/*<<+graphics.js 159 2>>*/ /*<<+graphics.js 159 8>>*/var
a=/*<<+graphics.js 159 10>>*/k();a.canvas.width=a.width;a.canvas.height=a.height;/*<<+graphics.js 163 2>>*/return 0/*<<+graphics.js 164 0>>*/}/*<<+bigstring.js 10 0>>*/function
eJ(a){/*<<+bigstring.js 11 2>>*/return a.data.buffer/*<<+bigstring.js 12 0>>*/}/*<<+nat.js 387 0>>*/function
j4(a,c,b,d){a.data[c]^=b.data[d];/*<<+nat.js 389 2>>*/return 0/*<<+nat.js 390 0>>*/}/*<<+gc.js 42 0>>*/function
f2(){/*<<+gc.js 42 33>>*/return 0/*<<+gc.js 42 43>>*/}/*<<+jslib_js_of_ocaml.js 36 0>>*/function
hD(c){/*<<+jslib_js_of_ocaml.js 37 2>>*/var/*<<+jslib_js_of_ocaml.js 37 10>>*/d=c.length,/*<<+jslib_js_of_ocaml.js 38 8>>*/b=new
Array(d+1);b[0]=0;/*<<+jslib_js_of_ocaml.js 40 2>>*/for(/*<<+jslib_js_of_ocaml.js 40 11>>*/var
a=0;a<d;a++)b[a+1]=c[a];/*<<+jslib_js_of_ocaml.js 41 2>>*/return b/*<<+jslib_js_of_ocaml.js 42 0>>*/}/*<<+graphics.js 201 0>>*/function
gI(e,f){/*<<+graphics.js 202 2>>*/var/*<<+graphics.js 202 8>>*/a=/*<<+graphics.js 202 10>>*/k(),/*<<+graphics.js 203 8>>*/d=/*<<+graphics.js 203 9>>*/a.context.createImageData(1,1),/*<<+graphics.js 204 8>>*/b=d.data,/*<<+graphics.js 205 12>>*/c=a.color;b[0]=c>>16&h;b[1]=c>>8&h,b[2]=c>>0&h;b[3]=l;a.x=e;a.y=f;/*<<+graphics.js 212 2>>*/a.context.putImageData(d,e,a.height-f);/*<<+graphics.js 213 2>>*/return 0/*<<+graphics.js 214 0>>*/}/*<<+mlBytes.js 370 0>>*/function
dE(c,b,e){/*<<+mlBytes.js 371 2>>*/if(b>>>0>=c.l-7)/*<<+mlBytes.js 371 26>>*/ad();/*<<+mlBytes.js 372 2>>*/ /*<<+mlBytes.js 372 8>>*/var
d=/*<<+mlBytes.js 372 10>>*/Z(e);/*<<+mlBytes.js 373 2>>*/for(/*<<+mlBytes.js 373 12>>*/var
a=0;a<8;a++)/*<<+mlBytes.js 373 29>>*/ /*<<+mlBytes.js 374 4>>*/X(c,b+7-a,d[a]);/*<<+mlBytes.js 376 2>>*/return 0/*<<+mlBytes.js 377 0>>*/}/*<<+mlBytes.js 315 0>>*/function
dC(b,a,c){/*<<+mlBytes.js 316 2>>*/if(a>>>0>=b.l-1)/*<<+mlBytes.js 316 26>>*/ad();/*<<+mlBytes.js 317 2>>*/var/*<<+mlBytes.js 317 9>>*/e=l&c>>8,/*<<+mlBytes.js 318 9>>*/d=l&c;/*<<+mlBytes.js 319 2>>*/X(b,a+0,d);/*<<+mlBytes.js 320 2>>*/X(b,a+1,e);/*<<+mlBytes.js 321 2>>*/return 0/*<<+mlBytes.js 322 0>>*/}/*<<+mlBytes.js 334 0>>*/function
jh(c,a,b){/*<<+mlBytes.js 335 2>>*/return/*<<+mlBytes.js 335 9>>*/dC(c,a,b)/*<<+mlBytes.js 336 0>>*/}/*<<+ints.js 126 0>>*/function
g6(b){/*<<+ints.js 127 2>>*/ /*<<+ints.js 127 8>>*/var
a=/*<<+ints.js 127 10>>*/Z(b);/*<<+ints.js 128 2>>*/return/*<<+ints.js 128 9>>*/U([a[7],a[6],a[5],a[4],a[3],a[2],a[1],a[0]])/*<<+ints.js 129 0>>*/}/*<<+mlBytes.js 587 0>>*/function
dG(a,c,b,d){/*<<+mlBytes.js 588 2>>*/if(b>0)/*<<+mlBytes.js 588 13>>*/if(c==0&&(b>=a.l||a.t==2&&b>=a.c.length))/*<<+mlBytes.js 589 77>>*/if(d==0)/*<<+mlBytes.js 590 18>>*/{a.c=e;a.t=2}else/*<<+mlBytes.js 593 13>>*/{a.c=/*<<+mlBytes.js 594 14>>*/as(b,/*<<+mlBytes.js 594 34>>*/String.fromCharCode(d));a.t=b==a.l?0:2}else/*<<+mlBytes.js 597 11>>*/{/*<<+mlBytes.js 598 6>>*/if(a.t!=4)/*<<+mlBytes.js 598 32>>*/aK(a);/*<<+mlBytes.js 599 6>>*/for(b+=c;c<b;c++)a.c[c]=d}/*<<+mlBytes.js 602 2>>*/return 0/*<<+mlBytes.js 603 0>>*/}/*<<+mlBytes.js 607 0>>*/ /*<<+mlBytes.js 607 21>>*/var
fZ=dG;/*<<+gc.js 6 0>>*/function
gc(){/*<<+gc.js 6 26>>*/return 0/*<<+gc.js 6 34>>*/}/*<<+lexing.js 20 0>>*/function
m(b){b=/*<<+lexing.js 21 6>>*/o(b);/*<<+lexing.js 22 2>>*/var/*<<+lexing.js 22 8>>*/d=b.length/2,/*<<+lexing.js 23 8>>*/c=new
Array(d);/*<<+lexing.js 24 2>>*/for(/*<<+lexing.js 24 13>>*/var
a=0;a<d;a++)c[a]=(/*<<+lexing.js 25 12>>*/b.charCodeAt(2*a)|/*<<+lexing.js 25 35>>*/b.charCodeAt(2*a+1)<<8)<<16>>16;/*<<+lexing.js 26 2>>*/return c/*<<+lexing.js 27 0>>*/}/*<<+lexing.js 31 0>>*/function
hV(b,v,a){/*<<+lexing.js 32 2>>*/var/*<<+lexing.js 32 17>>*/p=2,/*<<+lexing.js 33 21>>*/q=3,/*<<+lexing.js 34 20>>*/t=5,/*<<+lexing.js 35 19>>*/e=6,/*<<+lexing.js 36 19>>*/i=7,/*<<+lexing.js 37 22>>*/h=8,/*<<+lexing.js 38 22>>*/k=9,/*<<+lexing.js 39 15>>*/o=1,/*<<+lexing.js 40 18>>*/n=2,/*<<+lexing.js 41 18>>*/s=3,/*<<+lexing.js 42 16>>*/u=4,/*<<+lexing.js 43 16>>*/r=5;/*<<+lexing.js 45 2>>*/if(!b.lex_default)/*<<+lexing.js 45 24>>*/{b.lex_base=/*<<+lexing.js 46 22>>*/m(b[o]);b.lex_backtrk=/*<<+lexing.js 47 22>>*/m(b[n]);b.lex_check=/*<<+lexing.js 48 22>>*/m(b[r]);b.lex_trans=/*<<+lexing.js 49 22>>*/m(b[u]);b.lex_default=/*<<+lexing.js 50 22>>*/m(b[s])}/*<<+lexing.js 32 2>>*/var
f,/*<<+lexing.js 53 15>>*/d=v,/*<<+lexing.js 55 13>>*/l=/*<<+lexing.js 55 15>>*/aJ(a[p]);/*<<+lexing.js 57 2>>*/if(d>=0)/*<<+lexing.js 57 18>>*/{a[i]=a[t]=a[e];a[h]=-1}else/*<<+lexing.js 61 9>>*/d=-d-1;/*<<+lexing.js 65 2>>*/for(;;)/*<<+lexing.js 65 10>>*/{/*<<+lexing.js 67 4>>*/ /*<<+lexing.js 67 13>>*/var
g=b.lex_base[d];/*<<+lexing.js 68 4>>*/if(g<0)/*<<+lexing.js 68 18>>*/return-g-1;/*<<+lexing.js 67 4>>*/ /*<<+lexing.js 70 16>>*/var
j=b.lex_backtrk[d];/*<<+lexing.js 71 4>>*/if(j>=0)/*<<+lexing.js 71 22>>*/{a[i]=a[e];a[h]=j}/*<<+lexing.js 76 4>>*/if(a[e]>=a[q])/*<<+lexing.js 76 55>>*/if(a[k]==0)/*<<+lexing.js 78 8>>*/return-d-1;else
f=aa;else/*<<+lexing.js 81 9>>*/{f=l[a[e]];a[e]++}/*<<+lexing.js 87 4>>*/if(b.lex_check[g+f]==d)d=b.lex_trans[g+f];else
d=b.lex_default[d];/*<<+lexing.js 92 4>>*/if(d<0)/*<<+lexing.js 92 19>>*/{a[e]=a[i];/*<<+lexing.js 94 6>>*/if(a[h]==-1)/*<<+lexing.js 95 8>>*/c(ct);else/*<<+lexing.js 97 8>>*/return a[h]}else/*<<+lexing.js 98 9>>*/if(f==aa)a[k]=0}/*<<+lexing.js 105 0>>*/}/*<<+fs.js 154 0>>*/function
jw(b){/*<<+fs.js 155 2>>*/ /*<<+fs.js 155 11>>*/var
a=/*<<+fs.js 155 13>>*/W(b);/*<<+fs.js 156 2>>*/return/*<<+fs.js 156 9>>*/a.device.exists(a.rest)/*<<+fs.js 157 0>>*/}/*<<+backtrace.js 44 0>>*/function
fD(){/*<<+backtrace.js 45 2>>*/c("caml_convert_raw_backtrace_slot")/*<<+backtrace.js 46 0>>*/}/*<<+array.js 21 0>>*/function
eR(e,f,d){/*<<+array.js 22 2>>*/ /*<<+array.js 22 9>>*/var
a=new
Array(d+1);a[0]=0;/*<<+array.js 24 2>>*/for(var/*<<+array.js 24 13>>*/b=1,/*<<+array.js 24 20>>*/c=f+1;b<=d;b++,c++)/*<<+array.js 24 49>>*/a[b]=e[c];/*<<+array.js 27 2>>*/return a/*<<+array.js 28 0>>*/}/*<<+mlBytes.js 531 0>>*/function
dy(a,b){/*<<+mlBytes.js 532 2>>*/if(a===b)/*<<+mlBytes.js 532 16>>*/return 1;a.t&6&&/*<<+mlBytes.js 533 16>>*/B(a);b.t&6&&/*<<+mlBytes.js 534 16>>*/B(b);/*<<+mlBytes.js 535 2>>*/return a.c==b.c?1:0/*<<+mlBytes.js 536 0>>*/}/*<<+graphics.js 168 0>>*/function
gN(){/*<<+graphics.js 169 2>>*/ /*<<+graphics.js 169 8>>*/var
a=/*<<+graphics.js 169 10>>*/k();/*<<+graphics.js 170 2>>*/return a.width/*<<+graphics.js 171 0>>*/}/*<<+sys.js 173 0>>*/function
jq(){/*<<+sys.js 173 43>>*/return 0/*<<+sys.js 173 53>>*/}/*<<+ieee_754.js 289 0>>*/function
fF(a){/*<<+ieee_754.js 289 31>>*/return(/*<<+ieee_754.js 289 39>>*/Math.exp(a)+/*<<+ieee_754.js 289 53>>*/Math.exp(-a))/2/*<<+ieee_754.js 289 72>>*/}/*<<+weak.js 28 0>>*/ /*<<+weak.js 28 25>>*/var
K=3;/*<<+weak.js 73 0>>*/function
es(b,a){/*<<+weak.js 74 2>>*/return b[K+a]!==undefined&&b[K+a]!==0?1:0/*<<+weak.js 78 0>>*/}/*<<+weak.js 109 0>>*/ /*<<+weak.js 109 24>>*/var
fM=es;/*<<+hash.js 99 0>>*/function
dT(a){a^=a>>>16;a=/*<<+hash.js 101 6>>*/aM(a,0x85ebca6b|0);a^=a>>>13;a=/*<<+hash.js 103 6>>*/aM(a,0xc2b2ae35|0);a^=a>>>16;/*<<+hash.js 105 2>>*/return a/*<<+hash.js 106 0>>*/}/*<<+graphics.js 391 0>>*/function
gQ(b){/*<<+graphics.js 392 2>>*/var/*<<+graphics.js 392 8>>*/a=/*<<+graphics.js 392 10>>*/k(),/*<<+graphics.js 393 8>>*/c=/*<<+graphics.js 393 10>>*/a.context.measureText(/*<<+graphics.js 393 32>>*/t(b)).width;/*<<+graphics.js 394 2>>*/return[0,c,a.text_size]/*<<+graphics.js 395 0>>*/}/*<<+lexing.js 114 0>>*/function
hW(d,a,c,f){/*<<+lexing.js 115 2>>*/for(;;)/*<<+lexing.js 115 11>>*/{/*<<+lexing.js 116 4>>*/ /*<<+lexing.js 116 12>>*/var
b=/*<<+lexing.js 116 14>>*/d.charCodeAt(a);a++;/*<<+lexing.js 117 4>>*/if(b==h)/*<<+lexing.js 117 21>>*/return;/*<<+lexing.js 116 4>>*/ /*<<+lexing.js 118 12>>*/var
e=/*<<+lexing.js 118 14>>*/d.charCodeAt(a);a++;/*<<+lexing.js 119 4>>*/if(e==h)c[b+1]=f;else
c[b+1]=c[e+1]}/*<<+lexing.js 124 0>>*/}/*<<+lexing.js 126 0>>*/function
d$(d,a,c){/*<<+lexing.js 127 2>>*/for(;;)/*<<+lexing.js 127 11>>*/{/*<<+lexing.js 128 4>>*/ /*<<+lexing.js 128 12>>*/var
b=/*<<+lexing.js 128 14>>*/d.charCodeAt(a);a++;/*<<+lexing.js 129 4>>*/if(b==h)/*<<+lexing.js 129 21>>*/return;/*<<+lexing.js 128 4>>*/ /*<<+lexing.js 130 12>>*/var
e=/*<<+lexing.js 130 14>>*/d.charCodeAt(a);a++;/*<<+lexing.js 131 4>>*/if(e==h)c[b+1]=-1;else
c[b+1]=c[e+1]}/*<<+lexing.js 136 0>>*/}/*<<+lexing.js 138 0>>*/function
iB(a,G,b){/*<<+lexing.js 139 2>>*/var/*<<+lexing.js 139 17>>*/w=2,/*<<+lexing.js 140 21>>*/x=3,/*<<+lexing.js 141 20>>*/D=5,/*<<+lexing.js 142 19>>*/g=6,/*<<+lexing.js 143 19>>*/j=7,/*<<+lexing.js 144 22>>*/i=8,/*<<+lexing.js 145 22>>*/q=9,/*<<+lexing.js 146 14>>*/k=10,/*<<+lexing.js 147 15>>*/u=1,/*<<+lexing.js 148 18>>*/s=2,/*<<+lexing.js 149 18>>*/B=3,/*<<+lexing.js 150 16>>*/E=4,/*<<+lexing.js 151 16>>*/y=5,/*<<+lexing.js 152 20>>*/v=6,/*<<+lexing.js 153 23>>*/t=7,/*<<+lexing.js 154 23>>*/C=8,/*<<+lexing.js 155 21>>*/F=9,/*<<+lexing.js 156 21>>*/z=10,/*<<+lexing.js 157 15>>*/A=11;/*<<+lexing.js 159 2>>*/if(!a.lex_default)/*<<+lexing.js 159 24>>*/{a.lex_base=/*<<+lexing.js 160 22>>*/m(a[u]);a.lex_backtrk=/*<<+lexing.js 161 22>>*/m(a[s]);a.lex_check=/*<<+lexing.js 162 22>>*/m(a[y]);a.lex_trans=/*<<+lexing.js 163 22>>*/m(a[E]);a.lex_default=/*<<+lexing.js 164 22>>*/m(a[B])}/*<<+lexing.js 166 2>>*/if(!a.lex_default_code)/*<<+lexing.js 166 29>>*/{a.lex_base_code=/*<<+lexing.js 167 27>>*/m(a[v]);a.lex_backtrk_code=/*<<+lexing.js 168 27>>*/m(a[t]);a.lex_check_code=/*<<+lexing.js 169 27>>*/m(a[z]);a.lex_trans_code=/*<<+lexing.js 170 27>>*/m(a[F]);a.lex_default_code=/*<<+lexing.js 171 27>>*/m(a[C])}/*<<+lexing.js 173 2>>*/if(a.lex_code==null)a.lex_code=/*<<+lexing.js 173 43>>*/o(a[A]);/*<<+lexing.js 139 2>>*/var
f,/*<<+lexing.js 175 15>>*/d=G,/*<<+lexing.js 177 13>>*/r=/*<<+lexing.js 177 15>>*/aJ(b[w]);/*<<+lexing.js 179 2>>*/if(d>=0)/*<<+lexing.js 179 18>>*/{b[j]=b[D]=b[g];b[i]=-1}else/*<<+lexing.js 183 9>>*/d=-d-1;/*<<+lexing.js 187 2>>*/for(;;)/*<<+lexing.js 187 10>>*/{/*<<+lexing.js 189 4>>*/ /*<<+lexing.js 189 13>>*/var
h=a.lex_base[d];/*<<+lexing.js 190 4>>*/if(h<0)/*<<+lexing.js 190 18>>*/{/*<<+lexing.js 191 6>>*/ /*<<+lexing.js 191 17>>*/var
e=a.lex_base_code[d];/*<<+lexing.js 192 6>>*/d$(a.lex_code,e,b[k]);/*<<+lexing.js 193 6>>*/return-h-1}/*<<+lexing.js 189 4>>*/ /*<<+lexing.js 196 16>>*/var
n=a.lex_backtrk[d];/*<<+lexing.js 197 4>>*/if(n>=0)/*<<+lexing.js 197 22>>*/{/*<<+lexing.js 198 6>>*/ /*<<+lexing.js 198 17>>*/var
e=a.lex_backtrk_code[d];/*<<+lexing.js 199 6>>*/d$(a.lex_code,e,b[k]);b[j]=b[g];b[i]=n}/*<<+lexing.js 204 4>>*/if(b[g]>=b[x])/*<<+lexing.js 204 55>>*/if(b[q]==0)/*<<+lexing.js 206 8>>*/return-d-1;else
f=aa;else/*<<+lexing.js 209 9>>*/{f=r[b[g]];b[g]++}/*<<+lexing.js 189 4>>*/ /*<<+lexing.js 215 15>>*/var
l=d;/*<<+lexing.js 216 4>>*/if(a.lex_check[h+f]==d)d=a.lex_trans[h+f];else
d=a.lex_default[d];/*<<+lexing.js 221 4>>*/if(d<0)/*<<+lexing.js 221 19>>*/{b[g]=b[j];/*<<+lexing.js 223 6>>*/if(b[i]==-1)/*<<+lexing.js 224 8>>*/c(ct);else/*<<+lexing.js 226 8>>*/return b[i]}else/*<<+lexing.js 227 9>>*/{/*<<+lexing.js 229 6>>*/var/*<<+lexing.js 229 20>>*/p=a.lex_base_code[l],e;/*<<+lexing.js 230 6>>*/if(a.lex_check_code[p+f]==l)e=a.lex_trans_code[p+f];else
e=a.lex_default_code[l];/*<<+lexing.js 234 6>>*/if(e>0)/*<<+lexing.js 235 8>>*/hW(a.lex_code,e,b[k],b[g]);/*<<+lexing.js 240 6>>*/if(f==aa)b[q]=0}}/*<<+lexing.js 243 0>>*/}/*<<+bigarray.js 472 0>>*/function
fk(b,e,c){/*<<+bigarray.js 473 2>>*/ /*<<+bigarray.js 473 10>>*/var
d=/*<<+bigarray.js 473 12>>*/b.offset(e);/*<<+bigarray.js 474 2>>*/if(d+7>=b.data.length)/*<<+bigarray.js 474 32>>*/n();/*<<+bigarray.js 473 2>>*/ /*<<+bigarray.js 475 8>>*/var
c=/*<<+bigarray.js 475 10>>*/Z(c);/*<<+bigarray.js 476 2>>*/for(/*<<+bigarray.js 476 12>>*/var
a=0;a<8;a++)/*<<+bigarray.js 476 29>>*/b.set(d+a,c[7-a]);/*<<+bigarray.js 477 2>>*/return 0/*<<+bigarray.js 478 0>>*/}/*<<+sys.js 116 0>>*/function
ju(a){/*<<+sys.js 117 2>>*/return dF/*<<+sys.js 118 0>>*/}/*<<+compare.js 253 0>>*/function
hT(a,b){/*<<+compare.js 253 33>>*/return+(/*<<+compare.js 253 42>>*/ai(a,b,false)<=0)/*<<+compare.js 253 77>>*/}/*<<+io.js 337 0>>*/function
aq(c){/*<<+io.js 338 2>>*/ /*<<+io.js 338 11>>*/var
a=g[c];/*<<+io.js 339 2>>*/if(!a.opened)/*<<+io.js 339 20>>*/j("Cannot flush a closed channel");/*<<+io.js 340 2>>*/if(!a.buffer||a.buffer==e)/*<<+io.js 340 40>>*/return 0;/*<<+io.js 341 2>>*/if(a.fd&&i.fds[a.fd]&&i.fds[a.fd].output)/*<<+io.js 343 46>>*/{/*<<+io.js 344 4>>*/ /*<<+io.js 344 15>>*/var
b=i.fds[a.fd].output;/*<<+io.js 345 4>>*/switch(b.length){case
2:/*<<+io.js 346 12>>*/b(c,a.buffer);/*<<+io.js 346 39>>*/break;default:/*<<+io.js 347 13>>*/b(a.buffer)}}a.buffer=e;/*<<+io.js 351 2>>*/return 0/*<<+io.js 352 0>>*/}/*<<+io.js 417 0>>*/function
it(a,b){/*<<+io.js 418 2>>*/aq(a);g[a].offset=/*<<+io.js 419 36>>*/bW(b);/*<<+io.js 420 2>>*/return 0/*<<+io.js 421 0>>*/}/*<<+nat.js 370 0>>*/function
jU(a,b){/*<<+nat.js 371 2>>*/return/*<<+nat.js 371 9>>*/b9(a,0,a.data.length,b,0,b.data.length)/*<<+nat.js 372 0>>*/}/*<<+gc.js 23 0>>*/function
gf(a){/*<<+gc.js 24 2>>*/return 0/*<<+gc.js 25 0>>*/}/*<<+jslib.js 28 0>>*/function
hs(b,a){/*<<+jslib.js 28 28>>*/return b[a]/*<<+jslib.js 28 41>>*/}/*<<+gc.js 10 0>>*/function
f_(){/*<<+gc.js 10 31>>*/return 0/*<<+gc.js 10 39>>*/}/*<<+weak.js 53 0>>*/function
b7(b,a){/*<<+weak.js 54 2>>*/if(a<0||K+a>=b.length)/*<<+weak.js 55 4>>*/d("Weak.get_key");/*<<+weak.js 56 2>>*/return b[K+a]===undefined?0:b[K+a]/*<<+weak.js 57 0>>*/}/*<<+weak.js 101 0>>*/ /*<<+weak.js 101 22>>*/var
fQ=b7;/*<<+bigstring.js 88 0>>*/function
fm(f,c,a,g,b){/*<<+bigstring.js 89 2>>*/if(12!=a.kind)/*<<+bigstring.js 90 4>>*/d(br);/*<<+bigstring.js 91 2>>*/if(b==0)/*<<+bigstring.js 91 15>>*/return 0;/*<<+bigstring.js 92 2>>*/ /*<<+bigstring.js 92 11>>*/var
e=/*<<+bigstring.js 92 13>>*/a.offset(g);/*<<+bigstring.js 93 2>>*/if(c+b>/*<<+bigstring.js 93 18>>*/ag(f))/*<<+bigstring.js 93 46>>*/ /*<<+bigstring.js 94 4>>*/n();/*<<+bigstring.js 96 2>>*/if(e+b>a.data.length)/*<<+bigstring.js 96 35>>*/ /*<<+bigstring.js 97 4>>*/n();/*<<+bigstring.js 92 2>>*/ /*<<+bigstring.js 99 12>>*/var
h=/*<<+bigstring.js 99 14>>*/ /*<<+bigstring.js 99 14>>*/aJ(f).slice(c,c+b);/*<<+bigstring.js 100 2>>*/a.data.set(h,e);/*<<+bigstring.js 101 2>>*/return 0/*<<+bigstring.js 102 0>>*/}/*<<+unix.js 52 0>>*/function
ki(){/*<<+unix.js 52 24>>*/}/*<<+io.js 24 0>>*/function
em(a){delete
i.fds[a];/*<<+io.js 26 2>>*/return 0/*<<+io.js 27 0>>*/}/*<<+io.js 172 0>>*/function
h_(b){/*<<+io.js 173 2>>*/ /*<<+io.js 173 11>>*/var
a=g[b];/*<<+io.js 174 2>>*/aq(b);a.opened=false;/*<<+io.js 176 2>>*/a.file.close();/*<<+io.js 177 2>>*/em(a.fd);/*<<+io.js 178 2>>*/return 0/*<<+io.js 179 0>>*/}/*<<+jslib.js 165 0>>*/function
fX(b,c){/*<<+jslib.js 167 2>>*/if(!b.js_error||c||b[0]==D)b.js_error=new(a.Error)("Js exception containing backtrace");/*<<+jslib.js 168 2>>*/return b/*<<+jslib.js 169 0>>*/}/*<<+sys.js 188 0>>*/function
jB(a){/*<<+sys.js 189 2>>*/return 0/*<<+sys.js 190 0>>*/}/*<<+nat.js 116 0>>*/function
j0(a,b){/*<<+nat.js 117 2>>*/if(a.data[b]==0)/*<<+nat.js 117 25>>*/return 1;/*<<+nat.js 118 2>>*/return 0/*<<+nat.js 119 0>>*/}/*<<+sys.js 207 0>>*/function
ke(){/*<<+sys.js 207 38>>*/return 0/*<<+sys.js 207 47>>*/}/*<<+jslib.js 26 0>>*/function
hC(b,a,c){b[a]=c;/*<<+jslib.js 26 37>>*/return 0/*<<+jslib.js 26 45>>*/}/*<<+array.js 73 0>>*/function
bD(b,a){/*<<+array.js 74 2>>*/if(a<0||a>=b.length-1)/*<<+array.js 74 50>>*/n();/*<<+array.js 75 2>>*/return b[a+1]/*<<+array.js 76 0>>*/}/*<<+sys.js 240 0>>*/function
i_(){/*<<+sys.js 241 2>>*/c("Spacetime profiling only works for native code")/*<<+sys.js 242 0>>*/}/*<<+int64.js 228 0>>*/function
d6(a,b){/*<<+int64.js 228 33>>*/return/*<<+int64.js 228 40>>*/a.sub(b)/*<<+int64.js 228 49>>*/}/*<<+io.js 304 0>>*/function
ir(b,c){/*<<+io.js 305 2>>*/ /*<<+io.js 305 11>>*/var
a=g[b];/*<<+io.js 306 2>>*/if(a.refill!=null)/*<<+io.js 306 27>>*/j(cC);a.offset=/*<<+io.js 307 16>>*/bW(c);/*<<+io.js 308 2>>*/return 0/*<<+io.js 309 0>>*/}/*<<+int64.js 250 0>>*/function
ha(b,a){/*<<+int64.js 250 40>>*/return/*<<+int64.js 250 47>>*/b.shift_left(a)/*<<+int64.js 250 63>>*/}/*<<+compare.js 244 0>>*/function
iE(a,b){/*<<+compare.js 244 32>>*/return+(/*<<+compare.js 244 41>>*/ai(a,b,false)!=0)/*<<+compare.js 244 76>>*/}/*<<+sys.js 161 0>>*/function
jo(){/*<<+sys.js 161 38>>*/return 32/*<<+sys.js 161 49>>*/}/*<<+jslib_js_of_ocaml.js 172 0>>*/function
hN(d){/*<<+jslib_js_of_ocaml.js 173 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 174 4>>*/var/*<<+jslib_js_of_ocaml.js 174 12>>*/c=arguments.length,/*<<+jslib_js_of_ocaml.js 175 13>>*/b=new
Array(c+1);b[0]=this;/*<<+jslib_js_of_ocaml.js 177 4>>*/for(/*<<+jslib_js_of_ocaml.js 177 15>>*/var
a=0;a<c;a++)b[a+1]=arguments[a];/*<<+jslib_js_of_ocaml.js 178 4>>*/return/*<<+jslib_js_of_ocaml.js 178 11>>*/T(d,b)/*<<+jslib_js_of_ocaml.js 173 9>>*/}/*<<+jslib_js_of_ocaml.js 180 0>>*/}/*<<+jslib.js 132 0>>*/function
hf(){/*<<+jslib.js 133 2>>*/return 1/*<<+jslib.js 134 0>>*/}/*<<+bigarray.js 354 0>>*/function
aY(b,a){/*<<+bigarray.js 355 2>>*/if(a<0||a>=b.dims.length)/*<<+bigarray.js 356 4>>*/d("Bigarray.dim");/*<<+bigarray.js 357 2>>*/return b.dims[a]/*<<+bigarray.js 358 0>>*/}/*<<+bigarray.js 362 0>>*/function
eW(a){/*<<+bigarray.js 363 2>>*/return/*<<+bigarray.js 363 9>>*/aY(a,0)/*<<+bigarray.js 364 0>>*/}/*<<+unix.js 25 0>>*/function
eG(h){/*<<+unix.js 26 2>>*/var/*<<+unix.js 26 8>>*/a=new
Date(h*ab),/*<<+unix.js 27 12>>*/b=/*<<+unix.js 27 14>>*/a.getTime(),/*<<+unix.js 28 19>>*/e=/*<<+unix.js 28 21>>*/new
Date(/*<<+unix.js 28 31>>*/a.getFullYear(),0,1).getTime(),/*<<+unix.js 29 10>>*/c=/*<<+unix.js 29 12>>*/Math.floor((b-e)/c2),/*<<+unix.js 30 10>>*/d=new
Date(/*<<+unix.js 30 21>>*/a.getFullYear(),0,1),/*<<+unix.js 31 10>>*/f=new
Date(/*<<+unix.js 31 21>>*/a.getFullYear(),6,1),/*<<+unix.js 32 24>>*/g=/*<<+unix.js 32 26>>*/Math.max(/*<<+unix.js 32 35>>*/d.getTimezoneOffset(),/*<<+unix.js 32 60>>*/f.getTimezoneOffset());/*<<+unix.js 33 2>>*/return[0,/*<<+unix.js 33 18>>*/a.getSeconds(),/*<<+unix.js 33 34>>*/a.getMinutes(),/*<<+unix.js 33 50>>*/a.getHours(),/*<<+unix.js 34 10>>*/a.getDate(),/*<<+unix.js 34 23>>*/a.getMonth(),/*<<+unix.js 34 37>>*/a.getFullYear()-bp,/*<<+unix.js 35 10>>*/a.getDay(),c,/*<<+unix.js 36 11>>*/a.getTimezoneOffset()<g|0]/*<<+unix.js 37 0>>*/}/*<<+jslib_js_of_ocaml.js 96 0>>*/function
hx(a,c,b){/*<<+jslib_js_of_ocaml.js 97 2>>*/return/*<<+jslib_js_of_ocaml.js 97 9>>*/a[/*<<+jslib_js_of_ocaml.js 97 11>>*/t(c)].apply(a,/*<<+jslib_js_of_ocaml.js 97 48>>*/L(b))/*<<+jslib_js_of_ocaml.js 98 0>>*/}/*<<+weak.js 36 0>>*/function
et(a){/*<<+weak.js 37 2>>*/if(a<0)/*<<+weak.js 37 13>>*/d("Weak.create");/*<<+weak.js 38 2>>*/ /*<<+weak.js 38 8>>*/var
b=[ci,"caml_ephe_list_head"];b.length=K+a;/*<<+weak.js 40 2>>*/return b/*<<+weak.js 41 0>>*/}/*<<+weak.js 93 0>>*/ /*<<+weak.js 93 21>>*/var
fN=et;/*<<+mlBytes.js 849 0>>*/function
hF(a){/*<<+mlBytes.js 849 37>>*/return/*<<+mlBytes.js 849 44>>*/f(a)/*<<+mlBytes.js 849 70>>*/}/*<<+unix.js 41 0>>*/function
kg(a){/*<<+unix.js 42 2>>*/var/*<<+unix.js 42 8>>*/c=/*<<+unix.js 42 10>>*/new
Date(a[6]+bp,a[5],a[4],a[3],a[2],a[1]).getTime(),/*<<+unix.js 43 8>>*/b=/*<<+unix.js 43 10>>*/Math.floor(c/ab),/*<<+unix.js 44 10>>*/d=/*<<+unix.js 44 12>>*/eG(b);/*<<+unix.js 45 2>>*/return[0,b,d]/*<<+unix.js 46 0>>*/}/*<<+jslib.js 83 0>>*/function
jN(a){/*<<+jslib.js 84 2>>*/ /*<<+jslib.js 84 8>>*/var
b=1;/*<<+jslib.js 85 2>>*/while(a&&a.joo_tramp)/*<<+jslib.js 85 29>>*/{a=/*<<+jslib.js 86 10>>*/a.joo_tramp.apply(null,a.joo_args);b++}/*<<+jslib.js 89 2>>*/return a/*<<+jslib.js 90 0>>*/}/*<<+mlBytes.js 282 0>>*/function
fu(d,c){/*<<+mlBytes.js 283 2>>*/if(c>>>0>=d.l-7)/*<<+mlBytes.js 283 26>>*/ad();/*<<+mlBytes.js 284 2>>*/ /*<<+mlBytes.js 284 8>>*/var
b=new
Array(8);/*<<+mlBytes.js 285 2>>*/for(/*<<+mlBytes.js 285 12>>*/var
a=0;a<8;a++)/*<<+mlBytes.js 285 28>>*/b[7-a]=/*<<+mlBytes.js 286 15>>*/y(d,c+a);/*<<+mlBytes.js 288 2>>*/return/*<<+mlBytes.js 288 9>>*/U(b)/*<<+mlBytes.js 289 0>>*/}/*<<+weak.js 45 0>>*/function
b8(b,a,c){/*<<+weak.js 46 2>>*/if(a<0||K+a>=b.length)/*<<+weak.js 47 4>>*/d("Weak.set");b[K+a]=c;/*<<+weak.js 49 2>>*/return 0/*<<+weak.js 50 0>>*/}/*<<+fs.js 174 0>>*/function
jG(a){/*<<+fs.js 175 2>>*/var/*<<+fs.js 175 11>>*/b=/*<<+fs.js 175 13>>*/W(a),/*<<+fs.js 176 9>>*/c=/*<<+fs.js 176 11>>*/b.device.unlink(b.rest);/*<<+fs.js 177 2>>*/if(c==0)/*<<+fs.js 177 14>>*/aO(a);/*<<+fs.js 178 2>>*/return 0/*<<+fs.js 179 0>>*/}/*<<+mlBytes.js 206 0>>*/function
aE(){/*<<+mlBytes.js 207 2>>*/d(bw)/*<<+mlBytes.js 208 0>>*/}/*<<+mlBytes.js 246 0>>*/function
jb(b,a){/*<<+mlBytes.js 247 2>>*/if(a>>>0>=/*<<+mlBytes.js 247 17>>*/r(b)-3)/*<<+mlBytes.js 247 47>>*/aE();/*<<+mlBytes.js 248 2>>*/var/*<<+mlBytes.js 248 9>>*/c=/*<<+mlBytes.js 248 11>>*/u(b,a),/*<<+mlBytes.js 249 9>>*/d=/*<<+mlBytes.js 249 11>>*/u(b,a+1),/*<<+mlBytes.js 250 9>>*/e=/*<<+mlBytes.js 250 11>>*/u(b,a+2),/*<<+mlBytes.js 251 9>>*/f=/*<<+mlBytes.js 251 11>>*/u(b,a+3);/*<<+mlBytes.js 252 2>>*/return f<<24|e<<16|d<<8|c/*<<+mlBytes.js 253 0>>*/}/*<<+ieee_754.js 279 0>>*/function
gZ(a,b){/*<<+ieee_754.js 280 2>>*/var/*<<+ieee_754.js 280 8>>*/a=/*<<+ieee_754.js 280 10>>*/Math.abs(a),/*<<+ieee_754.js 280 25>>*/b=/*<<+ieee_754.js 280 27>>*/Math.abs(b),/*<<+ieee_754.js 281 8>>*/c=/*<<+ieee_754.js 281 10>>*/Math.max(a,b),/*<<+ieee_754.js 281 28>>*/d=/*<<+ieee_754.js 281 30>>*/Math.min(a,b)/(c?c:1);/*<<+ieee_754.js 282 2>>*/return c*/*<<+ieee_754.js 282 14>>*/Math.sqrt(1+d*d)/*<<+ieee_754.js 283 0>>*/}/*<<+jslib_js_of_ocaml.js 77 0>>*/function
hh(b,c,a){/*<<+jslib_js_of_ocaml.js 77 36>>*/return/*<<+jslib_js_of_ocaml.js 77 43>>*/b.apply(c,/*<<+jslib_js_of_ocaml.js 77 54>>*/L(a))/*<<+jslib_js_of_ocaml.js 77 81>>*/}/*<<+sys.js 166 0>>*/function
jp(){/*<<+sys.js 166 40>>*/return 0x7FFFFFFF/4|0/*<<+sys.js 166 66>>*/}/*<<+weak.js 119 0>>*/function
fV(b,a){/*<<+weak.js 120 2>>*/return/*<<+weak.js 120 9>>*/b8(b,a,0)/*<<+weak.js 121 0>>*/}/*<<+hash.js 148 0>>*/function
bS(d,b){/*<<+hash.js 149 2>>*/var/*<<+hash.js 149 10>>*/e=b.length,a,c;/*<<+hash.js 150 2>>*/for(a=0;a+4<=e;a+=4)/*<<+hash.js 150 36>>*/{c=b[a]|b[a+1]<<8|b[a+2]<<16|b[a+3]<<24;d=/*<<+hash.js 155 8>>*/q(d,c)}c=0;/*<<+hash.js 158 2>>*/switch(e&3){case
3:c=b[a+2]<<16;case
2:c|=b[a+1]<<8;case
1:c|=b[a];d=/*<<+hash.js 162 8>>*/q(d,c)}d^=e;/*<<+hash.js 166 2>>*/return d/*<<+hash.js 167 0>>*/}/*<<+hash.js 124 0>>*/function
a3(d,b){/*<<+hash.js 125 2>>*/var/*<<+hash.js 125 10>>*/e=b.length,a,c;/*<<+hash.js 126 2>>*/for(a=0;a+4<=e;a+=4)/*<<+hash.js 126 36>>*/{c=/*<<+hash.js 127 8>>*/b.charCodeAt(a)|/*<<+hash.js 128 9>>*/b.charCodeAt(a+1)<<8|/*<<+hash.js 129 9>>*/b.charCodeAt(a+2)<<16|/*<<+hash.js 130 9>>*/b.charCodeAt(a+3)<<24;d=/*<<+hash.js 131 8>>*/q(d,c)}c=0;/*<<+hash.js 134 2>>*/switch(e&3){case
3:c=/*<<+hash.js 135 15>>*/b.charCodeAt(a+2)<<16;case
2:c|=/*<<+hash.js 136 15>>*/b.charCodeAt(a+1)<<8;case
1:c|=/*<<+hash.js 138 9>>*/b.charCodeAt(a);d=/*<<+hash.js 139 8>>*/q(d,c)}d^=e;/*<<+hash.js 143 2>>*/return d/*<<+hash.js 144 0>>*/}/*<<+hash.js 173 0>>*/function
dS(a,b){/*<<+hash.js 174 2>>*/switch(b.t&6){default:/*<<+hash.js 176 4>>*/B(b);case
0:a=/*<<+hash.js 178 8>>*/a3(a,b.c);/*<<+hash.js 179 4>>*/break;case
2:a=/*<<+hash.js 181 8>>*/bS(a,b.c)}/*<<+hash.js 183 2>>*/return a/*<<+hash.js 184 0>>*/}/*<<+mlBytes.js 556 0>>*/function
bL(a,b){a.t&6&&/*<<+mlBytes.js 557 16>>*/B(a);b.t&6&&/*<<+mlBytes.js 558 16>>*/B(b);/*<<+mlBytes.js 559 2>>*/return a.c<b.c?1:0/*<<+mlBytes.js 560 0>>*/}/*<<+graphics.js 321 0>>*/function
gC(b){/*<<+graphics.js 322 2>>*/ /*<<+graphics.js 322 8>>*/var
a=/*<<+graphics.js 322 10>>*/k();/*<<+graphics.js 323 2>>*/a.context.beginPath();/*<<+graphics.js 324 2>>*/a.context.moveTo(b[1][1],a.height-b[1][2]);/*<<+graphics.js 325 2>>*/for(/*<<+graphics.js 325 12>>*/var
c=2;c<b.length;c++)/*<<+graphics.js 326 4>>*/a.context.lineTo(b[c][1],a.height-b[c][2]);/*<<+graphics.js 327 2>>*/a.context.lineTo(b[1][1],a.height-b[1][2]);/*<<+graphics.js 328 2>>*/a.context.fill();/*<<+graphics.js 329 2>>*/return 0/*<<+graphics.js 330 0>>*/}/*<<+gc.js 14 0>>*/function
ge(){/*<<+gc.js 15 2>>*/return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]/*<<+gc.js 16 0>>*/}/*<<+fail.js 50 0>>*/function
bh(){/*<<+fail.js 51 2>>*/bg(i.End_of_file)/*<<+fail.js 52 0>>*/}/*<<+io.js 277 0>>*/function
ic(d){/*<<+io.js 278 2>>*/var/*<<+io.js 278 11>>*/a=g[d],/*<<+io.js 279 11>>*/b=a.file;/*<<+io.js 280 2>>*/while(a.offset+3>=/*<<+io.js 280 30>>*/b.length())/*<<+io.js 280 45>>*/{/*<<+io.js 281 4>>*/ /*<<+io.js 281 10>>*/var
e=/*<<+io.js 281 12>>*/bc(a);/*<<+io.js 282 4>>*/if(e==0)/*<<+io.js 282 16>>*/bh()}/*<<+io.js 278 2>>*/var/*<<+io.js 284 8>>*/c=a.offset,/*<<+io.js 285 8>>*/f=/*<<+io.js 285 10>>*/b.read_one(c)<<24|/*<<+io.js 286 10>>*/b.read_one(c+1)<<16|/*<<+io.js 287 10>>*/b.read_one(c+2)<<8|/*<<+io.js 288 10>>*/b.read_one(c+3);a.offset+=4;/*<<+io.js 290 2>>*/return f/*<<+io.js 291 0>>*/}/*<<+graphics.js 501 0>>*/function
gt(){/*<<+graphics.js 502 2>>*/c("caml_gr_display_mode not Implemented")/*<<+graphics.js 503 0>>*/}/*<<+nat.js 73 0>>*/function
j5(a,b){/*<<+nat.js 74 2>>*/return a.data[b]/*<<+nat.js 75 0>>*/}/*<<+array.js 54 0>>*/function
dq(d,b,e,c,f){/*<<+array.js 55 2>>*/if(c<=b)/*<<+array.js 55 16>>*/for(/*<<+array.js 56 15>>*/var
a=1;a<=f;a++)e[c+a]=d[b+a];else/*<<+array.js 57 9>>*/for(/*<<+array.js 58 15>>*/var
a=f;a>=1;a--)e[c+a]=d[b+a];/*<<+array.js 60 2>>*/return 0/*<<+array.js 61 0>>*/}/*<<+ieee_754.js 369 0>>*/function
f4(a){/*<<+ieee_754.js 370 2>>*/var
b;a=/*<<+ieee_754.js 371 6>>*/o(a);b=+a;/*<<+ieee_754.js 373 2>>*/if(a.length>0&&b===b)/*<<+ieee_754.js 373 39>>*/return b;a=/*<<+ieee_754.js 374 6>>*/a.replace(/_/g,e);b=+a;/*<<+ieee_754.js 376 2>>*/if(a.length>0&&b===b||/*<<+ieee_754.js 376 43>>*/ /^[+-]?nan$/i.test(a))/*<<+ieee_754.js 376 66>>*/return b;/*<<+ieee_754.js 370 2>>*/ /*<<+ieee_754.js 377 8>>*/var
d=/*<<+ieee_754.js 377 10>>*/ /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(a);/*<<+ieee_754.js 379 2>>*/if(d)/*<<+ieee_754.js 379 7>>*/{/*<<+ieee_754.js 380 4>>*/var/*<<+ieee_754.js 380 11>>*/f=/*<<+ieee_754.js 380 13>>*/d[3].replace(/0+$/,e),/*<<+ieee_754.js 381 17>>*/h=/*<<+ieee_754.js 381 19>>*/parseInt(d[1]+d[2]+f,16),/*<<+ieee_754.js 382 17>>*/g=(d[4]|0)-4*f.length;b=h*/*<<+ieee_754.js 383 21>>*/Math.pow(2,g);/*<<+ieee_754.js 384 4>>*/return b}/*<<+ieee_754.js 386 2>>*/if(/*<<+ieee_754.js 386 5>>*/ /^\+?inf(inity)?$/i.test(a))/*<<+ieee_754.js 386 34>>*/return Infinity;/*<<+ieee_754.js 387 2>>*/if(/*<<+ieee_754.js 387 5>>*/ /^-inf(inity)?$/i.test(a))/*<<+ieee_754.js 387 32>>*/return-Infinity;/*<<+ieee_754.js 388 2>>*/c("float_of_string")/*<<+ieee_754.js 389 0>>*/}/*<<+fs.js 118 0>>*/function
jz(){/*<<+fs.js 119 2>>*/return/*<<+fs.js 119 9>>*/f(ae)/*<<+fs.js 120 0>>*/}/*<<+sys.js 155 0>>*/function
jn(){/*<<+sys.js 155 40>>*/return 0/*<<+sys.js 155 50>>*/}/*<<+jslib_js_of_ocaml.js 55 0>>*/function
ea(a){/*<<+jslib_js_of_ocaml.js 56 2>>*/ /*<<+jslib_js_of_ocaml.js 56 8>>*/var
b=[];/*<<+jslib_js_of_ocaml.js 57 2>>*/for(;a!==0;a=a[2])/*<<+jslib_js_of_ocaml.js 57 27>>*/ /*<<+jslib_js_of_ocaml.js 58 4>>*/b.push(a[1]);/*<<+jslib_js_of_ocaml.js 60 2>>*/return b/*<<+jslib_js_of_ocaml.js 61 0>>*/}/*<<+marshal.js 452 0>>*/var/*<<+marshal.js 452 28>>*/d_=false,/*<<+marshal.js 465 20>>*/be=/*<<+marshal.js 465 22>>*/function(){/*<<+marshal.js 466 2>>*/function
o(){this.chunk=[]/*<<+marshal.js 466 40>>*/}o.prototype={chunk_idx:20,block_len:0,obj_counter:0,size_32:0,size_64:0,write:function(b,c){/*<<+marshal.js 470 6>>*/for(/*<<+marshal.js 470 17>>*/var
a=b-8;a>=0;a-=8)this.chunk[this.chunk_idx++]=c>>a&l/*<<+marshal.js 469 10>>*/},write_at:function(b,c,d){/*<<+marshal.js 474 6>>*/ /*<<+marshal.js 474 14>>*/var
b=b;/*<<+marshal.js 475 6>>*/for(/*<<+marshal.js 475 17>>*/var
a=c-8;a>=0;a-=8)this.chunk[b++]=d>>a&l/*<<+marshal.js 473 13>>*/},write_code:function(c,b,d){this.chunk[this.chunk_idx++]=b;/*<<+marshal.js 480 6>>*/for(/*<<+marshal.js 480 17>>*/var
a=c-8;a>=0;a-=8)this.chunk[this.chunk_idx++]=d>>a&l/*<<+marshal.js 478 15>>*/},write_shared:function(a){/*<<+marshal.js 484 6>>*/if(a<1<<8)/*<<+marshal.js 484 29>>*/this.write_code(8,c4,a);else/*<<+marshal.js 485 11>>*/if(a<1<<16)/*<<+marshal.js 485 35>>*/this.write_code(16,dd,a);else/*<<+marshal.js 486 11>>*/this.write_code(32,de,a)/*<<+marshal.js 483 17>>*/},pos:function(){/*<<+marshal.js 488 22>>*/return this.chunk_idx/*<<+marshal.js 488 8>>*/},finalize:function(){this.block_len=this.chunk_idx-20;this.chunk_idx=0;/*<<+marshal.js 492 6>>*/this.write(32,dj);/*<<+marshal.js 493 6>>*/this.write(32,this.block_len);/*<<+marshal.js 494 6>>*/this.write(32,this.obj_counter);/*<<+marshal.js 495 6>>*/this.write(32,this.size_32);/*<<+marshal.js 496 6>>*/this.write(32,this.size_64);/*<<+marshal.js 497 6>>*/return this.chunk/*<<+marshal.js 489 13>>*/}};/*<<+marshal.js 500 2>>*/return function(g,h){h=/*<<+marshal.js 501 12>>*/ea(h);/*<<+marshal.js 503 4>>*/var/*<<+marshal.js 503 19>>*/m=/*<<+marshal.js 503 22>>*/h.indexOf(0)!==-1,/*<<+marshal.js 504 17>>*/p=/*<<+marshal.js 504 21>>*/h.indexOf(1)!==-1;/*<<+marshal.js 507 4>>*/if(p)/*<<+marshal.js 508 6>>*/a.console.warn("in caml_output_val: flag Marshal.Closures is not supported.");/*<<+marshal.js 503 4>>*/var/*<<+marshal.js 510 15>>*/b=new
o(),/*<<+marshal.js 511 14>>*/l=[],/*<<+marshal.js 512 25>>*/i=m?null:new
ay();/*<<+marshal.js 514 4>>*/function
n(c){/*<<+marshal.js 515 6>>*/if(m)/*<<+marshal.js 515 22>>*/return false;/*<<+marshal.js 516 6>>*/ /*<<+marshal.js 516 26>>*/var
a=/*<<+marshal.js 516 28>>*/i.recall(c);/*<<+marshal.js 517 6>>*/if(a)/*<<+marshal.js 517 27>>*/{/*<<+marshal.js 517 29>>*/b.write_shared(a);/*<<+marshal.js 517 67>>*/return true}else/*<<+marshal.js 518 11>>*/{/*<<+marshal.js 518 13>>*/i.store(c);/*<<+marshal.js 518 40>>*/return false}/*<<+marshal.js 519 4>>*/}/*<<+marshal.js 521 4>>*/function
k(a){/*<<+marshal.js 522 6>>*/if(a.caml_custom)/*<<+marshal.js 522 25>>*/{/*<<+marshal.js 523 8>>*/if(/*<<+marshal.js 523 12>>*/n(a))/*<<+marshal.js 523 21>>*/return;/*<<+marshal.js 524 8>>*/var/*<<+marshal.js 524 17>>*/i=a.caml_custom,/*<<+marshal.js 525 16>>*/k=J[i],/*<<+marshal.js 526 21>>*/j=[0,0];/*<<+marshal.js 527 8>>*/if(!k.serialize)/*<<+marshal.js 528 10>>*/d("output_value: abstract value (Custom)");/*<<+marshal.js 529 8>>*/if(d_)/*<<+marshal.js 529 36>>*/{/*<<+marshal.js 530 10>>*/b.write(8,c1);/*<<+marshal.js 531 10>>*/for(/*<<+marshal.js 531 21>>*/var
g=0;g<i.length;g++)/*<<+marshal.js 532 12>>*/b.write(8,/*<<+marshal.js 532 29>>*/i.charCodeAt(g));/*<<+marshal.js 533 10>>*/b.write(8,0);/*<<+marshal.js 534 10>>*/k.serialize(b,a,j)}else/*<<+marshal.js 535 15>>*/if(k.fixed_length==undefined)/*<<+marshal.js 535 48>>*/{/*<<+marshal.js 536 10>>*/b.write(8,dc);/*<<+marshal.js 537 10>>*/for(/*<<+marshal.js 537 21>>*/var
g=0;g<i.length;g++)/*<<+marshal.js 538 12>>*/b.write(8,/*<<+marshal.js 538 29>>*/i.charCodeAt(g));/*<<+marshal.js 539 10>>*/b.write(8,0);/*<<+marshal.js 540 10>>*/ /*<<+marshal.js 540 25>>*/var
m=/*<<+marshal.js 540 27>>*/b.pos();/*<<+marshal.js 541 10>>*/for(/*<<+marshal.js 541 20>>*/var
g=0;g<12;g++)/*<<+marshal.js 541 38>>*/ /*<<+marshal.js 542 12>>*/b.write(8,0);/*<<+marshal.js 544 10>>*/k.serialize(b,a,j);/*<<+marshal.js 545 10>>*/b.write_at(m,32,j[0]);/*<<+marshal.js 546 10>>*/b.write_at(m+4,32,0);/*<<+marshal.js 547 10>>*/b.write_at(m+8,32,j[1])}else/*<<+marshal.js 548 15>>*/{/*<<+marshal.js 549 10>>*/b.write(8,c9);/*<<+marshal.js 550 10>>*/for(/*<<+marshal.js 550 21>>*/var
g=0;g<i.length;g++)/*<<+marshal.js 551 12>>*/b.write(8,/*<<+marshal.js 551 29>>*/i.charCodeAt(g));/*<<+marshal.js 552 10>>*/b.write(8,0);/*<<+marshal.js 553 10>>*/ /*<<+marshal.js 553 22>>*/var
o=/*<<+marshal.js 553 24>>*/b.pos();/*<<+marshal.js 554 10>>*/k.serialize(b,a,j);/*<<+marshal.js 555 10>>*/if(k.fixed_length!=/*<<+marshal.js 555 34>>*/b.pos()-o)/*<<+marshal.js 556 12>>*/c("output_value: incorrect fixed sizes specified by "+i)}b.size_32+=2+(j[0]+3>>2);b.size_64+=2+(j[1]+7>>3)}else/*<<+marshal.js 561 11>>*/if(a
instanceof
Array&&a[0]===(a[0]|0))/*<<+marshal.js 561 56>>*/{/*<<+marshal.js 562 8>>*/if(a[0]==ci)/*<<+marshal.js 562 25>>*/ /*<<+marshal.js 563 10>>*/c("output_value: abstract value (Abstract)");/*<<+marshal.js 565 8>>*/if(a.length>1&&/*<<+marshal.js 565 28>>*/n(a))/*<<+marshal.js 565 37>>*/return;/*<<+marshal.js 566 8>>*/if(a[0]<16&&a.length-1<8)/*<<+marshal.js 567 10>>*/b.write(8,w+a[0]+(a.length-1<<4));else/*<<+marshal.js 569 10>>*/b.write_code(32,cZ,a.length-1<<10|a[0]);b.size_32+=a.length;b.size_64+=a.length;/*<<+marshal.js 572 8>>*/if(a.length>1)/*<<+marshal.js 572 26>>*/l.push(a,1)}else/*<<+marshal.js 573 13>>*/if(/*<<+marshal.js 573 17>>*/af(a))/*<<+marshal.js 573 38>>*/{/*<<+marshal.js 574 8>>*/if(!/*<<+marshal.js 574 13>>*/af(/*<<+marshal.js 574 30>>*/f(e)))/*<<+marshal.js 574 60>>*/ /*<<+marshal.js 575 10>>*/c("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");/*<<+marshal.js 577 8>>*/if(/*<<+marshal.js 577 12>>*/n(a))/*<<+marshal.js 577 21>>*/return;/*<<+marshal.js 578 8>>*/ /*<<+marshal.js 578 16>>*/var
h=/*<<+marshal.js 578 18>>*/ag(a);/*<<+marshal.js 579 8>>*/if(h<au)/*<<+marshal.js 580 10>>*/b.write(8,au+h);else/*<<+marshal.js 581 13>>*/if(h<cw)/*<<+marshal.js 582 10>>*/b.write_code(8,bo,h);else/*<<+marshal.js 584 10>>*/b.write_code(32,bA,h);/*<<+marshal.js 585 8>>*/for(/*<<+marshal.js 585 19>>*/var
g=0;g<h;g++)/*<<+marshal.js 586 10>>*/b.write(8,/*<<+marshal.js 586 27>>*/y(a,g));b.size_32+=1+((h+4)/4|0);b.size_64+=1+((h+8)/8|0)}else/*<<+marshal.js 589 13>>*/if(/*<<+marshal.js 589 17>>*/ap(a))/*<<+marshal.js 589 39>>*/{/*<<+marshal.js 590 8>>*/ /*<<+marshal.js 590 16>>*/var
h=/*<<+marshal.js 590 18>>*/r(a);/*<<+marshal.js 591 8>>*/if(h<au)/*<<+marshal.js 592 10>>*/b.write(8,au+h);else/*<<+marshal.js 593 13>>*/if(h<cw)/*<<+marshal.js 594 10>>*/b.write_code(8,bo,h);else/*<<+marshal.js 596 10>>*/b.write_code(32,bA,h);/*<<+marshal.js 597 8>>*/for(/*<<+marshal.js 597 19>>*/var
g=0;g<h;g++)/*<<+marshal.js 598 10>>*/b.write(8,/*<<+marshal.js 598 27>>*/u(a,g));b.size_32+=1+((h+4)/4|0);b.size_64+=1+((h+8)/8|0)}else/*<<+marshal.js 601 13>>*/if(a!=(a|0))/*<<+marshal.js 602 23>>*/{/*<<+marshal.js 603 10>>*/ /*<<+marshal.js 603 24>>*/var
p=typeof
a;/*<<+marshal.js 612 10>>*/c("output_value: abstract value ("+p+")")}else/*<<+marshal.js 617 13>>*/if(a>=0&&a<bx)/*<<+marshal.js 617 37>>*/ /*<<+marshal.js 618 10>>*/b.write(8,0X40+a);else/*<<+marshal.js 619 15>>*/if(a>=-(1<<7)&&a<1<<7)/*<<+marshal.js 621 12>>*/b.write_code(8,v,a);else/*<<+marshal.js 622 15>>*/if(a>=-(1<<15)&&a<1<<15)/*<<+marshal.js 623 12>>*/b.write_code(16,cu,a);else/*<<+marshal.js 625 12>>*/b.write_code(32,cr,a)/*<<+marshal.js 628 4>>*/}/*<<+marshal.js 629 4>>*/k(g);/*<<+marshal.js 630 4>>*/while(l.length>0)/*<<+marshal.js 630 29>>*/{/*<<+marshal.js 631 6>>*/var/*<<+marshal.js 631 12>>*/j=/*<<+marshal.js 631 14>>*/l.pop(),/*<<+marshal.js 632 12>>*/g=/*<<+marshal.js 632 14>>*/l.pop();/*<<+marshal.js 633 6>>*/if(j+1<g.length)/*<<+marshal.js 633 28>>*/l.push(g,j+1);/*<<+marshal.js 634 6>>*/k(g[j])}/*<<+marshal.js 636 4>>*/if(i)b.obj_counter=i.objs.length;/*<<+marshal.js 637 4>>*/b.finalize();/*<<+marshal.js 638 4>>*/return b.chunk/*<<+marshal.js 500 9>>*/}/*<<+marshal.js 465 22>>*/}();/*<<+mlBytes.js 510 0>>*/function
aQ(a){/*<<+mlBytes.js 511 2>>*/return/*<<+mlBytes.js 511 9>>*/f(/*<<+mlBytes.js 511 32>>*/aS(a,0,a.length))/*<<+mlBytes.js 512 0>>*/}/*<<+marshal.js 644 0>>*/function
eg(b,a){/*<<+marshal.js 645 2>>*/return/*<<+marshal.js 645 9>>*/aQ(/*<<+marshal.js 645 31>>*/be(b,a))/*<<+marshal.js 646 0>>*/}/*<<+fs.js 147 0>>*/function
iS(a){a=/*<<+fs.js 148 9>>*/o(a);/*<<+fs.js 149 2>>*/j(a+": Not a directory")/*<<+fs.js 150 0>>*/}/*<<+sys.js 122 0>>*/function
jI(a){/*<<+sys.js 123 2>>*/ /*<<+sys.js 123 10>>*/var
a=/*<<+sys.js 123 12>>*/t(a);/*<<+sys.js 124 2>>*/if(typeof
require!="undefined"&&/*<<+sys.js 125 9>>*/require("child_process")&&/*<<+sys.js 126 9>>*/require("child_process").execSync)/*<<+sys.js 126 44>>*/try{/*<<+sys.js 127 9>>*/ /*<<+sys.js 127 9>>*/require("child_process").execSync(a,{stdio:"inherit"});/*<<+sys.js 127 68>>*/return 0}catch(a){/*<<+sys.js 128 15>>*/return 1}else/*<<+sys.js 130 7>>*/return bz/*<<+sys.js 131 0>>*/}/*<<+unix.js 59 0>>*/function
kf(a){/*<<+unix.js 60 2>>*/if(/*<<+unix.js 60 5>>*/b$())/*<<+unix.js 60 26>>*/{/*<<+unix.js 61 4>>*/ /*<<+unix.js 61 12>>*/var
b=/*<<+unix.js 61 14>>*/require("tty");/*<<+unix.js 62 4>>*/return/*<<+unix.js 62 11>>*/b.isatty(a)}else/*<<+unix.js 63 9>>*/return false/*<<+unix.js 66 0>>*/}/*<<+jslib.js 172 0>>*/function
hk(a){/*<<+jslib.js 173 2>>*/if(a.js_error)/*<<+jslib.js 173 19>>*/return a.js_error;/*<<+jslib.js 174 2>>*/return null/*<<+jslib.js 175 0>>*/}/*<<+nat.js 406 0>>*/function
ex(d,e){/*<<+nat.js 407 2>>*/var/*<<+nat.js 407 10>>*/b=/*<<+nat.js 407 12>>*/d.read32s(),/*<<+nat.js 408 10>>*/c=new
aI(b);/*<<+nat.js 409 2>>*/for(/*<<+nat.js 409 12>>*/var
a=0;a<b;a++)/*<<+nat.js 409 30>>*/c.data[a]=/*<<+nat.js 410 18>>*/d.read32s();e[0]=b*4;/*<<+nat.js 413 2>>*/return c/*<<+nat.js 414 0>>*/}/*<<+nat.js 4 0>>*/function
jX(){J[cQ]={deserialize:ex,serialize:eD,hash:dW}/*<<+nat.js 10 0>>*/}/*<<+graphics.js 513 0>>*/function
gH(a,b,d,e){/*<<+graphics.js 514 2>>*/c("caml_gr_open_subwindow not Implemented")/*<<+graphics.js 515 0>>*/}/*<<+jslib.js 99 0>>*/function
eA(b){/*<<+jslib.js 100 2>>*/var/*<<+jslib.js 100 8>>*/b=/*<<+jslib.js 100 10>>*/bk(b),/*<<+jslib.js 101 8>>*/c=a;/*<<+jslib.js 102 2>>*/if(c.process&&c.process.stdout&&c.process.stdout.write)/*<<+jslib.js 102 63>>*/ /*<<+jslib.js 103 4>>*/c.process.stdout.write(b);else/*<<+jslib.js 104 9>>*/{/*<<+jslib.js 107 4>>*/if(/*<<+jslib.js 107 7>>*/b.charCodeAt(b.length-1)==10)b=/*<<+jslib.js 108 10>>*/b.substr(0,b.length-1);/*<<+jslib.js 109 4>>*/ /*<<+jslib.js 109 10>>*/var
d=c.console;d&&d.log&&/*<<+jslib.js 110 19>>*/d.log(b)}/*<<+jslib.js 112 0>>*/}/*<<+ieee_754.js 254 0>>*/function
fE(a,b){/*<<+ieee_754.js 255 2>>*/if(b==0)b=1/b;a=/*<<+ieee_754.js 256 6>>*/Math.abs(a);/*<<+ieee_754.js 257 2>>*/return b<0?-a:a/*<<+ieee_754.js 258 0>>*/}/*<<+graphics.js 381 0>>*/function
dN(b){/*<<+graphics.js 382 2>>*/ /*<<+graphics.js 382 8>>*/var
a=/*<<+graphics.js 382 10>>*/k();a.text_size=b;a.context.font=a.text_size+cn+/*<<+graphics.js 384 41>>*/t(a.font);/*<<+graphics.js 385 2>>*/return 0/*<<+graphics.js 386 0>>*/}/*<<+md5.js 42 0>>*/ /*<<+md5.js 42 19>>*/var
ec=/*<<+md5.js 42 21>>*/function(){/*<<+md5.js 43 2>>*/function
m(a,b){/*<<+md5.js 43 24>>*/return a+b|0/*<<+md5.js 43 44>>*/}/*<<+md5.js 44 2>>*/function
a(d,a,c,f,b,e){a=/*<<+md5.js 45 8>>*/m(/*<<+md5.js 45 12>>*/m(a,d),/*<<+md5.js 45 23>>*/m(f,e));/*<<+md5.js 46 4>>*/return/*<<+md5.js 46 11>>*/m(a<<b|a>>>32-b,c)/*<<+md5.js 47 2>>*/}/*<<+md5.js 48 2>>*/function
g(c,b,d,e,h,f,g){/*<<+md5.js 49 4>>*/return/*<<+md5.js 49 11>>*/a(b&d|~b&e,c,b,h,f,g)/*<<+md5.js 50 2>>*/}/*<<+md5.js 51 2>>*/function
h(d,b,e,c,h,f,g){/*<<+md5.js 52 4>>*/return/*<<+md5.js 52 11>>*/a(b&c|e&~c,d,b,h,f,g)/*<<+md5.js 53 2>>*/}/*<<+md5.js 54 2>>*/function
i(c,b,d,e,h,f,g){/*<<+md5.js 54 31>>*/return/*<<+md5.js 54 38>>*/a(b^d^e,c,b,h,f,g)/*<<+md5.js 54 68>>*/}/*<<+md5.js 55 2>>*/function
j(c,b,d,e,h,f,g){/*<<+md5.js 55 31>>*/return/*<<+md5.js 55 38>>*/a(d^(b|~e),c,b,h,f,g)/*<<+md5.js 55 73>>*/}/*<<+md5.js 57 2>>*/function
k(f,o){/*<<+md5.js 58 4>>*/ /*<<+md5.js 58 10>>*/var
e=o;f[e>>2]|=w<<8*(e&3);/*<<+md5.js 60 4>>*/for(e=(e&~0x3)+8;(e&cp)<60;e+=4)f[(e>>2)-1]=0;f[(e>>2)-1]=o<<3;f[e>>2]=o>>29&0x1FFFFFFF;/*<<+md5.js 58 4>>*/ /*<<+md5.js 65 10>>*/var
k=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];/*<<+md5.js 67 4>>*/for(e=0;e<f.length;e+=16)/*<<+md5.js 67 43>>*/{/*<<+md5.js 68 6>>*/var/*<<+md5.js 68 12>>*/a=k[0],/*<<+md5.js 68 22>>*/b=k[1],/*<<+md5.js 68 32>>*/c=k[2],/*<<+md5.js 68 42>>*/d=k[3];a=/*<<+md5.js 70 10>>*/g(a,b,c,d,f[e+0],7,0xD76AA478);d=/*<<+md5.js 71 10>>*/g(d,a,b,c,f[e+1],12,0xE8C7B756);c=/*<<+md5.js 72 10>>*/g(c,d,a,b,f[e+2],17,0x242070DB);b=/*<<+md5.js 73 10>>*/g(b,c,d,a,f[e+3],22,0xC1BDCEEE);a=/*<<+md5.js 74 10>>*/g(a,b,c,d,f[e+4],7,0xF57C0FAF);d=/*<<+md5.js 75 10>>*/g(d,a,b,c,f[e+5],12,0x4787C62A);c=/*<<+md5.js 76 10>>*/g(c,d,a,b,f[e+6],17,0xA8304613);b=/*<<+md5.js 77 10>>*/g(b,c,d,a,f[e+7],22,0xFD469501);a=/*<<+md5.js 78 10>>*/g(a,b,c,d,f[e+8],7,0x698098D8);d=/*<<+md5.js 79 10>>*/g(d,a,b,c,f[e+9],12,0x8B44F7AF);c=/*<<+md5.js 80 10>>*/g(c,d,a,b,f[e+10],17,0xFFFF5BB1);b=/*<<+md5.js 81 10>>*/g(b,c,d,a,f[e+11],22,0x895CD7BE);a=/*<<+md5.js 82 10>>*/g(a,b,c,d,f[e+12],7,0x6B901122);d=/*<<+md5.js 83 10>>*/g(d,a,b,c,f[e+13],12,0xFD987193);c=/*<<+md5.js 84 10>>*/g(c,d,a,b,f[e+14],17,0xA679438E);b=/*<<+md5.js 85 10>>*/g(b,c,d,a,f[e+15],22,0x49B40821);a=/*<<+md5.js 87 10>>*/h(a,b,c,d,f[e+1],5,0xF61E2562);d=/*<<+md5.js 88 10>>*/h(d,a,b,c,f[e+6],9,0xC040B340);c=/*<<+md5.js 89 10>>*/h(c,d,a,b,f[e+11],14,0x265E5A51);b=/*<<+md5.js 90 10>>*/h(b,c,d,a,f[e+0],20,0xE9B6C7AA);a=/*<<+md5.js 91 10>>*/h(a,b,c,d,f[e+5],5,0xD62F105D);d=/*<<+md5.js 92 10>>*/h(d,a,b,c,f[e+10],9,0x02441453);c=/*<<+md5.js 93 10>>*/h(c,d,a,b,f[e+15],14,0xD8A1E681);b=/*<<+md5.js 94 10>>*/h(b,c,d,a,f[e+4],20,0xE7D3FBC8);a=/*<<+md5.js 95 10>>*/h(a,b,c,d,f[e+9],5,0x21E1CDE6);d=/*<<+md5.js 96 10>>*/h(d,a,b,c,f[e+14],9,0xC33707D6);c=/*<<+md5.js 97 10>>*/h(c,d,a,b,f[e+3],14,0xF4D50D87);b=/*<<+md5.js 98 10>>*/h(b,c,d,a,f[e+8],20,0x455A14ED);a=/*<<+md5.js 99 10>>*/h(a,b,c,d,f[e+13],5,0xA9E3E905);d=/*<<+md5.js 100 10>>*/h(d,a,b,c,f[e+2],9,0xFCEFA3F8);c=/*<<+md5.js 101 10>>*/h(c,d,a,b,f[e+7],14,0x676F02D9);b=/*<<+md5.js 102 10>>*/h(b,c,d,a,f[e+12],20,0x8D2A4C8A);a=/*<<+md5.js 104 10>>*/i(a,b,c,d,f[e+5],4,0xFFFA3942);d=/*<<+md5.js 105 10>>*/i(d,a,b,c,f[e+8],11,0x8771F681);c=/*<<+md5.js 106 10>>*/i(c,d,a,b,f[e+11],16,0x6D9D6122);b=/*<<+md5.js 107 10>>*/i(b,c,d,a,f[e+14],23,0xFDE5380C);a=/*<<+md5.js 108 10>>*/i(a,b,c,d,f[e+1],4,0xA4BEEA44);d=/*<<+md5.js 109 10>>*/i(d,a,b,c,f[e+4],11,0x4BDECFA9);c=/*<<+md5.js 110 10>>*/i(c,d,a,b,f[e+7],16,0xF6BB4B60);b=/*<<+md5.js 111 10>>*/i(b,c,d,a,f[e+10],23,0xBEBFBC70);a=/*<<+md5.js 112 10>>*/i(a,b,c,d,f[e+13],4,0x289B7EC6);d=/*<<+md5.js 113 10>>*/i(d,a,b,c,f[e+0],11,0xEAA127FA);c=/*<<+md5.js 114 10>>*/i(c,d,a,b,f[e+3],16,0xD4EF3085);b=/*<<+md5.js 115 10>>*/i(b,c,d,a,f[e+6],23,0x04881D05);a=/*<<+md5.js 116 10>>*/i(a,b,c,d,f[e+9],4,0xD9D4D039);d=/*<<+md5.js 117 10>>*/i(d,a,b,c,f[e+12],11,0xE6DB99E5);c=/*<<+md5.js 118 10>>*/i(c,d,a,b,f[e+15],16,0x1FA27CF8);b=/*<<+md5.js 119 10>>*/i(b,c,d,a,f[e+2],23,0xC4AC5665);a=/*<<+md5.js 121 10>>*/j(a,b,c,d,f[e+0],6,0xF4292244);d=/*<<+md5.js 122 10>>*/j(d,a,b,c,f[e+7],10,0x432AFF97);c=/*<<+md5.js 123 10>>*/j(c,d,a,b,f[e+14],15,0xAB9423A7);b=/*<<+md5.js 124 10>>*/j(b,c,d,a,f[e+5],21,0xFC93A039);a=/*<<+md5.js 125 10>>*/j(a,b,c,d,f[e+12],6,0x655B59C3);d=/*<<+md5.js 126 10>>*/j(d,a,b,c,f[e+3],10,0x8F0CCC92);c=/*<<+md5.js 127 10>>*/j(c,d,a,b,f[e+10],15,0xFFEFF47D);b=/*<<+md5.js 128 10>>*/j(b,c,d,a,f[e+1],21,0x85845DD1);a=/*<<+md5.js 129 10>>*/j(a,b,c,d,f[e+8],6,0x6FA87E4F);d=/*<<+md5.js 130 10>>*/j(d,a,b,c,f[e+15],10,0xFE2CE6E0);c=/*<<+md5.js 131 10>>*/j(c,d,a,b,f[e+6],15,0xA3014314);b=/*<<+md5.js 132 10>>*/j(b,c,d,a,f[e+13],21,0x4E0811A1);a=/*<<+md5.js 133 10>>*/j(a,b,c,d,f[e+4],6,0xF7537E82);d=/*<<+md5.js 134 10>>*/j(d,a,b,c,f[e+11],10,0xBD3AF235);c=/*<<+md5.js 135 10>>*/j(c,d,a,b,f[e+2],15,0x2AD7D2BB);b=/*<<+md5.js 136 10>>*/j(b,c,d,a,f[e+9],21,0xEB86D391);k[0]=/*<<+md5.js 138 13>>*/m(a,k[0]);k[1]=/*<<+md5.js 139 13>>*/m(b,k[1]);k[2]=/*<<+md5.js 140 13>>*/m(c,k[2]);k[3]=/*<<+md5.js 141 13>>*/m(d,k[3])}/*<<+md5.js 58 4>>*/ /*<<+md5.js 144 10>>*/var
p=new
Array(16);/*<<+md5.js 145 4>>*/for(/*<<+md5.js 145 15>>*/var
e=0;e<4;e++)/*<<+md5.js 146 6>>*/for(/*<<+md5.js 146 17>>*/var
n=0;n<4;n++)p[e*4+n]=k[e]>>8*n&l;/*<<+md5.js 148 4>>*/return p/*<<+md5.js 149 2>>*/}/*<<+md5.js 151 2>>*/return function(h,g,f){/*<<+md5.js 154 4>>*/ /*<<+md5.js 154 12>>*/var
e=[];/*<<+md5.js 155 4>>*/switch(h.t&6){default:/*<<+md5.js 157 6>>*/B(h);case
0:/*<<+md5.js 159 6>>*/ /*<<+md5.js 159 12>>*/var
d=h.c;/*<<+md5.js 160 6>>*/for(/*<<+md5.js 160 17>>*/var
a=0;a<f;a+=4)/*<<+md5.js 160 37>>*/{/*<<+md5.js 161 8>>*/ /*<<+md5.js 161 14>>*/var
b=a+g;e[a>>2]=/*<<+md5.js 163 10>>*/d.charCodeAt(b)|/*<<+md5.js 163 29>>*/d.charCodeAt(b+1)<<8|/*<<+md5.js 164 11>>*/d.charCodeAt(b+2)<<16|/*<<+md5.js 164 39>>*/d.charCodeAt(b+3)<<24}/*<<+md5.js 166 6>>*/for(;a<f;a++)e[a>>2]|=/*<<+md5.js 166 40>>*/d.charCodeAt(a+g)<<8*(a&3);/*<<+md5.js 167 6>>*/break;case
4:/*<<+md5.js 169 6>>*/ /*<<+md5.js 169 12>>*/var
c=h.c;/*<<+md5.js 170 6>>*/for(/*<<+md5.js 170 17>>*/var
a=0;a<f;a+=4)/*<<+md5.js 170 37>>*/{/*<<+md5.js 171 8>>*/ /*<<+md5.js 171 14>>*/var
b=a+g;e[a>>2]=c[b]|c[b+1]<<8|c[b+2]<<16|c[b+3]<<24}/*<<+md5.js 174 6>>*/for(;a<f;a++)e[a>>2]|=c[a+g]<<8*(a&3)}/*<<+md5.js 176 4>>*/return/*<<+md5.js 176 11>>*/aQ(/*<<+md5.js 176 32>>*/k(e,f))/*<<+md5.js 151 9>>*/}/*<<+md5.js 42 21>>*/}();/*<<+bigarray.js 443 0>>*/function
fb(a,b,c){/*<<+bigarray.js 444 2>>*/a.set(/*<<+bigarray.js 444 9>>*/a.offset(/*<<+bigarray.js 444 19>>*/L(b)),c);/*<<+bigarray.js 445 2>>*/return 0/*<<+bigarray.js 446 0>>*/}/*<<+weak.js 113 0>>*/function
fT(c,a,b){/*<<+weak.js 114 2>>*/return/*<<+weak.js 114 9>>*/b8(c,a,[0,b])/*<<+weak.js 115 0>>*/}/*<<+mlBytes.js 548 0>>*/function
bK(a,b){a.t&6&&/*<<+mlBytes.js 549 16>>*/B(a);b.t&6&&/*<<+mlBytes.js 550 16>>*/B(b);/*<<+mlBytes.js 551 2>>*/return a.c<=b.c?1:0/*<<+mlBytes.js 552 0>>*/}/*<<+mlBytes.js 781 0>>*/function
ej(a,b){/*<<+mlBytes.js 782 2>>*/return/*<<+mlBytes.js 782 9>>*/bK(a,b)/*<<+mlBytes.js 783 0>>*/}/*<<+mlBytes.js 564 0>>*/function
jd(a,b){/*<<+mlBytes.js 565 2>>*/return/*<<+mlBytes.js 565 9>>*/ej(b,a)/*<<+mlBytes.js 566 0>>*/}/*<<+int64.js 225 0>>*/function
bU(a,b){/*<<+int64.js 225 33>>*/return/*<<+int64.js 225 40>>*/a.add(b)/*<<+int64.js 225 49>>*/}/*<<+ieee_754.js 152 0>>*/function
iD(a,c){/*<<+ieee_754.js 153 2>>*/if(/*<<+ieee_754.js 153 5>>*/isNaN(a)||/*<<+ieee_754.js 153 17>>*/isNaN(c))/*<<+ieee_754.js 153 27>>*/return NaN;/*<<+ieee_754.js 154 2>>*/if(a==c)/*<<+ieee_754.js 154 11>>*/return c;/*<<+ieee_754.js 155 2>>*/if(a==0)/*<<+ieee_754.js 155 10>>*/return c<0?-/*<<+ieee_754.js 157 14>>*/Math.pow(2,-cg):/*<<+ieee_754.js 159 13>>*/Math.pow(2,-cg);/*<<+ieee_754.js 161 2>>*/var/*<<+ieee_754.js 161 11>>*/b=/*<<+ieee_754.js 161 13>>*/ao(a),/*<<+ieee_754.js 162 10>>*/d=/*<<+ieee_754.js 162 12>>*/aC(1);/*<<+ieee_754.js 163 2>>*/if(a<c==a>0)b=/*<<+ieee_754.js 164 11>>*/bU(b,d);else
b=/*<<+ieee_754.js 166 11>>*/d6(b,d);/*<<+ieee_754.js 167 2>>*/return/*<<+ieee_754.js 167 9>>*/aB(b)/*<<+ieee_754.js 168 0>>*/}/*<<+graphics.js 174 0>>*/function
gO(){/*<<+graphics.js 175 2>>*/ /*<<+graphics.js 175 8>>*/var
a=/*<<+graphics.js 175 10>>*/k();/*<<+graphics.js 176 2>>*/return a.height/*<<+graphics.js 177 0>>*/}/*<<+io.js 313 0>>*/function
ik(a){/*<<+io.js 313 33>>*/return g[a].offset/*<<+io.js 313 71>>*/}/*<<+int64.js 241 0>>*/function
g5(a,b){/*<<+int64.js 241 33>>*/return/*<<+int64.js 241 40>>*/a.and(b)/*<<+int64.js 241 50>>*/}/*<<+sys.js 158 0>>*/function
jt(){/*<<+sys.js 158 39>>*/return 32/*<<+sys.js 158 50>>*/}/*<<+io.js 31 0>>*/function
b5(d,e){/*<<+io.js 32 2>>*/var/*<<+io.js 32 11>>*/a=g[d],/*<<+io.js 33 10>>*/c=/*<<+io.js 33 12>>*/f(e),/*<<+io.js 34 11>>*/b=/*<<+io.js 34 13>>*/r(c);/*<<+io.js 35 2>>*/a.file.write(a.offset,c,0,b);a.offset+=b;/*<<+io.js 37 2>>*/return 0/*<<+io.js 38 0>>*/}/*<<+jslib.js 115 0>>*/function
aT(b){/*<<+jslib.js 116 2>>*/var/*<<+jslib.js 116 8>>*/b=/*<<+jslib.js 116 10>>*/bk(b),/*<<+jslib.js 117 8>>*/c=a;/*<<+jslib.js 118 2>>*/if(c.process&&c.process.stdout&&c.process.stdout.write)/*<<+jslib.js 118 63>>*/ /*<<+jslib.js 119 4>>*/c.process.stderr.write(b);else/*<<+jslib.js 120 9>>*/{/*<<+jslib.js 123 4>>*/if(/*<<+jslib.js 123 7>>*/b.charCodeAt(b.length-1)==10)b=/*<<+jslib.js 124 10>>*/b.substr(0,b.length-1);/*<<+jslib.js 125 4>>*/ /*<<+jslib.js 125 10>>*/var
d=c.console;d&&d.error&&/*<<+jslib.js 126 20>>*/d.error(b)}/*<<+jslib.js 128 0>>*/}/*<<+io.js 47 0>>*/function
bj(c,e,d,a){/*<<+io.js 48 2>>*/if(i.fds===undefined)i.fds=new
Array();a=a?a:{};/*<<+io.js 50 2>>*/ /*<<+io.js 50 11>>*/var
b={};b.file=d;b.offset=a.append?/*<<+io.js 52 29>>*/d.length():0;b.flags=a;b.output=e;i.fds[c]=b;/*<<+io.js 56 2>>*/if(!i.fd_last_idx||c>i.fd_last_idx)i.fd_last_idx=c;/*<<+io.js 58 2>>*/return c/*<<+io.js 59 0>>*/}/*<<+io.js 60 0>>*/function
jD(c,b,g){/*<<+io.js 61 2>>*/ /*<<+io.js 61 8>>*/var
a={};/*<<+io.js 62 2>>*/while(b)/*<<+io.js 62 14>>*/{/*<<+io.js 63 4>>*/switch(b[1]){case
0:a.rdonly=1;/*<<+io.js 64 25>>*/break;case
1:a.wronly=1;/*<<+io.js 65 25>>*/break;case
2:a.append=1;/*<<+io.js 66 25>>*/break;case
3:a.create=1;/*<<+io.js 67 25>>*/break;case
4:a.truncate=1;/*<<+io.js 68 27>>*/break;case
5:a.excl=1;/*<<+io.js 69 24>>*/break;case
6:a.binary=1;/*<<+io.js 70 25>>*/break;case
7:a.text=1;/*<<+io.js 71 23>>*/break;case
8:a.nonblock=1;/*<<+io.js 72 27>>*/break}b=b[2]}/*<<+io.js 76 2>>*/if(a.rdonly&&a.wronly)/*<<+io.js 77 4>>*/j(/*<<+io.js 77 25>>*/o(c)+c$);/*<<+io.js 78 2>>*/if(a.text&&a.binary)/*<<+io.js 79 4>>*/j(/*<<+io.js 79 25>>*/o(c)+cx);/*<<+io.js 61 2>>*/var/*<<+io.js 80 11>>*/d=/*<<+io.js 80 13>>*/W(c),/*<<+io.js 81 11>>*/e=/*<<+io.js 81 13>>*/d.device.open(d.rest,a),/*<<+io.js 82 10>>*/f=i.fd_last_idx?i.fd_last_idx:0;/*<<+io.js 83 2>>*/return/*<<+io.js 83 9>>*/bj(f+1,b5,e,a)/*<<+io.js 84 0>>*/}/*<<+io.js 85 0>>*/bj(0,b5,new
p(/*<<+io.js 85 57>>*/I(0)));/*<<+io.js 86 0>>*/bj(1,eA,new
p(/*<<+io.js 86 57>>*/I(0)));/*<<+io.js 87 0>>*/bj(2,aT,new
p(/*<<+io.js 87 57>>*/I(0)));/*<<+marshal.js 52 0>>*/function
aW(b,a){this.s=/*<<+marshal.js 52 42>>*/o(b);this.i=a/*<<+marshal.js 52 81>>*/}aW.prototype={read8u:function(){/*<<+marshal.js 54 23>>*/return/*<<+marshal.js 54 30>>*/this.s.charCodeAt(this.i++)/*<<+marshal.js 54 9>>*/},read8s:function(){/*<<+marshal.js 55 23>>*/return/*<<+marshal.js 55 30>>*/this.s.charCodeAt(this.i++)<<24>>24/*<<+marshal.js 55 9>>*/},read16u:function(){/*<<+marshal.js 57 4>>*/var/*<<+marshal.js 57 10>>*/b=this.s,/*<<+marshal.js 57 22>>*/a=this.i;this.i=a+2;/*<<+marshal.js 59 4>>*/return/*<<+marshal.js 59 12>>*/b.charCodeAt(a)<<8|/*<<+marshal.js 59 36>>*/b.charCodeAt(a+1)/*<<+marshal.js 56 10>>*/},read16s:function(){/*<<+marshal.js 62 4>>*/var/*<<+marshal.js 62 10>>*/b=this.s,/*<<+marshal.js 62 22>>*/a=this.i;this.i=a+2;/*<<+marshal.js 64 4>>*/return/*<<+marshal.js 64 12>>*/b.charCodeAt(a)<<24>>16|/*<<+marshal.js 64 43>>*/b.charCodeAt(a+1)/*<<+marshal.js 61 10>>*/},read32u:function(){/*<<+marshal.js 67 4>>*/var/*<<+marshal.js 67 10>>*/b=this.s,/*<<+marshal.js 67 22>>*/a=this.i;this.i=a+4;/*<<+marshal.js 69 4>>*/return(/*<<+marshal.js 69 13>>*/b.charCodeAt(a)<<24|/*<<+marshal.js 69 39>>*/b.charCodeAt(a+1)<<16|/*<<+marshal.js 70 13>>*/b.charCodeAt(a+2)<<8|/*<<+marshal.js 70 39>>*/b.charCodeAt(a+3))>>>0/*<<+marshal.js 66 10>>*/},read32s:function(){/*<<+marshal.js 73 4>>*/var/*<<+marshal.js 73 10>>*/b=this.s,/*<<+marshal.js 73 22>>*/a=this.i;this.i=a+4;/*<<+marshal.js 75 4>>*/return/*<<+marshal.js 75 12>>*/b.charCodeAt(a)<<24|/*<<+marshal.js 75 38>>*/b.charCodeAt(a+1)<<16|/*<<+marshal.js 76 7>>*/b.charCodeAt(a+2)<<8|/*<<+marshal.js 76 33>>*/b.charCodeAt(a+3)/*<<+marshal.js 72 10>>*/},readstr:function(b){/*<<+marshal.js 79 4>>*/ /*<<+marshal.js 79 10>>*/var
a=this.i;this.i=a+b;/*<<+marshal.js 81 4>>*/return/*<<+marshal.js 81 11>>*/f(/*<<+marshal.js 81 34>>*/this.s.substring(a,a+b))/*<<+marshal.js 78 10>>*/}};/*<<+marshal.js 128 0>>*/function
an(a){/*<<+marshal.js 129 2>>*/return/*<<+marshal.js 129 9>>*/aB(/*<<+marshal.js 129 35>>*/U(a))/*<<+marshal.js 130 0>>*/}/*<<+marshal.js 220 0>>*/function
bT(b,h){/*<<+marshal.js 221 2>>*/var/*<<+marshal.js 221 13>>*/p=/*<<+marshal.js 221 15>>*/b.read32u(),/*<<+marshal.js 222 17>>*/o=/*<<+marshal.js 222 19>>*/b.read32u(),/*<<+marshal.js 223 18>>*/k=/*<<+marshal.js 223 20>>*/b.read32u(),/*<<+marshal.js 224 15>>*/q=/*<<+marshal.js 224 17>>*/b.read32u(),/*<<+marshal.js 225 15>>*/r=/*<<+marshal.js 225 17>>*/b.read32u(),/*<<+marshal.js 226 12>>*/n=[],/*<<+marshal.js 227 23>>*/d=k>0?[]:null,/*<<+marshal.js 228 18>>*/j=0;/*<<+marshal.js 229 2>>*/function
g(){/*<<+marshal.js 230 4>>*/ /*<<+marshal.js 230 13>>*/var
k=/*<<+marshal.js 230 15>>*/b.read8u();/*<<+marshal.js 231 4>>*/if(k>=bx)/*<<+marshal.js 231 47>>*/if(k>=w)/*<<+marshal.js 232 51>>*/{/*<<+marshal.js 233 8>>*/var/*<<+marshal.js 233 16>>*/r=k&0xF,/*<<+marshal.js 234 17>>*/m=k>>4&0x7,/*<<+marshal.js 235 14>>*/a=[r];/*<<+marshal.js 236 8>>*/if(m==0)/*<<+marshal.js 236 23>>*/return a;/*<<+marshal.js 237 8>>*/if(d)d[j++]=a;/*<<+marshal.js 238 8>>*/n.push(a,m);/*<<+marshal.js 239 8>>*/return a}else/*<<+marshal.js 241 8>>*/return k&cp;else/*<<+marshal.js 242 11>>*/if(k>=au)/*<<+marshal.js 243 52>>*/{/*<<+marshal.js 244 8>>*/var/*<<+marshal.js 244 16>>*/g=k&0x1F,/*<<+marshal.js 245 14>>*/a=/*<<+marshal.js 245 16>>*/b.readstr(g);/*<<+marshal.js 246 8>>*/if(d)d[j++]=a;/*<<+marshal.js 247 8>>*/return a}else/*<<+marshal.js 248 13>>*/switch(k){case
0x00:/*<<+marshal.js 251 10>>*/return/*<<+marshal.js 251 17>>*/b.read8s();case
0x01:/*<<+marshal.js 253 10>>*/return/*<<+marshal.js 253 17>>*/b.read16s();case
0x02:/*<<+marshal.js 255 10>>*/return/*<<+marshal.js 255 17>>*/b.read32s();case
0x03:/*<<+marshal.js 257 10>>*/c("input_value: integer too large");/*<<+marshal.js 258 10>>*/break;case
0x04:/*<<+marshal.js 260 10>>*/ /*<<+marshal.js 260 21>>*/var
o=/*<<+marshal.js 260 23>>*/b.read8u();/*<<+marshal.js 261 10>>*/return d[j-o];case
0x05:/*<<+marshal.js 263 10>>*/ /*<<+marshal.js 263 21>>*/var
o=/*<<+marshal.js 263 23>>*/b.read16u();/*<<+marshal.js 264 10>>*/return d[j-o];case
0x06:/*<<+marshal.js 266 10>>*/ /*<<+marshal.js 266 21>>*/var
o=/*<<+marshal.js 266 23>>*/b.read32u();/*<<+marshal.js 267 10>>*/return d[j-o];case
0x08:/*<<+marshal.js 269 10>>*/var/*<<+marshal.js 269 21>>*/t=/*<<+marshal.js 269 23>>*/b.read32u(),/*<<+marshal.js 270 18>>*/r=t&l,/*<<+marshal.js 271 19>>*/m=t>>10,/*<<+marshal.js 272 16>>*/a=[r];/*<<+marshal.js 273 10>>*/if(m==0)/*<<+marshal.js 273 25>>*/return a;/*<<+marshal.js 274 10>>*/if(d)d[j++]=a;/*<<+marshal.js 275 10>>*/n.push(a,m);/*<<+marshal.js 276 10>>*/return a;case
0x13:/*<<+marshal.js 278 10>>*/c("input_value: data block too large");/*<<+marshal.js 279 10>>*/break;case
0x09:/*<<+marshal.js 281 10>>*/var/*<<+marshal.js 281 18>>*/g=/*<<+marshal.js 281 20>>*/b.read8u(),/*<<+marshal.js 282 16>>*/a=/*<<+marshal.js 282 18>>*/b.readstr(g);/*<<+marshal.js 283 10>>*/if(d)d[j++]=a;/*<<+marshal.js 284 10>>*/return a;case
0x0A:/*<<+marshal.js 286 10>>*/var/*<<+marshal.js 286 18>>*/g=/*<<+marshal.js 286 20>>*/b.read32u(),/*<<+marshal.js 287 16>>*/a=/*<<+marshal.js 287 18>>*/b.readstr(g);/*<<+marshal.js 288 10>>*/if(d)d[j++]=a;/*<<+marshal.js 289 10>>*/return a;case
0x0C:/*<<+marshal.js 291 10>>*/ /*<<+marshal.js 291 16>>*/var
h=new
Array(8);/*<<+marshal.js 292 10>>*/for(/*<<+marshal.js 292 21>>*/var
f=0;f<8;f++)h[7-f]=/*<<+marshal.js 292 47>>*/b.read8u();/*<<+marshal.js 291 10>>*/ /*<<+marshal.js 293 16>>*/var
a=/*<<+marshal.js 293 18>>*/an(h);/*<<+marshal.js 294 10>>*/if(d)d[j++]=a;/*<<+marshal.js 295 10>>*/return a;case
0x0B:/*<<+marshal.js 297 10>>*/ /*<<+marshal.js 297 16>>*/var
h=new
Array(8);/*<<+marshal.js 298 10>>*/for(/*<<+marshal.js 298 21>>*/var
f=0;f<8;f++)h[f]=/*<<+marshal.js 298 43>>*/b.read8u();/*<<+marshal.js 297 10>>*/ /*<<+marshal.js 299 16>>*/var
a=/*<<+marshal.js 299 18>>*/an(h);/*<<+marshal.js 300 10>>*/if(d)d[j++]=a;/*<<+marshal.js 301 10>>*/return a;case
0x0E:/*<<+marshal.js 303 10>>*/var/*<<+marshal.js 303 18>>*/g=/*<<+marshal.js 303 20>>*/b.read8u(),/*<<+marshal.js 304 16>>*/a=new
Array(g+1);a[0]=N;/*<<+marshal.js 303 10>>*/ /*<<+marshal.js 306 16>>*/var
h=new
Array(8);/*<<+marshal.js 307 10>>*/if(d)d[j++]=a;/*<<+marshal.js 308 10>>*/for(/*<<+marshal.js 308 21>>*/var
f=1;f<=g;f++)/*<<+marshal.js 308 39>>*/{/*<<+marshal.js 309 12>>*/for(/*<<+marshal.js 309 23>>*/var
i=0;i<8;i++)h[7-i]=/*<<+marshal.js 309 49>>*/b.read8u();a[f]=/*<<+marshal.js 310 19>>*/an(h)}/*<<+marshal.js 312 10>>*/return a;case
0x0D:/*<<+marshal.js 314 10>>*/var/*<<+marshal.js 314 18>>*/g=/*<<+marshal.js 314 20>>*/b.read8u(),/*<<+marshal.js 315 16>>*/a=new
Array(g+1);a[0]=N;/*<<+marshal.js 314 10>>*/ /*<<+marshal.js 317 16>>*/var
h=new
Array(8);/*<<+marshal.js 318 10>>*/if(d)d[j++]=a;/*<<+marshal.js 319 10>>*/for(/*<<+marshal.js 319 21>>*/var
f=1;f<=g;f++)/*<<+marshal.js 319 39>>*/{/*<<+marshal.js 320 12>>*/for(/*<<+marshal.js 320 23>>*/var
i=0;i<8;i++)h[i]=/*<<+marshal.js 320 45>>*/b.read8u();a[f]=/*<<+marshal.js 321 20>>*/an(h)}/*<<+marshal.js 323 10>>*/return a;case
0x07:/*<<+marshal.js 325 10>>*/var/*<<+marshal.js 325 18>>*/g=/*<<+marshal.js 325 20>>*/b.read32u(),/*<<+marshal.js 326 16>>*/a=new
Array(g+1);a[0]=N;/*<<+marshal.js 328 10>>*/if(d)d[j++]=a;/*<<+marshal.js 325 10>>*/ /*<<+marshal.js 329 16>>*/var
h=new
Array(8);/*<<+marshal.js 330 10>>*/for(/*<<+marshal.js 330 21>>*/var
f=1;f<=g;f++)/*<<+marshal.js 330 39>>*/{/*<<+marshal.js 331 12>>*/for(/*<<+marshal.js 331 23>>*/var
i=0;i<8;i++)h[7-i]=/*<<+marshal.js 331 49>>*/b.read8u();a[f]=/*<<+marshal.js 332 19>>*/an(h)}/*<<+marshal.js 334 10>>*/return a;case
0x0F:/*<<+marshal.js 336 10>>*/var/*<<+marshal.js 336 18>>*/g=/*<<+marshal.js 336 20>>*/b.read32u(),/*<<+marshal.js 337 16>>*/a=new
Array(g+1);a[0]=N;/*<<+marshal.js 336 10>>*/ /*<<+marshal.js 339 16>>*/var
h=new
Array(8);/*<<+marshal.js 340 10>>*/for(/*<<+marshal.js 340 21>>*/var
f=1;f<=g;f++)/*<<+marshal.js 340 39>>*/{/*<<+marshal.js 341 12>>*/for(/*<<+marshal.js 341 23>>*/var
i=0;i<8;i++)h[i]=/*<<+marshal.js 341 45>>*/b.read8u();a[f]=/*<<+marshal.js 342 20>>*/an(h)}/*<<+marshal.js 344 10>>*/return a;case
0x10:case
0x11:/*<<+marshal.js 347 10>>*/c("input_value: code pointer");/*<<+marshal.js 348 10>>*/break;case
0x12:case
0x18:case
0x19:/*<<+marshal.js 352 10>>*/var
s,/*<<+marshal.js 352 19>>*/u=e;/*<<+marshal.js 353 10>>*/while((s=/*<<+marshal.js 353 22>>*/b.read8u())!=0)u+=/*<<+marshal.js 353 51>>*/String.fromCharCode(s);/*<<+marshal.js 352 10>>*/var/*<<+marshal.js 354 18>>*/q=J[u],p;/*<<+marshal.js 356 10>>*/if(!q)/*<<+marshal.js 357 12>>*/c("input_value: unknown custom block identifier");/*<<+marshal.js 358 10>>*/switch(k){case
0x12:/*<<+marshal.js 360 12>>*/break;case
0x19:/*<<+marshal.js 362 12>>*/if(!q.fixed_length)/*<<+marshal.js 363 14>>*/c("input_value: expected a fixed-size custom block");p=q.fixed_length;/*<<+marshal.js 365 12>>*/break;case
0x18:p=/*<<+marshal.js 367 28>>*/b.read32u();/*<<+marshal.js 369 12>>*/b.read32s();/*<<+marshal.js 369 30>>*/b.read32s();/*<<+marshal.js 370 12>>*/break}/*<<+marshal.js 352 10>>*/var/*<<+marshal.js 372 22>>*/v=b.i,/*<<+marshal.js 373 19>>*/m=[0],/*<<+marshal.js 374 16>>*/a=/*<<+marshal.js 374 18>>*/q.deserialize(b,m);/*<<+marshal.js 375 10>>*/if(p!=undefined)/*<<+marshal.js 375 40>>*/if(p!=m[0])/*<<+marshal.js 377 14>>*/c("input_value: incorrect length of serialized custom block");/*<<+marshal.js 379 10>>*/if(d)d[j++]=a;/*<<+marshal.js 380 10>>*/return a;default:/*<<+marshal.js 382 10>>*/c("input_value: ill-formed message")}/*<<+marshal.js 386 2>>*/}/*<<+marshal.js 387 2>>*/ /*<<+marshal.js 387 10>>*/var
m=/*<<+marshal.js 387 12>>*/g();/*<<+marshal.js 388 2>>*/while(n.length>0)/*<<+marshal.js 388 27>>*/{/*<<+marshal.js 389 4>>*/var/*<<+marshal.js 389 13>>*/i=/*<<+marshal.js 389 15>>*/n.pop(),/*<<+marshal.js 390 10>>*/a=/*<<+marshal.js 390 12>>*/n.pop(),/*<<+marshal.js 391 10>>*/f=a.length;/*<<+marshal.js 392 4>>*/if(f<i)/*<<+marshal.js 392 18>>*/n.push(a,i);a[f]=/*<<+marshal.js 393 11>>*/g()}/*<<+marshal.js 395 2>>*/if(typeof
h!="number")h[0]=b.i;/*<<+marshal.js 396 2>>*/return m/*<<+marshal.js 397 0>>*/}/*<<+mlBytes.js 794 0>>*/function
aR(a){/*<<+mlBytes.js 794 35>>*/return a/*<<+mlBytes.js 794 44>>*/}/*<<+marshal.js 141 0>>*/function
dX(c,a){/*<<+marshal.js 142 2>>*/ /*<<+marshal.js 142 13>>*/var
b=new
aW(/*<<+marshal.js 142 35>>*/aR(c),typeof
a=="number"?a:a[0]);/*<<+marshal.js 143 2>>*/return/*<<+marshal.js 143 9>>*/bT(b,a)/*<<+marshal.js 144 0>>*/}/*<<+mlBytes.js 219 0>>*/function
ei(b,a){/*<<+mlBytes.js 220 2>>*/if(a>>>0>=/*<<+mlBytes.js 220 17>>*/r(b))/*<<+mlBytes.js 220 43>>*/aE();/*<<+mlBytes.js 221 2>>*/return/*<<+mlBytes.js 221 9>>*/u(b,a)/*<<+mlBytes.js 222 0>>*/}/*<<+str.js 27 0>>*/ /*<<+str.js 27 13>>*/var
aU=/*<<+str.js 27 15>>*/function(){/*<<+str.js 28 2>>*/var/*<<+str.js 28 22>>*/b=[v,v,v,v,v,v,l,db,cl,l,l,0x87,cl,l,l,cs,v,v,v,v,v,v,v,v,l,l,c5,l,l,l,c5,l],/*<<+str.js 39 14>>*/c={CHAR:0,CHARNORM:1,STRING:2,STRINGNORM:3,CHARCLASS:4,BOL:5,EOL:6,WORDBOUNDARY:7,BEGGROUP:8,ENDGROUP:9,REFGROUP:10,ACCEPT:11,SIMPLEOPT:12,SIMPLESTAR:13,SIMPLEPLUS:14,GOTO:15,PUSHBACK:16,SETMARK:17,CHECKPROGRESS:18};/*<<+str.js 49 2>>*/function
t(a){/*<<+str.js 50 4>>*/return b[a>>3]>>(a&7)&1/*<<+str.js 51 2>>*/}/*<<+str.js 53 2>>*/function
q(b,a){/*<<+str.js 54 4>>*/return/*<<+str.js 54 12>>*/ei(b,a>>3)>>(a&7)&1/*<<+str.js 55 2>>*/}/*<<+str.js 57 2>>*/function
a(n,b,a,D){/*<<+str.js 59 4>>*/var/*<<+str.js 59 22>>*/y=/*<<+str.js 59 24>>*/L(n[1]),/*<<+str.js 60 22>>*/l=/*<<+str.js 60 24>>*/L(n[2]),/*<<+str.js 61 22>>*/x=/*<<+str.js 61 24>>*/o(n[3]),/*<<+str.js 62 22>>*/A=n[4]|0,/*<<+str.js 63 22>>*/B=n[5]|0,/*<<+str.js 64 22>>*/E=n[6]|0,/*<<+str.js 66 10>>*/b=/*<<+str.js 66 12>>*/aX(b),/*<<+str.js 68 11>>*/m=0,/*<<+str.js 69 13>>*/z=false,/*<<+str.js 70 14>>*/v=[],/*<<+str.js 71 15>>*/j=new
Array(A),/*<<+str.js 72 20>>*/s=new
Array(B);/*<<+str.js 74 4>>*/for(/*<<+str.js 74 14>>*/var
f=0;f<j.length;f++)/*<<+str.js 74 42>>*/j[f]={start:-1,end:-1};j[0].start=a;/*<<+str.js 79 18>>*/function
e(){/*<<+str.js 80 6>>*/while(v.length)/*<<+str.js 80 27>>*/{/*<<+str.js 81 8>>*/ /*<<+str.js 81 17>>*/var
b=/*<<+str.js 81 19>>*/v.pop();/*<<+str.js 82 8>>*/if(b.undo)/*<<+str.js 82 23>>*/b.undo.obj[b.undo.prop]=b.undo.value;else/*<<+str.js 85 13>>*/if(b.pos)/*<<+str.js 85 26>>*/{m=b.pos.pc;a=b.pos.txt;/*<<+str.js 88 10>>*/return}}z=true/*<<+str.js 79 20>>*/}/*<<+str.js 94 13>>*/function
r(a){/*<<+str.js 94 32>>*/v.push(a)/*<<+str.js 94 15>>*/}/*<<+str.js 96 15>>*/function
w(){j[0].end=a;/*<<+str.js 98 6>>*/ /*<<+str.js 98 17>>*/var
d=new
Array(1+j.length*2);d[0]=0;/*<<+str.js 100 6>>*/for(/*<<+str.js 100 16>>*/var
c=0;c<j.length;c++)/*<<+str.js 100 44>>*/{/*<<+str.js 101 8>>*/ /*<<+str.js 101 14>>*/var
b=j[c];/*<<+str.js 102 8>>*/if(b.start<0||b.end<0)/*<<+str.js 102 37>>*/b.start=b.end=-1;d[2*c+1]=b.start;d[2*c+1+1]=b.end}/*<<+str.js 108 6>>*/return d/*<<+str.js 96 17>>*/}/*<<+str.js 111 21>>*/function
k(){/*<<+str.js 112 6>>*/if(D)/*<<+str.js 112 18>>*/return/*<<+str.js 112 25>>*/w();else/*<<+str.js 113 11>>*/e()/*<<+str.js 111 23>>*/}/*<<+str.js 117 4>>*/while(!z)/*<<+str.js 117 18>>*/{/*<<+str.js 118 6>>*/var/*<<+str.js 118 13>>*/C=y[m]&h,/*<<+str.js 119 15>>*/u=y[m]>>8,/*<<+str.js 120 15>>*/d=u&h,/*<<+str.js 121 12>>*/g=b[a],i;m++;/*<<+str.js 126 6>>*/switch(C){case
c.CHAR:/*<<+str.js 128 8>>*/if(a===b.length)/*<<+str.js 128 29>>*/{/*<<+str.js 128 30>>*/k();/*<<+str.js 128 47>>*/break}/*<<+str.js 129 8>>*/if(g===d)a++;else/*<<+str.js 130 13>>*/e();/*<<+str.js 131 8>>*/break;case
c.CHARNORM:/*<<+str.js 133 8>>*/if(a===b.length)/*<<+str.js 133 29>>*/{/*<<+str.js 133 30>>*/k();/*<<+str.js 133 47>>*/break}/*<<+str.js 134 8>>*/if(/*<<+str.js 134 12>>*/x.charCodeAt(g)===d)a++;else/*<<+str.js 135 13>>*/e();/*<<+str.js 136 8>>*/break;case
c.STRING:/*<<+str.js 138 8>>*/for(var/*<<+str.js 138 21>>*/p=/*<<+str.js 138 23>>*/o(l[d]),/*<<+str.js 138 62>>*/f=0;f<p.length;f++)/*<<+str.js 138 88>>*/{/*<<+str.js 139 10>>*/if(a===b.length)/*<<+str.js 139 31>>*/{/*<<+str.js 139 32>>*/k();/*<<+str.js 139 49>>*/break}/*<<+str.js 140 10>>*/if(g===/*<<+str.js 140 20>>*/p.charCodeAt(f))g=b[++a];else/*<<+str.js 142 15>>*/{/*<<+str.js 142 17>>*/e();/*<<+str.js 142 30>>*/break}}/*<<+str.js 144 8>>*/break;case
c.STRINGNORM:/*<<+str.js 146 8>>*/for(var/*<<+str.js 146 21>>*/p=/*<<+str.js 146 23>>*/o(l[d]),/*<<+str.js 146 62>>*/f=0;f<p.length;f++)/*<<+str.js 146 88>>*/{/*<<+str.js 147 10>>*/if(a===b.length)/*<<+str.js 147 31>>*/{/*<<+str.js 147 32>>*/k();/*<<+str.js 147 49>>*/break}/*<<+str.js 148 10>>*/if(/*<<+str.js 148 14>>*/x.charCodeAt(g)===/*<<+str.js 148 42>>*/p.charCodeAt(f))g=b[++a];else/*<<+str.js 150 15>>*/{/*<<+str.js 150 17>>*/e();/*<<+str.js 150 30>>*/break}}/*<<+str.js 152 8>>*/break;case
c.CHARCLASS:/*<<+str.js 154 6>>*/if(a===b.length)/*<<+str.js 154 27>>*/{/*<<+str.js 154 28>>*/k();/*<<+str.js 154 45>>*/break}/*<<+str.js 155 8>>*/if(/*<<+str.js 155 12>>*/q(l[d],g))a++;else/*<<+str.js 156 13>>*/e();/*<<+str.js 157 8>>*/break;case
c.BOL:/*<<+str.js 159 8>>*/if(a>0&&b[a-1]!=10)/*<<+str.js 159 49>>*/ /*<<+str.js 159 50>>*/e();/*<<+str.js 160 8>>*/break;case
c.EOL:/*<<+str.js 162 8>>*/if(a<b.length&&b[a]!=10)/*<<+str.js 162 52>>*/ /*<<+str.js 162 53>>*/e();/*<<+str.js 163 8>>*/break;case
c.WORDBOUNDARY:/*<<+str.js 165 8>>*/if(a==0)/*<<+str.js 165 21>>*/{/*<<+str.js 166 10>>*/if(a===b.length)/*<<+str.js 166 31>>*/{/*<<+str.js 166 32>>*/k();/*<<+str.js 166 49>>*/break}/*<<+str.js 167 10>>*/if(/*<<+str.js 167 13>>*/t(b[0]))/*<<+str.js 167 35>>*/break;/*<<+str.js 168 10>>*/e()}else/*<<+str.js 170 13>>*/if(a===b.length)/*<<+str.js 170 35>>*/{/*<<+str.js 171 10>>*/if(/*<<+str.js 171 13>>*/t(b[a-1]))/*<<+str.js 171 41>>*/break;/*<<+str.js 172 10>>*/e()}else/*<<+str.js 174 13>>*/{/*<<+str.js 175 10>>*/if(/*<<+str.js 175 13>>*/t(b[a-1])!=/*<<+str.js 175 43>>*/t(b[a]))/*<<+str.js 175 67>>*/break;/*<<+str.js 176 10>>*/e()}/*<<+str.js 178 8>>*/break;case
c.BEGGROUP:i=j[d];/*<<+str.js 181 8>>*/r({undo:{obj:i,prop:"start",value:i.start}});i.start=a;/*<<+str.js 185 8>>*/break;case
c.ENDGROUP:i=j[d];/*<<+str.js 188 8>>*/r({undo:{obj:i,prop:"end",value:i.end}});i.end=a;/*<<+str.js 192 8>>*/break;case
c.REFGROUP:i=j[d];/*<<+str.js 195 8>>*/if(i.start<0||i.end<0)/*<<+str.js 195 45>>*/{/*<<+str.js 195 46>>*/e();/*<<+str.js 195 60>>*/break}/*<<+str.js 196 8>>*/for(/*<<+str.js 196 19>>*/var
f=i.start;f<i.end;f++)/*<<+str.js 196 53>>*/{/*<<+str.js 197 10>>*/if(a===b.length)/*<<+str.js 197 31>>*/{/*<<+str.js 197 32>>*/k();/*<<+str.js 197 49>>*/break}/*<<+str.js 198 10>>*/if(b[f]!=b[a])/*<<+str.js 198 29>>*/{/*<<+str.js 198 30>>*/e();/*<<+str.js 198 44>>*/break}a++}/*<<+str.js 201 8>>*/break;case
c.SIMPLEOPT:/*<<+str.js 203 8>>*/if(/*<<+str.js 203 12>>*/q(l[d],g))a++;/*<<+str.js 204 8>>*/break;case
c.SIMPLESTAR:/*<<+str.js 206 8>>*/while(/*<<+str.js 206 15>>*/q(l[d],g))g=b[++a];/*<<+str.js 208 8>>*/break;case
c.SIMPLEPLUS:/*<<+str.js 210 8>>*/if(a===b.length)/*<<+str.js 210 29>>*/{/*<<+str.js 210 30>>*/k();/*<<+str.js 210 47>>*/break}/*<<+str.js 211 8>>*/if(/*<<+str.js 211 12>>*/q(l[d],g))/*<<+str.js 211 39>>*/do/*<<+str.js 212 13>>*/g=b[++a];while(/*<<+str.js 214 19>>*/q(l[d],g));else/*<<+str.js 216 13>>*/e();/*<<+str.js 217 8>>*/break;case
c.ACCEPT:/*<<+str.js 219 8>>*/return/*<<+str.js 219 15>>*/w();case
c.GOTO:m=m+u;/*<<+str.js 222 8>>*/break;case
c.PUSHBACK:/*<<+str.js 224 8>>*/r({pos:{pc:m+u,txt:a}});/*<<+str.js 225 8>>*/break;case
c.SETMARK:/*<<+str.js 227 8>>*/r({undo:{obj:s,prop:d,value:s[d]}});s[d]=a;/*<<+str.js 231 8>>*/break;case
c.CHECKPROGRESS:/*<<+str.js 233 8>>*/if(s[d]===a)/*<<+str.js 233 39>>*/e();/*<<+str.js 234 8>>*/break;default:/*<<+str.js 235 15>>*/throw new
Error("Invalid bytecode")}}/*<<+str.js 238 4>>*/return 0/*<<+str.js 239 2>>*/}/*<<+str.js 241 2>>*/return a/*<<+str.js 27 15>>*/}();/*<<+str.js 261 0>>*/function
j9(e,c,a){/*<<+str.js 262 2>>*/if(a<0||a>/*<<+str.js 262 22>>*/r(c))/*<<+str.js 263 4>>*/d("Str.search_backward");/*<<+str.js 264 2>>*/while(a>=0)/*<<+str.js 264 19>>*/{/*<<+str.js 265 4>>*/ /*<<+str.js 265 12>>*/var
b=/*<<+str.js 265 14>>*/aU(e,c,a,0);/*<<+str.js 266 4>>*/if(b)/*<<+str.js 266 13>>*/return b;a--}/*<<+str.js 270 2>>*/return[0]/*<<+str.js 271 0>>*/}/*<<+mlBytes.js 857 0>>*/function
hq(a){/*<<+mlBytes.js 858 2>>*/return/*<<+mlBytes.js 858 9>>*/t(a)/*<<+mlBytes.js 859 0>>*/}/*<<+bigarray.js 519 0>>*/function
fd(a,e,g){/*<<+bigarray.js 520 2>>*/var
f,/*<<+bigarray.js 521 10>>*/c=1;/*<<+bigarray.js 522 2>>*/if(a.layout==0)/*<<+bigarray.js 522 22>>*/{/*<<+bigarray.js 523 4>>*/for(/*<<+bigarray.js 523 15>>*/var
b=1;b<a.dims.length;b++)c=c*a.dims[b];f=0}else/*<<+bigarray.js 526 9>>*/{/*<<+bigarray.js 527 4>>*/for(/*<<+bigarray.js 527 15>>*/var
b=0;b<a.dims.length-1;b++)c=c*a.dims[b];f=a.dims.length-1;e=e-1}/*<<+bigarray.js 532 2>>*/if(e<0||g<0||e+g>a.dims[f])/*<<+bigarray.js 532 63>>*/ /*<<+bigarray.js 533 4>>*/d("Bigarray.sub: bad sub-array");/*<<+bigarray.js 520 2>>*/ /*<<+bigarray.js 535 15>>*/var
h=[];/*<<+bigarray.js 536 2>>*/for(/*<<+bigarray.js 536 13>>*/var
b=0;b<a.dims.length;b++)h[b]=a.dims[b];h[f]=g;c*=/*<<+bigarray.js 539 9>>*/aA(a.kind);/*<<+bigarray.js 520 2>>*/ /*<<+bigarray.js 540 15>>*/var
i=/*<<+bigarray.js 540 17>>*/a.data.subarray(e*c,(e+g)*c);/*<<+bigarray.js 541 2>>*/return/*<<+bigarray.js 541 9>>*/H(a.kind,a.layout,h,i)/*<<+bigarray.js 542 0>>*/}/*<<+gc.js 8 0>>*/function
ga(){/*<<+gc.js 8 31>>*/return 0/*<<+gc.js 8 39>>*/}/*<<+mlBytes.js 340 0>>*/function
dD(b,a,c){/*<<+mlBytes.js 341 2>>*/if(a>>>0>=b.l-3)/*<<+mlBytes.js 341 26>>*/ad();/*<<+mlBytes.js 342 2>>*/var/*<<+mlBytes.js 342 9>>*/g=l&c>>24,/*<<+mlBytes.js 343 9>>*/f=l&c>>16,/*<<+mlBytes.js 344 9>>*/e=l&c>>8,/*<<+mlBytes.js 345 9>>*/d=l&c;/*<<+mlBytes.js 346 2>>*/X(b,a+0,d);/*<<+mlBytes.js 347 2>>*/X(b,a+1,e);/*<<+mlBytes.js 348 2>>*/X(b,a+2,f);/*<<+mlBytes.js 349 2>>*/X(b,a+3,g);/*<<+mlBytes.js 350 2>>*/return 0/*<<+mlBytes.js 351 0>>*/}/*<<+graphics.js 482 0>>*/function
gM(){/*<<+graphics.js 482 32>>*/return 0/*<<+graphics.js 482 40>>*/}/*<<+bigarray.js 460 0>>*/function
fj(a,d,c){/*<<+bigarray.js 461 2>>*/ /*<<+bigarray.js 461 10>>*/var
b=/*<<+bigarray.js 461 12>>*/a.offset(d);/*<<+bigarray.js 462 2>>*/if(b+3>=a.data.length)/*<<+bigarray.js 462 32>>*/n();/*<<+bigarray.js 463 2>>*/a.set(b+0,c&h);/*<<+bigarray.js 464 2>>*/a.set(b+1,c>>>8&h);/*<<+bigarray.js 465 2>>*/a.set(b+2,c>>>16&h);/*<<+bigarray.js 466 2>>*/a.set(b+3,c>>>24&h);/*<<+bigarray.js 467 2>>*/return 0/*<<+bigarray.js 468 0>>*/}/*<<+sys.js 169 0>>*/function
jr(){/*<<+sys.js 169 41>>*/return 1/*<<+sys.js 169 51>>*/}/*<<+ieee_754.js 261 0>>*/function
i7(a){/*<<+ieee_754.js 262 2>>*/if(a==0)a=1/a;/*<<+ieee_754.js 263 2>>*/return a<0?1:0/*<<+ieee_754.js 264 0>>*/}/*<<+graphics.js 235 0>>*/function
gr(){/*<<+graphics.js 236 2>>*/ /*<<+graphics.js 236 8>>*/var
a=/*<<+graphics.js 236 10>>*/k();/*<<+graphics.js 237 2>>*/return a.x/*<<+graphics.js 238 0>>*/}/*<<+graphics.js 305 0>>*/function
dM(b){/*<<+graphics.js 306 2>>*/ /*<<+graphics.js 306 8>>*/var
a=/*<<+graphics.js 306 10>>*/k();a.line_width=b;a.context.lineWidth=b;/*<<+graphics.js 309 2>>*/return 0/*<<+graphics.js 310 0>>*/}/*<<+graphics.js 371 0>>*/function
dL(b){/*<<+graphics.js 372 2>>*/ /*<<+graphics.js 372 8>>*/var
a=/*<<+graphics.js 372 10>>*/k();a.font=b;a.context.font=a.text_size+cn+/*<<+graphics.js 374 41>>*/t(a.font);/*<<+graphics.js 375 2>>*/return 0/*<<+graphics.js 376 0>>*/}/*<<+graphics.js 182 0>>*/function
dK(a){/*<<+graphics.js 183 2>>*/ /*<<+graphics.js 183 8>>*/var
c=/*<<+graphics.js 183 10>>*/k();/*<<+graphics.js 184 2>>*/function
b(b){/*<<+graphics.js 185 4>>*/ /*<<+graphics.js 185 12>>*/var
a=e+/*<<+graphics.js 185 19>>*/b.toString(16);/*<<+graphics.js 186 4>>*/while(a.length<2)a=x+a;/*<<+graphics.js 187 4>>*/return a/*<<+graphics.js 188 2>>*/}/*<<+graphics.js 189 2>>*/var/*<<+graphics.js 190 4>>*/i=a>>16&h,/*<<+graphics.js 191 4>>*/g=a>>8&h,/*<<+graphics.js 192 4>>*/f=a>>0&h;c.color=a;/*<<+graphics.js 189 2>>*/ /*<<+graphics.js 194 12>>*/var
d="#"+/*<<+graphics.js 194 20>>*/b(i)+/*<<+graphics.js 194 33>>*/b(g)+/*<<+graphics.js 194 46>>*/b(f);c.context.fillStyle=d;c.context.strokeStyle=d;/*<<+graphics.js 197 2>>*/return 0/*<<+graphics.js 198 0>>*/}/*<<+graphics.js 226 0>>*/function
dI(b,c){/*<<+graphics.js 227 2>>*/ /*<<+graphics.js 227 8>>*/var
a=/*<<+graphics.js 227 10>>*/k();a.x=b;a.y=c;/*<<+graphics.js 230 2>>*/return 0/*<<+graphics.js 231 0>>*/}/*<<+graphics.js 147 0>>*/function
dJ(c,b){/*<<+graphics.js 148 2>>*/ /*<<+graphics.js 148 8>>*/var
a=/*<<+graphics.js 148 10>>*/k();a.width=c;a.height=b;a.canvas.width=c;a.canvas.height=b;/*<<+graphics.js 153 2>>*/return 0/*<<+graphics.js 154 0>>*/}/*<<+graphics.js 88 0>>*/function
dQ(){/*<<+graphics.js 89 2>>*/dI(C.x,C.y);/*<<+graphics.js 90 2>>*/dJ(C.width,C.height);/*<<+graphics.js 91 2>>*/dM(C.line_width);/*<<+graphics.js 92 2>>*/dN(C.text_size);/*<<+graphics.js 93 2>>*/dL(C.font);/*<<+graphics.js 94 2>>*/dK(C.color);/*<<+graphics.js 95 2>>*/dO(C.title);C.context.textBaseline="bottom"/*<<+graphics.js 98 0>>*/}/*<<+bigarray.js 879 0>>*/function
ds(e){/*<<+bigarray.js 880 2>>*/var/*<<+bigarray.js 880 8>>*/c=a,b;/*<<+bigarray.js 882 2>>*/if(e
instanceof
c.Float32Array)b=0;else/*<<+bigarray.js 883 7>>*/if(e
instanceof
c.Float64Array)b=1;else/*<<+bigarray.js 884 7>>*/if(e
instanceof
c.Int8Array)b=2;else/*<<+bigarray.js 885 7>>*/if(e
instanceof
c.Uint8Array)b=3;else/*<<+bigarray.js 886 7>>*/if(e
instanceof
c.Int16Array)b=4;else/*<<+bigarray.js 887 7>>*/if(e
instanceof
c.Uint16Array)b=5;else/*<<+bigarray.js 888 7>>*/if(e
instanceof
c.Int32Array)b=6;else/*<<+bigarray.js 889 7>>*/if(e
instanceof
c.Uint32Array)b=6;else/*<<+bigarray.js 890 7>>*/d("caml_ba_kind_of_typed_array: unsupported kind");/*<<+bigarray.js 891 2>>*/return b/*<<+bigarray.js 892 0>>*/}/*<<+bigarray.js 897 0>>*/function
e0(a){/*<<+bigarray.js 898 2>>*/ /*<<+bigarray.js 898 11>>*/var
b=/*<<+bigarray.js 898 13>>*/ds(a);/*<<+bigarray.js 899 2>>*/return/*<<+bigarray.js 899 9>>*/H(b,0,[a.length],a)/*<<+bigarray.js 900 0>>*/}/*<<+io.js 409 0>>*/function
is(a,b){/*<<+io.js 410 2>>*/aq(a);g[a].offset=b;/*<<+io.js 412 2>>*/return 0/*<<+io.js 413 0>>*/}/*<<+jslib.js 36 0>>*/function
hI(a){/*<<+jslib.js 36 29>>*/return typeof
a/*<<+jslib.js 36 46>>*/}/*<<+backtrace.js 38 0>>*/function
i0(b,a){/*<<+backtrace.js 38 47>>*/return 0/*<<+backtrace.js 38 56>>*/}/*<<+graphics.js 247 0>>*/function
gE(b,c){/*<<+graphics.js 248 2>>*/ /*<<+graphics.js 248 8>>*/var
a=/*<<+graphics.js 248 10>>*/k();/*<<+graphics.js 249 2>>*/a.context.beginPath();/*<<+graphics.js 250 2>>*/a.context.moveTo(a.x,a.height-a.y);/*<<+graphics.js 251 2>>*/a.context.lineTo(b,a.height-c);/*<<+graphics.js 252 2>>*/a.context.stroke();a.x=b;a.y=c;/*<<+graphics.js 255 2>>*/return 0/*<<+graphics.js 256 0>>*/}/*<<+jslib_js_of_ocaml.js 204 0>>*/function
hQ(d){/*<<+jslib_js_of_ocaml.js 205 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 206 4>>*/var/*<<+jslib_js_of_ocaml.js 206 12>>*/c=arguments.length,/*<<+jslib_js_of_ocaml.js 207 13>>*/b=new
Array(c+1);b[0]=this;/*<<+jslib_js_of_ocaml.js 209 4>>*/for(/*<<+jslib_js_of_ocaml.js 209 15>>*/var
a=0;a<c;a++)b[a+1]=arguments[a];/*<<+jslib_js_of_ocaml.js 210 4>>*/return/*<<+jslib_js_of_ocaml.js 210 11>>*/d.apply(null,b)/*<<+jslib_js_of_ocaml.js 205 9>>*/}/*<<+jslib_js_of_ocaml.js 211 0>>*/}/*<<+bigarray.js 374 0>>*/function
eY(a){/*<<+bigarray.js 375 2>>*/return/*<<+bigarray.js 375 9>>*/aY(a,2)/*<<+bigarray.js 376 0>>*/}/*<<+weak.js 32 0>>*/ /*<<+weak.js 32 26>>*/var
Y=2;/*<<+weak.js 171 0>>*/function
fL(a){/*<<+weak.js 172 2>>*/return a[Y]===undefined?0:1/*<<+weak.js 176 0>>*/}/*<<+mlBytes.js 236 0>>*/function
fs(b,a){/*<<+mlBytes.js 237 2>>*/if(a>>>0>=b.l-1)/*<<+mlBytes.js 237 26>>*/ad();/*<<+mlBytes.js 238 2>>*/var/*<<+mlBytes.js 238 9>>*/c=/*<<+mlBytes.js 238 11>>*/y(b,a),/*<<+mlBytes.js 239 9>>*/d=/*<<+mlBytes.js 239 11>>*/y(b,a+1);/*<<+mlBytes.js 240 2>>*/return d<<8|c/*<<+mlBytes.js 241 0>>*/}/*<<+obj.js 83 0>>*/function
iH(a,b){a[0]=aV;a[1]=b;/*<<+obj.js 86 2>>*/return 0/*<<+obj.js 87 0>>*/}/*<<+jslib_js_of_ocaml.js 23 0>>*/function
ho(a){/*<<+jslib_js_of_ocaml.js 23 32>>*/return!!a/*<<+jslib_js_of_ocaml.js 23 44>>*/}/*<<+io.js 93 0>>*/function
iv(){/*<<+io.js 94 2>>*/return 0/*<<+io.js 95 0>>*/}/*<<+graphics.js 127 0>>*/function
go(){/*<<+graphics.js 128 2>>*/ /*<<+graphics.js 128 8>>*/var
a=/*<<+graphics.js 128 10>>*/k();a.canvas.width=0;a.canvas.height=0;/*<<+graphics.js 131 2>>*/return 0/*<<+graphics.js 132 0>>*/}/*<<+mlBytes.js 489 0>>*/function
fH(a){/*<<+mlBytes.js 490 2>>*/if(a<0)/*<<+mlBytes.js 490 14>>*/d("String.create");/*<<+mlBytes.js 491 2>>*/return new
Q(a?2:9,e,a)/*<<+mlBytes.js 492 0>>*/}/*<<+md5.js 36 0>>*/function
ed(c,b,a){/*<<+md5.js 37 2>>*/return/*<<+md5.js 37 9>>*/ec(/*<<+md5.js 37 24>>*/am(c),b,a)/*<<+md5.js 38 0>>*/}/*<<+md5.js 24 0>>*/function
h4(e,a){/*<<+md5.js 25 2>>*/var/*<<+md5.js 25 11>>*/b=g[e],/*<<+md5.js 26 15>>*/d=/*<<+md5.js 26 17>>*/b.file.length();/*<<+md5.js 27 2>>*/if(a<0)a=d-b.offset;/*<<+md5.js 28 2>>*/if(b.offset+a>d)/*<<+md5.js 28 35>>*/bh();/*<<+md5.js 25 2>>*/ /*<<+md5.js 29 10>>*/var
c=/*<<+md5.js 29 12>>*/I(a);/*<<+md5.js 30 2>>*/b.file.read(b.offset,c,0,a);/*<<+md5.js 31 2>>*/return/*<<+md5.js 31 9>>*/ed(/*<<+md5.js 31 25>>*/aR(c),0,a)/*<<+md5.js 32 0>>*/}/*<<+obj.js 66 0>>*/function
bZ(d){/*<<+obj.js 67 2>>*/var/*<<+obj.js 67 8>>*/c=d.length,/*<<+obj.js 68 8>>*/b=new
Array(c);/*<<+obj.js 69 2>>*/for(/*<<+obj.js 69 12>>*/var
a=0;a<c;a++)b[a]=d[a];/*<<+obj.js 70 2>>*/return b/*<<+obj.js 71 0>>*/}/*<<+weak.js 61 0>>*/function
eu(c,b){/*<<+weak.js 62 2>>*/if(b<0||K+b>=c.length)/*<<+weak.js 63 4>>*/d("Weak.get_copy");/*<<+weak.js 64 2>>*/ /*<<+weak.js 64 8>>*/var
a=/*<<+weak.js 64 10>>*/b7(c,b);/*<<+weak.js 65 2>>*/if(a===0)/*<<+weak.js 65 15>>*/return a;/*<<+weak.js 64 2>>*/ /*<<+weak.js 66 8>>*/var
e=a[1];/*<<+weak.js 67 2>>*/if(e
instanceof
Array)/*<<+weak.js 67 26>>*/return[0,/*<<+weak.js 67 37>>*/bZ(e)];/*<<+weak.js 68 2>>*/return a/*<<+weak.js 69 0>>*/}/*<<+io.js 360 0>>*/function
ee(h,d,i,f){/*<<+io.js 361 2>>*/ /*<<+io.js 361 11>>*/var
b=g[h];/*<<+io.js 362 2>>*/if(!b.opened)/*<<+io.js 362 20>>*/j("Cannot output to a closed channel");/*<<+io.js 361 2>>*/var
a;/*<<+io.js 364 2>>*/if(i==0&&/*<<+io.js 364 20>>*/ag(d)==f)a=d;else/*<<+io.js 366 7>>*/{a=/*<<+io.js 367 12>>*/I(f);/*<<+io.js 368 4>>*/ah(d,i,a,0,f)}/*<<+io.js 361 2>>*/var/*<<+io.js 370 13>>*/k=/*<<+io.js 370 15>>*/aR(a),/*<<+io.js 371 15>>*/c=/*<<+io.js 371 17>>*/o(k),/*<<+io.js 372 9>>*/e=/*<<+io.js 372 11>>*/c.lastIndexOf("\n");/*<<+io.js 373 2>>*/if(e<0)b.buffer+=c;else/*<<+io.js 375 7>>*/{b.buffer+=/*<<+io.js 376 17>>*/c.substr(0,e+1);/*<<+io.js 377 4>>*/aq(h);b.buffer+=/*<<+io.js 378 19>>*/c.substr(e+1)}/*<<+io.js 380 2>>*/return 0/*<<+io.js 381 0>>*/}/*<<+io.js 385 0>>*/function
bb(b,a,d,c){/*<<+io.js 386 2>>*/return/*<<+io.js 386 9>>*/ee(b,/*<<+io.js 386 37>>*/am(a),d,c)/*<<+io.js 387 0>>*/}/*<<+weak.js 134 0>>*/function
fO(a){/*<<+weak.js 135 2>>*/return a[Y]===undefined?0:[0,a[Y]]/*<<+weak.js 139 0>>*/}/*<<+jslib_js_of_ocaml.js 257 0>>*/function
jS(d){/*<<+jslib_js_of_ocaml.js 258 2>>*/ /*<<+jslib_js_of_ocaml.js 258 8>>*/var
b=a;/*<<+jslib_js_of_ocaml.js 259 2>>*/if(typeof
b.XMLHttpRequest!=="undefined")/*<<+jslib_js_of_ocaml.js 260 4>>*/try{/*<<+jslib_js_of_ocaml.js 260 10>>*/return new(b.XMLHttpRequest)()}catch(a){}/*<<+jslib_js_of_ocaml.js 262 2>>*/if(typeof
b.activeXObject!=="undefined")/*<<+jslib_js_of_ocaml.js 262 45>>*/{/*<<+jslib_js_of_ocaml.js 263 4>>*/try{/*<<+jslib_js_of_ocaml.js 263 10>>*/return new(b.activeXObject)("Msxml2.XMLHTTP")}catch(a){}/*<<+jslib_js_of_ocaml.js 264 4>>*/try{/*<<+jslib_js_of_ocaml.js 264 10>>*/return new(b.activeXObject)("Msxml3.XMLHTTP")}catch(a){}/*<<+jslib_js_of_ocaml.js 265 4>>*/try{/*<<+jslib_js_of_ocaml.js 265 10>>*/return new(b.activeXObject)("Microsoft.XMLHTTP")}catch(a){}}/*<<+jslib_js_of_ocaml.js 267 2>>*/c("Cannot create a XMLHttpRequest")/*<<+jslib_js_of_ocaml.js 268 0>>*/}/*<<+jslib.js 93 0>>*/function
jO(b,a){/*<<+jslib.js 94 2>>*/return{joo_tramp:b,joo_args:a}/*<<+jslib.js 95 0>>*/}/*<<+array.js 31 0>>*/function
eN(c,d){/*<<+array.js 32 2>>*/var/*<<+array.js 32 9>>*/g=c.length,/*<<+array.js 32 25>>*/h=d.length,/*<<+array.js 33 8>>*/f=g+h-1,/*<<+array.js 34 8>>*/b=new
Array(f);b[0]=0;/*<<+array.js 32 2>>*/var/*<<+array.js 36 8>>*/a=1,/*<<+array.js 36 14>>*/e=1;/*<<+array.js 37 2>>*/for(;a<g;a++)b[a]=c[a];/*<<+array.js 38 2>>*/for(;a<f;a++,e++)b[a]=d[e];/*<<+array.js 39 2>>*/return b/*<<+array.js 40 0>>*/}/*<<+io.js 205 0>>*/function
ix(a,b){g[a].refill=b;/*<<+io.js 207 2>>*/return 0/*<<+io.js 208 0>>*/}/*<<+jslib_js_of_ocaml.js 222 0>>*/function
hn(a){/*<<+jslib_js_of_ocaml.js 223 2>>*/aT("caml_js_expr: fallback to runtime evaluation\n");/*<<+jslib_js_of_ocaml.js 224 2>>*/return/*<<+jslib_js_of_ocaml.js 224 9>>*/eval(/*<<+jslib_js_of_ocaml.js 224 14>>*/t(a))/*<<+jslib_js_of_ocaml.js 224 42>>*/}/*<<+int64.js 232 0>>*/function
d5(a,b){/*<<+int64.js 232 31>>*/return/*<<+int64.js 232 38>>*/a.mul(b)/*<<+int64.js 232 47>>*/}/*<<+sys.js 223 0>>*/function
ip(a){/*<<+sys.js 224 2>>*/return b4/*<<+sys.js 225 0>>*/}/*<<+marshal.js 650 0>>*/function
iP(b,a){/*<<+marshal.js 651 2>>*/return/*<<+marshal.js 651 9>>*/aZ(/*<<+marshal.js 651 30>>*/be(b,a))/*<<+marshal.js 652 0>>*/}/*<<+hash.js 25 0>>*/function
gX(e,h,a){/*<<+hash.js 26 2>>*/ /*<<+hash.js 26 16>>*/var
c=0;/*<<+hash.js 27 2>>*/function
g(a){h--;/*<<+hash.js 29 4>>*/if(e<0||h<0)/*<<+hash.js 29 32>>*/return;/*<<+hash.js 30 4>>*/if(a
instanceof
Array&&a[0]===(a[0]|0))/*<<+hash.js 30 55>>*/switch(a[0]){case
248:e--;c=c*bn+a[2]|0;/*<<+hash.js 36 8>>*/break;case
250:h++;/*<<+hash.js 39 17>>*/g(a);/*<<+hash.js 39 32>>*/break;default:e--;c=c*19+a[0]|0;/*<<+hash.js 43 8>>*/for(/*<<+hash.js 43 19>>*/var
b=a.length-1;b>0;b--)/*<<+hash.js 43 49>>*/g(a[b])}else/*<<+hash.js 45 11>>*/if(/*<<+hash.js 45 15>>*/af(a))/*<<+hash.js 45 38>>*/{e--;/*<<+hash.js 47 6>>*/switch(a.t&6){default:/*<<+hash.js 49 8>>*/B(a);case
0:/*<<+hash.js 51 8>>*/for(var/*<<+hash.js 51 19>>*/f=a.c,/*<<+hash.js 51 30>>*/d=/*<<+hash.js 51 32>>*/ag(a),/*<<+hash.js 51 61>>*/b=0;b<d;b++)c=c*19+/*<<+hash.js 52 40>>*/f.charCodeAt(b)|0;/*<<+hash.js 53 8>>*/break;case
2:/*<<+hash.js 55 8>>*/for(var/*<<+hash.js 55 19>>*/j=a.c,/*<<+hash.js 55 30>>*/d=/*<<+hash.js 55 32>>*/ag(a),/*<<+hash.js 55 61>>*/b=0;b<d;b++)c=c*19+j[b]|0}}else/*<<+hash.js 58 11>>*/if(/*<<+hash.js 58 15>>*/ap(a))/*<<+hash.js 58 39>>*/{/*<<+hash.js 59 8>>*/ /*<<+hash.js 59 20>>*/var
i=/*<<+hash.js 59 22>>*/o(a);/*<<+hash.js 60 8>>*/for(var/*<<+hash.js 60 19>>*/f=i,/*<<+hash.js 60 32>>*/d=i.length,/*<<+hash.js 60 52>>*/b=0;b<d;b++)c=c*19+/*<<+hash.js 61 40>>*/f.charCodeAt(b)|0}else/*<<+hash.js 62 11>>*/if(typeof
a==="string")/*<<+hash.js 62 40>>*/for(var/*<<+hash.js 63 19>>*/f=a,/*<<+hash.js 63 28>>*/d=a.length,/*<<+hash.js 63 44>>*/b=0;b<d;b++)c=c*19+/*<<+hash.js 64 40>>*/f.charCodeAt(b)|0;else/*<<+hash.js 65 11>>*/if(a===(a|0))/*<<+hash.js 65 32>>*/{e--;c=c*bn+a|0}else/*<<+hash.js 69 11>>*/if(a===+a)/*<<+hash.js 69 29>>*/{e--;/*<<+hash.js 72 6>>*/ /*<<+hash.js 72 12>>*/var
l=/*<<+hash.js 72 14>>*/Z(/*<<+hash.js 72 35>>*/ao(a));/*<<+hash.js 73 6>>*/for(/*<<+hash.js 73 17>>*/var
b=7;b>=0;b--)c=c*19+l[b]|0}else/*<<+hash.js 74 11>>*/if(a&&a.caml_custom)/*<<+hash.js 74 38>>*/if(J[a.caml_custom]&&J[a.caml_custom].hash)/*<<+hash.js 75 84>>*/{/*<<+hash.js 76 8>>*/ /*<<+hash.js 76 14>>*/var
k=/*<<+hash.js 76 16>>*/J[a.caml_custom].hash(a)|0;c=c*bn+k|0}/*<<+hash.js 80 2>>*/}/*<<+hash.js 81 2>>*/g(a);/*<<+hash.js 82 2>>*/return c&ck/*<<+hash.js 83 0>>*/}/*<<+mlBytes.js 774 0>>*/function
b6(a,b){/*<<+mlBytes.js 775 2>>*/return/*<<+mlBytes.js 775 9>>*/dy(a,b)/*<<+mlBytes.js 776 0>>*/}/*<<+marshal.js 656 0>>*/function
iO(f,e,d,g,b){/*<<+marshal.js 657 2>>*/ /*<<+marshal.js 657 8>>*/var
a=/*<<+marshal.js 657 10>>*/be(g,b);/*<<+marshal.js 658 2>>*/if(a.length>d)/*<<+marshal.js 658 22>>*/c("Marshal.to_buffer: buffer overflow");/*<<+marshal.js 659 2>>*/ah(a,0,f,e,a.length);/*<<+marshal.js 660 2>>*/return 0/*<<+marshal.js 661 0>>*/}/*<<+str.js 299 0>>*/function
j8(b,i,j){/*<<+str.js 300 2>>*/var/*<<+str.js 300 11>>*/b=/*<<+str.js 300 13>>*/o(b),/*<<+str.js 301 10>>*/m=b.length,/*<<+str.js 302 11>>*/j=/*<<+str.js 302 13>>*/o(j),/*<<+str.js 303 10>>*/d=e,/*<<+str.js 304 8>>*/h=0,a,k,l,g;/*<<+str.js 307 2>>*/while(h<m)/*<<+str.js 307 16>>*/{a=/*<<+str.js 308 10>>*/b.charAt(h++);/*<<+str.js 309 4>>*/if(a!=dk)/*<<+str.js 309 19>>*/d+=a;else/*<<+str.js 312 9>>*/{/*<<+str.js 313 6>>*/if(h==m)/*<<+str.js 313 19>>*/c("Str.replace: illegal backslash sequence");a=/*<<+str.js 314 12>>*/b.charAt(h++);/*<<+str.js 315 6>>*/switch(a){case"\\":d+=a;/*<<+str.js 318 8>>*/break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":g=+a;/*<<+str.js 322 8>>*/if(g*2>=i.length-1)/*<<+str.js 323 10>>*/c(cS);k=/*<<+str.js 324 16>>*/bD(i,g*2);l=/*<<+str.js 325 14>>*/bD(i,g*2+1);/*<<+str.js 326 8>>*/if(k==-1)/*<<+str.js 327 10>>*/c(cS);d+=/*<<+str.js 328 13>>*/j.slice(k,l);/*<<+str.js 329 8>>*/break;default:d+=dk+a}}}/*<<+str.js 335 2>>*/return/*<<+str.js 335 9>>*/f(d)/*<<+str.js 335 38>>*/}/*<<+jslib_js_of_ocaml.js 229 0>>*/function
iR(a){/*<<+jslib_js_of_ocaml.js 230 2>>*/aT("caml_pure_js_expr: fallback to runtime evaluation\n");/*<<+jslib_js_of_ocaml.js 231 2>>*/return/*<<+jslib_js_of_ocaml.js 231 9>>*/eval(/*<<+jslib_js_of_ocaml.js 231 14>>*/t(a))/*<<+jslib_js_of_ocaml.js 231 42>>*/}/*<<+nat.js 59 0>>*/function
eL(c,e,d,f,b){/*<<+nat.js 60 2>>*/for(/*<<+nat.js 60 12>>*/var
a=0;a<b;a++)/*<<+nat.js 60 31>>*/c.data[e+a]=d.data[f+a];/*<<+nat.js 63 2>>*/return 0/*<<+nat.js 64 0>>*/}/*<<+int64.js 216 0>>*/function
a9(a,b){/*<<+int64.js 216 31>>*/return/*<<+int64.js 216 38>>*/a.ucompare(b)<0/*<<+int64.js 216 57>>*/}/*<<+int64.js 247 0>>*/function
hd(a,b){/*<<+int64.js 247 33>>*/return/*<<+int64.js 247 40>>*/a.xor(b)/*<<+int64.js 247 49>>*/}/*<<+bigstring.js 108 0>>*/function
dv(b,g,e,f,a){/*<<+bigstring.js 109 2>>*/if(12!=b.kind)/*<<+bigstring.js 110 4>>*/d(br);/*<<+bigstring.js 111 2>>*/if(a==0)/*<<+bigstring.js 111 15>>*/return 0;/*<<+bigstring.js 112 2>>*/ /*<<+bigstring.js 112 11>>*/var
c=/*<<+bigstring.js 112 13>>*/b.offset(g);/*<<+bigstring.js 113 2>>*/if(c+a>b.data.length)/*<<+bigstring.js 113 34>>*/ /*<<+bigstring.js 114 4>>*/n();/*<<+bigstring.js 116 2>>*/if(f+a>/*<<+bigstring.js 116 18>>*/ag(e))/*<<+bigstring.js 116 47>>*/ /*<<+bigstring.js 117 4>>*/n();/*<<+bigstring.js 112 2>>*/ /*<<+bigstring.js 119 12>>*/var
h=/*<<+bigstring.js 119 14>>*/b.data.slice(c,c+a);/*<<+bigstring.js 120 2>>*/ah(/*<<+bigstring.js 120 18>>*/aZ(h),0,e,f,a);/*<<+bigstring.js 121 2>>*/return 0/*<<+bigstring.js 122 0>>*/}/*<<+stdlib.js 52 0>>*/function
iZ(a,b){bY[/*<<+stdlib.js 53 20>>*/o(a)]=b;/*<<+stdlib.js 54 2>>*/return 0/*<<+stdlib.js 55 0>>*/}/*<<+mlBytes.js 863 0>>*/function
jM(a){/*<<+mlBytes.js 864 2>>*/return/*<<+mlBytes.js 864 9>>*/t(a)/*<<+mlBytes.js 865 0>>*/}/*<<+ints.js 36 0>>*/function
b1(c){/*<<+ints.js 37 2>>*/var/*<<+ints.js 37 8>>*/a=0,/*<<+ints.js 37 17>>*/e=/*<<+ints.js 37 19>>*/r(c),/*<<+ints.js 37 50>>*/b=10,/*<<+ints.js 37 61>>*/d=1;/*<<+ints.js 38 2>>*/if(e>0)/*<<+ints.js 38 15>>*/switch(/*<<+ints.js 39 12>>*/u(c,a)){case
45:a++;d=-1;/*<<+ints.js 40 29>>*/break;case
43:a++;d=1;/*<<+ints.js 41 28>>*/break}/*<<+ints.js 44 2>>*/if(a+1<e&&/*<<+ints.js 44 21>>*/u(c,a)==48)/*<<+ints.js 45 4>>*/switch(/*<<+ints.js 45 12>>*/u(c,a+1)){case
120:case
88:b=16;a+=2;/*<<+ints.js 46 42>>*/break;case
111:case
79:b=8;a+=2;/*<<+ints.js 47 42>>*/break;case
98:case
66:b=2;a+=2;/*<<+ints.js 48 42>>*/break;case
117:case
85:a+=2;/*<<+ints.js 49 31>>*/break}/*<<+ints.js 51 2>>*/return[a,d,b]/*<<+ints.js 52 0>>*/}/*<<+ints.js 55 0>>*/function
aN(a){/*<<+ints.js 56 2>>*/if(a>=48&&a<=57)/*<<+ints.js 56 27>>*/return a-48;/*<<+ints.js 57 2>>*/if(a>=65&&a<=90)/*<<+ints.js 57 27>>*/return a-55;/*<<+ints.js 58 2>>*/if(a>=97&&a<=122)/*<<+ints.js 58 27>>*/return a-87;/*<<+ints.js 59 2>>*/return-1/*<<+ints.js 60 0>>*/}/*<<+int64.js 317 0>>*/function
g_(h){/*<<+int64.js 318 2>>*/var/*<<+int64.js 318 8>>*/i=/*<<+int64.js 318 10>>*/b1(h),/*<<+int64.js 319 8>>*/g=i[0],/*<<+int64.js 319 21>>*/k=i[1],/*<<+int64.js 319 34>>*/e=i[2],/*<<+int64.js 320 13>>*/j=/*<<+int64.js 320 15>>*/aC(e),/*<<+int64.js 321 16>>*/l=/*<<+int64.js 322 6>>*/new
b(G,0xfffffff,F).udivmod(j).quotient,/*<<+int64.js 323 8>>*/f=/*<<+int64.js 323 10>>*/u(h,g),/*<<+int64.js 324 8>>*/a=/*<<+int64.js 324 10>>*/aN(f);/*<<+int64.js 325 2>>*/if(a<0||a>=e)/*<<+int64.js 325 26>>*/c($);/*<<+int64.js 318 2>>*/ /*<<+int64.js 326 10>>*/var
d=/*<<+int64.js 326 12>>*/aC(a);/*<<+int64.js 327 2>>*/for(;;)/*<<+int64.js 327 11>>*/{g++;f=/*<<+int64.js 329 8>>*/u(h,g);/*<<+int64.js 330 4>>*/if(f==95)/*<<+int64.js 330 17>>*/continue;a=/*<<+int64.js 331 8>>*/aN(f);/*<<+int64.js 332 4>>*/if(a<0||a>=e)/*<<+int64.js 332 28>>*/break;/*<<+int64.js 334 4>>*/if(/*<<+int64.js 334 8>>*/a9(l,d))/*<<+int64.js 334 40>>*/c($);a=/*<<+int64.js 335 8>>*/aC(a);d=/*<<+int64.js 336 10>>*/bU(/*<<+int64.js 336 25>>*/d5(j,d),a);/*<<+int64.js 338 4>>*/if(/*<<+int64.js 338 8>>*/a9(d,a))/*<<+int64.js 338 32>>*/c($)}/*<<+int64.js 340 2>>*/if(g!=/*<<+int64.js 340 11>>*/r(h))/*<<+int64.js 340 37>>*/c($);/*<<+int64.js 341 2>>*/if(e==10&&/*<<+int64.js 341 20>>*/a9(new
b(0,0,O),d))/*<<+int64.js 342 4>>*/c($);/*<<+int64.js 343 2>>*/if(k<0)d=/*<<+int64.js 343 22>>*/bV(d);/*<<+int64.js 344 2>>*/return d/*<<+int64.js 345 0>>*/}/*<<+str.js 247 0>>*/function
j_(e,b,a){/*<<+str.js 248 2>>*/if(a<0||a>/*<<+str.js 248 22>>*/r(b))/*<<+str.js 249 4>>*/d("Str.search_forward");/*<<+str.js 250 2>>*/while(a<=/*<<+str.js 250 16>>*/r(b))/*<<+str.js 250 42>>*/{/*<<+str.js 251 4>>*/ /*<<+str.js 251 12>>*/var
c=/*<<+str.js 251 14>>*/aU(e,b,a,0);/*<<+str.js 252 4>>*/if(c)/*<<+str.js 252 13>>*/return c;a++}/*<<+str.js 256 2>>*/return[0]/*<<+str.js 257 0>>*/}/*<<+bigstring-cstruct.js 15 0>>*/ /*<<+bigstring-cstruct.js 15 34>>*/var
fq=dw;/*<<+array.js 95 0>>*/function
h2(a,d){/*<<+array.js 96 2>>*/if(a<0)/*<<+array.js 96 15>>*/n();/*<<+array.js 97 2>>*/var/*<<+array.js 97 10>>*/a=a+1|0,/*<<+array.js 98 8>>*/b=new
Array(a);b[0]=0;/*<<+array.js 100 2>>*/for(/*<<+array.js 100 13>>*/var
c=1;c<a;c++)b[c]=d;/*<<+array.js 101 2>>*/return b/*<<+array.js 102 0>>*/}/*<<+io.js 295 0>>*/function
iq(b,c){/*<<+io.js 296 2>>*/ /*<<+io.js 296 11>>*/var
a=g[b];/*<<+io.js 297 2>>*/if(a.refill!=null)/*<<+io.js 297 27>>*/j(cC);a.offset=c;/*<<+io.js 299 2>>*/return 0/*<<+io.js 300 0>>*/}/*<<+fs.js 162 0>>*/function
jF(e){/*<<+fs.js 163 2>>*/var/*<<+fs.js 163 11>>*/d=/*<<+fs.js 163 13>>*/W(e),/*<<+fs.js 164 8>>*/b=/*<<+fs.js 164 10>>*/d.device.readdir(d.rest),/*<<+fs.js 165 8>>*/c=new
Array(b.length+1);c[0]=0;/*<<+fs.js 167 2>>*/for(/*<<+fs.js 167 11>>*/var
a=0;a<b.length;a++)c[a+1]=/*<<+fs.js 168 13>>*/f(b[a]);/*<<+fs.js 169 2>>*/return c/*<<+fs.js 170 0>>*/}/*<<+io.js 392 0>>*/function
ii(b,a){/*<<+io.js 393 2>>*/ /*<<+io.js 393 8>>*/var
c=/*<<+io.js 393 10>>*/f(/*<<+io.js 393 33>>*/String.fromCharCode(a));/*<<+io.js 394 2>>*/bb(b,c,0,1);/*<<+io.js 395 2>>*/return 0/*<<+io.js 396 0>>*/}/*<<+sys.js 171 0>>*/function
js(){/*<<+sys.js 171 42>>*/return 0/*<<+sys.js 171 52>>*/}/*<<+obj.js 26 0>>*/function
iG(a){/*<<+obj.js 26 33>>*/return+(a
instanceof
Array)/*<<+obj.js 26 63>>*/}/*<<+io.js 264 0>>*/function
ib(b){/*<<+io.js 265 2>>*/ /*<<+io.js 265 11>>*/var
a=g[b];/*<<+io.js 266 2>>*/bX(b);/*<<+io.js 267 2>>*/if(a.offset>=/*<<+io.js 267 21>>*/a.file.length())/*<<+io.js 268 4>>*/bh();/*<<+io.js 265 2>>*/ /*<<+io.js 269 10>>*/var
c=/*<<+io.js 269 12>>*/a.file.read_one(a.offset);a.offset++;/*<<+io.js 271 2>>*/return c/*<<+io.js 272 0>>*/}/*<<+jslib_js_of_ocaml.js 66 0>>*/function
hJ(a){/*<<+jslib_js_of_ocaml.js 67 2>>*/ /*<<+jslib_js_of_ocaml.js 67 8>>*/var
a=/*<<+jslib_js_of_ocaml.js 67 10>>*/t(a);/*<<+jslib_js_of_ocaml.js 69 2>>*/if(!/*<<+jslib_js_of_ocaml.js 69 6>>*/a.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))/*<<+jslib_js_of_ocaml.js 69 73>>*/ /*<<+jslib_js_of_ocaml.js 70 4>>*/aT('caml_js_var: "'+a+'" is not a valid JavaScript variable. continuing ..');/*<<+jslib_js_of_ocaml.js 73 2>>*/return/*<<+jslib_js_of_ocaml.js 73 9>>*/eval(a)/*<<+jslib_js_of_ocaml.js 74 0>>*/}/*<<+ieee_754.js 171 0>>*/function
jP(a){/*<<+ieee_754.js 172 2>>*/return/*<<+ieee_754.js 172 9>>*/Math.trunc(a)/*<<+ieee_754.js 173 0>>*/}/*<<+weak.js 126 0>>*/function
fJ(b,a){a[Y]=b[Y];/*<<+weak.js 128 2>>*/return 0/*<<+weak.js 129 0>>*/}/*<<+stdlib.js 80 0>>*/function
hg(a){/*<<+stdlib.js 80 32>>*/return+(a>31&&a<bz)/*<<+stdlib.js 80 61>>*/}/*<<+compare.js 241 0>>*/function
fW(a,b){/*<<+compare.js 241 29>>*/return+(/*<<+compare.js 241 38>>*/ai(a,b,false)==0)/*<<+compare.js 241 73>>*/}/*<<+str.js 286 0>>*/function
j7(e,c,a){/*<<+str.js 287 2>>*/if(a<0||a>/*<<+str.js 287 22>>*/r(c))/*<<+str.js 288 4>>*/d("Str.partial_match");/*<<+str.js 289 2>>*/ /*<<+str.js 289 10>>*/var
b=/*<<+str.js 289 12>>*/aU(e,c,a,1);/*<<+str.js 290 2>>*/return b?b:[0]/*<<+str.js 292 0>>*/}/*<<+sys.js 148 0>>*/function
jE(){/*<<+sys.js 149 2>>*/var/*<<+sys.js 149 10>>*/a=/*<<+sys.js 149 12>>*/new
Date().getTime(),/*<<+sys.js 150 8>>*/b=a^0xffffffff*/*<<+sys.js 150 25>>*/Math.random();/*<<+sys.js 151 2>>*/return[0,b]/*<<+sys.js 152 0>>*/}/*<<+gc.js 40 0>>*/function
f1(){/*<<+gc.js 40 55>>*/return 0/*<<+gc.js 40 65>>*/}/*<<+bigarray.js 432 0>>*/function
e1(a,b,c){/*<<+bigarray.js 433 2>>*/return/*<<+bigarray.js 433 9>>*/a.get(/*<<+bigarray.js 433 16>>*/a.offset([b,c]))/*<<+bigarray.js 434 0>>*/}/*<<+unix.js 55 0>>*/function
kj(a){/*<<+unix.js 55 27>>*/return a/*<<+unix.js 55 36>>*/}/*<<+bigarray.js 450 0>>*/function
fi(a,d,c){/*<<+bigarray.js 451 2>>*/ /*<<+bigarray.js 451 10>>*/var
b=/*<<+bigarray.js 451 12>>*/a.offset(d);/*<<+bigarray.js 452 2>>*/if(b+1>=a.data.length)/*<<+bigarray.js 452 32>>*/n();/*<<+bigarray.js 453 2>>*/a.set(b+0,c&h);/*<<+bigarray.js 454 2>>*/a.set(b+1,c>>>8&h);/*<<+bigarray.js 455 2>>*/return 0/*<<+bigarray.js 456 0>>*/}/*<<+jslib.js 30 0>>*/function
hi(b,a){delete
b[a];/*<<+jslib.js 30 44>>*/return 0/*<<+jslib.js 30 52>>*/}/*<<+ints.js 65 0>>*/function
he(g){/*<<+ints.js 66 2>>*/var/*<<+ints.js 66 8>>*/i=/*<<+ints.js 66 10>>*/b1(g),/*<<+ints.js 67 8>>*/d=i[0],/*<<+ints.js 67 21>>*/j=i[1],/*<<+ints.js 67 34>>*/e=i[2],/*<<+ints.js 68 10>>*/h=/*<<+ints.js 68 12>>*/r(g),/*<<+ints.js 69 16>>*/k=-1>>>0,/*<<+ints.js 70 8>>*/f=d<h?/*<<+ints.js 70 20>>*/u(g,d):0,/*<<+ints.js 71 8>>*/b=/*<<+ints.js 71 10>>*/aN(f);/*<<+ints.js 72 2>>*/if(b<0||b>=e)/*<<+ints.js 72 26>>*/c($);/*<<+ints.js 66 2>>*/ /*<<+ints.js 73 10>>*/var
a=b;/*<<+ints.js 74 2>>*/for(d++;d<h;d++)/*<<+ints.js 74 22>>*/{f=/*<<+ints.js 75 8>>*/u(g,d);/*<<+ints.js 76 4>>*/if(f==95)/*<<+ints.js 76 17>>*/continue;b=/*<<+ints.js 77 8>>*/aN(f);/*<<+ints.js 78 4>>*/if(b<0||b>=e)/*<<+ints.js 78 28>>*/break;a=e*a+b;/*<<+ints.js 80 4>>*/if(a>k)/*<<+ints.js 80 25>>*/c($)}/*<<+ints.js 82 2>>*/if(d!=h)/*<<+ints.js 82 16>>*/c($);a=j*a;/*<<+ints.js 87 2>>*/if(e==10&&(a|0)!=a)/*<<+ints.js 89 4>>*/c($);/*<<+ints.js 90 2>>*/return a|0/*<<+ints.js 91 0>>*/}/*<<+fs.js 70 0>>*/function
hX(){/*<<+fs.js 71 2>>*/ /*<<+fs.js 71 11>>*/var
b=0;/*<<+fs.js 72 2>>*/for(/*<<+fs.js 72 12>>*/var
a=0;a<M.length;a++)/*<<+fs.js 72 50>>*/{/*<<+fs.js 73 4>>*/ /*<<+fs.js 73 12>>*/var
c=b;b=[0,/*<<+fs.js 74 15>>*/f(M[a].path),c]}/*<<+fs.js 76 2>>*/return b/*<<+fs.js 77 0>>*/}/*<<+marshal.js 21 0>>*/ /*<<+marshal.js 21 27>>*/var
h3={PREFIX_SMALL_BLOCK:w,PREFIX_SMALL_INT:bx,PREFIX_SMALL_STRING:au,CODE_INT8:v,CODE_INT16:cu,CODE_INT32:cr,CODE_INT64:db,CODE_SHARED8:c4,CODE_SHARED16:dd,CODE_SHARED32:de,CODE_BLOCK32:cZ,CODE_BLOCK64:0x13,CODE_STRING8:bo,CODE_STRING32:bA,CODE_DOUBLE_BIG:0x0B,CODE_DOUBLE_LITTLE:0x0C,CODE_DOUBLE_ARRAY8_BIG:0x0D,CODE_DOUBLE_ARRAY8_LITTLE:0x0E,CODE_DOUBLE_ARRAY32_BIG:0x0F,CODE_DOUBLE_ARRAY32_LITTLE:cs,CODE_CODEPOINTER:0x10,CODE_INFIXPOINTER:0x11,CODE_CUSTOM:c1,CODE_CUSTOM_LEN:dc,CODE_CUSTOM_FIXED:c9};/*<<+jslib_js_of_ocaml.js 213 0>>*/function
hj(a,b){/*<<+jslib_js_of_ocaml.js 213 33>>*/return+(a==b)/*<<+jslib_js_of_ocaml.js 213 51>>*/}/*<<+bigstring.js 15 0>>*/function
eK(a){/*<<+bigstring.js 16 2>>*/return a.data/*<<+bigstring.js 17 0>>*/}/*<<+graphics.js 266 0>>*/function
bQ(j,n,o,i,h,c,d){/*<<+graphics.js 267 2>>*/while(c>d)d+=360;c/=c6;d/=c6;/*<<+graphics.js 270 2>>*/var/*<<+graphics.js 270 10>>*/f=0,a,b,l,m,/*<<+graphics.js 271 12>>*/q=2,/*<<+graphics.js 272 10>>*/k=(d-c)*Math.PI*((h+i)/2)/q|0,/*<<+graphics.js 273 12>>*/p=(d-c)*Math.PI/k,/*<<+graphics.js 274 8>>*/e=c*Math.PI;/*<<+graphics.js 275 2>>*/for(/*<<+graphics.js 275 12>>*/var
g=0;g<=k;g++)/*<<+graphics.js 275 26>>*/{a=n-h*/*<<+graphics.js 276 22>>*/Math.sin(e)*/*<<+graphics.js 276 37>>*/Math.sin(f*Math.PI)+i*/*<<+graphics.js 276 69>>*/Math.cos(e)*/*<<+graphics.js 276 84>>*/Math.cos(f*Math.PI);a=/*<<+graphics.js 277 11>>*/a.toFixed(2);b=o+i*/*<<+graphics.js 278 22>>*/Math.cos(e)*/*<<+graphics.js 278 37>>*/Math.sin(f*Math.PI)+h*/*<<+graphics.js 278 69>>*/Math.sin(e)*/*<<+graphics.js 278 84>>*/Math.cos(f*Math.PI);b=/*<<+graphics.js 279 11>>*/b.toFixed(2);/*<<+graphics.js 280 4>>*/if(g==0)/*<<+graphics.js 280 14>>*/ /*<<+graphics.js 281 6>>*/j.moveTo(a,b);else/*<<+graphics.js 282 11>>*/if(l!=a||m!=b)/*<<+graphics.js 282 50>>*/ /*<<+graphics.js 283 6>>*/j.lineTo(a,b);l=a;m=b;e-=p}/*<<+graphics.js 289 2>>*/return 0/*<<+graphics.js 290 0>>*/}/*<<+graphics.js 334 0>>*/function
gB(f,g,d,e,b,c){/*<<+graphics.js 335 2>>*/ /*<<+graphics.js 335 8>>*/var
a=/*<<+graphics.js 335 10>>*/k();/*<<+graphics.js 336 2>>*/a.context.beginPath();/*<<+graphics.js 337 2>>*/bQ(a.context,f,a.height-g,d,e,b,c);/*<<+graphics.js 338 2>>*/a.context.fill();/*<<+graphics.js 339 2>>*/return 0/*<<+graphics.js 340 0>>*/}/*<<+bigarray.js 547 0>>*/function
fc(b,f){f=/*<<+bigarray.js 548 9>>*/L(f);/*<<+bigarray.js 549 2>>*/var/*<<+bigarray.js 549 15>>*/c=f.length,/*<<+bigarray.js 550 12>>*/e=[],/*<<+bigarray.js 551 15>>*/g=[],h;/*<<+bigarray.js 554 2>>*/if(c>b.dims.length)/*<<+bigarray.js 555 4>>*/d("Bigarray.slice: too many indices");/*<<+bigarray.js 558 2>>*/if(b.layout==0)/*<<+bigarray.js 558 22>>*/{/*<<+bigarray.js 559 4>>*/for(/*<<+bigarray.js 559 15>>*/var
a=0;a<c;a++)e[a]=f[a];/*<<+bigarray.js 561 4>>*/for(;a<b.dims.length;a++)e[a]=0;g=/*<<+bigarray.js 563 15>>*/b.dims.slice(c)}else/*<<+bigarray.js 564 9>>*/{/*<<+bigarray.js 565 4>>*/for(/*<<+bigarray.js 565 15>>*/var
a=0;a<c;a++)e[b.dims.length-c+a]=f[a];/*<<+bigarray.js 567 4>>*/for(/*<<+bigarray.js 567 15>>*/var
a=0;a<b.dims.length-c;a++)e[a]=1;g=/*<<+bigarray.js 569 15>>*/b.dims.slice(0,b.dims.length-c)}h=/*<<+bigarray.js 571 8>>*/b.offset(e);/*<<+bigarray.js 549 2>>*/var/*<<+bigarray.js 572 11>>*/k=/*<<+bigarray.js 572 13>>*/al(g),/*<<+bigarray.js 573 23>>*/i=/*<<+bigarray.js 573 25>>*/aA(b.kind),/*<<+bigarray.js 574 15>>*/j=/*<<+bigarray.js 574 17>>*/b.data.subarray(h*i,(h+k)*i);/*<<+bigarray.js 575 2>>*/return/*<<+bigarray.js 575 9>>*/H(b.kind,b.layout,g,j)/*<<+bigarray.js 576 0>>*/}/*<<+marshal.js 401 0>>*/function
eb(d,b){/*<<+marshal.js 402 2>>*/function
a(b,a){/*<<+marshal.js 403 4>>*/return/*<<+marshal.js 403 12>>*/y(b,a)<<24|/*<<+marshal.js 404 7>>*/y(b,a+1)<<16|/*<<+marshal.js 405 7>>*/y(b,a+2)<<8|/*<<+marshal.js 406 6>>*/y(b,a+3)/*<<+marshal.js 407 2>>*/}/*<<+marshal.js 408 2>>*/if(/*<<+marshal.js 408 6>>*/a(d,b)!=(dj|0))/*<<+marshal.js 409 4>>*/c("Marshal.data_size: bad object");/*<<+marshal.js 410 2>>*/return/*<<+marshal.js 410 10>>*/a(d,b+4)/*<<+marshal.js 411 0>>*/}/*<<+io.js 243 0>>*/function
g1(e){/*<<+io.js 244 2>>*/var/*<<+io.js 244 11>>*/a=g[e],/*<<+io.js 246 10>>*/b=/*<<+io.js 246 12>>*/I(8);/*<<+io.js 247 2>>*/a.file.read(a.offset,b,0,8);/*<<+io.js 244 2>>*/var/*<<+io.js 250 10>>*/c=/*<<+io.js 250 12>>*/eb(b,0)+20,/*<<+io.js 252 10>>*/b=/*<<+io.js 252 12>>*/I(c);/*<<+io.js 253 2>>*/a.file.read(a.offset,b,0,c);/*<<+io.js 244 2>>*/var/*<<+io.js 255 13>>*/d=[0],/*<<+io.js 256 10>>*/f=/*<<+io.js 256 12>>*/dX(b,d);a.offset=a.offset+d[0];/*<<+io.js 258 2>>*/return f/*<<+io.js 259 0>>*/}/*<<+bigarray.js 338 0>>*/function
e5(a){/*<<+bigarray.js 339 2>>*/return a.kind/*<<+bigarray.js 340 0>>*/}/*<<+jslib_js_of_ocaml.js 80 0>>*/function
hr(b,a){/*<<+jslib_js_of_ocaml.js 81 2>>*/switch(a.length){case
1:/*<<+jslib_js_of_ocaml.js 82 10>>*/return/*<<+jslib_js_of_ocaml.js 82 17>>*/b();case
2:/*<<+jslib_js_of_ocaml.js 83 10>>*/return/*<<+jslib_js_of_ocaml.js 83 17>>*/b(a[1]);case
3:/*<<+jslib_js_of_ocaml.js 84 10>>*/return/*<<+jslib_js_of_ocaml.js 84 17>>*/b(a[1],a[2]);case
4:/*<<+jslib_js_of_ocaml.js 85 10>>*/return/*<<+jslib_js_of_ocaml.js 85 17>>*/b(a[1],a[2],a[3]);case
5:/*<<+jslib_js_of_ocaml.js 86 10>>*/return/*<<+jslib_js_of_ocaml.js 86 17>>*/b(a[1],a[2],a[3],a[4]);case
6:/*<<+jslib_js_of_ocaml.js 87 10>>*/return/*<<+jslib_js_of_ocaml.js 87 17>>*/b(a[1],a[2],a[3],a[4],a[5]);case
7:/*<<+jslib_js_of_ocaml.js 88 10>>*/return/*<<+jslib_js_of_ocaml.js 88 17>>*/b(a[1],a[2],a[3],a[4],a[5],a[6]);case
8:/*<<+jslib_js_of_ocaml.js 89 10>>*/return/*<<+jslib_js_of_ocaml.js 89 17>>*/b(a[1],a[2],a[3],a[4],a[5],a[6],a[7])}/*<<+jslib_js_of_ocaml.js 91 2>>*/return/*<<+jslib_js_of_ocaml.js 91 9>>*/b.apply(null,/*<<+jslib_js_of_ocaml.js 91 23>>*/L(a))/*<<+jslib_js_of_ocaml.js 92 0>>*/}/*<<+jslib.js 23 0>>*/function
hB(a){/*<<+jslib.js 23 33>>*/return/*<<+jslib.js 23 40>>*/a()/*<<+jslib.js 23 45>>*/}/*<<+nat.js 348 0>>*/function
jT(a,c,b,d){/*<<+nat.js 349 2>>*/if(a.data[c]>b.data[d])/*<<+nat.js 349 40>>*/return 1;/*<<+nat.js 350 2>>*/if(a.data[c]<b.data[d])/*<<+nat.js 350 40>>*/return-1;/*<<+nat.js 351 2>>*/return 0/*<<+nat.js 352 0>>*/}/*<<+io.js 231 0>>*/function
ia(d,f,e,b){/*<<+io.js 232 2>>*/var/*<<+io.js 232 11>>*/a=g[d],/*<<+io.js 233 9>>*/c=/*<<+io.js 233 11>>*/a.file.length()-a.offset;/*<<+io.js 234 2>>*/if(c==0&&a.refill!=null)c=/*<<+io.js 234 43>>*/bc(a);/*<<+io.js 235 2>>*/if(c<b)b=c;/*<<+io.js 236 2>>*/a.file.read(a.offset,f,e,b);a.offset+=b;/*<<+io.js 238 2>>*/return b/*<<+io.js 239 0>>*/}/*<<+graphics.js 485 0>>*/function
gR(a){/*<<+graphics.js 486 2>>*/c("caml_gr_wait_event not Implemented: use Graphics_js instead")/*<<+graphics.js 487 0>>*/}/*<<+graphics.js 480 0>>*/function
gL(){/*<<+graphics.js 480 33>>*/return 0/*<<+graphics.js 480 41>>*/}/*<<+bigstring.js 5 0>>*/function
gW(b,a){/*<<+bigstring.js 6 2>>*/return/*<<+bigstring.js 6 9>>*/bS(b,a.data)/*<<+bigstring.js 7 0>>*/}/*<<+backtrace.js 25 0>>*/function
iX(){/*<<+backtrace.js 25 36>>*/return 0/*<<+backtrace.js 25 46>>*/}/*<<+unix.js 13 0>>*/function
kd(e){/*<<+unix.js 14 2>>*/var/*<<+unix.js 14 8>>*/a=new
Date(e*ab),/*<<+unix.js 15 12>>*/b=/*<<+unix.js 15 14>>*/a.getTime(),/*<<+unix.js 16 19>>*/d=/*<<+unix.js 16 21>>*/new
Date(/*<<+unix.js 16 31>>*/Date.UTC(/*<<+unix.js 16 40>>*/a.getUTCFullYear(),0,1)).getTime(),/*<<+unix.js 17 10>>*/c=/*<<+unix.js 17 12>>*/Math.floor((b-d)/c2);/*<<+unix.js 18 2>>*/return[0,/*<<+unix.js 18 18>>*/a.getUTCSeconds(),/*<<+unix.js 18 37>>*/a.getUTCMinutes(),/*<<+unix.js 18 56>>*/a.getUTCHours(),/*<<+unix.js 19 10>>*/a.getUTCDate(),/*<<+unix.js 19 26>>*/a.getUTCMonth(),/*<<+unix.js 19 43>>*/a.getUTCFullYear()-bp,/*<<+unix.js 20 10>>*/a.getUTCDay(),c,false|0]/*<<+unix.js 22 0>>*/}/*<<+sys.js 183 0>>*/function
jy(){/*<<+sys.js 184 2>>*/return[0,/*<<+sys.js 184 13>>*/f("Unix"),32,0]/*<<+sys.js 185 0>>*/}/*<<+sys.js 177 0>>*/function
jm(){/*<<+sys.js 178 2>>*/return[0,/*<<+sys.js 178 13>>*/f("js_of_ocaml")]/*<<+sys.js 179 0>>*/}/*<<+unix.js 8 0>>*/function
kh(){/*<<+unix.js 9 2>>*/return/*<<+unix.js 9 9>>*/Math.floor(/*<<+unix.js 9 20>>*/eF())/*<<+unix.js 10 0>>*/}/*<<+io.js 102 0>>*/function
ih(){/*<<+io.js 103 2>>*/ /*<<+io.js 103 8>>*/var
b=0;/*<<+io.js 104 2>>*/for(/*<<+io.js 104 12>>*/var
a=0;a<g.length;a++)/*<<+io.js 104 50>>*/if(g[a]&&g[a].opened&&g[a].out)b=[0,g[a].fd,b];/*<<+io.js 108 2>>*/return b/*<<+io.js 109 0>>*/}/*<<+bigstring.js 21 0>>*/function
eH(c){/*<<+bigstring.js 22 2>>*/ /*<<+bigstring.js 22 9>>*/var
b=new(a.Uint8Array)(c);/*<<+bigstring.js 23 2>>*/return/*<<+bigstring.js 23 9>>*/H(12,0,[b.length],b)/*<<+bigstring.js 24 0>>*/}/*<<+ints.js 107 0>>*/function
iy(b,a){/*<<+ints.js 108 2>>*/if(a==0)/*<<+ints.js 108 14>>*/aP();/*<<+ints.js 109 2>>*/return b%a/*<<+ints.js 110 0>>*/}/*<<+bigarray.js 28 0>>*/function
e4(){/*<<+bigarray.js 29 2>>*/return 0/*<<+bigarray.js 30 0>>*/}/*<<+str.js 276 0>>*/function
j$(e,c,a){/*<<+str.js 277 2>>*/if(a<0||a>/*<<+str.js 277 22>>*/r(c))/*<<+str.js 278 4>>*/d("Str.string_match");/*<<+str.js 279 2>>*/ /*<<+str.js 279 10>>*/var
b=/*<<+str.js 279 12>>*/aU(e,c,a,0);/*<<+str.js 280 2>>*/return b?b:[0]/*<<+str.js 282 0>>*/}/*<<+marshal.js 87 0>>*/function
dn(a,b){this.s=a;this.i=b/*<<+marshal.js 87 60>>*/}dn.prototype={read8u:function(){/*<<+marshal.js 89 23>>*/return/*<<+marshal.js 89 30>>*/s(this.s,this.i++)/*<<+marshal.js 89 9>>*/},read8s:function(){/*<<+marshal.js 90 23>>*/return/*<<+marshal.js 90 30>>*/s(this.s,this.i++)<<24>>24/*<<+marshal.js 90 9>>*/},read16u:function(){/*<<+marshal.js 92 4>>*/var/*<<+marshal.js 92 10>>*/b=this.s,/*<<+marshal.js 92 22>>*/a=this.i;this.i=a+2;/*<<+marshal.js 94 4>>*/return/*<<+marshal.js 94 12>>*/s(b,a)<<8|/*<<+marshal.js 94 39>>*/s(b,a+1)/*<<+marshal.js 91 10>>*/},read16s:function(){/*<<+marshal.js 97 4>>*/var/*<<+marshal.js 97 10>>*/b=this.s,/*<<+marshal.js 97 22>>*/a=this.i;this.i=a+2;/*<<+marshal.js 99 4>>*/return/*<<+marshal.js 99 12>>*/s(b,a)<<24>>16|/*<<+marshal.js 99 46>>*/s(b,a+1)/*<<+marshal.js 96 10>>*/},read32u:function(){/*<<+marshal.js 102 4>>*/var/*<<+marshal.js 102 10>>*/b=this.s,/*<<+marshal.js 102 22>>*/a=this.i;this.i=a+4;/*<<+marshal.js 104 4>>*/return(/*<<+marshal.js 104 13>>*/s(b,a)<<24|/*<<+marshal.js 104 44>>*/s(b,a+1)<<16|/*<<+marshal.js 105 13>>*/s(b,a+2)<<8|/*<<+marshal.js 105 43>>*/s(b,a+3))>>>0/*<<+marshal.js 101 10>>*/},read32s:function(){/*<<+marshal.js 108 4>>*/var/*<<+marshal.js 108 10>>*/b=this.s,/*<<+marshal.js 108 22>>*/a=this.i;this.i=a+4;/*<<+marshal.js 110 4>>*/return/*<<+marshal.js 110 12>>*/s(b,a)<<24|/*<<+marshal.js 110 43>>*/s(b,a+1)<<16|/*<<+marshal.js 111 7>>*/s(b,a+2)<<8|/*<<+marshal.js 111 37>>*/s(b,a+3)/*<<+marshal.js 107 10>>*/},readstr:function(b){/*<<+marshal.js 114 4>>*/var/*<<+marshal.js 114 10>>*/d=this.i,/*<<+marshal.js 115 12>>*/c=new
Array(b);/*<<+marshal.js 116 4>>*/for(/*<<+marshal.js 116 14>>*/var
a=0;a<b;a++)/*<<+marshal.js 116 32>>*/c[a]=/*<<+marshal.js 117 15>>*/s(this.s,d+a);this.i=d+b;/*<<+marshal.js 120 4>>*/return/*<<+marshal.js 120 11>>*/aQ(c)/*<<+marshal.js 113 10>>*/}};/*<<+graphics.js 426 0>>*/function
gA(a){/*<<+graphics.js 427 2>>*/ /*<<+graphics.js 427 11>>*/var
d=[0];/*<<+graphics.js 428 2>>*/for(/*<<+graphics.js 428 11>>*/var
b=0;b<a.height;b++)/*<<+graphics.js 428 31>>*/{d[b+1]=[0];/*<<+graphics.js 430 4>>*/for(/*<<+graphics.js 430 13>>*/var
c=0;c<a.width;c++)/*<<+graphics.js 430 32>>*/{/*<<+graphics.js 431 6>>*/var/*<<+graphics.js 431 12>>*/e=b*(a.width*4)+c*4,/*<<+graphics.js 432 12>>*/h=a.data[e+0],/*<<+graphics.js 433 12>>*/g=a.data[e+1],/*<<+graphics.js 434 12>>*/f=a.data[e+2];d[b+1][c+1]=(h<<16)+(g<<8)+f}}/*<<+graphics.js 438 2>>*/return d/*<<+graphics.js 439 0>>*/}/*<<+bigarray.js 380 0>>*/function
e3(a,b){/*<<+bigarray.js 381 2>>*/ /*<<+bigarray.js 381 10>>*/var
c=/*<<+bigarray.js 381 12>>*/a.offset(/*<<+bigarray.js 381 22>>*/L(b));/*<<+bigarray.js 382 2>>*/return/*<<+bigarray.js 382 9>>*/a.get(c)/*<<+bigarray.js 383 0>>*/}/*<<+backtrace.js 21 0>>*/function
gi(){/*<<+backtrace.js 21 43>>*/return 0/*<<+backtrace.js 21 53>>*/}/*<<+ieee_754.js 303 0>>*/function
f6(i,c){/*<<+ieee_754.js 304 2>>*/function
j(a,b){/*<<+ieee_754.js 305 4>>*/if(/*<<+ieee_754.js 305 8>>*/Math.abs(a)<1.0)/*<<+ieee_754.js 305 27>>*/return/*<<+ieee_754.js 306 13>>*/a.toFixed(b);else/*<<+ieee_754.js 307 11>>*/{/*<<+ieee_754.js 308 6>>*/ /*<<+ieee_754.js 308 12>>*/var
c=/*<<+ieee_754.js 308 14>>*/parseInt(/*<<+ieee_754.js 308 23>>*/ /*<<+ieee_754.js 308 23>>*/a.toString().split(aw)[1]);/*<<+ieee_754.js 309 6>>*/if(c>20)/*<<+ieee_754.js 309 18>>*/{c-=20;a/=/*<<+ieee_754.js 311 13>>*/Math.pow(10,c);a+=/*<<+ieee_754.js 312 13>>*/new
Array(c+1).join(x);/*<<+ieee_754.js 313 8>>*/if(b>0)/*<<+ieee_754.js 313 19>>*/a=a+aF+/*<<+ieee_754.js 314 24>>*/new
Array(b+1).join(x);/*<<+ieee_754.js 316 8>>*/return a}else/*<<+ieee_754.js 318 11>>*/return/*<<+ieee_754.js 318 18>>*/a.toFixed(b)}/*<<+ieee_754.js 320 2>>*/}/*<<+ieee_754.js 321 2>>*/var
a,/*<<+ieee_754.js 321 11>>*/e=/*<<+ieee_754.js 321 13>>*/bf(i),/*<<+ieee_754.js 322 11>>*/d=e.prec<0?6:e.prec;/*<<+ieee_754.js 323 2>>*/if(c<0||c==0&&1/c==-Infinity)/*<<+ieee_754.js 323 45>>*/{e.sign=-1;c=-c}/*<<+ieee_754.js 324 2>>*/if(/*<<+ieee_754.js 324 6>>*/isNaN(c))/*<<+ieee_754.js 324 16>>*/{a=cW;e.filler=_}else/*<<+ieee_754.js 325 7>>*/if(!/*<<+ieee_754.js 325 12>>*/isFinite(c))/*<<+ieee_754.js 325 25>>*/{a="inf";e.filler=_}else/*<<+ieee_754.js 327 4>>*/switch(e.conv){case"e":/*<<+ieee_754.js 329 6>>*/var/*<<+ieee_754.js 329 12>>*/a=/*<<+ieee_754.js 329 14>>*/c.toExponential(d),/*<<+ieee_754.js 331 12>>*/b=a.length;/*<<+ieee_754.js 332 6>>*/if(/*<<+ieee_754.js 332 10>>*/a.charAt(b-3)==by)a=/*<<+ieee_754.js 333 12>>*/a.slice(0,b-1)+x+/*<<+ieee_754.js 333 39>>*/a.slice(b-1);/*<<+ieee_754.js 334 6>>*/break;case"f":a=/*<<+ieee_754.js 336 10>>*/j(c,d);/*<<+ieee_754.js 336 28>>*/break;case"g":d=d?d:1;a=/*<<+ieee_754.js 339 10>>*/c.toExponential(d-1);/*<<+ieee_754.js 340 6>>*/var/*<<+ieee_754.js 340 12>>*/h=/*<<+ieee_754.js 340 14>>*/a.indexOf(by),/*<<+ieee_754.js 341 14>>*/g=+/*<<+ieee_754.js 341 17>>*/a.slice(h+1);/*<<+ieee_754.js 342 6>>*/if(g<-4||c>=1e21||/*<<+ieee_754.js 342 35>>*/c.toFixed(0).length>d)/*<<+ieee_754.js 342 63>>*/{/*<<+ieee_754.js 344 8>>*/ /*<<+ieee_754.js 344 14>>*/var
b=h-1;/*<<+ieee_754.js 344 23>>*/while(/*<<+ieee_754.js 344 30>>*/a.charAt(b)==x)b--;/*<<+ieee_754.js 345 8>>*/if(/*<<+ieee_754.js 345 12>>*/a.charAt(b)==aF)b--;a=/*<<+ieee_754.js 346 12>>*/a.slice(0,b+1)+/*<<+ieee_754.js 346 32>>*/a.slice(h);b=a.length;/*<<+ieee_754.js 348 8>>*/if(/*<<+ieee_754.js 348 12>>*/a.charAt(b-3)==by)a=/*<<+ieee_754.js 349 14>>*/a.slice(0,b-1)+x+/*<<+ieee_754.js 349 41>>*/a.slice(b-1);/*<<+ieee_754.js 350 8>>*/break}else/*<<+ieee_754.js 351 13>>*/{/*<<+ieee_754.js 352 8>>*/ /*<<+ieee_754.js 352 14>>*/var
f=d;/*<<+ieee_754.js 353 8>>*/if(g<0)/*<<+ieee_754.js 353 21>>*/{f-=g+1;a=/*<<+ieee_754.js 353 41>>*/c.toFixed(f)}else/*<<+ieee_754.js 354 13>>*/while(a=/*<<+ieee_754.js 354 24>>*/c.toFixed(f),a.length>d+1)f--;/*<<+ieee_754.js 355 8>>*/if(f)/*<<+ieee_754.js 355 15>>*/{/*<<+ieee_754.js 357 10>>*/ /*<<+ieee_754.js 357 16>>*/var
b=a.length-1;/*<<+ieee_754.js 357 32>>*/while(/*<<+ieee_754.js 357 39>>*/a.charAt(b)==x)b--;/*<<+ieee_754.js 358 10>>*/if(/*<<+ieee_754.js 358 14>>*/a.charAt(b)==aF)b--;a=/*<<+ieee_754.js 359 14>>*/a.slice(0,b+1)}}/*<<+ieee_754.js 362 6>>*/break}/*<<+ieee_754.js 364 2>>*/return/*<<+ieee_754.js 364 9>>*/a1(e,a)/*<<+ieee_754.js 365 0>>*/}/*<<+fs.js 97 0>>*/function
iA(a,b){/*<<+fs.js 98 2>>*/var/*<<+fs.js 98 11>>*/c=/*<<+fs.js 98 13>>*/a$(a),/*<<+fs.js 99 11>>*/a=/*<<+fs.js 99 13>>*/c.join(z)+z;/*<<+fs.js 100 2>>*/M.push({path:a,device:new
A(a,b)});/*<<+fs.js 101 2>>*/return 0/*<<+fs.js 102 0>>*/}/*<<+bigstring.js 47 0>>*/function
du(a,h,b,f,c){/*<<+bigstring.js 48 2>>*/if(12!=a.kind)/*<<+bigstring.js 49 4>>*/d(cO);/*<<+bigstring.js 50 2>>*/if(12!=b.kind)/*<<+bigstring.js 51 4>>*/d(cO);/*<<+bigstring.js 52 2>>*/if(c==0)/*<<+bigstring.js 52 15>>*/return 0;/*<<+bigstring.js 53 2>>*/var/*<<+bigstring.js 53 11>>*/e=/*<<+bigstring.js 53 13>>*/a.offset(h),/*<<+bigstring.js 54 11>>*/g=/*<<+bigstring.js 54 13>>*/b.offset(f);/*<<+bigstring.js 55 2>>*/if(e+c>a.data.length)/*<<+bigstring.js 55 34>>*/ /*<<+bigstring.js 56 4>>*/n();/*<<+bigstring.js 58 2>>*/if(g+c>b.data.length)/*<<+bigstring.js 58 34>>*/ /*<<+bigstring.js 59 4>>*/n();/*<<+bigstring.js 53 2>>*/ /*<<+bigstring.js 61 12>>*/var
i=/*<<+bigstring.js 61 14>>*/a.data.subarray(e,e+c);/*<<+bigstring.js 62 2>>*/b.data.set(i,f);/*<<+bigstring.js 63 2>>*/return 0/*<<+bigstring.js 64 0>>*/}/*<<+bigstring-cstruct.js 7 0>>*/ /*<<+bigstring-cstruct.js 7 37>>*/var
fo=du;/*<<+mlBytes.js 788 0>>*/function
ek(a,b){/*<<+mlBytes.js 789 2>>*/return/*<<+mlBytes.js 789 9>>*/bL(a,b)/*<<+mlBytes.js 790 0>>*/}/*<<+mlBytes.js 575 0>>*/function
je(a,b){/*<<+mlBytes.js 576 2>>*/return/*<<+mlBytes.js 576 9>>*/ek(b,a)/*<<+mlBytes.js 577 0>>*/}/*<<+ints.js 100 0>>*/function
fI(b,a){/*<<+ints.js 101 2>>*/if(a==0)/*<<+ints.js 101 14>>*/aP();/*<<+ints.js 102 2>>*/return b/a|0/*<<+ints.js 103 0>>*/}/*<<+weak.js 145 0>>*/function
fP(a){/*<<+weak.js 146 2>>*/return a[Y]===undefined?0:[0,/*<<+weak.js 149 15>>*/bZ(a[Y])]/*<<+weak.js 150 0>>*/}/*<<+gc.js 45 0>>*/function
h6(a,b,c){/*<<+gc.js 46 2>>*/return 0/*<<+gc.js 47 0>>*/}/*<<+sys.js 97 0>>*/function
jx(a){/*<<+sys.js 98 2>>*/return[0,az[1],az]/*<<+sys.js 99 0>>*/}/*<<+jslib_js_of_ocaml.js 25 0>>*/function
hE(a){/*<<+jslib_js_of_ocaml.js 25 30>>*/return+a/*<<+jslib_js_of_ocaml.js 25 41>>*/}/*<<+graphics.js 462 0>>*/function
gq(b,c){/*<<+graphics.js 463 2>>*/ /*<<+graphics.js 463 8>>*/var
a=/*<<+graphics.js 463 10>>*/k();/*<<+graphics.js 464 2>>*/return/*<<+graphics.js 464 9>>*/a.context.createImageData(b,c)/*<<+graphics.js 465 0>>*/}/*<<+weak.js 105 0>>*/ /*<<+weak.js 105 27>>*/var
fR=eu;/*<<+compare.js 256 0>>*/function
hU(a,b){/*<<+compare.js 256 32>>*/return+(/*<<+compare.js 256 41>>*/ai(a,b,false)<0)/*<<+compare.js 256 75>>*/}/*<<+backtrace.js 31 0>>*/function
iU(){/*<<+backtrace.js 31 42>>*/return 0/*<<+backtrace.js 31 51>>*/}/*<<+stdlib.js 68 0>>*/function
E(c,d,b){/*<<+stdlib.js 69 2>>*/if(b&&a.toplevelReloc)c=/*<<+stdlib.js 70 8>>*/a.toplevelReloc(b);i[c+1]=d;/*<<+stdlib.js 72 2>>*/if(b)i[b]=d/*<<+stdlib.js 73 0>>*/}/*<<+nat.js 229 0>>*/function
eB(f,i,c,g,j,d,h,k,e){/*<<+nat.js 230 2>>*/ /*<<+nat.js 230 12>>*/var
b=0;/*<<+nat.js 231 2>>*/for(/*<<+nat.js 231 12>>*/var
a=0;a<e;a++)/*<<+nat.js 231 32>>*/b+=/*<<+nat.js 232 13>>*/cc(f,i+a,c-a,g,j,d,h,k+a);/*<<+nat.js 234 2>>*/return b/*<<+nat.js 235 0>>*/}/*<<+nat.js 241 0>>*/function
kc(c,d,b,f,g,e){/*<<+nat.js 242 2>>*/ /*<<+nat.js 242 12>>*/var
a=0;a+=/*<<+nat.js 243 11>>*/bC(c,d,b,c,d,b,0);a+=/*<<+nat.js 244 11>>*/eB(c,d,b,f,g,e,f,g,e);/*<<+nat.js 245 2>>*/return a/*<<+nat.js 246 0>>*/}/*<<+jslib_js_of_ocaml.js 27 0>>*/function
hp(a){/*<<+jslib_js_of_ocaml.js 27 33>>*/return a/*<<+jslib_js_of_ocaml.js 27 43>>*/}/*<<+array.js 116 0>>*/function
f5(a){/*<<+array.js 117 2>>*/if(a<0)/*<<+array.js 117 15>>*/n();/*<<+array.js 118 2>>*/var/*<<+array.js 118 10>>*/a=a+1|0,/*<<+array.js 119 8>>*/b=new
Array(a);b[0]=N;/*<<+array.js 121 2>>*/for(/*<<+array.js 121 13>>*/var
c=1;c<a;c++)b[c]=0;/*<<+array.js 122 2>>*/return b/*<<+array.js 123 0>>*/}/*<<+gc.js 18 0>>*/function
gg(){/*<<+gc.js 19 2>>*/return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]/*<<+gc.js 20 0>>*/}/*<<+sys.js 109 0>>*/function
jC(a){az=a;/*<<+sys.js 111 2>>*/return 0/*<<+sys.js 112 0>>*/}/*<<+obj.js 94 0>>*/ /*<<+obj.js 94 22>>*/var
ba=[];/*<<+obj.js 95 0>>*/function
gl(i,h,d){/*<<+obj.js 96 2>>*/var/*<<+obj.js 96 12>>*/b=i[1],/*<<+obj.js 97 10>>*/g=ba[d];/*<<+obj.js 98 2>>*/if(g===null)/*<<+obj.js 98 20>>*/for(/*<<+obj.js 100 15>>*/var
f=ba.length;f<d;f++)ba[f]=0;else/*<<+obj.js 102 9>>*/if(b[g]===h)/*<<+obj.js 102 33>>*/return b[g-1];/*<<+obj.js 96 2>>*/var/*<<+obj.js 105 9>>*/a=3,/*<<+obj.js 105 17>>*/e=b[1]*2+1,c;/*<<+obj.js 106 2>>*/while(a<e)/*<<+obj.js 106 18>>*/{c=a+e>>1|1;/*<<+obj.js 108 4>>*/if(h<b[c+1])e=c-2;else
a=c}ba[d]=a+1;/*<<+obj.js 113 2>>*/return h==b[a+1]?b[a]:0/*<<+obj.js 114 0>>*/}/*<<+jslib.js 73 0>>*/function
ht(){/*<<+jslib.js 74 2>>*/var/*<<+jslib.js 74 8>>*/c=a.console?a.console:{},/*<<+jslib.js 75 8>>*/d=["log","debug","info","warn","error","assert","dir","dirxml","trace","group","groupCollapsed","groupEnd","time","timeEnd"];/*<<+jslib.js 77 2>>*/function
e(){/*<<+jslib.js 77 17>>*/}/*<<+jslib.js 78 2>>*/for(/*<<+jslib.js 78 13>>*/var
b=0;b<d.length;b++)/*<<+jslib.js 78 37>>*/if(!c[d[b]])c[d[b]]=e;/*<<+jslib.js 79 2>>*/return c/*<<+jslib.js 80 0>>*/}/*<<+sys.js 64 0>>*/function
jK(a){/*<<+sys.js 65 2>>*/return/*<<+sys.js 65 9>>*/en(a)/*<<+sys.js 66 0>>*/}/*<<+io.js 132 0>>*/function
ie(c){/*<<+io.js 133 2>>*/ /*<<+io.js 133 11>>*/var
b=i.fds[c];/*<<+io.js 134 2>>*/if(b.flags.wronly)/*<<+io.js 134 24>>*/j(dh+c+" is writeonly");/*<<+io.js 133 2>>*/ /*<<+io.js 136 14>>*/var
a={file:b.file,offset:b.offset,fd:c,opened:true,out:false,refill:null};g[a.fd]=a;/*<<+io.js 145 2>>*/return a.fd/*<<+io.js 146 0>>*/}/*<<+bigstring.js 28 0>>*/function
eI(b){/*<<+bigstring.js 29 2>>*/ /*<<+bigstring.js 29 9>>*/var
c=new(a.Uint8Array)(b.buffer,b.byteOffset,b.length*b.BYTES_PER_ELEMENT);/*<<+bigstring.js 30 2>>*/return/*<<+bigstring.js 30 9>>*/H(12,0,[c.length],c)/*<<+bigstring.js 31 0>>*/}/*<<+ieee_754.js 299 0>>*/function
i1(a){/*<<+ieee_754.js 299 32>>*/return/*<<+ieee_754.js 299 39>>*/Math.round(a)/*<<+ieee_754.js 299 54>>*/}/*<<+jslib_js_of_ocaml.js 118 0>>*/function
iM(b,a){/*<<+jslib_js_of_ocaml.js 119 2>>*/switch(a.length){case
0:/*<<+jslib_js_of_ocaml.js 120 10>>*/return new
b();case
1:/*<<+jslib_js_of_ocaml.js 121 10>>*/return new
b(a[0]);case
2:/*<<+jslib_js_of_ocaml.js 122 10>>*/return new
b(a[0],a[1]);case
3:/*<<+jslib_js_of_ocaml.js 123 10>>*/return new
b(a[0],a[1],a[2]);case
4:/*<<+jslib_js_of_ocaml.js 124 10>>*/return new
b(a[0],a[1],a[2],a[3]);case
5:/*<<+jslib_js_of_ocaml.js 125 10>>*/return new
b(a[0],a[1],a[2],a[3],a[4]);case
6:/*<<+jslib_js_of_ocaml.js 126 10>>*/return new
b(a[0],a[1],a[2],a[3],a[4],a[5]);case
7:/*<<+jslib_js_of_ocaml.js 127 10>>*/return new
b(a[0],a[1],a[2],a[3],a[4],a[5],a[6])}/*<<+jslib_js_of_ocaml.js 129 2>>*/function
c(){/*<<+jslib_js_of_ocaml.js 129 17>>*/return/*<<+jslib_js_of_ocaml.js 129 24>>*/b.apply(this,a)/*<<+jslib_js_of_ocaml.js 129 42>>*/}c.prototype=b.prototype;/*<<+jslib_js_of_ocaml.js 131 2>>*/return new
c()/*<<+jslib_js_of_ocaml.js 132 0>>*/}/*<<+nat.js 161 0>>*/function
jV(b,c,d){/*<<+nat.js 162 2>>*/for(/*<<+nat.js 162 12>>*/var
a=0;a<d;a++)/*<<+nat.js 162 31>>*/b.data[c+a]=(-1>>>0)-(b.data[c+a]>>>0)/*<<+nat.js 165 0>>*/}/*<<+jslib.js 46 0>>*/ /*<<+jslib.js 46 20>>*/var
a_={amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};/*<<+jslib.js 47 0>>*/function
hv(a){/*<<+jslib.js 48 2>>*/if(!/*<<+jslib.js 48 7>>*/a_.all.test(a))/*<<+jslib.js 48 36>>*/return a;/*<<+jslib.js 49 2>>*/return/*<<+jslib.js 49 9>>*/ /*<<+jslib.js 49 9>>*/ /*<<+jslib.js 49 9>>*/a.replace(a_.amp,"&amp;").replace(a_.lt,"&lt;").replace(a_.quot,"&quot;")/*<<+jslib.js 52 0>>*/}/*<<+bigarray.js 368 0>>*/function
eX(a){/*<<+bigarray.js 369 2>>*/return/*<<+bigarray.js 369 9>>*/aY(a,1)/*<<+bigarray.js 370 0>>*/}/*<<+jslib_js_of_ocaml.js 183 0>>*/function
hO(d){/*<<+jslib_js_of_ocaml.js 184 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 185 4>>*/var/*<<+jslib_js_of_ocaml.js 185 12>>*/c=arguments.length,/*<<+jslib_js_of_ocaml.js 186 13>>*/b=new
Array(c);/*<<+jslib_js_of_ocaml.js 187 4>>*/for(/*<<+jslib_js_of_ocaml.js 187 15>>*/var
a=0;a<c;a++)b[a]=arguments[a];/*<<+jslib_js_of_ocaml.js 188 4>>*/return/*<<+jslib_js_of_ocaml.js 188 11>>*/T(d,[this,b])/*<<+jslib_js_of_ocaml.js 184 9>>*/}/*<<+jslib_js_of_ocaml.js 190 0>>*/}/*<<+ieee_754.js 291 0>>*/function
i8(a){/*<<+ieee_754.js 291 31>>*/return(/*<<+ieee_754.js 291 39>>*/Math.exp(a)-/*<<+ieee_754.js 291 53>>*/Math.exp(-a))/2/*<<+ieee_754.js 291 72>>*/}/*<<+ieee_754.js 206 0>>*/function
hS(b,a){a|=0;/*<<+ieee_754.js 208 2>>*/if(a>P)/*<<+ieee_754.js 208 18>>*/{a-=P;b*=/*<<+ieee_754.js 210 9>>*/Math.pow(2,P);/*<<+ieee_754.js 211 4>>*/if(a>P)/*<<+ieee_754.js 211 20>>*/{a-=P;b*=/*<<+ieee_754.js 213 11>>*/Math.pow(2,P)}}/*<<+ieee_754.js 216 2>>*/if(a<-P)/*<<+ieee_754.js 216 19>>*/{a+=P;b*=/*<<+ieee_754.js 218 9>>*/Math.pow(2,-P)}b*=/*<<+ieee_754.js 220 7>>*/Math.pow(2,a);/*<<+ieee_754.js 221 2>>*/return b/*<<+ieee_754.js 222 0>>*/}/*<<+graphics.js 33 0>>*/function
dR(a){C=a;/*<<+graphics.js 35 2>>*/dQ();/*<<+graphics.js 36 2>>*/return 0/*<<+graphics.js 37 0>>*/}/*<<+jslib_js_of_ocaml.js 160 0>>*/function
hM(b,c){/*<<+jslib_js_of_ocaml.js 161 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 162 4>>*/ /*<<+jslib_js_of_ocaml.js 162 10>>*/var
f=arguments.length;/*<<+jslib_js_of_ocaml.js 163 4>>*/if(f==b&&c.length==b)/*<<+jslib_js_of_ocaml.js 163 40>>*/return/*<<+jslib_js_of_ocaml.js 163 47>>*/c.apply(null,arguments);/*<<+jslib_js_of_ocaml.js 162 4>>*/var/*<<+jslib_js_of_ocaml.js 164 13>>*/d=new
Array(b),/*<<+jslib_js_of_ocaml.js 165 12>>*/e=/*<<+jslib_js_of_ocaml.js 165 14>>*/Math.min(arguments.length,b);/*<<+jslib_js_of_ocaml.js 166 4>>*/for(/*<<+jslib_js_of_ocaml.js 166 15>>*/var
a=0;a<e;a++)d[a]=arguments[a];/*<<+jslib_js_of_ocaml.js 167 4>>*/return/*<<+jslib_js_of_ocaml.js 167 11>>*/T(c,d)/*<<+jslib_js_of_ocaml.js 161 9>>*/}/*<<+jslib_js_of_ocaml.js 169 0>>*/}/*<<+bigarray.js 481 0>>*/function
e_(a,b,c){/*<<+bigarray.js 482 2>>*/a.set(/*<<+bigarray.js 482 9>>*/a.offset(b),c);/*<<+bigarray.js 483 2>>*/return 0/*<<+bigarray.js 484 0>>*/}/*<<+backtrace.js 40 0>>*/function
gh(){/*<<+backtrace.js 40 41>>*/return[0]/*<<+backtrace.js 40 53>>*/}/*<<+nat.js 375 0>>*/function
j1(a,c,b,d){a.data[c]&=b.data[d];/*<<+nat.js 377 2>>*/return 0/*<<+nat.js 378 0>>*/}/*<<+int64.js 262 0>>*/function
g9(a,b){/*<<+int64.js 262 33>>*/return/*<<+int64.js 262 40>>*/a.mod(b)/*<<+int64.js 262 49>>*/}/*<<+obj.js 47 0>>*/function
iI(b,a){b[0]=a;/*<<+obj.js 47 49>>*/return 0/*<<+obj.js 47 59>>*/}/*<<+fs.js 216 0>>*/function
fG(c,b){/*<<+fs.js 217 2>>*/if(a.caml_create_file)/*<<+fs.js 218 4>>*/a.caml_create_file(c,b);else/*<<+fs.js 219 7>>*/{/*<<+fs.js 220 4>>*/if(!a.caml_fs_tmp)a.caml_fs_tmp=[];/*<<+fs.js 221 4>>*/a.caml_fs_tmp.push({name:c,content:b})}/*<<+fs.js 223 2>>*/return 0/*<<+fs.js 224 0>>*/}/*<<+ints.js 118 0>>*/function
g4(a){/*<<+ints.js 119 2>>*/return(a&0x000000FF)<<24|(a&0x0000FF00)<<8|(a&0x00FF0000)>>>8|(a&0xFF000000)>>>24/*<<+ints.js 123 0>>*/}/*<<+unix.js 49 0>>*/function
kk(){/*<<+unix.js 49 24>>*/}/*<<+bigarray.js 493 0>>*/function
fa(a,b,c,d,e){/*<<+bigarray.js 494 2>>*/a.set(/*<<+bigarray.js 494 9>>*/a.offset([b,c,d]),e);/*<<+bigarray.js 495 2>>*/return 0/*<<+bigarray.js 496 0>>*/}/*<<+jslib.js 33 0>>*/function
hw(b,a){/*<<+jslib.js 33 35>>*/return b
instanceof
a/*<<+jslib.js 33 58>>*/}/*<<+bigstring-cstruct.js 11 0>>*/ /*<<+bigstring-cstruct.js 11 34>>*/var
fp=dv;/*<<+nat.js 84 0>>*/function
j6(a,b){/*<<+nat.js 85 2>>*/return a.data[b]/*<<+nat.js 86 0>>*/}/*<<+nat.js 78 0>>*/function
kb(b,c,a){b.data[c]=a;/*<<+nat.js 80 2>>*/return 0/*<<+nat.js 81 0>>*/}/*<<+mlBytes.js 389 0>>*/function
jj(c,a,b){/*<<+mlBytes.js 390 2>>*/return/*<<+mlBytes.js 390 9>>*/dE(c,a,b)/*<<+mlBytes.js 391 0>>*/}/*<<+graphics.js 102 0>>*/function
dP(a,d,c){/*<<+graphics.js 103 2>>*/ /*<<+graphics.js 103 14>>*/var
b=/*<<+graphics.js 103 16>>*/a.getContext(cN);/*<<+graphics.js 104 2>>*/return{context:b,canvas:a,x:0,y:0,width:d,height:c,line_width:1,font:/*<<+graphics.js 112 11>>*/f("fixed"),text_size:26,color:0x000000,title:/*<<+graphics.js 115 12>>*/f(e)}/*<<+graphics.js 117 0>>*/}/*<<+jslib_js_of_ocaml.js 135 0>>*/function
hK(d){/*<<+jslib_js_of_ocaml.js 136 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 137 4>>*/ /*<<+jslib_js_of_ocaml.js 137 12>>*/var
b=arguments.length;/*<<+jslib_js_of_ocaml.js 138 4>>*/if(b>0)/*<<+jslib_js_of_ocaml.js 138 15>>*/{/*<<+jslib_js_of_ocaml.js 139 6>>*/ /*<<+jslib_js_of_ocaml.js 139 15>>*/var
c=new
Array(b);/*<<+jslib_js_of_ocaml.js 140 6>>*/for(/*<<+jslib_js_of_ocaml.js 140 17>>*/var
a=0;a<b;a++)c[a]=arguments[a];/*<<+jslib_js_of_ocaml.js 141 6>>*/return/*<<+jslib_js_of_ocaml.js 141 13>>*/T(d,c)}else/*<<+jslib_js_of_ocaml.js 142 11>>*/return/*<<+jslib_js_of_ocaml.js 143 13>>*/T(d,[undefined])/*<<+jslib_js_of_ocaml.js 136 9>>*/}/*<<+jslib_js_of_ocaml.js 146 0>>*/}/*<<+graphics.js 295 0>>*/function
gv(f,g,d,e,b,c){/*<<+graphics.js 296 2>>*/ /*<<+graphics.js 296 8>>*/var
a=/*<<+graphics.js 296 10>>*/k();/*<<+graphics.js 297 2>>*/a.context.beginPath();/*<<+graphics.js 298 2>>*/bQ(a.context,f,a.height-g,d,e,b,c);/*<<+graphics.js 299 2>>*/a.context.stroke();/*<<+graphics.js 300 2>>*/return 0/*<<+graphics.js 301 0>>*/}/*<<+fs.js 204 0>>*/function
dt(g,b,d,f,a,e){/*<<+fs.js 206 2>>*/c("caml_ba_map_file not implemented")/*<<+fs.js 207 0>>*/}/*<<+fs.js 211 0>>*/function
e7(a,b){/*<<+fs.js 212 2>>*/return/*<<+fs.js 212 9>>*/dt(a[0],a[1],a[2],a[3],a[4],a[5])/*<<+fs.js 213 0>>*/}/*<<+bigarray.js 799 0>>*/function
eV(b,c,g,a,f,e){/*<<+bigarray.js 800 2>>*/if(c||/*<<+bigarray.js 800 14>>*/aA(a)==2)/*<<+bigarray.js 800 54>>*/ /*<<+bigarray.js 801 4>>*/d("caml_ba_create_from: use return caml_ba_create_unsafe");/*<<+bigarray.js 803 2>>*/return/*<<+bigarray.js 803 9>>*/H(a,f,e,b)/*<<+bigarray.js 804 0>>*/}/*<<+ieee_754.js 293 0>>*/function
jL(a){/*<<+ieee_754.js 294 2>>*/var/*<<+ieee_754.js 294 8>>*/b=/*<<+ieee_754.js 294 10>>*/Math.exp(a),/*<<+ieee_754.js 294 25>>*/c=/*<<+ieee_754.js 294 27>>*/Math.exp(-a);/*<<+ieee_754.js 295 2>>*/return(b-c)/(b+c)/*<<+ieee_754.js 296 0>>*/}/*<<+graphics.js 344 0>>*/function
bR(b){/*<<+graphics.js 345 2>>*/var/*<<+graphics.js 345 8>>*/a=/*<<+graphics.js 345 10>>*/k(),/*<<+graphics.js 346 8>>*/d=/*<<+graphics.js 346 10>>*/a.context.measureText(b),/*<<+graphics.js 347 9>>*/c=d.width;/*<<+graphics.js 348 2>>*/a.context.fillText(b,a.x,a.height-a.y);a.x+=c|0;/*<<+graphics.js 350 2>>*/return 0/*<<+graphics.js 351 0>>*/}/*<<+graphics.js 363 0>>*/function
gz(a){/*<<+graphics.js 364 2>>*/bR(/*<<+graphics.js 364 19>>*/t(a));/*<<+graphics.js 365 2>>*/return 0/*<<+graphics.js 366 0>>*/}/*<<+graphics.js 355 0>>*/function
gw(a){/*<<+graphics.js 356 2>>*/bR(/*<<+graphics.js 356 19>>*/String.fromCharCode(a));/*<<+graphics.js 357 2>>*/return 0/*<<+graphics.js 358 0>>*/}/*<<+fs.js 106 0>>*/function
jQ(c){/*<<+fs.js 107 2>>*/var/*<<+fs.js 107 11>>*/d=/*<<+fs.js 107 13>>*/a$(c),/*<<+fs.js 108 11>>*/c=/*<<+fs.js 108 13>>*/d.join(z)+z,/*<<+fs.js 109 10>>*/b=-1;/*<<+fs.js 110 2>>*/for(/*<<+fs.js 110 12>>*/var
a=0;a<M.length;a++)/*<<+fs.js 111 4>>*/if(M[a].path==c)b=a;/*<<+fs.js 112 2>>*/if(b>-1)/*<<+fs.js 112 15>>*/M.splice(b,1);/*<<+fs.js 113 2>>*/return 0/*<<+fs.js 114 0>>*/}/*<<+marshal.js 134 0>>*/function
g2(c,a){/*<<+marshal.js 135 2>>*/ /*<<+marshal.js 135 13>>*/var
b=new
aW(c,typeof
a=="number"?a:a[0]);/*<<+marshal.js 136 2>>*/return/*<<+marshal.js 136 9>>*/bT(b,a)/*<<+marshal.js 137 0>>*/}/*<<+io.js 317 0>>*/function
il(a){/*<<+io.js 317 36>>*/return/*<<+io.js 317 43>>*/a8(g[a].offset)/*<<+io.js 317 95>>*/}/*<<+graphics.js 442 0>>*/function
gx(b,f,g){/*<<+graphics.js 443 2>>*/ /*<<+graphics.js 443 8>>*/var
c=/*<<+graphics.js 443 10>>*/k();/*<<+graphics.js 444 2>>*/if(!b.image)/*<<+graphics.js 444 16>>*/{/*<<+graphics.js 445 4>>*/ /*<<+graphics.js 445 15>>*/var
d=/*<<+graphics.js 445 17>>*/document.createElement(cz);d.width=c.width;d.height=c.height;/*<<+graphics.js 448 4>>*/ /*<<+graphics.js 448 4>>*/d.getContext(cN).putImageData(b,0,0);/*<<+graphics.js 445 4>>*/ /*<<+graphics.js 449 14>>*/var
e=new(a.Image)();e.onload=function(){/*<<+graphics.js 451 6>>*/c.context.drawImage(e,f,c.height-b.height-g);b.image=e/*<<+graphics.js 450 19>>*/};e.src=/*<<+graphics.js 454 16>>*/d.toDataURL("image/png")}else/*<<+graphics.js 455 9>>*/ /*<<+graphics.js 456 4>>*/c.context.drawImage(b.image,f,c.height-b.height-g);/*<<+graphics.js 458 2>>*/return 0/*<<+graphics.js 459 0>>*/}/*<<+sys.js 234 0>>*/function
iY(a){/*<<+sys.js 235 2>>*/return 0/*<<+sys.js 236 0>>*/}/*<<+mlBytes.js 308 0>>*/function
jg(b,a,c){/*<<+mlBytes.js 309 2>>*/if(a>>>0>=b.l)/*<<+mlBytes.js 309 22>>*/aE();/*<<+mlBytes.js 310 2>>*/return/*<<+mlBytes.js 310 9>>*/el(b,a,c)/*<<+mlBytes.js 311 0>>*/}/*<<+io.js 425 0>>*/function
im(a){/*<<+io.js 426 2>>*/aq(a);/*<<+io.js 427 2>>*/return g[a].offset/*<<+io.js 428 0>>*/}/*<<+sys.js 229 0>>*/function
i9(a){/*<<+sys.js 230 2>>*/return 0/*<<+sys.js 231 0>>*/}/*<<+mlBytes.js 544 0>>*/function
fx(a,b){/*<<+mlBytes.js 544 39>>*/return 1-/*<<+mlBytes.js 544 48>>*/b6(a,b)/*<<+mlBytes.js 544 75>>*/}/*<<+sys.js 199 0>>*/function
i2(a){/*<<+sys.js 200 2>>*/return/*<<+sys.js 200 9>>*/f(e)/*<<+sys.js 201 0>>*/}/*<<+jslib_js_of_ocaml.js 235 0>>*/function
hz(b){/*<<+jslib_js_of_ocaml.js 236 2>>*/ /*<<+jslib_js_of_ocaml.js 236 8>>*/var
c={};/*<<+jslib_js_of_ocaml.js 237 2>>*/for(/*<<+jslib_js_of_ocaml.js 237 13>>*/var
a=1;a<b.length;a++)/*<<+jslib_js_of_ocaml.js 237 37>>*/{/*<<+jslib_js_of_ocaml.js 238 4>>*/ /*<<+jslib_js_of_ocaml.js 238 10>>*/var
d=b[a];c[/*<<+jslib_js_of_ocaml.js 239 6>>*/t(d[1])]=d[2]}/*<<+jslib_js_of_ocaml.js 241 2>>*/return c/*<<+jslib_js_of_ocaml.js 242 0>>*/}/*<<+bigarray.js 322 0>>*/function
eU(b,e,d){/*<<+bigarray.js 323 2>>*/var/*<<+bigarray.js 323 11>>*/a=/*<<+bigarray.js 323 13>>*/L(d),/*<<+bigarray.js 324 11>>*/c=/*<<+bigarray.js 324 13>>*/bF(b,/*<<+bigarray.js 324 41>>*/al(a));/*<<+bigarray.js 325 2>>*/return/*<<+bigarray.js 325 9>>*/H(b,e,a,c)/*<<+bigarray.js 326 0>>*/}/*<<+weak.js 83 0>>*/function
er(a,c,b,d,e){/*<<+weak.js 85 2>>*/dq(a,K+c-1,b,K+d-1,e);/*<<+weak.js 88 2>>*/return 0/*<<+weak.js 89 0>>*/}/*<<+graphics.js 496 0>>*/function
gK(){/*<<+graphics.js 497 2>>*/c("caml_gr_remember_mode not Implemented")/*<<+graphics.js 498 0>>*/}/*<<+ints.js 113 0>>*/function
fr(a){/*<<+ints.js 114 2>>*/return(a&0x00FF)<<8|(a&cU)>>8/*<<+ints.js 116 0>>*/}/*<<+io.js 159 0>>*/function
iu(d,b){/*<<+io.js 160 2>>*/var/*<<+io.js 160 11>>*/c=g[d],/*<<+io.js 161 11>>*/a=i.fds[c.fd];a.flags.text=!b;a.flags.binary=b;/*<<+io.js 164 2>>*/return 0/*<<+io.js 165 0>>*/}/*<<+gc.js 38 0>>*/function
f0(){/*<<+gc.js 38 34>>*/return 0/*<<+gc.js 38 44>>*/}/*<<+graphics.js 259 0>>*/function
gy(d,e,c,b){/*<<+graphics.js 260 2>>*/ /*<<+graphics.js 260 8>>*/var
a=/*<<+graphics.js 260 10>>*/k();/*<<+graphics.js 261 2>>*/a.context.strokeRect(d,a.height-e,c,-b);/*<<+graphics.js 262 2>>*/return 0/*<<+graphics.js 263 0>>*/}/*<<+mlBytes.js 227 0>>*/function
ja(b,a){/*<<+mlBytes.js 228 2>>*/if(a>>>0>=/*<<+mlBytes.js 228 17>>*/r(b)-1)/*<<+mlBytes.js 228 47>>*/aE();/*<<+mlBytes.js 229 2>>*/var/*<<+mlBytes.js 229 9>>*/c=/*<<+mlBytes.js 229 11>>*/u(b,a),/*<<+mlBytes.js 230 9>>*/d=/*<<+mlBytes.js 230 11>>*/u(b,a+1);/*<<+mlBytes.js 231 2>>*/return d<<8|c/*<<+mlBytes.js 232 0>>*/}/*<<+weak.js 163 0>>*/function
fU(a,b){a[Y]=undefined;/*<<+weak.js 165 2>>*/return 0/*<<+weak.js 166 0>>*/}/*<<+io.js 400 0>>*/function
iN(b,d,c){/*<<+io.js 401 2>>*/ /*<<+io.js 401 8>>*/var
a=/*<<+io.js 401 10>>*/eg(d,c);/*<<+io.js 402 2>>*/bb(b,a,0,/*<<+io.js 402 28>>*/r(a));/*<<+io.js 403 2>>*/return 0/*<<+io.js 404 0>>*/}/*<<+bigarray.js 437 0>>*/function
e2(a,b,c,d){/*<<+bigarray.js 438 2>>*/return/*<<+bigarray.js 438 9>>*/a.get(/*<<+bigarray.js 438 16>>*/a.offset([b,c,d]))/*<<+bigarray.js 439 0>>*/}/*<<+weak.js 97 0>>*/var/*<<+weak.js 97 23>>*/fK=er,/*<<+sys.js 134 22>>*/g0=/*<<+sys.js 134 24>>*/new
Date().getTime()*cP;/*<<+sys.js 135 0>>*/function
eo(){/*<<+sys.js 136 2>>*/ /*<<+sys.js 136 10>>*/var
a=/*<<+sys.js 136 12>>*/new
Date().getTime();/*<<+sys.js 137 2>>*/return a*cP-g0/*<<+sys.js 138 0>>*/}/*<<+sys.js 142 0>>*/function
jJ(a){/*<<+sys.js 143 2>>*/return/*<<+sys.js 143 9>>*/eo()/*<<+sys.js 144 0>>*/}/*<<+array.js 88 0>>*/function
fz(a,b){/*<<+array.js 89 2>>*/if(b>>>0>=a.length-1)/*<<+array.js 89 39>>*/n();/*<<+array.js 90 2>>*/return a/*<<+array.js 91 0>>*/}/*<<+hash.js 188 0>>*/function
dV(a,b){/*<<+hash.js 189 2>>*/return/*<<+hash.js 189 9>>*/a3(a,/*<<+hash.js 189 34>>*/o(b))/*<<+hash.js 190 0>>*/}/*<<+hash.js 198 0>>*/function
gV(j,l,n,m){/*<<+hash.js 199 2>>*/var
f,g,h,d,c,b,a,e,i;d=l;/*<<+hash.js 201 2>>*/if(d<0||d>aa)d=aa;c=j;b=n;f=[m];g=0;h=1;/*<<+hash.js 205 2>>*/while(g<h&&c>0)/*<<+hash.js 205 29>>*/{a=f[g++];/*<<+hash.js 207 4>>*/if(a&&a.caml_custom){/*<<+hash.js 207 27>>*/if(J[a.caml_custom]&&J[a.caml_custom].hash)/*<<+hash.js 208 80>>*/{/*<<+hash.js 209 8>>*/ /*<<+hash.js 209 15>>*/var
k=/*<<+hash.js 209 17>>*/J[a.caml_custom].hash(a);b=/*<<+hash.js 210 12>>*/q(b,k);c--}}else/*<<+hash.js 214 9>>*/if(a
instanceof
Array&&a[0]===(a[0]|0))/*<<+hash.js 214 54>>*/switch(a[0]){case
248:b=/*<<+hash.js 218 12>>*/q(b,a[2]);c--;/*<<+hash.js 220 8>>*/break;case
250:f[--g]=a[1];/*<<+hash.js 224 8>>*/break;default:/*<<+hash.js 226 8>>*/ /*<<+hash.js 226 16>>*/var
o=a.length-1<<10|a[0];b=/*<<+hash.js 227 12>>*/q(b,o);/*<<+hash.js 228 8>>*/for(e=1,i=a.length;e<i;e++)/*<<+hash.js 228 50>>*/{/*<<+hash.js 229 10>>*/if(h>=d)/*<<+hash.js 229 24>>*/break;f[h++]=a[e]}/*<<+hash.js 232 8>>*/break}else/*<<+hash.js 234 11>>*/if(/*<<+hash.js 234 15>>*/af(a))/*<<+hash.js 234 36>>*/{b=/*<<+hash.js 235 10>>*/dS(b,a);c--}else/*<<+hash.js 237 11>>*/if(/*<<+hash.js 237 15>>*/ap(a))/*<<+hash.js 237 37>>*/{b=/*<<+hash.js 238 10>>*/dV(b,a);c--}else/*<<+hash.js 240 11>>*/if(typeof
a==="string")/*<<+hash.js 240 38>>*/{b=/*<<+hash.js 241 10>>*/a3(b,a);c--}else/*<<+hash.js 243 11>>*/if(a===(a|0))/*<<+hash.js 243 28>>*/{b=/*<<+hash.js 245 10>>*/q(b,a+a+1);c--}else/*<<+hash.js 247 11>>*/if(a===+a)/*<<+hash.js 247 25>>*/{b=/*<<+hash.js 249 10>>*/a2(b,a);c--}}b=/*<<+hash.js 253 6>>*/dT(b);/*<<+hash.js 254 2>>*/return b&ck/*<<+hash.js 255 0>>*/}/*<<+obj.js 31 0>>*/function
iJ(a){/*<<+obj.js 32 2>>*/if(a
instanceof
Array&&a[0]==a[0]>>>0)/*<<+obj.js 33 4>>*/return a[0];else/*<<+obj.js 34 7>>*/if(/*<<+obj.js 34 11>>*/af(a))/*<<+obj.js 35 4>>*/return bt;else/*<<+obj.js 36 7>>*/if(/*<<+obj.js 36 11>>*/ap(a))/*<<+obj.js 37 4>>*/return bt;else/*<<+obj.js 38 7>>*/if(a
instanceof
Function||typeof
a=="function")/*<<+obj.js 39 4>>*/return 247;else/*<<+obj.js 40 7>>*/if(a&&a.caml_custom)/*<<+obj.js 41 4>>*/return cL;else/*<<+obj.js 43 4>>*/return ab/*<<+obj.js 44 0>>*/}/*<<+bigarray.js 873 0>>*/function
fe(a){/*<<+bigarray.js 874 2>>*/return a.data/*<<+bigarray.js 875 0>>*/}/*<<+jslib_js_of_ocaml.js 246 0>>*/function
hm(){/*<<+jslib_js_of_ocaml.js 247 2>>*/return typeof
module!=="undefined"&&module&&module.exports?module.exports:a/*<<+jslib_js_of_ocaml.js 251 0>>*/}/*<<+mlBytes.js 257 0>>*/function
ft(b,a){/*<<+mlBytes.js 258 2>>*/if(a>>>0>=b.l-3)/*<<+mlBytes.js 258 26>>*/ad();/*<<+mlBytes.js 259 2>>*/var/*<<+mlBytes.js 259 9>>*/c=/*<<+mlBytes.js 259 11>>*/y(b,a),/*<<+mlBytes.js 260 9>>*/d=/*<<+mlBytes.js 260 11>>*/y(b,a+1),/*<<+mlBytes.js 261 9>>*/e=/*<<+mlBytes.js 261 11>>*/y(b,a+2),/*<<+mlBytes.js 262 9>>*/f=/*<<+mlBytes.js 262 11>>*/y(b,a+3);/*<<+mlBytes.js 263 2>>*/return f<<24|e<<16|d<<8|c/*<<+mlBytes.js 264 0>>*/}/*<<+ieee_754.js 225 0>>*/function
f9(a){/*<<+ieee_754.js 226 2>>*/if(a==0||!/*<<+ieee_754.js 226 19>>*/isFinite(a))/*<<+ieee_754.js 226 32>>*/return[0,a,0];/*<<+ieee_754.js 227 2>>*/ /*<<+ieee_754.js 227 10>>*/var
c=a<0;/*<<+ieee_754.js 228 2>>*/if(c)a=-a;/*<<+ieee_754.js 227 2>>*/ /*<<+ieee_754.js 229 10>>*/var
b=/*<<+ieee_754.js 229 12>>*/Math.max(-P,/*<<+ieee_754.js 229 28>>*/ca(a)+1);a*=/*<<+ieee_754.js 230 7>>*/Math.pow(2,-b);/*<<+ieee_754.js 231 2>>*/while(a<cv)/*<<+ieee_754.js 231 18>>*/{a*=2;b--}/*<<+ieee_754.js 235 2>>*/while(a>=1)/*<<+ieee_754.js 235 17>>*/{a*=cv;b++}/*<<+ieee_754.js 239 2>>*/if(c)a=-a;/*<<+ieee_754.js 240 2>>*/return[0,a,b]/*<<+ieee_754.js 241 0>>*/}/*<<+mlBytes.js 270 0>>*/function
jc(d,c){/*<<+mlBytes.js 271 2>>*/if(c>>>0>=/*<<+mlBytes.js 271 17>>*/r(d)-7)/*<<+mlBytes.js 271 47>>*/aE();/*<<+mlBytes.js 272 2>>*/ /*<<+mlBytes.js 272 8>>*/var
b=new
Array(8);/*<<+mlBytes.js 273 2>>*/for(/*<<+mlBytes.js 273 12>>*/var
a=0;a<8;a++)/*<<+mlBytes.js 273 28>>*/b[7-a]=/*<<+mlBytes.js 274 15>>*/u(d,c+a);/*<<+mlBytes.js 276 2>>*/return/*<<+mlBytes.js 276 9>>*/U(b)/*<<+mlBytes.js 277 0>>*/}/*<<+io.js 432 0>>*/function
io(a){/*<<+io.js 433 2>>*/aq(a);/*<<+io.js 434 2>>*/return/*<<+io.js 434 9>>*/a8(g[a].offset)/*<<+io.js 435 0>>*/}/*<<+graphics.js 519 0>>*/function
gp(a){/*<<+graphics.js 520 2>>*/c("caml_gr_close_subwindow not Implemented")/*<<+graphics.js 521 0>>*/}/*<<+sys.js 38 0>>*/function
i6(b,c){/*<<+sys.js 39 2>>*/if(!a.jsoo_static_env)a.jsoo_static_env={};a.jsoo_static_env[b]=c;/*<<+sys.js 42 2>>*/return 0/*<<+sys.js 43 0>>*/}/*<<+bigarray.js 330 0>>*/function
eT(a,c){/*<<+bigarray.js 331 2>>*/if(a.layout==c)/*<<+bigarray.js 331 26>>*/return a;/*<<+bigarray.js 332 2>>*/ /*<<+bigarray.js 332 15>>*/var
d=[];/*<<+bigarray.js 333 2>>*/for(/*<<+bigarray.js 333 12>>*/var
b=0;b<a.dims.length;b++)d[b]=a.dims[a.dims.length-b-1];/*<<+bigarray.js 334 2>>*/return/*<<+bigarray.js 334 9>>*/H(a.kind,c,d,a.data)/*<<+bigarray.js 335 0>>*/}/*<<+jslib_js_of_ocaml.js 101 0>>*/function
hy(b,a){/*<<+jslib_js_of_ocaml.js 102 2>>*/switch(a.length){case
1:/*<<+jslib_js_of_ocaml.js 103 10>>*/return new
b();case
2:/*<<+jslib_js_of_ocaml.js 104 10>>*/return new
b(a[1]);case
3:/*<<+jslib_js_of_ocaml.js 105 10>>*/return new
b(a[1],a[2]);case
4:/*<<+jslib_js_of_ocaml.js 106 10>>*/return new
b(a[1],a[2],a[3]);case
5:/*<<+jslib_js_of_ocaml.js 107 10>>*/return new
b(a[1],a[2],a[3],a[4]);case
6:/*<<+jslib_js_of_ocaml.js 108 10>>*/return new
b(a[1],a[2],a[3],a[4],a[5]);case
7:/*<<+jslib_js_of_ocaml.js 109 10>>*/return new
b(a[1],a[2],a[3],a[4],a[5],a[6]);case
8:/*<<+jslib_js_of_ocaml.js 110 10>>*/return new
b(a[1],a[2],a[3],a[4],a[5],a[6],a[7])}/*<<+jslib_js_of_ocaml.js 112 2>>*/function
c(){/*<<+jslib_js_of_ocaml.js 112 17>>*/return/*<<+jslib_js_of_ocaml.js 112 24>>*/b.apply(this,/*<<+jslib_js_of_ocaml.js 112 38>>*/L(a))/*<<+jslib_js_of_ocaml.js 112 62>>*/}c.prototype=b.prototype;/*<<+jslib_js_of_ocaml.js 114 2>>*/return new
c()/*<<+jslib_js_of_ocaml.js 115 0>>*/}/*<<+graphics.js 241 0>>*/function
gs(){/*<<+graphics.js 242 2>>*/ /*<<+graphics.js 242 8>>*/var
a=/*<<+graphics.js 242 10>>*/k();/*<<+graphics.js 243 2>>*/return a.y/*<<+graphics.js 244 0>>*/}/*<<+ints.js 21 0>>*/function
f7(d,b){/*<<+ints.js 22 2>>*/if(/*<<+ints.js 22 6>>*/o(d)=="%d")/*<<+ints.js 22 43>>*/return/*<<+ints.js 22 50>>*/f(e+b);/*<<+ints.js 23 2>>*/ /*<<+ints.js 23 8>>*/var
a=/*<<+ints.js 23 10>>*/bf(d);/*<<+ints.js 24 2>>*/if(b<0)/*<<+ints.js 24 13>>*/if(a.signedconv)/*<<+ints.js 24 33>>*/{a.sign=-1;b=-b}else
b>>>=0;/*<<+ints.js 23 2>>*/ /*<<+ints.js 25 8>>*/var
c=/*<<+ints.js 25 10>>*/b.toString(a.base);/*<<+ints.js 26 2>>*/if(a.prec>=0)/*<<+ints.js 26 19>>*/{a.filler=_;/*<<+ints.js 28 4>>*/ /*<<+ints.js 28 10>>*/var
g=a.prec-c.length;/*<<+ints.js 29 4>>*/if(g>0)c=/*<<+ints.js 29 19>>*/as(g,x)+c}/*<<+ints.js 31 2>>*/return/*<<+ints.js 31 9>>*/a1(a,c)/*<<+ints.js 32 0>>*/}/*<<+obj.js 75 0>>*/function
iK(b,a){/*<<+obj.js 76 2>>*/if(a<=0||a+1>b.length)/*<<+obj.js 77 4>>*/d("Obj.truncate");/*<<+obj.js 78 2>>*/if(b.length!=a+1)b.length=a+1;/*<<+obj.js 79 2>>*/return 0/*<<+obj.js 80 0>>*/}/*<<+mlBytes.js 869 0>>*/function
hH(a){/*<<+mlBytes.js 870 2>>*/return/*<<+mlBytes.js 870 9>>*/V(a)/*<<+mlBytes.js 871 0>>*/}/*<<+nat.js 122 0>>*/function
jZ(a,b){/*<<+nat.js 123 2>>*/if(a.data[b]&1)/*<<+nat.js 123 24>>*/return 1;/*<<+nat.js 124 2>>*/return 0/*<<+nat.js 125 0>>*/}/*<<+sys.js 194 0>>*/function
i3(a){/*<<+sys.js 195 2>>*/return/*<<+sys.js 195 9>>*/f(e)/*<<+sys.js 196 0>>*/}/*<<+io.js 115 0>>*/function
ig(c){/*<<+io.js 116 2>>*/ /*<<+io.js 116 11>>*/var
b=i.fds[c];/*<<+io.js 117 2>>*/if(b.flags.rdonly)/*<<+io.js 117 24>>*/j(dh+c+" is readonly");/*<<+io.js 116 2>>*/ /*<<+io.js 118 14>>*/var
a={file:b.file,offset:b.offset,fd:c,opened:true,out:true,buffer:e};g[a.fd]=a;/*<<+io.js 127 2>>*/return a.fd/*<<+io.js 128 0>>*/}/*<<+array.js 43 0>>*/function
eO(a){/*<<+array.js 44 2>>*/ /*<<+array.js 44 8>>*/var
c=[0];/*<<+array.js 45 2>>*/while(a!==0)/*<<+array.js 45 18>>*/{/*<<+array.js 46 4>>*/ /*<<+array.js 46 10>>*/var
d=a[1];/*<<+array.js 47 4>>*/for(/*<<+array.js 47 15>>*/var
b=1;b<d.length;b++)/*<<+array.js 47 39>>*/c.push(d[b]);a=a[2]}/*<<+array.js 50 2>>*/return c/*<<+array.js 51 0>>*/}/*<<+graphics.js 44 0>>*/function
gG(f){/*<<+graphics.js 45 2>>*/var/*<<+graphics.js 45 8>>*/o=a,/*<<+graphics.js 46 11>>*/f=/*<<+graphics.js 46 13>>*/t(f);/*<<+graphics.js 47 2>>*/function
i(b){/*<<+graphics.js 48 4>>*/ /*<<+graphics.js 48 12>>*/var
a=/*<<+graphics.js 48 14>>*/f.match("(^|,) *"+b+" *= *([a-zA-Z0-9_]+) *(,|$)");/*<<+graphics.js 49 4>>*/if(a)/*<<+graphics.js 49 12>>*/return a[2]/*<<+graphics.js 50 2>>*/}/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 51 12>>*/var
g=[];/*<<+graphics.js 52 2>>*/if(!(f==e))/*<<+graphics.js 52 18>>*/g.push(f);/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 53 13>>*/var
k=/*<<+graphics.js 53 15>>*/i("target");/*<<+graphics.js 54 2>>*/if(!k)k=e;/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 55 13>>*/var
p=/*<<+graphics.js 55 15>>*/i("status");/*<<+graphics.js 56 2>>*/if(!p)/*<<+graphics.js 56 14>>*/g.push("status=1");/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 58 8>>*/var
d=/*<<+graphics.js 58 10>>*/i("width");d=d?/*<<+graphics.js 59 8>>*/parseInt(d):cG;/*<<+graphics.js 60 2>>*/g.push("width="+d);/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 62 8>>*/var
b=/*<<+graphics.js 62 10>>*/i("height");b=b?/*<<+graphics.js 63 8>>*/parseInt(b):cG;/*<<+graphics.js 64 2>>*/g.push("height="+b);/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 66 10>>*/var
n=/*<<+graphics.js 66 12>>*/o.open("about:blank",k,/*<<+graphics.js 66 40>>*/g.join(","));/*<<+graphics.js 67 2>>*/if(!n)/*<<+graphics.js 67 11>>*/ /*<<+graphics.js 67 12>>*/c("Graphics.open_graph: cannot open the window");/*<<+graphics.js 51 2>>*/var/*<<+graphics.js 68 10>>*/j=n.document,/*<<+graphics.js 69 13>>*/h=/*<<+graphics.js 69 15>>*/j.createElement(cz);h.width=d;h.height=b;/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 72 10>>*/var
m=/*<<+graphics.js 72 12>>*/dP(h,d,b);m.set_title=function(a){j.title=a/*<<+graphics.js 73 18>>*/};/*<<+graphics.js 76 2>>*/dR(m);/*<<+graphics.js 51 2>>*/ /*<<+graphics.js 77 11>>*/var
l=j.body;l.style.margin="0px";/*<<+graphics.js 79 2>>*/l.appendChild(h);/*<<+graphics.js 80 2>>*/return 0/*<<+graphics.js 81 0>>*/}/*<<+weak.js 155 0>>*/function
fS(b,a){b[Y]=a;/*<<+weak.js 157 2>>*/return 0/*<<+weak.js 158 0>>*/}/*<<+array.js 106 0>>*/function
h1(a){/*<<+array.js 107 2>>*/if(a<0)/*<<+array.js 107 15>>*/n();/*<<+array.js 108 2>>*/var/*<<+array.js 108 10>>*/a=a+1|0,/*<<+array.js 109 8>>*/b=new
Array(a);b[0]=N;/*<<+array.js 111 2>>*/for(/*<<+array.js 111 13>>*/var
c=1;c<a;c++)b[c]=0;/*<<+array.js 112 2>>*/return b/*<<+array.js 113 0>>*/}/*<<+gc.js 50 0>>*/function
h7(a){/*<<+gc.js 51 2>>*/return 0/*<<+gc.js 52 0>>*/}/*<<+compare.js 247 0>>*/function
gT(a,b){/*<<+compare.js 247 36>>*/return+(/*<<+compare.js 247 45>>*/ai(a,b,false)>=0)/*<<+compare.js 247 80>>*/}/*<<+backtrace.js 23 0>>*/function
gj(){/*<<+backtrace.js 23 47>>*/return[0]/*<<+backtrace.js 23 59>>*/}/*<<+ieee_754.js 273 0>>*/function
h0(a){/*<<+ieee_754.js 274 2>>*/var/*<<+ieee_754.js 274 8>>*/b=1+a,/*<<+ieee_754.js 274 19>>*/c=b-1;/*<<+ieee_754.js 275 2>>*/return c==0?a:a*/*<<+ieee_754.js 275 19>>*/Math.log(b)/c/*<<+ieee_754.js 276 0>>*/}/*<<+int64.js 244 0>>*/function
g$(a,b){/*<<+int64.js 244 32>>*/return/*<<+int64.js 244 39>>*/a.or(b)/*<<+int64.js 244 48>>*/}/*<<+obj.js 90 0>>*/function
hR(a){/*<<+obj.js 90 38>>*/return[aV,a]/*<<+obj.js 90 55>>*/}/*<<+nat.js 381 0>>*/function
j3(a,c,b,d){a.data[c]|=b.data[d];/*<<+nat.js 383 2>>*/return 0/*<<+nat.js 384 0>>*/}/*<<+graphics.js 468 0>>*/function
gm(b,e,f){/*<<+graphics.js 469 2>>*/var/*<<+graphics.js 469 8>>*/d=/*<<+graphics.js 469 10>>*/k(),/*<<+graphics.js 470 10>>*/c=/*<<+graphics.js 470 12>>*/d.context.getImageData(e,d.height-b.height-f,b.width,b.height);/*<<+graphics.js 471 2>>*/for(/*<<+graphics.js 471 13>>*/var
a=0;a<c.data.length;a+=4)/*<<+graphics.js 471 44>>*/{b.data[a]=c.data[a];b.data[a+1]=c.data[a+1];b.data[a+2]=c.data[a+2];b.data[a+3]=c.data[a+3]}/*<<+graphics.js 477 2>>*/return 0/*<<+graphics.js 478 0>>*/}/*<<+graphics.js 507 0>>*/function
gS(a){/*<<+graphics.js 508 2>>*/c("caml_gr_window_id not Implemented")/*<<+graphics.js 509 0>>*/}/*<<+jslib.js 39 0>>*/function
hA(){/*<<+jslib.js 40 2>>*/ /*<<+jslib.js 40 9>>*/var
b=a.navigator?a.navigator.userAgent:e;/*<<+jslib.js 42 2>>*/return/*<<+jslib.js 42 9>>*/b.indexOf("MSIE")!=-1&&/*<<+jslib.js 42 37>>*/b.indexOf("Opera")!=0/*<<+jslib.js 43 0>>*/}/*<<+int64.js 256 0>>*/function
hb(b,a){/*<<+int64.js 256 41>>*/return/*<<+int64.js 256 48>>*/b.shift_right(a)/*<<+int64.js 256 65>>*/}/*<<+bigarray.js 343 0>>*/function
e6(a){/*<<+bigarray.js 344 2>>*/return a.layout/*<<+bigarray.js 345 0>>*/}/*<<+backtrace.js 27 0>>*/function
fC(){/*<<+backtrace.js 27 41>>*/return[0]/*<<+backtrace.js 27 53>>*/}/*<<+array.js 66 0>>*/function
eQ(b,a,c){/*<<+array.js 67 2>>*/if(a<0||a>=b.length-1)/*<<+array.js 67 50>>*/n();b[a+1]=c;/*<<+array.js 68 25>>*/return 0/*<<+array.js 69 0>>*/}/*<<+mlBytes.js 569 0>>*/function
fv(a,b){/*<<+mlBytes.js 570 2>>*/return/*<<+mlBytes.js 570 9>>*/bK(b,a)/*<<+mlBytes.js 571 0>>*/}/*<<+nat.js 67 0>>*/function
ka(b,c,a){b.data[c]=a;/*<<+nat.js 69 2>>*/return 0/*<<+nat.js 70 0>>*/}/*<<+obj.js 19 0>>*/function
ep(c,a){/*<<+obj.js 20 2>>*/if(typeof
a==="function")/*<<+obj.js 20 30>>*/{c.fun=a;/*<<+obj.js 20 43>>*/return 0}/*<<+obj.js 21 2>>*/if(a.fun)/*<<+obj.js 21 14>>*/{c.fun=a.fun;/*<<+obj.js 21 31>>*/return 0}/*<<+obj.js 22 2>>*/ /*<<+obj.js 22 8>>*/var
b=a.length;/*<<+obj.js 22 20>>*/while(b--)c[b]=a[b];/*<<+obj.js 22 45>>*/return 0/*<<+obj.js 23 0>>*/}/*<<+internalMod.js 55 0>>*/function
dp(b,c,d){/*<<+internalMod.js 56 2>>*/if(typeof
b==="number")/*<<+internalMod.js 57 4>>*/switch(b){case
0:case
1:case
2:default:/*<<+internalMod.js 62 6>>*/ep(c,d)}else/*<<+internalMod.js 65 4>>*/switch(b[0]){case
0:/*<<+internalMod.js 67 6>>*/for(/*<<+internalMod.js 67 15>>*/var
a=1;a<b[1].length;a++)/*<<+internalMod.js 68 8>>*/dp(b[1][a],c[a],d[a]);/*<<+internalMod.js 69 6>>*/break}/*<<+internalMod.js 73 2>>*/return 0/*<<+internalMod.js 74 0>>*/}/*<<+graphics.js 120 0>>*/function
gu(a){/*<<+graphics.js 121 2>>*/if(a.canvas.ownerDocument)/*<<+graphics.js 122 4>>*/return a.canvas.ownerDocument/*<<+graphics.js 123 0>>*/}/*<<+io.js 440 0>>*/function
ij(c,a){/*<<+io.js 441 2>>*/var/*<<+io.js 441 10>>*/b=[a>>24&l,a>>16&l,a>>8&l,a&l],/*<<+io.js 442 8>>*/d=/*<<+io.js 442 10>>*/aQ(b);/*<<+io.js 443 2>>*/bb(c,d,0,4);/*<<+io.js 444 2>>*/return 0/*<<+io.js 445 0>>*/}/*<<+obj.js 57 0>>*/function
iL(e,d){/*<<+obj.js 58 2>>*/var/*<<+obj.js 58 8>>*/c=d.length,/*<<+obj.js 59 8>>*/b=new
Array(c);b[0]=e;/*<<+obj.js 61 2>>*/for(/*<<+obj.js 61 12>>*/var
a=1;a<c;a++)b[a]=d[a];/*<<+obj.js 62 2>>*/return b/*<<+obj.js 63 0>>*/}/*<<+io.js 183 0>>*/function
h8(b){/*<<+io.js 184 2>>*/ /*<<+io.js 184 11>>*/var
a=g[b];/*<<+io.js 185 2>>*/return/*<<+io.js 185 9>>*/a.file.length()/*<<+io.js 186 0>>*/}/*<<+backtrace.js 34 0>>*/function
iV(){/*<<+backtrace.js 35 2>>*/d("Printexc.get_raw_backtrace_slot: index out of bounds")/*<<+backtrace.js 36 0>>*/}/*<<+ieee_754.js 81 0>>*/function
gY(a,c,l){/*<<+ieee_754.js 82 2>>*/if(!/*<<+ieee_754.js 82 7>>*/isFinite(a))/*<<+ieee_754.js 82 20>>*/{/*<<+ieee_754.js 83 4>>*/if(/*<<+ieee_754.js 83 8>>*/isNaN(a))/*<<+ieee_754.js 83 18>>*/return/*<<+ieee_754.js 83 25>>*/V(cW);/*<<+ieee_754.js 84 4>>*/return/*<<+ieee_754.js 84 11>>*/V(a>0?"infinity":"-infinity")}/*<<+ieee_754.js 86 2>>*/ /*<<+ieee_754.js 86 11>>*/var
j=a==0&&1/a==-Infinity?1:a>=0?0:1;/*<<+ieee_754.js 87 2>>*/if(j)a=-a;/*<<+ieee_754.js 86 2>>*/ /*<<+ieee_754.js 88 10>>*/var
d=0;/*<<+ieee_754.js 89 2>>*/if(a==0)/*<<+ieee_754.js 89 14>>*/;else/*<<+ieee_754.js 90 7>>*/if(a<1)/*<<+ieee_754.js 90 18>>*/while(a<1&&d>-1022)/*<<+ieee_754.js 91 34>>*/{a*=2;d--}else/*<<+ieee_754.js 92 9>>*/while(a>=2)/*<<+ieee_754.js 93 19>>*/{a/=2;d++}/*<<+ieee_754.js 86 2>>*/var/*<<+ieee_754.js 95 15>>*/k=d<0?e:aw,/*<<+ieee_754.js 96 15>>*/f=e;/*<<+ieee_754.js 97 2>>*/if(j)f=aj;else/*<<+ieee_754.js 98 7>>*/switch(l){case
43:f=aw;/*<<+ieee_754.js 100 39>>*/break;case
32:f=_;/*<<+ieee_754.js 101 39>>*/break;default:/*<<+ieee_754.js 102 13>>*/break}/*<<+ieee_754.js 105 2>>*/if(c>=0&&c<13)/*<<+ieee_754.js 105 30>>*/{/*<<+ieee_754.js 107 4>>*/ /*<<+ieee_754.js 107 12>>*/var
h=/*<<+ieee_754.js 107 14>>*/Math.pow(2,c*4);a=/*<<+ieee_754.js 108 8>>*/Math.round(a*h)/h}/*<<+ieee_754.js 86 2>>*/ /*<<+ieee_754.js 110 12>>*/var
b=/*<<+ieee_754.js 110 14>>*/a.toString(16);/*<<+ieee_754.js 111 2>>*/if(c>=0)/*<<+ieee_754.js 111 15>>*/{/*<<+ieee_754.js 112 4>>*/ /*<<+ieee_754.js 112 12>>*/var
i=/*<<+ieee_754.js 112 14>>*/b.indexOf(aF);/*<<+ieee_754.js 113 4>>*/if(i<0)/*<<+ieee_754.js 113 14>>*/b+=aF+/*<<+ieee_754.js 114 21>>*/as(c,x);else/*<<+ieee_754.js 116 9>>*/{/*<<+ieee_754.js 117 6>>*/ /*<<+ieee_754.js 117 15>>*/var
g=i+1+c;/*<<+ieee_754.js 118 6>>*/if(b.length<g)b+=/*<<+ieee_754.js 119 17>>*/as(g-b.length,x);else
b=/*<<+ieee_754.js 121 16>>*/b.substr(0,g)}}/*<<+ieee_754.js 124 2>>*/return/*<<+ieee_754.js 124 9>>*/V(f+cy+b+di+k+/*<<+ieee_754.js 124 77>>*/d.toString(10))/*<<+ieee_754.js 125 0>>*/}/*<<+jslib_js_of_ocaml.js 193 0>>*/function
hP(c,e){/*<<+jslib_js_of_ocaml.js 194 2>>*/return function(){/*<<+jslib_js_of_ocaml.js 195 4>>*/var/*<<+jslib_js_of_ocaml.js 195 13>>*/b=new
Array(c+1),/*<<+jslib_js_of_ocaml.js 196 12>>*/d=/*<<+jslib_js_of_ocaml.js 196 14>>*/Math.min(arguments.length,c);b[0]=this;/*<<+jslib_js_of_ocaml.js 198 4>>*/for(/*<<+jslib_js_of_ocaml.js 198 15>>*/var
a=0;a<d;a++)b[a+1]=arguments[a];/*<<+jslib_js_of_ocaml.js 199 4>>*/return/*<<+jslib_js_of_ocaml.js 199 11>>*/T(e,b)/*<<+jslib_js_of_ocaml.js 194 9>>*/}/*<<+jslib_js_of_ocaml.js 201 0>>*/}/*<<+backtrace.js 19 0>>*/function
fl(){/*<<+backtrace.js 19 36>>*/return 0/*<<+backtrace.js 19 46>>*/}/*<<+sys.js 204 0>>*/function
g3(){/*<<+sys.js 204 39>>*/return 0/*<<+sys.js 204 47>>*/}/*<<+sys.js 103 0>>*/function
jk(a){/*<<+sys.js 104 2>>*/return az/*<<+sys.js 105 0>>*/}/*<<+bigarray.js 499 0>>*/function
eZ(a,b){/*<<+bigarray.js 500 2>>*/a.fill(b);/*<<+bigarray.js 501 2>>*/return 0/*<<+bigarray.js 502 0>>*/}/*<<+ieee_754.js 193 0>>*/function
iz(a){/*<<+ieee_754.js 194 2>>*/if(/*<<+ieee_754.js 194 6>>*/isFinite(a))/*<<+ieee_754.js 194 20>>*/{/*<<+ieee_754.js 195 4>>*/ /*<<+ieee_754.js 195 12>>*/var
d=1/a<0;a=/*<<+ieee_754.js 196 8>>*/Math.abs(a);/*<<+ieee_754.js 195 4>>*/var/*<<+ieee_754.js 197 10>>*/b=/*<<+ieee_754.js 197 12>>*/Math.floor(a),/*<<+ieee_754.js 198 10>>*/c=a-b;/*<<+ieee_754.js 199 4>>*/if(d)/*<<+ieee_754.js 199 13>>*/{b=-b;c=-c}/*<<+ieee_754.js 200 4>>*/return[0,c,b]}/*<<+ieee_754.js 202 2>>*/if(/*<<+ieee_754.js 202 6>>*/isNaN(a))/*<<+ieee_754.js 202 17>>*/return[0,NaN,NaN];/*<<+ieee_754.js 203 2>>*/return[0,1/a,a]/*<<+ieee_754.js 204 0>>*/}/*<<+gc.js 28 0>>*/function
gb(){/*<<+gc.js 29 2>>*/return[0,0,0,0,0,0,0,0,0]/*<<+gc.js 30 0>>*/}/*<<+ieee_754.js 244 0>>*/function
f3(a,b){/*<<+ieee_754.js 245 2>>*/if(a===b)/*<<+ieee_754.js 245 15>>*/return 0;/*<<+ieee_754.js 246 2>>*/if(a<b)/*<<+ieee_754.js 246 13>>*/return-1;/*<<+ieee_754.js 247 2>>*/if(a>b)/*<<+ieee_754.js 247 13>>*/return 1;/*<<+ieee_754.js 248 2>>*/if(a===a)/*<<+ieee_754.js 248 15>>*/return 1;/*<<+ieee_754.js 249 2>>*/if(b===b)/*<<+ieee_754.js 249 15>>*/return-1;/*<<+ieee_754.js 250 2>>*/return 0/*<<+ieee_754.js 251 0>>*/}/*<<+mlBytes.js 363 0>>*/function
ji(c,a,b){/*<<+mlBytes.js 364 2>>*/return/*<<+mlBytes.js 364 9>>*/dD(c,a,b)/*<<+mlBytes.js 365 0>>*/}/*<<+parsing.js 22 0>>*/function
iQ(b,a,h,l){/*<<+parsing.js 24 2>>*/var/*<<+parsing.js 24 14>>*/w=aa,/*<<+parsing.js 32 11>>*/v=6,/*<<+parsing.js 33 16>>*/ab=7,/*<<+parsing.js 34 12>>*/P=8,/*<<+parsing.js 35 20>>*/Q=9,/*<<+parsing.js 36 13>>*/E=10,/*<<+parsing.js 38 17>>*/J=0,/*<<+parsing.js 39 24>>*/s=1,/*<<+parsing.js 40 20>>*/H=2,/*<<+parsing.js 41 20>>*/I=3,/*<<+parsing.js 42 30>>*/G=4,/*<<+parsing.js 43 26>>*/F=5,/*<<+parsing.js 45 18>>*/p=1,/*<<+parsing.js 46 18>>*/D=2,/*<<+parsing.js 47 27>>*/C=3,/*<<+parsing.js 48 25>>*/q=4,/*<<+parsing.js 49 20>>*/A=5,/*<<+parsing.js 50 20>>*/M=6,/*<<+parsing.js 51 20>>*/f=7,/*<<+parsing.js 52 15>>*/u=8,/*<<+parsing.js 53 21>>*/O=9,/*<<+parsing.js 54 19>>*/N=10,/*<<+parsing.js 55 14>>*/x=11,/*<<+parsing.js 56 19>>*/K=12,/*<<+parsing.js 57 22>>*/L=13,/*<<+parsing.js 58 13>>*/z=14,/*<<+parsing.js 59 16>>*/B=15,/*<<+parsing.js 60 18>>*/y=16,/*<<+parsing.js 63 23>>*/$=2,/*<<+parsing.js 64 23>>*/_=3,/*<<+parsing.js 65 14>>*/W=4,/*<<+parsing.js 66 14>>*/V=5,/*<<+parsing.js 67 17>>*/S=6,/*<<+parsing.js 68 16>>*/T=7,/*<<+parsing.js 69 17>>*/Y=8,/*<<+parsing.js 70 17>>*/X=9,/*<<+parsing.js 71 17>>*/U=10,/*<<+parsing.js 72 20>>*/r=11,/*<<+parsing.js 73 16>>*/Z=12,/*<<+parsing.js 74 16>>*/R=13;/*<<+parsing.js 79 2>>*/if(!b.dgoto)/*<<+parsing.js 79 21>>*/{b.defred=/*<<+parsing.js 80 20>>*/m(b[S]);b.sindex=/*<<+parsing.js 81 20>>*/m(b[Y]);b.check=/*<<+parsing.js 82 20>>*/m(b[R]);b.rindex=/*<<+parsing.js 83 20>>*/m(b[X]);b.table=/*<<+parsing.js 84 20>>*/m(b[Z]);b.len=/*<<+parsing.js 85 20>>*/m(b[V]);b.lhs=/*<<+parsing.js 86 20>>*/m(b[W]);b.gindex=/*<<+parsing.js 87 20>>*/m(b[U]);b.dgoto=/*<<+parsing.js 88 20>>*/m(b[T])}/*<<+parsing.js 24 2>>*/var/*<<+parsing.js 91 10>>*/k=0,j,e,d,o,/*<<+parsing.js 94 9>>*/c=a[z],/*<<+parsing.js 95 12>>*/g=a[B],/*<<+parsing.js 96 14>>*/i=a[y];exit:/*<<+parsing.js 98 7>>*/for(;;)/*<<+parsing.js 98 16>>*/switch(h){case
0:g=0;i=0;case
6:j=b.defred[g];/*<<+parsing.js 107 6>>*/if(j!=0)/*<<+parsing.js 107 18>>*/{h=E;/*<<+parsing.js 107 34>>*/break}/*<<+parsing.js 108 6>>*/if(a[f]>=0)/*<<+parsing.js 108 35>>*/{h=ab;/*<<+parsing.js 108 54>>*/break}k=J;/*<<+parsing.js 110 6>>*/break exit;case
1:/*<<+parsing.js 114 6>>*/if(l
instanceof
Array)/*<<+parsing.js 114 32>>*/{a[f]=b[_][l[0]+1];a[u]=l[1]}else/*<<+parsing.js 117 13>>*/{a[f]=b[$][l+1];a[u]=0}case
7:e=b.sindex[g];d=e+a[f];/*<<+parsing.js 126 6>>*/if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==a[f])/*<<+parsing.js 127 50>>*/{h=P;/*<<+parsing.js 128 21>>*/break}e=b.rindex[g];d=e+a[f];/*<<+parsing.js 132 6>>*/if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==a[f])/*<<+parsing.js 133 50>>*/{j=b.table[d];h=E;/*<<+parsing.js 135 22>>*/break}/*<<+parsing.js 137 6>>*/if(i<=0)/*<<+parsing.js 137 24>>*/{k=F;/*<<+parsing.js 139 8>>*/break exit}case
5:/*<<+parsing.js 144 6>>*/if(i<3)/*<<+parsing.js 144 23>>*/{i=3;/*<<+parsing.js 146 8>>*/for(;;)/*<<+parsing.js 146 17>>*/{o=a[p][c+1];e=b.sindex[o];d=e+w;/*<<+parsing.js 150 10>>*/if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==w)/*<<+parsing.js 151 43>>*/{h=Q;/*<<+parsing.js 152 33>>*/break}else/*<<+parsing.js 153 17>>*/{/*<<+parsing.js 154 12>>*/if(c<=a[M])/*<<+parsing.js 154 42>>*/return s;c--}}}else/*<<+parsing.js 159 13>>*/{/*<<+parsing.js 160 8>>*/if(a[f]==0)/*<<+parsing.js 160 37>>*/return s;a[f]=-1;h=v;/*<<+parsing.js 163 20>>*/break}case
8:a[f]=-1;/*<<+parsing.js 168 6>>*/if(i>0)i--;case
9:g=b.table[d];c++;/*<<+parsing.js 173 6>>*/if(c>=a[A])/*<<+parsing.js 173 36>>*/{k=H;/*<<+parsing.js 175 8>>*/break exit}case
2:a[p][c+1]=g;a[D][c+1]=a[u];a[C][c+1]=a[O];a[q][c+1]=a[N];h=v;/*<<+parsing.js 185 6>>*/break;case
10:/*<<+parsing.js 188 6>>*/ /*<<+parsing.js 188 12>>*/var
n=b.len[j];a[x]=c;a[L]=j;a[K]=n;c=c-n+1;n=b.lhs[j];o=a[p][c];e=b.gindex[n];d=e+o;/*<<+parsing.js 197 6>>*/if(e!=0&&d>=0&&d<=b[r]&&b.check[d]==o)g=b.table[d];else
g=b.dgoto[n];/*<<+parsing.js 202 6>>*/if(c>=a[A])/*<<+parsing.js 202 36>>*/{k=I;/*<<+parsing.js 204 8>>*/break exit}case
3:k=G;/*<<+parsing.js 210 6>>*/break exit;case
4:a[p][c+1]=g;a[D][c+1]=l;/*<<+parsing.js 215 6>>*/ /*<<+parsing.js 215 14>>*/var
t=a[x];a[q][c+1]=a[q][t+1];/*<<+parsing.js 217 6>>*/if(c>t)/*<<+parsing.js 217 20>>*/a[C][c+1]=a[q][t+1];h=v;/*<<+parsing.js 221 18>>*/break;default:/*<<+parsing.js 224 6>>*/return s}a[z]=c;a[B]=g;a[y]=i;/*<<+parsing.js 231 2>>*/return k/*<<+parsing.js 232 0>>*/}/*<<+array.js 79 0>>*/function
eP(b,d,c,e){/*<<+array.js 80 2>>*/for(/*<<+array.js 80 12>>*/var
a=0;a<c;a++)/*<<+array.js 80 30>>*/b[d+a+1]=e;/*<<+array.js 83 2>>*/return 0/*<<+array.js 84 0>>*/}/*<<+mlBytes.js 540 0>>*/function
jf(a,b){/*<<+mlBytes.js 540 40>>*/return 1-/*<<+mlBytes.js 540 49>>*/b6(a,b)/*<<+mlBytes.js 540 76>>*/}/*<<+mlBytes.js 581 0>>*/function
fw(a,b){/*<<+mlBytes.js 582 2>>*/return/*<<+mlBytes.js 582 9>>*/bL(b,a)/*<<+mlBytes.js 583 0>>*/}/*<<+graphics.js 400 0>>*/function
gF(f){/*<<+graphics.js 401 2>>*/var/*<<+graphics.js 401 8>>*/j=/*<<+graphics.js 401 10>>*/k(),/*<<+graphics.js 402 8>>*/i=f.length-1,/*<<+graphics.js 403 8>>*/g=f[1].length-1,/*<<+graphics.js 404 9>>*/a=/*<<+graphics.js 404 11>>*/j.context.createImageData(g,i);/*<<+graphics.js 405 2>>*/for(/*<<+graphics.js 405 11>>*/var
d=0;d<i;d++)/*<<+graphics.js 405 22>>*/for(/*<<+graphics.js 406 13>>*/var
e=0;e<g;e++)/*<<+graphics.js 406 24>>*/{/*<<+graphics.js 407 6>>*/var/*<<+graphics.js 407 12>>*/c=f[d+1][e+1],/*<<+graphics.js 408 12>>*/b=d*(g*4)+e*4;/*<<+graphics.js 409 6>>*/if(c==-1)/*<<+graphics.js 409 18>>*/{a.data[b+0]=0;a.data[b+1]=0;a.data[b+2]=0;a.data[b+3]=0}else/*<<+graphics.js 414 13>>*/{a.data[b+0]=c>>16&h;a.data[b+1]=c>>8&h;a.data[b+2]=c>>0&0Xff;a.data[b+3]=h}}/*<<+graphics.js 422 2>>*/return a/*<<+graphics.js 423 0>>*/}/*<<+io.js 197 0>>*/function
iw(b,c){/*<<+io.js 198 2>>*/ /*<<+io.js 198 11>>*/var
a=g[b];i.fds[a.fd].output=c;/*<<+io.js 200 2>>*/return 0/*<<+io.js 201 0>>*/}/*<<+fs.js 254 0>>*/function
iW(a){/*<<+fs.js 255 2>>*/var/*<<+fs.js 255 11>>*/a=typeof
a=="string"?/*<<+fs.js 255 39>>*/f(a):a,/*<<+fs.js 256 11>>*/b=/*<<+fs.js 256 13>>*/W(a);/*<<+fs.js 257 2>>*/if(/*<<+fs.js 257 5>>*/b.device.exists(b.rest))/*<<+fs.js 257 36>>*/{/*<<+fs.js 258 4>>*/var/*<<+fs.js 258 13>>*/d=/*<<+fs.js 258 15>>*/b.device.open(b.rest,{rdonly:1}),/*<<+fs.js 259 13>>*/e=/*<<+fs.js 259 15>>*/d.length(),/*<<+fs.js 260 13>>*/c=/*<<+fs.js 260 15>>*/I(e);/*<<+fs.js 261 4>>*/d.read(0,c,0,e);/*<<+fs.js 262 4>>*/return/*<<+fs.js 262 11>>*/aR(c)}/*<<+fs.js 264 2>>*/aO(a)/*<<+fs.js 265 0>>*/}/*<<+jslib_js_of_ocaml.js 29 0>>*/function
hG(a){/*<<+jslib_js_of_ocaml.js 29 31>>*/return a/*<<+jslib_js_of_ocaml.js 29 41>>*/}a.jsoo_runtime={caml_ephe_check_data:fL,caml_ephe_unset_data:fU,caml_ephe_set_data:fS,caml_ephe_get_data_copy:fP,caml_ephe_get_data:fO,caml_ephe_blit_data:fJ,caml_ephe_unset_key:fV,caml_ephe_set_key:fT,caml_ephe_check_key:fM,caml_ephe_get_key_copy:fR,caml_ephe_get_key:fQ,caml_ephe_blit_key:fK,caml_ephe_create:fN,caml_weak_blit:er,caml_weak_check:es,caml_weak_get_copy:eu,caml_weak_get:b7,caml_weak_set:b8,caml_weak_create:et,caml_ephe_data_offset:Y,caml_ephe_key_offset:K,unix_isatty:kf,win_handle_fd:kj,win_cleanup:ki,win_startup:kk,unix_mktime:kg,unix_localtime:eG,unix_gmtime:kd,unix_time:kh,unix_gettimeofday:eF,re_replacement_text:j8,re_partial_match:j7,re_string_match:j$,re_search_backward:j9,re_search_forward:j_,re_match:aU,caml_spacetime_only_works_for_native_code:i_,caml_register_channel_for_spacetime:iY,caml_spacetime_enabled:i9,caml_ml_runtime_warnings_enabled:ip,caml_ml_enable_runtime_warnings:h$,caml_runtime_warnings:b4,unix_inet_addr_of_string:ke,caml_install_signal_handler:g3,caml_runtime_parameters:i2,caml_runtime_variant:i3,caml_sys_isatty:jB,caml_sys_get_config:jy,caml_sys_const_backend_type:jm,caml_sys_const_ostype_cygwin:jq,caml_sys_const_ostype_win32:js,caml_sys_const_ostype_unix:jr,caml_sys_const_max_wosize:jp,caml_sys_const_int_size:jo,caml_sys_const_word_size:jt,caml_sys_const_big_endian:jn,caml_sys_random_seed:jE,caml_sys_time_include_children:jJ,caml_sys_time:eo,caml_sys_system_command:jI,caml_sys_executable_name:ju,caml_sys_modify_argv:jC,caml_sys_argv:jk,caml_sys_get_argv:jx,caml_executable_name:dF,caml_argv:az,caml_sys_unsafe_getenv:jK,caml_sys_getenv:en,caml_set_static_env:i6,caml_sys_exit:jv,caml_raise_sys_error:j,caml_is_printable:hg,caml_get_global_data:gk,caml_register_global:E,caml_global_data:i,caml_named_value:bd,caml_register_named_value:iZ,caml_named_values:bY,caml_call_gen:T,caml_set_parser_trace:i5,caml_parse_engine:iQ,caml_fresh_oo_id:f8,caml_set_oo_id:i4,caml_oo_last_id:b0,caml_get_public_method:gl,caml_lazy_make_forward:hR,caml_obj_make_forward:iH,caml_obj_truncate:iK,caml_obj_dup:bZ,caml_obj_with_tag:iL,caml_obj_block:iF,caml_obj_set_tag:iI,caml_obj_tag:iJ,caml_obj_is_block:iG,caml_update_dummy:ep,deserialize_nat:ex,serialize_nat:eD,lxor_digit_nat:j4,lor_digit_nat:j3,land_digit_nat:j1,compare_nat_real:jU,compare_nat:b9,compare_digits_nat:jT,shift_right_nat:ce,div_nat:jW,div_digit_nat:ey,div_helper:b_,shift_left_nat:cd,square_nat:kc,mult_nat:eB,mult_digit_nat:cc,sub_nat:cf,decr_nat:ew,complement_nat:jV,add_nat:bC,incr_nat:ez,is_digit_odd:jZ,is_digit_zero:j0,is_digit_int:jY,num_leading_zero_bits_in_digit:eC,num_digits_nat:bl,nth_digit_nat_native:j6,set_digit_nat_native:kb,nth_digit_nat:j5,set_digit_nat:ka,blit_nat:eL,set_to_zero_nat:eE,create_nat:ev,nat_of_array:at,caml_hash_nat:dW,MlNat:aI,initialize_nat:jX,caml_js_to_string:hH,caml_to_js_string:jM,caml_js_from_string:hq,caml_new_string:iC,caml_js_to_byte_string:hF,caml_is_ml_string:ap,caml_is_ml_bytes:af,caml_string_of_jsstring:V,caml_jsstring_of_string:t,caml_jsbytes_of_string:o,caml_string_of_jsbytes:f,caml_bytes_of_string:am,caml_string_of_bytes:aR,caml_string_lessthan:ek,caml_string_lessequal:ej,caml_string_equal:b6,caml_string_compare:i$,caml_ml_string_length:r,caml_string_unsafe_set:el,caml_string_unsafe_get:u,caml_bytes_of_jsbytes:bM,caml_ml_bytes_length:ag,caml_blit_string:dx,caml_blit_bytes:ah,caml_fill_string:fZ,caml_fill_bytes:dG,caml_bytes_greaterthan:fw,caml_string_greaterthan:je,caml_bytes_greaterequal:fv,caml_string_greaterequal:jd,caml_bytes_lessthan:bL,caml_bytes_lessequal:bK,caml_bytes_notequal:fx,caml_string_notequal:jf,caml_bytes_equal:dy,caml_bytes_compare:bJ,caml_bytes_of_array:aZ,caml_string_of_array:aQ,caml_create_bytes:I,caml_create_string:fH,caml_array_of_string:aX,caml_array_of_bytes:aJ,caml_convert_bytes_to_array:aK,caml_convert_string_to_bytes:B,MlBytes:Q,caml_bytes_of_utf16_jsstring:dA,caml_bytes_set:dB,caml_string_set64:jj,caml_bytes_set64:dE,caml_string_set32:ji,caml_bytes_set32:dD,caml_string_set16:jh,caml_bytes_set16:dC,caml_string_set:jg,caml_bytes_get:dz,caml_bytes_get64:fu,caml_string_get64:jc,caml_bytes_get32:ft,caml_string_get32:jb,caml_bytes_get16:fs,caml_string_get16:ja,caml_string_get:ei,caml_bytes_bound_error:ad,caml_string_bound_error:aE,caml_bytes_unsafe_set:X,caml_bytes_unsafe_get:y,jsoo_is_ascii:cb,caml_utf16_of_utf8:bk,caml_utf8_of_utf16:eq,caml_subarray_to_jsbytes:aS,caml_str_repeat:as,caml_md5_bytes:ec,caml_md5_string:ed,caml_md5_chan:h4,caml_output_value_to_buffer:iO,caml_output_value_to_bytes:iP,caml_output_value_to_string:eg,caml_output_val:be,caml_legacy_custom_code:d_,MlObjectTable:ay,caml_marshal_data_size:eb,caml_input_value_from_reader:bT,caml_custom_ops:J,caml_nativeint_unmarshal:ef,caml_int32_unmarshal:dY,caml_int64_marshal:d4,caml_int64_unmarshal:d8,caml_input_value_from_bytes:dX,caml_input_value_from_string:g2,caml_float_of_bytes:an,BigStringReader:dn,MlStringReader:aW,caml_marshal_constants:h3,caml_new_lex_engine:iB,caml_lex_engine:hV,caml_lex_array:m,caml_xmlhttprequest_create:jS,caml_js_export_var:hm,caml_js_object:hz,caml_pure_js_expr:iR,caml_js_expr:hn,caml_js_eval_string:hl,caml_js_equals:hj,caml_js_wrap_meth_callback_unsafe:hQ,caml_js_wrap_meth_callback_strict:hP,caml_js_wrap_meth_callback_arguments:hO,caml_js_wrap_meth_callback:hN,caml_js_wrap_callback_strict:hM,caml_js_wrap_callback_arguments:hL,caml_js_wrap_callback:hK,caml_ojs_new_arr:iM,caml_js_new:hy,caml_js_meth_call:hx,caml_js_fun_call:hr,caml_js_call:hh,caml_js_var:hJ,caml_list_to_js_array:ea,caml_list_of_js_array:hY,caml_js_to_array:hD,caml_js_from_array:L,caml_js_to_float:hG,caml_js_from_float:hp,caml_js_to_bool:hE,caml_js_from_bool:ho,caml_js_error_of_exception:hk,caml_exn_with_js_backtrace:fX,caml_wrap_exception:jR,caml_is_js:hf,js_print_stderr:aT,js_print_stdout:eA,caml_trampoline_return:jO,caml_trampoline:jN,caml_js_get_console:ht,caml_js_html_entities:hu,caml_js_html_escape:hv,caml_js_on_ie:hA,caml_js_typeof:hI,caml_js_instanceof:hw,caml_js_delete:hi,caml_js_get:hs,caml_js_set:hC,caml_js_pure_expr:hB,caml_ml_output_int:ij,caml_ml_pos_out_64:io,caml_ml_pos_out:im,caml_ml_seek_out_64:it,caml_ml_seek_out:is,caml_output_value:iN,caml_ml_output_char:ii,caml_ml_output:bb,caml_ml_output_bytes:ee,caml_ml_flush:aq,caml_ml_input_scan_line:id,caml_ml_pos_in_64:il,caml_ml_pos_in:ik,caml_ml_seek_in_64:ir,caml_ml_seek_in:iq,caml_ml_input_int:ic,caml_ml_input_char:ib,caml_input_value:g1,caml_ml_input:ia,caml_ml_may_refill_input:bX,caml_ml_refill_input:bc,caml_ml_set_channel_refill:ix,caml_ml_set_channel_output:iw,caml_ml_channel_size_64:h9,caml_ml_channel_size:h8,caml_ml_close_channel:h_,caml_ml_set_binary_mode:iu,caml_channel_descriptor:fy,caml_ml_open_descriptor_in:ie,caml_ml_open_descriptor_out:ig,caml_ml_out_channels_list:ih,caml_ml_channels:g,caml_ml_set_channel_name:iv,caml_sys_open:jD,caml_std_output:b5,caml_sys_close:em,caml_int64_bswap:g6,caml_int32_bswap:g4,caml_bswap16:fr,caml_mod:iy,caml_div:fI,caml_mul:aM,caml_int_of_string:he,caml_parse_digit:aN,caml_parse_sign_and_base:b1,caml_format_int:f7,caml_CamlinternalMod_update_mod:dp,caml_CamlinternalMod_init_mod:eM,caml_int64_hash:d1,caml_int64_to_bytes:Z,caml_int64_of_bytes:U,caml_int64_hi32:a6,caml_int64_lo32:a7,caml_int64_create_lo_hi:d0,caml_int64_create_lo_mi_hi:aL,caml_int64_of_string:g_,caml_int64_format:g8,caml_int64_of_float:a8,caml_int64_to_float:bW,caml_int64_to_int32:d7,caml_int64_of_int32:aC,caml_int64_mod:g9,caml_int64_div:g7,caml_int64_shift_right:hb,caml_int64_shift_right_unsigned:hc,caml_int64_shift_left:ha,caml_int64_xor:hd,caml_int64_or:g$,caml_int64_and:g5,caml_int64_is_negative:d2,caml_int64_is_zero:d3,caml_int64_mul:d5,caml_int64_sub:d6,caml_int64_add:bU,caml_int64_neg:bV,caml_int64_compare:dZ,caml_int64_ult:a9,MlInt64:b,caml_int64_offset:aD,caml_float_of_string:f4,caml_format_float:f6,caml_round_float:i1,caml_tanh_float:jL,caml_sinh_float:i8,caml_cosh_float:fF,caml_log10_float:hZ,caml_hypot_float:gZ,caml_log1p_float:h0,caml_expm1_float:fY,caml_signbit_float:i7,caml_copysign_float:fE,caml_float_compare:f3,caml_frexp_float:f9,caml_ldexp_float:hS,caml_modf_float:iz,caml_classify_float:fA,caml_int32_float_of_bits:a5,caml_trunc_float:jP,caml_nextafter_float:iD,caml_int64_float_of_bits:aB,caml_hexstring_of_float:gY,caml_int32_bits_of_float:a4,caml_int64_bits_of_float:ao,jsoo_floor_log2:ca,caml_hash:gV,caml_hash_mix_string:dV,caml_hash_mix_bytes:dS,caml_hash_mix_bytes_arr:bS,caml_hash_mix_jsbytes:a3,caml_hash_mix_int64:dU,caml_hash_mix_float:a2,caml_hash_mix_final:dT,caml_hash_mix_int:q,caml_hash_univ_param:gX,caml_gr_close_subwindow:gp,caml_gr_open_subwindow:gH,caml_gr_window_id:gS,caml_gr_display_mode:gt,caml_gr_remember_mode:gK,caml_gr_synchronize:gP,caml_gr_wait_event:gR,caml_gr_sigio_signal:gM,caml_gr_sigio_handler:gL,caml_gr_blit_image:gm,caml_gr_create_image:gq,caml_gr_draw_image:gx,caml_gr_dump_image:gA,caml_gr_make_image:gF,caml_gr_text_size:gQ,caml_gr_set_text_size:dN,caml_gr_set_font:dL,caml_gr_draw_string:gz,caml_gr_draw_char:gw,caml_gr_draw_str:bR,caml_gr_fill_arc:gB,caml_gr_fill_poly:gC,caml_gr_fill_rect:gD,caml_gr_set_line_width:dM,caml_gr_draw_arc:gv,caml_gr_arc_aux:bQ,caml_gr_draw_rect:gy,caml_gr_lineto:gE,caml_gr_current_y:gs,caml_gr_current_x:gr,caml_gr_moveto:dI,caml_gr_point_color:gJ,caml_gr_plot:gI,caml_gr_set_color:dK,caml_gr_size_y:gO,caml_gr_size_x:gN,caml_gr_clear_graph:gn,caml_gr_resize_window:dJ,caml_gr_set_window_title:dO,caml_gr_close_graph:go,caml_gr_doc_of_state:gu,caml_gr_state_create:dP,caml_gr_state_init:dQ,caml_gr_open_graph:gG,caml_gr_state_set:dR,caml_gr_state_get:k,caml_gr_state:C,caml_memprof_stop:h7,caml_memprof_start:h6,caml_final_release:f2,caml_final_register_called_without_value:f1,caml_final_register:f0,caml_memprof_set:h5,caml_gc_get:gb,caml_gc_set:gf,caml_gc_stat:gg,caml_gc_quick_stat:ge,caml_gc_counters:f$,caml_gc_compaction:f_,caml_gc_full_major:ga,caml_gc_major:gc,caml_gc_minor:gd,MlNodeFile:S,MlNodeDevice:R,fs_node_supported:b$,MlFakeFile:p,MlFakeDevice:A,caml_read_file_content:iW,caml_create_file:bP,caml_fs_init:dH,caml_create_file_extern:fG,caml_ba_map_file_bytecode:e7,caml_ba_map_file:dt,caml_sys_rename:jH,caml_sys_is_directory:jA,caml_sys_remove:jG,caml_sys_read_directory:jF,caml_sys_file_exists:jw,caml_raise_not_a_dir:iS,caml_raise_no_such_file:aO,caml_sys_chdir:jl,caml_sys_getcwd:jz,caml_unmount:jQ,caml_mount_autoload:iA,resolve_fs_device:W,caml_list_mount_point:hX,jsoo_mount_point:M,caml_make_path:a$,MlFile:bB,caml_root:ar,caml_current_dir:ae,caml_finish_formatting:a1,caml_parse_format:bf,caml_array_bound_error:n,caml_raise_not_found:eh,caml_raise_zero_divide:aP,caml_raise_end_of_file:bh,caml_invalid_argument:d,caml_failwith:c,caml_raise_with_string:bi,caml_raise_with_arg:b2,caml_return_exn_constant:b3,caml_raise_constant:bg,caml_lessthan:hU,caml_lessequal:hT,caml_greaterthan:gU,caml_greaterequal:gT,caml_notequal:iE,caml_equal:fW,caml_int_compare:d9,caml_compare:fB,caml_compare_val:ai,caml_compare_val_number_custom:bN,caml_compare_val_get_custom:a0,caml_compare_val_tag:bO,caml_blit_string_to_bigstring:fq,caml_blit_bigstring_to_string:fp,caml_blit_bigstring_to_bigstring:fo,caml_bigstring_blit_ba_to_bytes:dv,caml_bigstring_blit_bytes_to_ba:fm,caml_bigstring_blit_string_to_ba:dw,caml_bigstring_blit_ba_to_ba:du,caml_bigstring_memcmp:fn,bigstring_of_typed_array:eI,bigstring_of_array_buffer:eH,bigstring_to_typed_array:eK,bigstring_to_array_buffer:eJ,caml_hash_mix_bigstring:gW,caml_ba_from_typed_array:e0,caml_ba_kind_of_typed_array:ds,caml_ba_to_typed_array:fe,caml_ba_hash:bH,caml_ba_create_from:eV,caml_ba_deserialize:bG,caml_ba_serialize:bI,caml_ba_reshape:e9,caml_ba_slice:fc,caml_ba_sub:fd,caml_ba_blit:eS,caml_ba_fill:eZ,caml_ba_set_3:fa,caml_ba_set_2:e$,caml_ba_set_1:e_,caml_ba_uint8_set64:fk,caml_ba_uint8_set32:fj,caml_ba_uint8_set16:fi,caml_ba_set_generic:fb,caml_ba_get_3:e2,caml_ba_get_2:e1,caml_ba_get_1:s,caml_ba_uint8_get64:fh,caml_ba_uint8_get32:fg,caml_ba_uint8_get16:ff,caml_ba_get_generic:e3,caml_ba_dim_3:eY,caml_ba_dim_2:eX,caml_ba_dim_1:eW,caml_ba_dim:aY,caml_ba_num_dims:e8,caml_ba_layout:e6,caml_ba_kind:e5,caml_ba_change_layout:eT,caml_ba_create:eU,caml_ba_create_unsafe:H,caml_ba_compare:bE,Ml_Bigarray_c_1_1:ak,Ml_Bigarray:ac,caml_ba_custom_name:dr,caml_ba_create_buffer:bF,caml_ba_get_size_per_element:aA,caml_ba_get_size:al,caml_ba_init:e4,caml_convert_raw_backtrace_slot:fD,caml_get_current_callstack:gh,caml_restore_raw_backtrace:i0,caml_raw_backtrace_slot:iV,caml_raw_backtrace_next_slot:iU,caml_raw_backtrace_length:iT,caml_convert_raw_backtrace:fC,caml_record_backtrace:iX,caml_get_exception_raw_backtrace:gj,caml_get_exception_backtrace:gi,caml_backtrace_status:fl,caml_floatarray_create:f5,caml_make_float_vect:h1,caml_make_vect:h2,caml_check_bound:fz,caml_array_fill:eP,caml_array_get:bD,caml_array_set:eQ,caml_array_blit:dq,caml_array_concat:eO,caml_array_append:eN,caml_array_sub:eR};dH();E(0,[D,f(c7),0],c7);E(1,[D,f(cD),-1],cD);E(2,[D,f(cI),-2],cI);E(3,[D,f(dl),-3],dl);E(4,[D,f(cJ),-4],cJ);E(5,[D,f(cE),-5],cE);E(6,[D,f(co),-6],co);E(7,[D,f(c0),-7],c0);E(8,[D,f(cq),-8],cq);E(9,[D,f(dg),-9],dg);E(10,[D,f(cR),-10],cR);E(11,[D,f(ch),-11],ch);return/*<<?>>*/}(function(){return this}()));

//# 1 "../.js/stdlib/stdlib.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_array_concat=runtime.caml_array_concat,
     caml_array_get=runtime.caml_array_get,
     caml_array_set=runtime.caml_array_set,
     caml_array_sub=runtime.caml_array_sub,
     caml_ba_change_layout=runtime.caml_ba_change_layout,
     caml_ba_create=runtime.caml_ba_create,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_dim_2=runtime.caml_ba_dim_2,
     caml_ba_kind=runtime.caml_ba_kind,
     caml_ba_num_dims=runtime.caml_ba_num_dims,
     caml_ba_reshape=runtime.caml_ba_reshape,
     caml_ba_slice=runtime.caml_ba_slice,
     caml_blit_bytes=runtime.caml_blit_bytes,
     caml_blit_string=runtime.caml_blit_string,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_get16=runtime.caml_bytes_get16,
     caml_bytes_get32=runtime.caml_bytes_get32,
     caml_bytes_get64=runtime.caml_bytes_get64,
     caml_bytes_of_string=runtime.caml_bytes_of_string,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_bytes_set16=runtime.caml_bytes_set16,
     caml_bytes_set32=runtime.caml_bytes_set32,
     caml_bytes_set64=runtime.caml_bytes_set64,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_div=runtime.caml_div,
     caml_ephe_set_key=runtime.caml_ephe_set_key,
     caml_ephe_unset_key=runtime.caml_ephe_unset_key,
     caml_equal=runtime.caml_equal,
     caml_fill_bytes=runtime.caml_fill_bytes,
     caml_float_compare=runtime.caml_float_compare,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_floatarray_create=runtime.caml_floatarray_create,
     caml_format_float=runtime.caml_format_float,
     caml_format_int=runtime.caml_format_int,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_get_exception_raw_backtra=runtime.caml_get_exception_raw_backtrace,
     caml_get_public_method=runtime.caml_get_public_method,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_hash=runtime.caml_hash,
     caml_input_value=runtime.caml_input_value,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_compare=runtime.caml_int64_compare,
     caml_int64_float_of_bits=runtime.caml_int64_float_of_bits,
     caml_int64_format=runtime.caml_int64_format,
     caml_int64_mul=runtime.caml_int64_mul,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_of_string=runtime.caml_int64_of_string,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_sub=runtime.caml_int64_sub,
     caml_int_compare=runtime.caml_int_compare,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_make_vect=runtime.caml_make_vect,
     caml_marshal_data_size=runtime.caml_marshal_data_size,
     caml_md5_string=runtime.caml_md5_string,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_channel_size=runtime.caml_ml_channel_size,
     caml_ml_channel_size_64=runtime.caml_ml_channel_size_64,
     caml_ml_close_channel=runtime.caml_ml_close_channel,
     caml_ml_flush=runtime.caml_ml_flush,
     caml_ml_input=runtime.caml_ml_input,
     caml_ml_input_char=runtime.caml_ml_input_char,
     caml_ml_open_descriptor_in=runtime.caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out=runtime.caml_ml_open_descriptor_out,
     caml_ml_output=runtime.caml_ml_output,
     caml_ml_output_bytes=runtime.caml_ml_output_bytes,
     caml_ml_output_char=runtime.caml_ml_output_char,
     caml_ml_set_binary_mode=runtime.caml_ml_set_binary_mode,
     caml_ml_set_channel_name=runtime.caml_ml_set_channel_name,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mod=runtime.caml_mod,
     caml_mul=runtime.caml_mul,
     caml_nextafter_float=runtime.caml_nextafter_float,
     caml_notequal=runtime.caml_notequal,
     caml_obj_block=runtime.caml_obj_block,
     caml_obj_make_forward=runtime.caml_obj_make_forward,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_output_value=runtime.caml_output_value,
     caml_register_global=runtime.caml_register_global,
     caml_register_named_value=runtime.caml_register_named_value,
     caml_restore_raw_backtrace=runtime.caml_restore_raw_backtrace,
     caml_set_oo_id=runtime.caml_set_oo_id,
     caml_signbit_float=runtime.caml_signbit_float,
     caml_spacetime_enabled=runtime.caml_spacetime_enabled,
     caml_spacetime_only_works_for_=
      runtime.caml_spacetime_only_works_for_native_code,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_bytes=runtime.caml_string_of_bytes,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_getenv=runtime.caml_sys_getenv,
     caml_sys_open=runtime.caml_sys_open,
     caml_sys_random_seed=runtime.caml_sys_random_seed,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$0=caml_string_of_jsbytes("%,"),
     cst_really_input=caml_string_of_jsbytes("really_input"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_output_substring=caml_string_of_jsbytes("output_substring"),
     cst_output=caml_string_of_jsbytes("output"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst=caml_string_of_jsbytes("."),
     cst_false$1=caml_string_of_jsbytes("false"),
     cst_true$1=caml_string_of_jsbytes("true"),
     cst_false$0=caml_string_of_jsbytes("false"),
     cst_true$0=caml_string_of_jsbytes("true"),
     cst_bool_of_string=caml_string_of_jsbytes("bool_of_string"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_char_of_int=caml_string_of_jsbytes("char_of_int"),
     cst_Stdlib_Exit=caml_string_of_jsbytes("Stdlib.Exit"),
     cst_Stdlib_Pervasives_Exit=
      caml_string_of_jsbytes("Stdlib.Pervasives.Exit"),
     cst_option_is_None=caml_string_of_jsbytes("option is None"),
     cst_result_is_Ok=caml_string_of_jsbytes("result is Ok _"),
     cst_result_is_Error=caml_string_of_jsbytes("result is Error _"),
     cst_true$2=caml_string_of_jsbytes("true"),
     cst_false$2=caml_string_of_jsbytes("false"),
     cst$1=caml_string_of_jsbytes("\\\\"),
     cst$2=caml_string_of_jsbytes("\\'"),
     cst_b=caml_string_of_jsbytes("\\b"),
     cst_t=caml_string_of_jsbytes("\\t"),
     cst_n=caml_string_of_jsbytes("\\n"),
     cst_r=caml_string_of_jsbytes("\\r"),
     cst_Char_chr=caml_string_of_jsbytes("Char.chr"),
     cst_is_not_a_latin1_character=
      caml_string_of_jsbytes(" is not a latin1 character"),
     cst_04X=caml_string_of_jsbytes("%04X"),
     cst_U=caml_string_of_jsbytes("U+"),
     cst_is_not_an_Unicode_scalar_v=
      caml_string_of_jsbytes(" is not an Unicode scalar value"),
     cst_X=caml_string_of_jsbytes("%X"),
     err_no_pred=caml_string_of_jsbytes("U+0000 has no predecessor"),
     err_no_succ=caml_string_of_jsbytes("U+10FFFF has no successor"),
     cst_Stdlib_Sys_Break=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     ocaml_version=caml_string_of_jsbytes("4.10.0"),
     cst_List_map2=caml_string_of_jsbytes("List.map2"),
     cst_List_iter2=caml_string_of_jsbytes("List.iter2"),
     cst_List_fold_left2=caml_string_of_jsbytes("List.fold_left2"),
     cst_List_fold_right2=caml_string_of_jsbytes("List.fold_right2"),
     cst_List_for_all2=caml_string_of_jsbytes("List.for_all2"),
     cst_List_exists2=caml_string_of_jsbytes("List.exists2"),
     cst_List_combine=caml_string_of_jsbytes("List.combine"),
     cst_List_rev_map2=caml_string_of_jsbytes("List.rev_map2"),
     cst_List_init=caml_string_of_jsbytes("List.init"),
     cst_List_nth$0=caml_string_of_jsbytes("List.nth"),
     cst_nth=caml_string_of_jsbytes("nth"),
     cst_List_nth=caml_string_of_jsbytes("List.nth"),
     cst_tl=caml_string_of_jsbytes("tl"),
     cst_hd=caml_string_of_jsbytes("hd"),
     cst_Bytes_of_seq_cannot_grow_b=
      caml_string_of_jsbytes("Bytes.of_seq: cannot grow bytes"),
     cst_String_rcontains_from_Byte=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst_Bytes_concat=caml_string_of_jsbytes("Bytes.concat"),
     cst_String_blit_Bytes_blit_str=
      caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     cst_Bytes_blit=caml_string_of_jsbytes("Bytes.blit"),
     cst_String_fill_Bytes_fill=
      caml_string_of_jsbytes("String.fill / Bytes.fill"),
     cst_Bytes_extend=caml_string_of_jsbytes("Bytes.extend"),
     cst_String_sub_Bytes_sub=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     cst_String_rcontains_from_Byte$0=
      caml_string_of_jsbytes("String.rcontains_from / Bytes.rcontains_from"),
     cst_String_contains_from_Bytes$0=
      caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     cst_String_rindex_from_opt_Byt$0=
      caml_string_of_jsbytes("String.rindex_from_opt / Bytes.rindex_from_opt"),
     cst_String_rindex_from_Bytes_r$0=
      caml_string_of_jsbytes("String.rindex_from / Bytes.rindex_from"),
     cst_String_index_from_opt_Byte$0=
      caml_string_of_jsbytes("String.index_from_opt / Bytes.index_from_opt"),
     cst_String_index_from_Bytes_in$0=
      caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_String_concat=caml_string_of_jsbytes("String.concat"),
     cst$5=caml_string_of_jsbytes("()"),
     cst_Marshal_from_bytes=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_from_bytes$0=caml_string_of_jsbytes("Marshal.from_bytes"),
     cst_Marshal_data_size=caml_string_of_jsbytes("Marshal.data_size"),
     cst_Marshal_to_buffer_substrin=
      caml_string_of_jsbytes("Marshal.to_buffer: substring out of bounds"),
     cst_Obj_Ephemeron_blit_key=
      caml_string_of_jsbytes("Obj.Ephemeron.blit_key"),
     cst_Obj_Ephemeron_check_key=
      caml_string_of_jsbytes("Obj.Ephemeron.check_key"),
     cst_Obj_Ephemeron_unset_key=
      caml_string_of_jsbytes("Obj.Ephemeron.unset_key"),
     cst_Obj_Ephemeron_set_key=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     cst_Obj_Ephemeron_get_key_copy=
      caml_string_of_jsbytes("Obj.Ephemeron.get_key_copy"),
     cst_Obj_Ephemeron_get_key=caml_string_of_jsbytes("Obj.Ephemeron.get_key"),
     cst_Obj_Ephemeron_create=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     cst_Obj_extension_constructor$0=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Obj_extension_constructor=
      caml_string_of_jsbytes("Obj.extension_constructor"),
     cst_Array_map2_arrays_must_hav=
      caml_string_of_jsbytes("Array.map2: arrays must have the same length"),
     cst_Array_iter2_arrays_must_ha=
      caml_string_of_jsbytes("Array.iter2: arrays must have the same length"),
     cst_Array_blit=caml_string_of_jsbytes("Array.blit"),
     cst_Array_fill=caml_string_of_jsbytes("Array.fill"),
     cst_Array_sub=caml_string_of_jsbytes("Array.sub"),
     cst_Array_init=caml_string_of_jsbytes("Array.init"),
     cst_Stdlib_Array_Bottom=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     cst_Float_Array_map2_arrays_mu=
      caml_string_of_jsbytes
       ("Float.Array.map2: arrays must have the same length"),
     cst_Float_Array_iter2_arrays_m=
      caml_string_of_jsbytes
       ("Float.Array.iter2: arrays must have the same length"),
     cst_Float_array_blit=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_array_blit$0=caml_string_of_jsbytes("Float.array.blit"),
     cst_Float_Array_fill=caml_string_of_jsbytes("Float.Array.fill"),
     cst_Float_Array_sub=caml_string_of_jsbytes("Float.Array.sub"),
     cst_Float_Array_concat=caml_string_of_jsbytes("Float.Array.concat"),
     cst_Float_Array_init=caml_string_of_jsbytes("Float.Array.init"),
     cst_Stdlib_Float_Array_Bottom=
      caml_string_of_jsbytes("Stdlib.Float.Array.Bottom"),
     cst_d=caml_string_of_jsbytes("%d"),
     cst_d$0=caml_string_of_jsbytes("%d"),
     zero$2=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     one$2=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     minus_one$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int$2=runtime.caml_int64_create_lo_mi_hi(0,0,32768),
     max_int$2=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     cst_d$1=caml_string_of_jsbytes("%d"),
     cst_Lexing_lex_refill_cannot_g=
      caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     cst_syntax_error=caml_string_of_jsbytes("syntax error"),
     cst_Stdlib_Parsing_YYexit=caml_string_of_jsbytes("Stdlib.Parsing.YYexit"),
     cst_Stdlib_Parsing_Parse_error=
      caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     cst_Set_remove_min_elt=caml_string_of_jsbytes("Set.remove_min_elt"),
     cst_Set_bal=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$0=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$1=caml_string_of_jsbytes("Set.bal"),
     cst_Set_bal$2=caml_string_of_jsbytes("Set.bal"),
     cst_Map_remove_min_elt=caml_string_of_jsbytes("Map.remove_min_elt"),
     cst_Map_bal=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$0=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$1=caml_string_of_jsbytes("Map.bal"),
     cst_Map_bal$2=caml_string_of_jsbytes("Map.bal"),
     cst_Stdlib_Stack_Empty=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     cst_Stdlib_Queue_Empty=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     cst_CamlinternalLazy_Undefined=
      caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     cst_count=caml_string_of_jsbytes("{count = "),
     cst_data=caml_string_of_jsbytes("; data = "),
     cst$6=caml_string_of_jsbytes("}"),
     cst_Sempty=caml_string_of_jsbytes("Sempty"),
     cst_Scons=caml_string_of_jsbytes("Scons ("),
     cst$7=caml_string_of_jsbytes(", "),
     cst$8=caml_string_of_jsbytes(")"),
     cst_Sapp=caml_string_of_jsbytes("Sapp ("),
     cst$9=caml_string_of_jsbytes(", "),
     cst$10=caml_string_of_jsbytes(")"),
     cst_Slazy=caml_string_of_jsbytes("Slazy"),
     cst_Sgen=caml_string_of_jsbytes("Sgen"),
     cst_Sbuffio=caml_string_of_jsbytes("Sbuffio"),
     cst_Stdlib_Stream_Failure=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     cst_Stdlib_Stream_Error=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     cst_Buffer_truncate=caml_string_of_jsbytes("Buffer.truncate"),
     cst_Buffer_add_channel=caml_string_of_jsbytes("Buffer.add_channel"),
     cst_Buffer_add_substring_add_s=
      caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     cst_Buffer_add_cannot_grow_buf=
      caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     cst_Buffer_nth=caml_string_of_jsbytes("Buffer.nth"),
     cst_Buffer_blit=caml_string_of_jsbytes("Buffer.blit"),
     cst_Buffer_sub=caml_string_of_jsbytes("Buffer.sub"),
     cst_c=caml_string_of_jsbytes("%c"),
     cst_s=caml_string_of_jsbytes("%s"),
     cst_i=caml_string_of_jsbytes("%i"),
     cst_li=caml_string_of_jsbytes("%li"),
     cst_ni=caml_string_of_jsbytes("%ni"),
     cst_Li=caml_string_of_jsbytes("%Li"),
     cst_f=caml_string_of_jsbytes("%f"),
     cst_B=caml_string_of_jsbytes("%B"),
     cst$21=caml_string_of_jsbytes("%{"),
     cst$22=caml_string_of_jsbytes("%}"),
     cst$23=caml_string_of_jsbytes("%("),
     cst$24=caml_string_of_jsbytes("%)"),
     cst_a=caml_string_of_jsbytes("%a"),
     cst_t$0=caml_string_of_jsbytes("%t"),
     cst$25=caml_string_of_jsbytes("%?"),
     cst_r$0=caml_string_of_jsbytes("%r"),
     cst_r$1=caml_string_of_jsbytes("%_r"),
     cst_u$0=caml_string_of_jsbytes("%u"),
     cst_Printf_bad_conversion=
      caml_string_of_jsbytes("Printf: bad conversion %["),
     cst_Printf_bad_conversion$0=
      caml_string_of_jsbytes("Printf: bad conversion %_"),
     cst$30=caml_string_of_jsbytes("@{"),
     cst$31=caml_string_of_jsbytes("@["),
     cst$32=caml_string_of_jsbytes("@{"),
     cst$33=caml_string_of_jsbytes("@["),
     cst$34=caml_string_of_jsbytes("@{"),
     cst$35=caml_string_of_jsbytes("@["),
     cst_0=caml_string_of_jsbytes("0"),
     cst_padding=caml_string_of_jsbytes("padding"),
     cst_precision=caml_string_of_jsbytes("precision"),
     cst$40=caml_string_of_jsbytes("'*'"),
     cst$38=caml_string_of_jsbytes("'-'"),
     cst_0$2=caml_string_of_jsbytes("'0'"),
     cst$39=caml_string_of_jsbytes("'*'"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_0$1=caml_string_of_jsbytes("0"),
     cst_precision$0=caml_string_of_jsbytes("precision"),
     cst_precision$1=caml_string_of_jsbytes("precision"),
     cst$41=caml_string_of_jsbytes("'+'"),
     cst$42=caml_string_of_jsbytes("'#'"),
     cst$43=caml_string_of_jsbytes("' '"),
     cst_padding$0=caml_string_of_jsbytes("`padding'"),
     cst_precision$2=caml_string_of_jsbytes("`precision'"),
     cst$44=caml_string_of_jsbytes("'+'"),
     cst$45=caml_string_of_jsbytes("'_'"),
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     cst_digit=caml_string_of_jsbytes("digit"),
     cst_character=caml_string_of_jsbytes("character ')'"),
     cst_character$0=caml_string_of_jsbytes("character '}'"),
     cst$49=caml_string_of_jsbytes("'#'"),
     cst$46=caml_string_of_jsbytes("'+'"),
     cst$47=caml_string_of_jsbytes("'+'"),
     cst$48=caml_string_of_jsbytes("' '"),
     cst$50=caml_string_of_jsbytes("'+'"),
     cst_non_zero_widths_are_unsupp=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     cst_unexpected_end_of_format=
      caml_string_of_jsbytes("unexpected end of format"),
     cst$36=caml_string_of_jsbytes(""),
     cst$37=caml_string_of_jsbytes(""),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_hov=caml_string_of_jsbytes("hov"),
     cst_hv=caml_string_of_jsbytes("hv"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_neg_infinity=caml_string_of_jsbytes("neg_infinity"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst$29=caml_string_of_jsbytes("."),
     cst_nd$0=caml_string_of_jsbytes("%+nd"),
     cst_nd$1=caml_string_of_jsbytes("% nd"),
     cst_ni$1=caml_string_of_jsbytes("%+ni"),
     cst_ni$2=caml_string_of_jsbytes("% ni"),
     cst_nx=caml_string_of_jsbytes("%nx"),
     cst_nx$0=caml_string_of_jsbytes("%#nx"),
     cst_nX=caml_string_of_jsbytes("%nX"),
     cst_nX$0=caml_string_of_jsbytes("%#nX"),
     cst_no=caml_string_of_jsbytes("%no"),
     cst_no$0=caml_string_of_jsbytes("%#no"),
     cst_nd=caml_string_of_jsbytes("%nd"),
     cst_ni$0=caml_string_of_jsbytes("%ni"),
     cst_nu=caml_string_of_jsbytes("%nu"),
     cst_ld$0=caml_string_of_jsbytes("%+ld"),
     cst_ld$1=caml_string_of_jsbytes("% ld"),
     cst_li$1=caml_string_of_jsbytes("%+li"),
     cst_li$2=caml_string_of_jsbytes("% li"),
     cst_lx=caml_string_of_jsbytes("%lx"),
     cst_lx$0=caml_string_of_jsbytes("%#lx"),
     cst_lX=caml_string_of_jsbytes("%lX"),
     cst_lX$0=caml_string_of_jsbytes("%#lX"),
     cst_lo=caml_string_of_jsbytes("%lo"),
     cst_lo$0=caml_string_of_jsbytes("%#lo"),
     cst_ld=caml_string_of_jsbytes("%ld"),
     cst_li$0=caml_string_of_jsbytes("%li"),
     cst_lu=caml_string_of_jsbytes("%lu"),
     cst_Ld$0=caml_string_of_jsbytes("%+Ld"),
     cst_Ld$1=caml_string_of_jsbytes("% Ld"),
     cst_Li$1=caml_string_of_jsbytes("%+Li"),
     cst_Li$2=caml_string_of_jsbytes("% Li"),
     cst_Lx=caml_string_of_jsbytes("%Lx"),
     cst_Lx$0=caml_string_of_jsbytes("%#Lx"),
     cst_LX=caml_string_of_jsbytes("%LX"),
     cst_LX$0=caml_string_of_jsbytes("%#LX"),
     cst_Lo=caml_string_of_jsbytes("%Lo"),
     cst_Lo$0=caml_string_of_jsbytes("%#Lo"),
     cst_Ld=caml_string_of_jsbytes("%Ld"),
     cst_Li$0=caml_string_of_jsbytes("%Li"),
     cst_Lu=caml_string_of_jsbytes("%Lu"),
     cst_d$3=caml_string_of_jsbytes("%+d"),
     cst_d$4=caml_string_of_jsbytes("% d"),
     cst_i$1=caml_string_of_jsbytes("%+i"),
     cst_i$2=caml_string_of_jsbytes("% i"),
     cst_x=caml_string_of_jsbytes("%x"),
     cst_x$0=caml_string_of_jsbytes("%#x"),
     cst_X$0=caml_string_of_jsbytes("%X"),
     cst_X$1=caml_string_of_jsbytes("%#X"),
     cst_o=caml_string_of_jsbytes("%o"),
     cst_o$0=caml_string_of_jsbytes("%#o"),
     cst_d$2=caml_string_of_jsbytes("%d"),
     cst_i$0=caml_string_of_jsbytes("%i"),
     cst_u=caml_string_of_jsbytes("%u"),
     cst$26=caml_string_of_jsbytes("%!"),
     cst$27=caml_string_of_jsbytes("@{"),
     cst$28=caml_string_of_jsbytes("@["),
     cst_0c=caml_string_of_jsbytes("0c"),
     cst$20=caml_string_of_jsbytes("%%"),
     cst$12=caml_string_of_jsbytes("@]"),
     cst$13=caml_string_of_jsbytes("@}"),
     cst$14=caml_string_of_jsbytes("@?"),
     cst$15=caml_string_of_jsbytes("@\n"),
     cst$16=caml_string_of_jsbytes("@."),
     cst$17=caml_string_of_jsbytes("@@"),
     cst$18=caml_string_of_jsbytes("@%"),
     cst$19=caml_string_of_jsbytes("@"),
     cst$11=caml_string_of_jsbytes(".*"),
     cst_CamlinternalFormat_Type_mi=
      caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     cst$58=caml_string_of_jsbytes(""),
     cst$59=caml_string_of_jsbytes("\n"),
     cst_a_boolean=caml_string_of_jsbytes("a boolean"),
     cst_an_integer=caml_string_of_jsbytes("an integer"),
     cst_an_integer$0=caml_string_of_jsbytes("an integer"),
     cst_a_float=caml_string_of_jsbytes("a float"),
     cst_a_float$0=caml_string_of_jsbytes("a float"),
     cst$55=caml_string_of_jsbytes(""),
     cst$56=caml_string_of_jsbytes(" "),
     cst$57=caml_string_of_jsbytes(""),
     cst_one_of=caml_string_of_jsbytes("one of: "),
     cst_Arg_Expand_is_is_only_allo=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     cst_no_argument=caml_string_of_jsbytes("no argument"),
     cst$54=caml_string_of_jsbytes("(?)"),
     cst_help$3=caml_string_of_jsbytes("--help"),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst_help$2=caml_string_of_jsbytes("-help"),
     cst_Display_this_list_of_optio=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help=caml_string_of_jsbytes("-help"),
     cst_help$1=caml_string_of_jsbytes("--help"),
     cst_Display_this_list_of_optio$0=
      caml_string_of_jsbytes(" Display this list of options"),
     cst_help$0=caml_string_of_jsbytes("--help"),
     cst$51=caml_string_of_jsbytes("}"),
     cst$52=caml_string_of_jsbytes("|"),
     cst$53=caml_string_of_jsbytes("{"),
     cst_none=caml_string_of_jsbytes("<none>"),
     cst_Stdlib_Arg_Bad=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     cst_Stdlib_Arg_Help=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     cst_Stdlib_Arg_Stop=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     cst$61=caml_string_of_jsbytes(""),
     cst_Program_not_linked_with_g_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     cst_Raised_at=caml_string_of_jsbytes("Raised at"),
     cst_Re_raised_at=caml_string_of_jsbytes("Re-raised at"),
     cst_Raised_by_primitive_operat=
      caml_string_of_jsbytes("Raised by primitive operation at"),
     cst_Called_from=caml_string_of_jsbytes("Called from"),
     cst_inlined=caml_string_of_jsbytes(" (inlined)"),
     cst$64=caml_string_of_jsbytes(""),
     partial=[4,0,0,0,0],
     cst_Out_of_memory=caml_string_of_jsbytes("Out of memory"),
     cst_Stack_overflow=caml_string_of_jsbytes("Stack overflow"),
     cst_Pattern_matching_failed=
      caml_string_of_jsbytes("Pattern matching failed"),
     cst_Assertion_failed=caml_string_of_jsbytes("Assertion failed"),
     cst_Undefined_recursive_module=
      caml_string_of_jsbytes("Undefined recursive module"),
     cst$62=caml_string_of_jsbytes(""),
     cst$63=caml_string_of_jsbytes(""),
     cst$60=caml_string_of_jsbytes("_"),
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     cst_Stdlib_Fun_Finally_raised=
      caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     cst_Digest_from_hex$0=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_from_hex=caml_string_of_jsbytes("Digest.from_hex"),
     cst_Digest_to_hex=caml_string_of_jsbytes("Digest.to_hex"),
     cst_Digest_substring=caml_string_of_jsbytes("Digest.substring"),
     cst_Random_int64=caml_string_of_jsbytes("Random.int64"),
     cst_Random_int32=caml_string_of_jsbytes("Random.int32"),
     cst_Random_int=caml_string_of_jsbytes("Random.int"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst_OCAMLRUNPARAM=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     cst_CAMLRUNPARAM=caml_string_of_jsbytes("CAMLRUNPARAM"),
     cst$65=caml_string_of_jsbytes(""),
     cst_Weak_Make_hash_bucket_cann=
      caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     cst_Weak_fill=caml_string_of_jsbytes("Weak.fill"),
     cst_Weak_blit=caml_string_of_jsbytes("Weak.blit"),
     cst_Weak_check=caml_string_of_jsbytes("Weak.check"),
     cst_Weak_get_copy=caml_string_of_jsbytes("Weak.get_copy"),
     cst_Weak_get=caml_string_of_jsbytes("Weak.get"),
     cst_Weak_set=caml_string_of_jsbytes("Weak.set"),
     cst_Weak_create=caml_string_of_jsbytes("Weak.create"),
     cst$83=caml_string_of_jsbytes(""),
     cst$84=caml_string_of_jsbytes(""),
     cst$82=caml_string_of_jsbytes("."),
     cst$79=caml_string_of_jsbytes(">"),
     cst$80=caml_string_of_jsbytes("<\/"),
     cst$81=caml_string_of_jsbytes(""),
     cst$76=caml_string_of_jsbytes(">"),
     cst$77=caml_string_of_jsbytes("<"),
     cst$78=caml_string_of_jsbytes(""),
     cst$75=caml_string_of_jsbytes("\n"),
     cst_Format_pp_set_geometry_max=
      caml_string_of_jsbytes("Format.pp_set_geometry: max_indent < 2"),
     cst_Format_pp_set_geometry_mar=
      caml_string_of_jsbytes("Format.pp_set_geometry: margin <= max_indent"),
     cst$71=caml_string_of_jsbytes(""),
     cst$72=caml_string_of_jsbytes(""),
     cst$73=caml_string_of_jsbytes(""),
     cst$74=caml_string_of_jsbytes(""),
     cst$67=caml_string_of_jsbytes(""),
     cst$68=caml_string_of_jsbytes(""),
     cst$69=caml_string_of_jsbytes(""),
     cst$70=caml_string_of_jsbytes(""),
     cst$66=caml_string_of_jsbytes(""),
     cst_Stdlib_Format_String_tag=
      caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     cst_end_of_input_not_found=
      caml_string_of_jsbytes("end of input not found"),
     cst_scanf_bad_conversion_a=
      caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     cst_scanf_bad_conversion_t=
      caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     cst_scanf_missing_reader=caml_string_of_jsbytes("scanf: missing reader"),
     cst_scanf_bad_conversion_custo=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     cst_scanf_bad_conversion=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$0=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst_scanf_bad_conversion$1=
      caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     cst_scanf_bad_conversion$2=
      caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     cst$90=caml_string_of_jsbytes('"'),
     cst$91=caml_string_of_jsbytes('"'),
     cst$88=caml_string_of_jsbytes('"'),
     cst$89=caml_string_of_jsbytes('"'),
     cst$87=caml_string_of_jsbytes('"'),
     cst_in_format=caml_string_of_jsbytes(' in format "'),
     cst_an=caml_string_of_jsbytes("an"),
     cst_x$2=caml_string_of_jsbytes("x"),
     cst_nfinity=caml_string_of_jsbytes("nfinity"),
     cst_digits=caml_string_of_jsbytes("digits"),
     cst_decimal_digits=caml_string_of_jsbytes("decimal digits"),
     cst_0b=caml_string_of_jsbytes("0b"),
     cst_0o=caml_string_of_jsbytes("0o"),
     cst_0u=caml_string_of_jsbytes("0u"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_false$3=caml_string_of_jsbytes("false"),
     cst_true$3=caml_string_of_jsbytes("true"),
     cst_not_a_valid_float_in_hexad=
      caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     cst_no_dot_or_exponent_part_fo=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     cst$86=caml_string_of_jsbytes("-"),
     cst_unnamed_function=caml_string_of_jsbytes("unnamed function"),
     cst_unnamed_character_string=
      caml_string_of_jsbytes("unnamed character string"),
     cst_unnamed_Stdlib_input_chann=
      caml_string_of_jsbytes("unnamed Stdlib input channel"),
     cst$85=caml_string_of_jsbytes("-"),
     cst_Stdlib_Scanf_Scan_failure=
      caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     cst_binary=caml_string_of_jsbytes("binary"),
     cst_octal=caml_string_of_jsbytes("octal"),
     cst_hexadecimal=caml_string_of_jsbytes("hexadecimal"),
     cst_a_Char=caml_string_of_jsbytes("a Char"),
     cst_a_String=caml_string_of_jsbytes("a String"),
     cst$92=caml_string_of_jsbytes(""),
     cst$93=caml_string_of_jsbytes(""),
     cst$94=caml_string_of_jsbytes(""),
     cst$95=caml_string_of_jsbytes(""),
     cst$96=caml_string_of_jsbytes(""),
     cst$98=caml_string_of_jsbytes(""),
     cst$97=caml_string_of_jsbytes(""),
     cst_Illegal_character=caml_string_of_jsbytes("Illegal character "),
     cst_Filename_chop_extension=
      caml_string_of_jsbytes("Filename.chop_extension"),
     cst$126=caml_string_of_jsbytes(""),
     cst_Filename_chop_suffix=caml_string_of_jsbytes("Filename.chop_suffix"),
     cst$125=caml_string_of_jsbytes(""),
     cst_2_1$0=caml_string_of_jsbytes(" 2>&1"),
     cst_2$0=caml_string_of_jsbytes(" 2>"),
     cst$124=caml_string_of_jsbytes(""),
     cst$116=caml_string_of_jsbytes(" >"),
     cst$123=caml_string_of_jsbytes(""),
     cst$117=caml_string_of_jsbytes(" <"),
     cst$122=caml_string_of_jsbytes(""),
     cst$118=caml_string_of_jsbytes(" "),
     cst$119=caml_string_of_jsbytes(" "),
     cst$120=caml_string_of_jsbytes('"'),
     cst$121=caml_string_of_jsbytes(""),
     cst_Filename_quote_command_bad=
      caml_string_of_jsbytes("Filename.quote_command: bad file name "),
     cst$114=caml_string_of_jsbytes('"'),
     cst$115=caml_string_of_jsbytes('"'),
     cst$112=caml_string_of_jsbytes("./"),
     cst$111=caml_string_of_jsbytes(".\\"),
     cst$110=caml_string_of_jsbytes("../"),
     cst$109=caml_string_of_jsbytes("..\\"),
     cst_2_1=caml_string_of_jsbytes(" 2>&1"),
     cst_2=caml_string_of_jsbytes(" 2>"),
     cst$108=caml_string_of_jsbytes(""),
     cst$103=caml_string_of_jsbytes(" >"),
     cst$107=caml_string_of_jsbytes(""),
     cst$104=caml_string_of_jsbytes(" <"),
     cst$106=caml_string_of_jsbytes(""),
     cst$105=caml_string_of_jsbytes(" "),
     cst$102=caml_string_of_jsbytes("./"),
     cst$101=caml_string_of_jsbytes("../"),
     cst$100=caml_string_of_jsbytes(""),
     cst$99=caml_string_of_jsbytes(""),
     null$0=caml_string_of_jsbytes("/dev/null"),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     cst_TMPDIR=caml_string_of_jsbytes("TMPDIR"),
     cst_tmp=caml_string_of_jsbytes("/tmp"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     null$1=caml_string_of_jsbytes("NUL"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     cst_TEMP=caml_string_of_jsbytes("TEMP"),
     cst$113=caml_string_of_jsbytes("."),
     null$2=caml_string_of_jsbytes("/dev/null"),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     cst_Cygwin=caml_string_of_jsbytes("Cygwin"),
     cst_Win32=caml_string_of_jsbytes("Win32"),
     zero$4=[254,0.,0.],
     one$4=[254,1.,0.],
     i=[254,0.,1.],
     cst_Series_is_closed$0=caml_string_of_jsbytes("Series is closed"),
     cst_Series_is_closed=caml_string_of_jsbytes("Series is closed"),
     cst_Bigarray_array3_of_genarra=
      caml_string_of_jsbytes("Bigarray.array3_of_genarray"),
     cst_Bigarray_array2_of_genarra=
      caml_string_of_jsbytes("Bigarray.array2_of_genarray"),
     cst_Bigarray_array1_of_genarra=
      caml_string_of_jsbytes("Bigarray.array1_of_genarray"),
     cst_Bigarray_array0_of_genarra=
      caml_string_of_jsbytes("Bigarray.array0_of_genarray"),
     cst_Bigarray_Array3_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array3_of_array_n$0=
      caml_string_of_jsbytes("Bigarray.Array3.of_array: non-cubic data"),
     cst_Bigarray_Array2_of_array_n=
      caml_string_of_jsbytes("Bigarray.Array2.of_array: non-rectangular data"),
     Invalid_argument=global_data.Invalid_argument,
     Failure=global_data.Failure,
     Match_failure=global_data.Match_failure,
     Assert_failure=global_data.Assert_failure,
     Not_found=global_data.Not_found,
     Out_of_memory=global_data.Out_of_memory,
     Stack_overflow=global_data.Stack_overflow,
     Sys_error=global_data.Sys_error,
     End_of_file=global_data.End_of_file,
     Division_by_zero=global_data.Division_by_zero,
     Sys_blocked_io=global_data.Sys_blocked_io,
     Undefined_recursive_module=global_data.Undefined_recursive_module,
     _l_=[0,0,[0,6,0]],
     _k_=[0,0,[0,7,0]],
     _j_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _i_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _g_=[0,1],
     _h_=[0,0],
     _a_=runtime.caml_int64_create_lo_mi_hi(0,0,32752),
     _b_=runtime.caml_int64_create_lo_mi_hi(0,0,65520),
     _c_=runtime.caml_int64_create_lo_mi_hi(1,0,32752),
     _d_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,32751),
     _e_=runtime.caml_int64_create_lo_mi_hi(0,0,16),
     _f_=runtime.caml_int64_create_lo_mi_hi(0,0,15536),
     _o_=[0,0,0],
     _s_=[0,caml_string_of_jsbytes("array.ml"),238,4],
     _u_=[0,caml_string_of_jsbytes("float.ml"),381,6],
     _t_=[0,caml_string_of_jsbytes("float.ml"),208,14],
     _F_=runtime.caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _E_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _D_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _C_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _G_=[0,0,0,0],
     _H_=[0,0,0],
     _I_=[0,caml_string_of_jsbytes("set.ml"),547,18],
     _J_=[0,0,0,0],
     _K_=[0,caml_string_of_jsbytes("map.ml"),398,10],
     _L_=[0,0,0],
     _M_=[0,caml_string_of_jsbytes("stream.ml"),53,12],
     _N_=[0,0],
     _O_=[0,caml_string_of_jsbytes("stream.ml"),82,12],
     _Y_=[0,caml_string_of_jsbytes("buffer.ml"),282,9],
     _X_=[0,caml_string_of_jsbytes("buffer.ml"),263,2],
     _W_=[0,caml_string_of_jsbytes("buffer.ml"),195,19],
     _V_=[0,caml_string_of_jsbytes("buffer.ml"),213,8],
     _U_=[0,caml_string_of_jsbytes("buffer.ml"),174,19],
     _T_=[0,caml_string_of_jsbytes("buffer.ml"),192,8],
     _S_=[0,caml_string_of_jsbytes("buffer.ml"),138,19],
     _R_=[0,caml_string_of_jsbytes("buffer.ml"),171,8],
     _Q_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _P_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     ___=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _$_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aa_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1830,8],
     _aX_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _aW_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _az_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _aA_=[0,1,0],
     _aB_=[0,0],
     _aC_=[1,0],
     _aD_=[1,1],
     _aF_=[1,1],
     _aE_=[1,1],
     _aJ_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _aG_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _aH_=[0,0],
     _aI_=[0,0],
     _aK_=[0,[12,64,0]],
     _aL_=[0,caml_string_of_jsbytes("@ "),1,0],
     _aM_=[0,caml_string_of_jsbytes("@,"),0,0],
     _aN_=[2,60],
     _aO_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _aP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _aQ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _aR_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _aS_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _aT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _aU_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _aV_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _ay_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _ax_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _aw_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _av_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _au_=[0,0,4],
     _ao_=[0,103],
     _Z_=[0,0,0],
     _bh_=[0,[2,0,[0,0]],caml_string_of_jsbytes("%s%c")],
     _bb_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _bc_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a$_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ba_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a9_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a__=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a3_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _a6_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _a7_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _a8_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _a4_=[0,caml_string_of_jsbytes("-help")],
     _a5_=[0,caml_string_of_jsbytes("--help")],
     _a2_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _a1_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _a0_=[0,caml_string_of_jsbytes("-help")],
     _aY_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _aZ_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _bm_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _bv_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bt_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _bu_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _br_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_string_of_jsbytes(", line "),
             [4,
              0,
              0,
              0,
              [11,
               caml_string_of_jsbytes(", characters "),
               [4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_string_of_jsbytes('%s file "%s"%s, line %d, characters %d-%d')],
     _bs_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _bq_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bp_=
      [0,
       [11,caml_string_of_jsbytes("Uncaught exception: "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Uncaught exception: %s\n")],
     _bn_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _bo_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _bl_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bk_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _bD_=
      [0,
       [11,caml_string_of_jsbytes("minor_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("minor_collections: %d\n")],
     _bE_=
      [0,
       [11,caml_string_of_jsbytes("major_collections: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("major_collections: %d\n")],
     _bF_=
      [0,
       [11,caml_string_of_jsbytes("compactions:       "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("compactions:       %d\n")],
     _bG_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bH_=[0,[8,[0,0,0],0,[0,0],0],caml_string_of_jsbytes("%.0f")],
     _bI_=
      [0,
       [11,
        caml_string_of_jsbytes("minor_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("minor_words:    %*.0f\n")],
     _bJ_=
      [0,
       [11,
        caml_string_of_jsbytes("promoted_words: "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("promoted_words: %*.0f\n")],
     _bK_=
      [0,
       [11,
        caml_string_of_jsbytes("major_words:    "),
        [8,[0,0,0],[1,1],[0,0],[12,10,0]]],
       caml_string_of_jsbytes("major_words:    %*.0f\n")],
     _bL_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bM_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _bN_=
      [0,
       [11,caml_string_of_jsbytes("top_heap_words: "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("top_heap_words: %*d\n")],
     _bO_=
      [0,
       [11,caml_string_of_jsbytes("heap_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("heap_words:     %*d\n")],
     _bP_=
      [0,
       [11,caml_string_of_jsbytes("live_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("live_words:     %*d\n")],
     _bQ_=
      [0,
       [11,caml_string_of_jsbytes("free_words:     "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("free_words:     %*d\n")],
     _bR_=
      [0,
       [11,caml_string_of_jsbytes("largest_free:   "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("largest_free:   %*d\n")],
     _bS_=
      [0,
       [11,caml_string_of_jsbytes("fragments:      "),[4,0,[1,1],0,[12,10,0]]],
       caml_string_of_jsbytes("fragments:      %*d\n")],
     _bT_=[0,[12,10,0],caml_string_of_jsbytes("\n")],
     _bU_=
      [0,
       [11,caml_string_of_jsbytes("live_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("live_blocks: %d\n")],
     _bV_=
      [0,
       [11,caml_string_of_jsbytes("free_blocks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("free_blocks: %d\n")],
     _bW_=
      [0,
       [11,caml_string_of_jsbytes("heap_chunks: "),[4,0,0,0,[12,10,0]]],
       caml_string_of_jsbytes("heap_chunks: %d\n")],
     _bZ_=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     _b0_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _b1_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _b5_=[0,0],
     _b4_=[0,caml_string_of_jsbytes("hashtbl.ml"),102,23],
     _b8_=[3,0,3],
     _b7_=[0,caml_string_of_jsbytes("")],
     _b6_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _cm_=[0,91],
     _cl_=[0,123],
     _cn_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _co_=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     _ck_=[0,37,caml_string_of_jsbytes("")],
     _cj_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _ch_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _cg_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _cf_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _ce_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cd_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _cc_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cb_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _ca_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _b$_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _b__=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _cv_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),438,17],
     _cu_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),420,13],
     _ct_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),417,13],
     _cs_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),414,13],
     _cr_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),411,13],
     _cq_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),408,13],
     _cp_=[0,caml_string_of_jsbytes("camlinternalOO.ml"),281,50],
     _cy_=[0,0],
     _cx_=[0,0],
     _cw_=[0,0],
     _cD_=[0,7,0],
     _cC_=[0,1,[0,3,[0,5,0]]],
     _cB_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _cA_=[0,caml_string_of_jsbytes('"'),0],
     _cE_=[254,0.,0.];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    var CamlinternalFormatBasics=[0,concat_fmtty,erase_rel,concat_fmt];
    caml_register_global
     (734,CamlinternalFormatBasics,"CamlinternalFormatBasics");
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,cst_Stdlib_Exit,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     infinity=caml_int64_float_of_bits(_a_),
     neg_infinity=caml_int64_float_of_bits(_b_),
     nan=caml_int64_float_of_bits(_c_),
     max_float=caml_int64_float_of_bits(_d_),
     min_float=caml_int64_float_of_bits(_e_),
     epsilon=caml_int64_float_of_bits(_f_),
     max_int=2147483647,
     min_int=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_char_of_int)}
    function string_of_bool(b){return b?cst_true:cst_false}
    function bool_of_string(param)
     {return caml_string_notequal(param,cst_false$0)
              ?caml_string_notequal(param,cst_true$0)
                ?invalid_arg(cst_bool_of_string)
                :1
              :0}
    function bool_of_string_opt(param)
     {return caml_string_notequal(param,cst_false$1)
              ?caml_string_notequal(param,cst_true$1)?0:_g_
              :_h_}
    function string_of_int(n){return caml_string_of_jsbytes("" + n)}
    function int_of_string_opt(s)
     {try
       {var _As_=[0,caml_int_of_string(s)];return _As_}
      catch(_At_)
       {_At_ = caml_wrap_exception(_At_);
        if(_At_[1] === Failure)return 0;
        throw _At_}}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s),i=0;
      for(;;)
       {if(l <= i)return symbol(s,cst);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    function to_string(f)
     {return valid_float_lexem(caml_format_float(cst_12g,f))}
    function of_string_opt(s)
     {try
       {var _Aq_=[0,caml_float_of_string(s)];return _Aq_}
      catch(_Ar_)
       {_Ar_ = caml_wrap_exception(_Ar_);
        if(_Ar_[1] === Failure)return 0;
        throw _Ar_}}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_out(name){return open_out_gen(_i_,438,name)}
    function open_out_bin(name){return open_out_gen(_j_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_Ap_)
             {_Ap_ = caml_wrap_exception(_Ap_);
              if(_Ap_[1] !== Sys_error)throw _Ap_;
              var _Ao_=_Ap_}
            var param$0=l;
            continue}
          return 0}}
      return iter(runtime.caml_ml_out_channels_list(0))}
    function output_bytes(oc,s)
     {return caml_ml_output_bytes(oc,s,0,caml_ml_bytes_length(s))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function output(oc,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(cst_output)}
    function output_substring(oc,s,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(s) - len | 0) < ofs))
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(cst_output_substring)}
    function output_value(chan,v){return caml_output_value(chan,v,0)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function close_out_noerr(oc)
     {try {caml_ml_flush(oc)}catch(_An_){}
      try
       {var _Al_=caml_ml_close_channel(oc);return _Al_}
      catch(_Am_){return 0}}
    function open_in_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_in(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_in(name){return open_in_gen(_k_,0,name)}
    function open_in_bin(name){return open_in_gen(_l_,0,name)}
    function input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(cst_input)}
    function unsafe_really_input(ic,s,ofs,len)
     {var ofs$0=ofs,len$0=len;
      for(;;)
       {if(0 < len$0)
         {var r=caml_ml_input(ic,s,ofs$0,len$0);
          if(0 === r)throw End_of_file;
          var len$1=len$0 - r | 0,ofs$1=ofs$0 + r | 0,ofs$0=ofs$1,len$0=len$1;
          continue}
        return 0}}
    function really_input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return unsafe_really_input(ic,s,ofs,len);
      return invalid_arg(cst_really_input)}
    function really_input_string(ic,len)
     {var s=caml_create_bytes(len);
      really_input(ic,s,0,len);
      return caml_string_of_bytes(s)}
    function input_line(chan)
     {function build_result(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1],len=caml_ml_bytes_length(hd);
            caml_blit_bytes(hd,0,buf,pos$0 - len | 0,len);
            var pos$1=pos$0 - len | 0,pos$0=pos$1,param$0=tl;
            continue}
          return buf}}
      var accu=0,len=0;
      for(;;)
       {var n=runtime.caml_ml_input_scan_line(chan);
        if(0 === n)
         {if(! accu)throw End_of_file;
          var _Ak_=build_result(caml_create_bytes(len),len,accu)}
        else
         {if(! (0 < n))
           {var beg=caml_create_bytes(- n | 0);
            caml_ml_input(chan,beg,0,- n | 0);
            var len$1=len - n | 0,accu$0=[0,beg,accu],accu=accu$0,len=len$1;
            continue}
          var res=caml_create_bytes(n - 1 | 0);
          caml_ml_input(chan,res,0,n - 1 | 0);
          caml_ml_input_char(chan);
          if(accu)
           var
            len$0=(len + n | 0) - 1 | 0,
            _Ak_=build_result(caml_create_bytes(len$0),len$0,[0,res,accu]);
          else
           var _Ak_=res}
        return caml_string_of_bytes(_Ak_)}}
    function close_in_noerr(ic)
     {try
       {var _Ai_=caml_ml_close_channel(ic);return _Ai_}
      catch(_Aj_){return 0}}
    function print_char(c){return caml_ml_output_char(stdout,c)}
    function print_string(s){return output_string(stdout,s)}
    function print_bytes(s){return output_bytes(stdout,s)}
    function print_int(i)
     {return output_string(stdout,caml_string_of_jsbytes("" + i))}
    function print_float(f){return output_string(stdout,to_string(f))}
    function print_endline(s)
     {output_string(stdout,s);
      caml_ml_output_char(stdout,10);
      return caml_ml_flush(stdout)}
    function print_newline(param)
     {caml_ml_output_char(stdout,10);return caml_ml_flush(stdout)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_bytes(s){return output_bytes(stderr,s)}
    function prerr_int(i)
     {return output_string(stderr,caml_string_of_jsbytes("" + i))}
    function prerr_float(f){return output_string(stderr,to_string(f))}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function prerr_newline(param)
     {caml_ml_output_char(stderr,10);return caml_ml_flush(stderr)}
    function read_line(param){caml_ml_flush(stdout);return input_line(stdin)}
    function read_int(param){return caml_int_of_string(read_line(0))}
    function read_int_opt(param){return int_of_string_opt(read_line(0))}
    function read_float(param){return caml_float_of_string(read_line(0))}
    function read_float_opt(param){return of_string_opt(read_line(0))}
    function string_of_format(param){var str=param[2];return str}
    function symbol$0(param,_Ag_)
     {var
       str2=_Ag_[2],
       fmt2=_Ag_[1],
       str1=param[2],
       fmt1=param[1],
       _Ah_=symbol(str1,symbol(cst$0,str2));
      return [0,concat_fmt(fmt1,fmt2),_Ah_]}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1],f_already_ran=[0,0];
      exit_function[1]
      =
      function(param)
       {if(1 - f_already_ran[1]){f_already_ran[1] = 1;caml_call1(f,0)}
        return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode)
     {do_at_exit(0);return runtime.caml_sys_exit(retcode)}
    var
     set_binary_mode_in=caml_ml_set_binary_mode,
     close_in=caml_ml_close_channel,
     in_channel_length=caml_ml_channel_size,
     pos_in=runtime.caml_ml_pos_in,
     seek_in=runtime.caml_ml_seek_in,
     input_value=caml_input_value,
     input_binary_int=runtime.caml_ml_input_int,
     input_byte=caml_ml_input_char,
     input_char=caml_ml_input_char,
     set_binary_mode_out=caml_ml_set_binary_mode,
     out_channel_length=caml_ml_channel_size,
     pos_out=runtime.caml_ml_pos_out,
     seek_out=runtime.caml_ml_seek_out,
     output_binary_int=runtime.caml_ml_output_int,
     output_byte=caml_ml_output_char,
     output_char=caml_ml_output_char,
     flush=caml_ml_flush,
     Stdlib=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global(747,Stdlib,"Stdlib");
    var
     Exit$0=[248,cst_Stdlib_Pervasives_Exit,caml_fresh_oo_id(0)],
     Stdlib_pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string,
       bool_of_string_opt,
       string_of_int,
       int_of_string_opt,
       to_string,
       of_string_opt,
       append,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_int_opt,
       read_float,
       read_float_opt,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       do_at_exit];
    caml_register_global(748,Stdlib_pervasives,"Stdlib__pervasives");
    function empty(param){return 0}
    function return$0(x,param){return [0,x,empty]}
    function map(f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _Ae_=function(_Af_){return map(f,next,_Af_)};
        return [0,caml_call1(f,x),_Ae_]}
      return 0}
    function filter_map(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1],match$0=caml_call1(f,x);
          if(match$0)
           {var y=match$0[1];
            return [0,y,function(_Ad_){return filter_map(f,next,_Ad_)}]}
          var seq$0=next;
          continue}
        return 0}}
    function filter(f,seq,param)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          if(caml_call1(f,x))
           return [0,x,function(_Ac_){return filter(f,next,_Ac_)}];
          var seq$0=next;
          continue}
        return 0}}
    function flat_map$0(counter,f,seq,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1],_Ab_=caml_call1(f,x),_Aa_=0;
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return flat_map_app$0(counter$0,f,_Ab_,next,_Aa_)}
        return caml_trampoline_return(flat_map_app$0,[0,f,_Ab_,next,_Aa_])}
      return 0}
    function flat_map_app$0(counter,f,seq,tail,param)
     {var match=caml_call1(seq,0);
      if(match)
       {var next=match[2],x=match[1];
        return [0,x,function(_z$_){return flat_map_app(f,next,tail,_z$_)}]}
      var _z__=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return flat_map$0(counter$0,f,tail,_z__)}
      return caml_trampoline_return(flat_map$0,[0,f,tail,_z__])}
    function flat_map(f,seq,param)
     {return caml_trampoline(flat_map$0(0,f,seq,param))}
    function flat_map_app(f,seq,tail,param)
     {return caml_trampoline(flat_map_app$0(0,f,seq,tail,param))}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    var
     Stdlib_seq=
      [0,empty,return$0,map,filter,filter_map,flat_map,fold_left,iter];
    caml_register_global(749,Stdlib_seq,"Stdlib__seq");
    var none=0;
    function some(v){return [0,v]}
    function value(o,default$0){if(o){var v=o[1];return v}return default$0}
    function get(param)
     {if(param){var v=param[1];return v}
      return invalid_arg(cst_option_is_None)}
    function bind(o,f){if(o){var v=o[1];return caml_call1(f,v)}return 0}
    function join(param){if(param){var o=param[1];return o}return 0}
    function map$0(f,o){if(o){var v=o[1];return [0,caml_call1(f,v)]}return 0}
    function fold(none,some,param)
     {if(param){var v=param[1];return caml_call1(some,v)}return none}
    function iter$0(f,param)
     {if(param){var v=param[1];return caml_call1(f,v)}return 0}
    function is_none(param){return param?0:1}
    function is_some(param){return param?1:0}
    function equal(eq,o0,o1)
     {if(o0)
       {if(o1){var v1=o1[1],v0=o0[1];return caml_call2(eq,v0,v1)}}
      else
       if(! o1)return 1;
      return 0}
    function compare(cmp,o0,o1)
     {if(o0)
       {var _z9_=o0[1];
        if(o1){var v1=o1[1];return caml_call2(cmp,_z9_,v1)}
        return 1}
      return o1?-1:0}
    function to_result(none,param)
     {if(param){var v=param[1];return [0,v]}return [1,none]}
    function to_list(param){if(param){var v=param[1];return [0,v,0]}return 0}
    function to_seq(param)
     {if(param){var v=param[1];return function(_z8_){return return$0(v,_z8_)}}
      return empty}
    var
     Stdlib_option=
      [0,
       none,
       some,
       value,
       get,
       bind,
       join,
       map$0,
       fold,
       iter$0,
       is_none,
       is_some,
       equal,
       compare,
       to_result,
       to_list,
       to_seq];
    caml_register_global(750,Stdlib_option,"Stdlib__option");
    function ok(v){return [0,v]}
    function error(e){return [1,e]}
    function value$0(r,default$0)
     {if(0 === r[0]){var v=r[1];return v}return default$0}
    function get_ok(param)
     {if(0 === param[0]){var v=param[1];return v}
      return invalid_arg(cst_result_is_Error)}
    function get_error(param)
     {if(0 === param[0])return invalid_arg(cst_result_is_Ok);
      var e=param[1];
      return e}
    function bind$0(r,f)
     {if(0 === r[0]){var v=r[1];return caml_call1(f,v)}return r}
    function join$0(e){if(0 === e[0]){var r=e[1];return r}return e}
    function map$1(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function map_error(f,v)
     {if(0 === v[0])return v;var e=v[1];return [1,caml_call1(f,e)]}
    function fold$0(ok,error,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(ok,v)}
      var e=param[1];
      return caml_call1(error,e)}
    function iter$1(f,param)
     {if(0 === param[0]){var v=param[1];return caml_call1(f,v)}return 0}
    function iter_error(f,param)
     {if(0 === param[0])return 0;var e=param[1];return caml_call1(f,e)}
    function is_ok(param){return 0 === param[0]?1:0}
    function is_error(param){return 0 === param[0]?0:1}
    function equal$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _z6_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_z6_,v1)}}
      else
       {var _z7_=r0[1];
        if(0 !== match[0]){var e1=match[1];return caml_call2(error,_z7_,e1)}}
      return 0}
    function compare$0(ok,error,r0,match)
     {if(0 === r0[0])
       {var _z4_=r0[1];
        if(0 === match[0]){var v1=match[1];return caml_call2(ok,_z4_,v1)}
        return -1}
      var _z5_=r0[1];
      if(0 === match[0])return 1;
      var e1=match[1];
      return caml_call2(error,_z5_,e1)}
    function to_option(param)
     {if(0 === param[0]){var v=param[1];return [0,v]}return 0}
    function to_list$0(param)
     {if(0 === param[0]){var v=param[1];return [0,v,0]}return 0}
    function to_seq$0(param)
     {if(0 === param[0])
       {var v=param[1];return function(_z3_){return return$0(v,_z3_)}}
      return empty}
    var
     Stdlib_result=
      [0,
       ok,
       error,
       value$0,
       get_ok,
       get_error,
       bind$0,
       join$0,
       map$1,
       map_error,
       fold$0,
       iter$1,
       iter_error,
       is_ok,
       is_error,
       equal$0,
       compare$0,
       to_option,
       to_list$0,
       to_seq$0];
    caml_register_global(751,Stdlib_result,"Stdlib__result");
    function equal$1(_z2_,_z1_){return _z2_ === _z1_?1:0}
    var compare$1=caml_int_compare;
    function to_int(param){return param?1:0}
    function to_float(param){return param?1.:0.}
    function to_string$0(param){return param?cst_true$2:cst_false$2}
    var
     Stdlib_bool=
      [0,
       function(_z0_){return 1 - _z0_},
       equal$1,
       compare$1,
       to_int,
       to_float,
       to_string$0];
    caml_register_global(752,Stdlib_bool,"Stdlib__bool");
    function chr(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(cst_Char_chr)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return cst$1;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return cst$2;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return cst_b;
           case 9:return cst_t;
           case 10:return cst_n;
           case 13:return cst_r
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var switch$0=0;
      if(! (65 <= c) || 90 < c)switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(! (192 <= c) || 214 < c)switch$1 = 1;
        if(switch$1)
         {var switch$2=0;
          if(! (216 <= c) || 222 < c)switch$2 = 1;
          if(switch$2)return c}}
      return c + 32 | 0}
    function uppercase(c)
     {var switch$0=0;
      if(! (97 <= c) || 122 < c)switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(! (224 <= c) || 246 < c)switch$1 = 1;
        if(switch$1)
         {var switch$2=0;
          if(! (248 <= c) || 254 < c)switch$2 = 1;
          if(switch$2)return c}}
      return c - 32 | 0}
    function lowercase_ascii(c)
     {if(65 <= c && ! (90 < c))return c + 32 | 0;return c}
    function uppercase_ascii(c)
     {if(97 <= c && ! (122 < c))return c - 32 | 0;return c}
    function compare$2(c1,c2){return c1 - c2 | 0}
    function equal$2(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     Stdlib_char=
      [0,
       chr,
       escaped,
       lowercase,
       uppercase,
       lowercase_ascii,
       uppercase_ascii,
       compare$2,
       equal$2];
    caml_register_global(753,Stdlib_char,"Stdlib__char");
    var
     min$0=0,
     max$0=1114111,
     lo_bound=55295,
     hi_bound=57344,
     bom=65279,
     rep=65533;
    function succ(u)
     {return u === 55295
              ?hi_bound
              :u === 1114111?invalid_arg(err_no_succ):u + 1 | 0}
    function pred(u)
     {return u === 57344?lo_bound:u === 0?invalid_arg(err_no_pred):u - 1 | 0}
    function is_valid(i)
     {var _zW_=0 <= i?1:0,_zX_=_zW_?i <= 55295?1:0:_zW_;
      if(_zX_)
       var _zY_=_zX_;
      else
       var _zZ_=57344 <= i?1:0,_zY_=_zZ_?i <= 1114111?1:0:_zZ_;
      return _zY_}
    function of_int(i)
     {return is_valid(i)
              ?i
              :invalid_arg
                (symbol
                  (caml_format_int(cst_X,i),cst_is_not_an_Unicode_scalar_v))}
    function is_char(u){return u < 256?1:0}
    function of_char(c){return c}
    function to_char(u)
     {return 255 < u
              ?invalid_arg
                (symbol
                  (cst_U,
                   symbol
                    (caml_format_int(cst_04X,u),cst_is_not_a_latin1_character)))
              :u}
    function unsafe_to_char(_zV_){return _zV_}
    function equal$3(_zU_,_zT_){return _zU_ === _zT_?1:0}
    var compare$3=caml_int_compare;
    function hash(_zS_){return _zS_}
    function _m_(_zR_){return _zR_}
    var
     Stdlib_uchar=
      [0,
       min$0,
       max$0,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_zQ_){return _zQ_},
       _m_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal$3,
       compare$3,
       hash];
    caml_register_global(754,Stdlib_uchar,"Stdlib__uchar");
    var
     executable_name=runtime.caml_sys_executable_name(0),
     match=runtime.caml_sys_get_config(0),
     os_type=match[1],
     match$0=runtime.caml_sys_const_backend_type(0),
     unix=runtime.caml_sys_const_ostype_unix(0),
     win32=runtime.caml_sys_const_ostype_win32(0),
     cygwin=runtime.caml_sys_const_ostype_cygwin(0),
     max_array_length=runtime.caml_sys_const_max_wosize(0),
     max_floatarray_length=max_array_length / 2 | 0,
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     big_endian=0,
     match$1=32,
     int_size=32;
    function getenv_opt(s)
     {try
       {var _zO_=[0,caml_sys_getenv(s)];return _zO_}
      catch(_zP_)
       {_zP_ = caml_wrap_exception(_zP_);
        if(_zP_ === Not_found)return 0;
        throw _zP_}}
    var interactive=[0,0];
    function set_signal(sig_num,sig_beh){return 0}
    var
     Break=[248,cst_Stdlib_Sys_Break,caml_fresh_oo_id(0)],
     sigabrt=-1,
     sigalrm=-2,
     sigfpe=-3,
     sighup=-4,
     sigill=-5,
     sigint=-6,
     sigkill=-7,
     sigpipe=-8,
     sigquit=-9,
     sigsegv=-10,
     sigterm=-11,
     sigusr1=-12,
     sigusr2=-13,
     sigchld=-14,
     sigcont=-15,
     sigstop=-16,
     sigtstp=-17,
     sigttin=-18,
     sigttou=-19,
     sigvtalrm=-20,
     sigprof=-21,
     sigbus=-22,
     sigpoll=-23,
     sigsys=-24,
     sigtrap=-25,
     sigurg=-26,
     sigxcpu=-27,
     sigxfsz=-28;
    function catch_break(on){return on?0:0}
    function Make(_zN_,_zM_){return [0,1]}
    var
     Immediate64=[0,Make],
     Stdlib_sys=
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       match$0,
       unix,
       win32,
       cygwin,
       match$1,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
    caml_register_global(755,Stdlib_sys,"Stdlib__sys");
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function hd(param)
     {if(param){var a=param[1];return a}return failwith(cst_hd)}
    function tl(param)
     {if(param){var l=param[2];return l}return failwith(cst_tl)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(cst_nth)}}
      return invalid_arg(cst_List_nth)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return [0,a];
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return 0}}
      return invalid_arg(cst_List_nth$0)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function init_aux(i,n,f)
     {if(n <= i)return 0;
      var r=caml_call1(f,i);
      return [0,r,init_aux(i + 1 | 0,n,f)]}
    var rev_init_threshold=typeof match$0 === "number"?10000:50;
    function init(len,f)
     {if(0 <= len)
       {if(rev_init_threshold < len)
         {var acc=0,i=0;
          for(;;)
           {if(len <= i)return rev(acc);
            var i$0=i + 1 | 0,acc$0=[0,caml_call1(f,i),acc],acc=acc$0,i=i$0;
            continue}}
        return init_aux(0,len,f)}
      return invalid_arg(cst_List_init)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$2(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$2(f,l)]}
      return 0}
    function _n_(i,f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call2(f,i,a);
        return [0,r,_n_(i + 1 | 0,f,l)]}
      return 0}
    function mapi(f,l){return _n_(0,f,l)}
    function rev_map(f,param)
     {var accu=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           a=param$0[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param$0=l;
          continue}
        return accu}}
    function iter$2(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function iteri(f,l$0)
     {var i=0,param=l$0;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1];
          caml_call2(f,i,a);
          var i$0=i + 1 | 0,i=i$0,param=l;
          continue}
        return 0}}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_map2)}
    function rev_map2(f,l1,l2)
     {var accu=0,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$0=[0,caml_call2(f,a1,a2),accu],
             accu=accu$0,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu;
        return invalid_arg(cst_List_rev_map2)}}
    function iter2(f,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var l2$1=l2$0[2],a2=l2$0[1],l1$1=l1$0[2],a1=l1$0[1];
            caml_call2(f,a1,a2);
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_iter2)}}
    function fold_left2(f,accu,l1,l2)
     {var accu$0=accu,l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             accu$1=caml_call3(f,accu$0,a1,a2),
             accu$0=accu$1,
             l1$0=l1$1,
             l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return accu$0;
        return invalid_arg(cst_List_fold_left2)}}
    function fold_right2(f,l1,l2,accu)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return caml_call3(f,a1,a2,fold_right2(f,l1$0,l2$0,accu))}}
      else
       if(! l2)return accu;
      return invalid_arg(cst_List_fold_right2)}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zL_=caml_call1(p,a);
          if(_zL_){var param$0=l;continue}
          return _zL_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zK_=caml_call1(p,a);
          if(_zK_)return _zK_;
          var param$0=l;
          continue}
        return 0}}
    function for_all2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _zJ_=caml_call2(p,a1,a2);
            if(_zJ_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _zJ_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(cst_List_for_all2)}}
    function exists2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _zI_=caml_call2(p,a1,a2);
            if(_zI_)return _zI_;
            var l1$0=l1$1,l2$0=l2$1;
            continue}}
        else
         if(! l2$0)return 0;
        return invalid_arg(cst_List_exists2)}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zH_=0 === caml_compare(a,x)?1:0;
          if(_zH_)return _zH_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_zG_=a === x?1:0;
          if(_zG_)return _zG_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assq_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function mem_assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           match=param$0[1],
           a=match[1],
           _zF_=0 === caml_compare(a,x)?1:0;
          if(_zF_)return _zF_;
          var param$0=l;
          continue}
        return 0}}
    function mem_assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],a=match[1],_zE_=a === x?1:0;
          if(_zE_)return _zE_;
          var param$0=l;
          continue}
        return 0}}
    function remove_assoc(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return 0 === caml_compare(a,x)?l:[0,pair,remove_assoc(x,l)]}
      return 0}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function find_opt(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return [0,x];
          var param$0=l;
          continue}
        return 0}}
    function find_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1],result=caml_call1(f,x);
          if(result)return result;
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function filter_map$0(f)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1],match=caml_call1(f,x);
            if(match)
             {var v=match[1],accu$1=[0,v,accu$0],accu$0=accu$1,param=l;
              continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function concat_map(f,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           xs=caml_call1(f,x),
           acc$0=rev_append(xs,acc),
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function partition(p,param)
     {var yes=0,no=0,param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))
           {var yes$0=[0,x,yes],yes=yes$0,param$0=l;continue}
          var no$0=[0,x,no],no=no$0,param$0=l;
          continue}
        var _zD_=rev(no);
        return [0,rev(yes),_zD_]}}
    function split(param)
     {if(param)
       {var
         l=param[2],
         match=param[1],
         y=match[2],
         x=match[1],
         match$0=split(l),
         ry=match$0[2],
         rx=match$0[1];
        return [0,[0,x,rx],[0,y,ry]]}
      return _o_}
    function combine(l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1];
          return [0,[0,a1,a2],combine(l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(cst_List_combine)}
    function merge(cmp,l1,match)
     {if(l1)
       {if(match)
         {var t2=match[2],h2=match[1],t1=l1[2],h1=l1[1];
          return 0 < caml_call2(cmp,h1,h2)
                  ?[0,h2,merge(cmp,l1,t2)]
                  :[0,h1,merge(cmp,t1,match)]}
        return l1}
      return match}
    function fast_sort(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zz_=l[2];
            if(_zz_)
             {var
               tl=_zz_[2],
               x2=_zz_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zB_=l[2];
           if(_zB_)
            {var _zC_=_zB_[2];
             if(_zC_)
              {var
                tl$1=_zC_[2],
                x3=_zC_[1],
                x2$0=_zB_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x2$0,x3)
                    ?[0,x1$0,[0,x2$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                      :[0,x3,[0,x1$0,[0,x2$0,0]]]
                  :0 < caml_call2(cmp,x1$0,x3)
                    ?[0,x2$0,[0,x1$0,[0,x3,0]]]
                    :0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                      :[0,x3,[0,x2$0,[0,x1$0,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h2,accu],l2=t2,accu=accu$0;continue}
              var accu$1=[0,h1,accu],l1=t1,accu=accu$1;
              continue}
            var _zA_=rev_append(l1,accu)}
          else
           var _zA_=rev_append(l2,accu);
          return [0,_zA_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zv_=l[2];
            if(_zv_)
             {var
               tl=_zv_[2],
               x2=_zv_[1],
               x1=l[1],
               s=0 < caml_call2(cmp,x1,x2)?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zx_=l[2];
           if(_zx_)
            {var _zy_=_zx_[2];
             if(_zy_)
              {var
                tl$1=_zy_[2],
                x3=_zy_[1],
                x2$0=_zx_[1],
                x1$0=l[1],
                s$0=
                 0 < caml_call2(cmp,x1$0,x2$0)
                  ?0 < caml_call2(cmp,x1$0,x3)
                    ?0 < caml_call2(cmp,x2$0,x3)
                      ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                      :[0,x2$0,[0,x3,[0,x1$0,0]]]
                    :[0,x2$0,[0,x1$0,[0,x3,0]]]
                  :0 < caml_call2(cmp,x2$0,x3)
                    ?0 < caml_call2(cmp,x1$0,x3)
                      ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                      :[0,x1$0,[0,x3,[0,x2$0,0]]]
                    :[0,x1$0,[0,x2$0,[0,x3,0]]];
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1];
              if(0 < caml_call2(cmp,h1,h2))
               {var accu$0=[0,h1,accu],l1=t1,accu=accu$0;continue}
              var accu$1=[0,h2,accu],l2=t2,accu=accu$1;
              continue}
            var _zw_=rev_append(l1,accu)}
          else
           var _zw_=rev_append(l2,accu);
          return [0,_zw_,tl$0]}}
      var len=length(l);
      return 2 <= len?sort(len,l)[1]:l}
    function sort_uniq(cmp,l)
     {function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zm_=l[2];
            if(_zm_)
             {var
               tl=_zm_[2],
               x2=_zm_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zo_=l[2];
           if(_zo_)
            {var _zp_=_zo_[2];
             if(_zp_)
              {var
                tl$1=_zp_[2],
                x3=_zp_[1],
                x2$0=_zo_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _zq_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                 s$0=_zq_;
               else
                if(0 < c$1)
                 {var c$3=caml_call2(cmp,x2$0,x3);
                  if(0 === c$3)
                   var _zr_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 < c$3)
                    var _zr_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                   else
                    var
                     c$4=caml_call2(cmp,x1$0,x3),
                     _zs_=
                      0 === c$4
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 < c$4
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]],
                     _zr_=_zs_;
                  var s$0=_zr_}
                else
                 {var c$5=caml_call2(cmp,x1$0,x3);
                  if(0 === c$5)
                   var _zt_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 < c$5)
                    var _zt_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                   else
                    var
                     c$6=caml_call2(cmp,x2$0,x3),
                     _zu_=
                      0 === c$6
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$6
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]],
                     _zt_=_zu_;
                  var s$0=_zt_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 <= c){var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
              var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
              continue}
            var _zn_=rev_append(l1,accu)}
          else
           var _zn_=rev_append(l2,accu);
          return [0,_zn_,tl$0]}}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _zd_=l[2];
            if(_zd_)
             {var
               tl=_zd_[2],
               x2=_zd_[1],
               x1=l[1],
               c$0=caml_call2(cmp,x1,x2),
               s=0 === c$0?[0,x1,0]:0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _zf_=l[2];
           if(_zf_)
            {var _zg_=_zf_[2];
             if(_zg_)
              {var
                tl$1=_zg_[2],
                x3=_zg_[1],
                x2$0=_zf_[1],
                x1$0=l[1],
                c$1=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$1)
                var
                 c$2=caml_call2(cmp,x2$0,x3),
                 _zh_=
                  0 === c$2
                   ?[0,x2$0,0]
                   :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                 s$0=_zh_;
               else
                if(0 <= c$1)
                 {var c$3=caml_call2(cmp,x1$0,x3);
                  if(0 === c$3)
                   var _zi_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 <= c$3)
                    var
                     c$4=caml_call2(cmp,x2$0,x3),
                     _zj_=
                      0 === c$4
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 <= c$4
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]],
                     _zi_=_zj_;
                   else
                    var _zi_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                  var s$0=_zi_}
                else
                 {var c$5=caml_call2(cmp,x2$0,x3);
                  if(0 === c$5)
                   var _zk_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 <= c$5)
                    var
                     c$6=caml_call2(cmp,x1$0,x3),
                     _zl_=
                      0 === c$6
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 <= c$6
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]],
                     _zk_=_zl_;
                   else
                    var _zk_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                  var s$0=_zk_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2$0=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2$0),
         tl$0=match$0[2],
         s2=match$0[1],
         l1=s1,
         l2=s2,
         accu=0;
        for(;;)
         {if(l1)
           {if(l2)
             {var t2=l2[2],h2=l2[1],t1=l1[2],h1=l1[1],c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
              if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
              var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
              continue}
            var _ze_=rev_append(l1,accu)}
          else
           var _ze_=rev_append(l2,accu);
          return [0,_ze_,tl$0]}}
      var len=length(l);
      return 2 <= len?sort(len,l)[1]:l}
    function compare_lengths(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0){var l2$1=l2$0[2],l1$1=l1$0[2],l1$0=l1$1,l2$0=l2$1;continue}
          return 1}
        return l2$0?-1:0}}
    function compare_length_with(l,n)
     {var l$0=l,n$0=n;
      for(;;)
       {if(l$0)
         {var l$1=l$0[2];
          if(0 < n$0){var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;continue}
          return 1}
        return 0 === n$0?0:0 < n$0?-1:1}}
    function to_seq$1(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_zc_){return aux(tail,_zc_)}]}
        return 0}
      return function(_zb_){return aux(l,_zb_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _za_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_za_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    var
     include=
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(756,include,"Stdlib__list");
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function init$0(n,f)
     {var s=caml_create_bytes(n),_y__=n - 1 | 0,_y9_=0;
      if(! (_y__ < 0))
       {var i=_y9_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,caml_call1(f,i));
          var _y$_=i + 1 | 0;
          if(_y__ !== i){var i=_y$_;continue}
          break}}
      return s}
    var empty$0=caml_create_bytes(0);
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function to_string$1(b){return caml_string_of_bytes(copy(b))}
    function of_string(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(cst_String_sub_Bytes_sub)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function symbol$1(a,b)
     {var c=a + b | 0,_y8_=b < 0?1:0,match=c < 0?1:0,switch$0=0;
      if(a < 0)
       {if(_y8_ && ! match)switch$0 = 1}
      else
       if(! _y8_ && match)switch$0 = 1;
      return switch$0?invalid_arg(cst_Bytes_extend):c}
    function extend(s,left,right)
     {var
       len=symbol$1(symbol$1(caml_ml_bytes_length(s),left),right),
       r=caml_create_bytes(len);
      if(0 <= left)
       var dstoff=left,srcoff=0;
      else
       var dstoff=0,srcoff=- left | 0;
      var cpylen=min(caml_ml_bytes_length(s) - srcoff | 0,len - dstoff | 0);
      if(0 < cpylen)caml_blit_bytes(s,srcoff,r,dstoff,cpylen);
      return r}
    function fill(s,ofs,len,c)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_fill_bytes(s,ofs,len,c);
      return invalid_arg(cst_String_fill_Bytes_fill)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_Bytes_blit)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(cst_String_blit_Bytes_blit_str)}
    function iter$3(f,a)
     {var _y6_=caml_ml_bytes_length(a) - 1 | 0,_y5_=0;
      if(! (_y6_ < 0))
       {var i=_y5_;
        for(;;)
         {caml_call1(f,caml_bytes_unsafe_get(a,i));
          var _y7_=i + 1 | 0;
          if(_y6_ !== i){var i=_y7_;continue}
          break}}
      return 0}
    function iteri$0(f,a)
     {var _y3_=caml_ml_bytes_length(a) - 1 | 0,_y2_=0;
      if(! (_y3_ < 0))
       {var i=_y2_;
        for(;;)
         {caml_call2(f,i,caml_bytes_unsafe_get(a,i));
          var _y4_=i + 1 | 0;
          if(_y3_ !== i){var i=_y4_;continue}
          break}}
      return 0}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_bytes_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _yZ_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_bytes_length(_yZ_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_Bytes_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _y1_=caml_ml_bytes_length(_yZ_) + acc | 0}
          else
           var _y1_=acc;
          var dst=caml_create_bytes(_y1_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _y0_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_bytes(_y0_,0,dst,pos,caml_ml_bytes_length(_y0_));
                caml_blit_bytes
                 (sep,0,dst,pos + caml_ml_bytes_length(_y0_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_bytes_length(_y0_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_bytes(_y0_,0,dst,pos,caml_ml_bytes_length(_y0_));
              return dst}
            return dst}}}
      return empty$0}
    function cat(s1,s2)
     {var
       l1=caml_ml_bytes_length(s1),
       l2=caml_ml_bytes_length(s2),
       r=caml_create_bytes(l1 + l2 | 0);
      caml_blit_bytes(s1,0,r,0,l1);
      caml_blit_bytes(s2,0,r,l1,l2);
      return r}
    function is_space(param)
     {var _yY_=param - 9 | 0,switch$0=0;
      if(4 < _yY_ >>> 0)
       {if(23 === _yY_)switch$0 = 1}
      else
       if(2 !== _yY_)switch$0 = 1;
      return switch$0?1:0}
    function trim(s)
     {var len=caml_ml_bytes_length(s),i=[0,0];
      for(;;)
       {if(i[1] < len && is_space(caml_bytes_unsafe_get(s,i[1])))
         {i[1]++;continue}
        var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s,j[1])))
           {j[1] += -1;continue}
          return i[1] <= j[1]?sub(s,i[1],(j[1] - i[1] | 0) + 1 | 0):empty$0}}}
    function escaped$0(s)
     {var n=[0,0],_yR_=caml_ml_bytes_length(s) - 1 | 0,_yQ_=0;
      if(! (_yR_ < 0))
       {var i$0=_yQ_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _yV_=match - 34 | 0,switch$1=0;
            if(58 < _yV_ >>> 0)
             {if(93 <= _yV_)switch$1 = 1}
            else
             if(56 < (_yV_ - 1 | 0) >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _yW_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _yW_=4;break;case 1:var _yW_=2;break}
          n[1] = n[1] + _yW_ | 0;
          var _yX_=i$0 + 1 | 0;
          if(_yR_ !== i$0){var i$0=_yX_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _yT_=caml_ml_bytes_length(s) - 1 | 0,_yS_=0;
      if(! (_yT_ < 0))
       {var i=_yS_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _yU_=i + 1 | 0;
          if(_yT_ !== i){var i=_yU_;continue}
          break}}
      return s$0}
    function map$3(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_yO_=l - 1 | 0,_yN_=0;
      if(! (_yO_ < 0))
       {var i=_yN_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _yP_=i + 1 | 0;
          if(_yO_ !== i){var i=_yP_;continue}
          break}}
      return r}
    function mapi$0(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_yL_=l - 1 | 0,_yK_=0;
      if(! (_yL_ < 0))
       {var i=_yK_;
        for(;;)
         {caml_bytes_unsafe_set
           (r,i,caml_call2(f,i,caml_bytes_unsafe_get(s,i)));
          var _yM_=i + 1 | 0;
          if(_yL_ !== i){var i=_yM_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map$3(uppercase_ascii,s)}
    function lowercase_ascii$0(s){return map$3(lowercase_ascii,s)}
    function apply1(f,s)
     {if(0 === caml_ml_bytes_length(s))return s;
      var r=copy(s);
      caml_bytes_unsafe_set(r,0,caml_call1(f,caml_bytes_unsafe_get(s,0)));
      return r}
    function capitalize_ascii(s){return apply1(uppercase_ascii,s)}
    function uncapitalize_ascii(s){return apply1(lowercase_ascii,s)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_bytes_length(s),0,c)}
    function index_rec_opt(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt(s,c)
     {return index_rec_opt(s,caml_ml_bytes_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in)}
    function index_from_opt(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte)}
    function rindex_rec(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex(s,c)
     {return rindex_rec(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))return rindex_rec(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r)}
    function rindex_rec_opt(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_bytes_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt(s,c)
     {return rindex_rec_opt(s,caml_ml_bytes_length(s) - 1 | 0,c)}
    function rindex_from_opt(s,i,c)
     {if(-1 <= i && ! (caml_ml_bytes_length(s) <= i))
       return rindex_rec_opt(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt)}
    function contains_from(s,i,c)
     {var l=caml_ml_bytes_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _yI_=1;return _yI_}
       catch(_yJ_)
        {_yJ_ = caml_wrap_exception(_yJ_);
         if(_yJ_ === Not_found)return 0;
         throw _yJ_}
      return invalid_arg(cst_String_contains_from_Bytes)}
    function contains(s,c){return contains_from(s,0,c)}
    function rcontains_from(s,i,c)
     {if(0 <= i && ! (caml_ml_bytes_length(s) <= i))
       try
        {rindex_rec(s,i,c);var _yG_=1;return _yG_}
       catch(_yH_)
        {_yH_ = caml_wrap_exception(_yH_);
         if(_yH_ === Not_found)return 0;
         throw _yH_}
      return invalid_arg(cst_String_rcontains_from_Byte)}
    var compare$4=runtime.caml_bytes_compare;
    function uppercase$0(s){return map$3(uppercase,s)}
    function lowercase$0(s){return map$3(lowercase,s)}
    function capitalize(s){return apply1(uppercase,s)}
    function uncapitalize(s){return apply1(lowercase,s)}
    function to_seq$2(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_yE_=i + 1 | 0;
        return [0,x,function(_yF_){return aux(_yE_,_yF_)}]}
      var _yC_=0;
      return function(_yD_){return aux(_yC_,_yD_)}}
    function to_seqi(s)
     {function aux(i,param)
       {if(i === caml_ml_bytes_length(s))return 0;
        var x=caml_bytes_get(s,i),_yA_=i + 1 | 0;
        return [0,[0,i,x],function(_yB_){return aux(_yA_,_yB_)}]}
      var _yy_=0;
      return function(_yz_){return aux(_yy_,_yz_)}}
    function of_seq$0(i)
     {var n=[0,0],buf=[0,make(256,0)];
      iter
       (function(c)
         {if(n[1] === caml_ml_bytes_length(buf[1]))
           {var
             new_len=
              min(2 * caml_ml_bytes_length(buf[1]) | 0,max_string_length);
            if(caml_ml_bytes_length(buf[1]) === new_len)
             failwith(cst_Bytes_of_seq_cannot_grow_b);
            var new_buf=make(new_len,0);
            blit(buf[1],0,new_buf,0,n[1]);
            buf[1] = new_buf}
          caml_bytes_set(buf[1],n[1],c);
          n[1]++;
          return 0},
        i);
      return sub(buf[1],0,n[1])}
    function get_int8(b,i){return caml_bytes_get(b,i) << 24 >> 24}
    function get_uint16_le(b,i){return caml_bytes_get16(b,i)}
    function get_uint16_be(b,i){return caml_bswap16(caml_bytes_get16(b,i))}
    function get_int16_ne(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_le(b,i){return caml_bytes_get16(b,i) << 16 >> 16}
    function get_int16_be(b,i){return get_uint16_be(b,i) << 16 >> 16}
    function get_int32_le(b,i){return caml_bytes_get32(b,i)}
    function get_int32_be(b,i){return caml_int32_bswap(caml_bytes_get32(b,i))}
    function get_int64_le(b,i){return caml_bytes_get64(b,i)}
    function get_int64_be(b,i){return caml_int64_bswap(caml_bytes_get64(b,i))}
    function set_int16_le(b,i,x){return caml_bytes_set16(b,i,x)}
    function set_int16_be(b,i,x){return caml_bytes_set16(b,i,caml_bswap16(x))}
    function set_int32_le(b,i,x){return caml_bytes_set32(b,i,x)}
    function set_int32_be(b,i,x)
     {return caml_bytes_set32(b,i,caml_int32_bswap(x))}
    function set_int64_le(b,i,x){return caml_bytes_set64(b,i,x)}
    function set_int64_be(b,i,x)
     {return caml_bytes_set64(b,i,caml_int64_bswap(x))}
    var
     set_uint8=caml_bytes_set,
     set_uint16_ne=caml_bytes_set16,
     set_int64_ne=caml_bytes_set64,
     set_int32_ne=caml_bytes_set32,
     set_int16_ne=caml_bytes_set16,
     set_int8=caml_bytes_set,
     get_int64_ne=caml_bytes_get64,
     get_int32_ne=caml_bytes_get32,
     get_uint16_ne=caml_bytes_get16,
     get_uint8=caml_bytes_get,
     unsafe_of_string=caml_bytes_of_string,
     unsafe_to_string=caml_string_of_bytes,
     equal$4=runtime.caml_bytes_equal,
     include$0=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       unsafe_to_string,
       unsafe_of_string,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le];
    caml_register_global(757,include$0,"Stdlib__bytes");
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function init$1(n,f){return caml_string_of_bytes(init$0(n,f))}
    function copy$0(s)
     {return caml_string_of_bytes(copy(caml_bytes_of_string(s)))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat$0(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _yv_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_string_length(_yv_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(cst_String_concat),
               acc=acc$0,
               param=tl;
              continue}
            var _yx_=caml_ml_string_length(_yv_) + acc | 0}
          else
           var _yx_=acc;
          var dst=caml_create_bytes(_yx_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _yw_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_string(_yw_,0,dst,pos,caml_ml_string_length(_yw_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_yw_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_yw_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_string(_yw_,0,dst,pos,caml_ml_string_length(_yw_))}
            return caml_string_of_bytes(dst)}}}
      return cst$3}
    function iter$4(f,s)
     {var _yt_=caml_ml_string_length(s) - 1 | 0,_ys_=0;
      if(! (_yt_ < 0))
       {var i=_ys_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _yu_=i + 1 | 0;
          if(_yt_ !== i){var i=_yu_;continue}
          break}}
      return 0}
    function iteri$1(f,s)
     {var _yq_=caml_ml_string_length(s) - 1 | 0,_yp_=0;
      if(! (_yq_ < 0))
       {var i=_yp_;
        for(;;)
         {caml_call2(f,i,caml_string_unsafe_get(s,i));
          var _yr_=i + 1 | 0;
          if(_yq_ !== i){var i=_yr_;continue}
          break}}
      return 0}
    function map$4(f,s)
     {return caml_string_of_bytes(map$3(f,caml_bytes_of_string(s)))}
    function mapi$1(f,s)
     {return caml_string_of_bytes(mapi$0(f,caml_bytes_of_string(s)))}
    function is_space$0(param)
     {var _yo_=param - 9 | 0,switch$0=0;
      if(4 < _yo_ >>> 0)
       {if(23 === _yo_)switch$0 = 1}
      else
       if(2 !== _yo_)switch$0 = 1;
      return switch$0?1:0}
    function trim$0(s)
     {if(caml_string_equal(s,cst$4))return s;
      if
       (!
        is_space$0(caml_string_unsafe_get(s,0))
        &&
        !
        is_space$0(caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0)))
       return s;
      return caml_string_of_bytes(trim(caml_bytes_of_string(s)))}
    function escaped$1(s)
     {var n=caml_ml_string_length(s),i=0;
      for(;;)
       {if(n <= i)return s;
        var match=caml_string_unsafe_get(s,i),_yn_=match - 32 | 0,switch$0=0;
        if(59 < _yn_ >>> 0)
         {if(33 < (_yn_ - 61 | 0) >>> 0)switch$0 = 1}
        else
         if(2 === _yn_)switch$0 = 1;
        if(switch$0)
         return caml_string_of_bytes(escaped$0(caml_bytes_of_string(s)));
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function index_rec$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index$0(s,c){return index_rec$0(s,caml_ml_string_length(s),0,c)}
    function index_rec_opt$0(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)return 0;
        if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_opt$0(s,c)
     {return index_rec_opt$0(s,caml_ml_string_length(s),0,c)}
    function index_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_Bytes_in$0)}
    function index_from_opt$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec_opt$0(s,l,i,c);
      return invalid_arg(cst_String_index_from_opt_Byte$0)}
    function rindex_rec$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return i$0;
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        throw Not_found}}
    function rindex$0(s,c)
     {return rindex_rec$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_Bytes_r$0)}
    function rindex_rec_opt$0(s,i,c)
     {var i$0=i;
      for(;;)
       {if(0 <= i$0)
         {if(caml_string_unsafe_get(s,i$0) === c)return [0,i$0];
          var i$1=i$0 - 1 | 0,i$0=i$1;
          continue}
        return 0}}
    function rindex_opt$0(s,c)
     {return rindex_rec_opt$0(s,caml_ml_string_length(s) - 1 | 0,c)}
    function rindex_from_opt$0(s,i,c)
     {if(-1 <= i && ! (caml_ml_string_length(s) <= i))
       return rindex_rec_opt$0(s,i,c);
      return invalid_arg(cst_String_rindex_from_opt_Byt$0)}
    function contains_from$0(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec$0(s,l,i,c);var _yl_=1;return _yl_}
       catch(_ym_)
        {_ym_ = caml_wrap_exception(_ym_);
         if(_ym_ === Not_found)return 0;
         throw _ym_}
      return invalid_arg(cst_String_contains_from_Bytes$0)}
    function contains$0(s,c){return contains_from$0(s,0,c)}
    function rcontains_from$0(s,i,c)
     {if(0 <= i && ! (caml_ml_string_length(s) <= i))
       try
        {rindex_rec$0(s,i,c);var _yj_=1;return _yj_}
       catch(_yk_)
        {_yk_ = caml_wrap_exception(_yk_);
         if(_yk_ === Not_found)return 0;
         throw _yk_}
      return invalid_arg(cst_String_rcontains_from_Byte$0)}
    function uppercase_ascii$1(s)
     {return caml_string_of_bytes(uppercase_ascii$0(caml_bytes_of_string(s)))}
    function lowercase_ascii$1(s)
     {return caml_string_of_bytes(lowercase_ascii$0(caml_bytes_of_string(s)))}
    function capitalize_ascii$0(s)
     {return caml_string_of_bytes(capitalize_ascii(caml_bytes_of_string(s)))}
    function uncapitalize_ascii$0(s)
     {return caml_string_of_bytes(uncapitalize_ascii(caml_bytes_of_string(s)))}
    var compare$5=caml_string_compare;
    function split_on_char(sep,s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _yf_=caml_ml_string_length(s) - 1 | 0;
      if(! (_yf_ < 0))
       {var i=_yf_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === sep)
           {var _yh_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_yh_];
            j[1] = i}
          var _yi_=i - 1 | 0;
          if(0 !== i){var i=_yi_;continue}
          break}}
      var _yg_=r[1];
      return [0,sub$0(s,0,j[1]),_yg_]}
    function uppercase$1(s)
     {return caml_string_of_bytes(uppercase$0(caml_bytes_of_string(s)))}
    function lowercase$1(s)
     {return caml_string_of_bytes(lowercase$0(caml_bytes_of_string(s)))}
    function capitalize$0(s)
     {return caml_string_of_bytes(capitalize(caml_bytes_of_string(s)))}
    function uncapitalize$0(s)
     {return caml_string_of_bytes(uncapitalize(caml_bytes_of_string(s)))}
    function to_seq$3(s){return to_seq$2(caml_bytes_of_string(s))}
    function to_seqi$0(s){return to_seqi(caml_bytes_of_string(s))}
    function of_seq$1(g){return caml_string_of_bytes(of_seq$0(g))}
    var
     equal$5=caml_string_equal,
     include$1=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(758,include$1,"Stdlib__string");
    function equal$6(param,_ye_){return 1}
    function compare$6(param,_yd_){return 0}
    function to_string$2(param){return cst$5}
    var Stdlib_unit=[0,equal$6,compare$6,to_string$2];
    caml_register_global(759,Stdlib_unit,"Stdlib__unit");
    function to_buffer(buff,ofs,len,v,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buff) - len | 0) < ofs))
       return runtime.caml_output_value_to_buffer(buff,ofs,len,v,flags);
      return invalid_arg(cst_Marshal_to_buffer_substrin)}
    var header_size=20;
    function data_size(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       return caml_marshal_data_size(buff,ofs);
      return invalid_arg(cst_Marshal_data_size)}
    function total_size(buff,ofs){return 20 + data_size(buff,ofs) | 0}
    function from_bytes(buff,ofs)
     {if(0 <= ofs && ! ((caml_ml_bytes_length(buff) - 20 | 0) < ofs))
       {var len=caml_marshal_data_size(buff,ofs);
        return (caml_ml_bytes_length(buff) - (20 + len | 0) | 0) < ofs
                ?invalid_arg(cst_Marshal_from_bytes$0)
                :runtime.caml_input_value_from_bytes(buff,ofs)}
      return invalid_arg(cst_Marshal_from_bytes)}
    function from_string(buff,ofs)
     {return from_bytes(caml_bytes_of_string(buff),ofs)}
    var
     Stdlib_marshal=
      [0,
       caml_output_value,
       to_buffer,
       caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
    caml_register_global(760,Stdlib_marshal,"Stdlib__marshal");
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    var double_field=caml_array_get,set_double_field=caml_array_set;
    function marshal(obj){return runtime.caml_output_value_to_bytes(obj,0)}
    function unmarshal(str,pos)
     {var _yc_=pos + total_size(str,pos) | 0;
      return [0,from_bytes(str,pos),_yc_]}
    var
     first_non_constant_constructor=0,
     last_non_constant_constructor_=245,
     lazy_tag=246,
     closure_tag=247,
     object_tag=248,
     infix_tag=249,
     forward_tag=250,
     no_scan_tag=251,
     abstract_tag=251,
     string_tag=252,
     double_tag=253,
     double_array_tag=254,
     custom_tag=255,
     int_tag=1000,
     out_of_heap_tag=1001,
     unaligned_tag=1002;
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(cst_Obj_extension_constructor$0);
      return caml_obj_tag(name) === 252
              ?slot
              :invalid_arg(cst_Obj_extension_constructor)}
    function name(slot){return slot[1]}
    function id(slot){return slot[2]}
    var
     Extension_constructor=[0,of_val,name,id],
     extension_constructor=Extension_constructor[1],
     extension_name=Extension_constructor[2],
     extension_id=Extension_constructor[3],
     max_ephe_length=max_array_length - 2 | 0;
    function create(l)
     {var _ya_=0 <= l?1:0,_yb_=_ya_?l <= max_ephe_length?1:0:_ya_;
      if(1 - _yb_)invalid_arg(cst_Obj_Ephemeron_create);
      return runtime.caml_ephe_create(l)}
    function length$0(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var _x9_=0 <= o?1:0,_x__=_x9_?o < length$0(e)?1:0:_x9_,_x$_=1 - _x__;
      return _x$_?invalid_arg(msg):_x$_}
    function get_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key);
      return runtime.caml_ephe_get_key(e,o)}
    function get_key_copy(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_get_key_copy);
      return runtime.caml_ephe_get_key_copy(e,o)}
    function set_key(e,o,x)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_set_key);
      return caml_ephe_set_key(e,o,x)}
    function unset_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_unset_key);
      return caml_ephe_unset_key(e,o)}
    function check_key(e,o)
     {raise_if_invalid_offset(e,o,cst_Obj_Ephemeron_check_key);
      return runtime.caml_ephe_check_key(e,o)}
    function blit_key(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$0(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$0(e2) - l | 0) < o2))
       {var
         _x7_=0 !== l?1:0,
         _x8_=_x7_?runtime.caml_ephe_blit_key(e1,o1,e2,o2,l):_x7_;
        return _x8_}
      return invalid_arg(cst_Obj_Ephemeron_blit_key)}
    var
     _p_=runtime.caml_ephe_blit_data,
     _q_=runtime.caml_ephe_check_data,
     _r_=
      [0,
       create,
       length$0,
       get_key,
       get_key_copy,
       set_key,
       unset_key,
       check_key,
       blit_key,
       runtime.caml_ephe_get_data,
       runtime.caml_ephe_get_data_copy,
       runtime.caml_ephe_set_data,
       function(_x6_){return runtime.caml_ephe_unset_data(_x6_)},
       _q_,
       _p_,
       max_ephe_length],
     Stdlib_obj=
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       Extension_constructor,
       extension_constructor,
       extension_name,
       extension_id,
       marshal,
       unmarshal,
       _r_];
    caml_register_global(761,Stdlib_obj,"Stdlib__obj");
    var make_float=runtime.caml_make_float_vect,Floatarray=[0];
    function init$2(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_x4_=l - 1 | 0,_x3_=1;
        if(! (_x4_ < 1))
         {var i=_x3_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _x5_=i + 1 | 0;
            if(_x4_ !== i){var i=_x5_;continue}
            break}}
        return res}
      return invalid_arg(cst_Array_init)}
    function create_matrix(sx,sy,init)
     {var res=caml_make_vect(sx,[0]),_x1_=sx - 1 | 0,_x0_=0;
      if(! (_x1_ < 0))
       {var x=_x0_;
        for(;;)
         {res[1 + x] = caml_make_vect(sy,init);
          var _x2_=x + 1 | 0;
          if(_x1_ !== x){var x=_x2_;continue}
          break}}
      return res}
    function copy$1(a)
     {var l=a.length - 1;return 0 === l?[0]:caml_array_sub(a,0,l)}
    function append$0(a1,a2)
     {var l1=a1.length - 1;
      return 0 === l1
              ?copy$1(a2)
              :0 === a2.length - 1
                ?caml_array_sub(a1,0,l1)
                :runtime.caml_array_append(a1,a2)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(cst_Array_sub)}
    function fill$0(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return runtime.caml_array_fill(a,ofs,len,v);
      return invalid_arg(cst_Array_fill)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return runtime.caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(cst_Array_blit)}
    function iter$5(f,a)
     {var _xY_=a.length - 1 - 1 | 0,_xX_=0;
      if(! (_xY_ < 0))
       {var i=_xX_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _xZ_=i + 1 | 0;
          if(_xY_ !== i){var i=_xZ_;continue}
          break}}
      return 0}
    function iter2$0(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Array_iter2_arrays_must_ha);
      var _xV_=a.length - 1 - 1 | 0,_xU_=0;
      if(! (_xV_ < 0))
       {var i=_xU_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _xW_=i + 1 | 0;
          if(_xV_ !== i){var i=_xW_;continue}
          break}}
      return 0}
    function map$5(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_xS_=l - 1 | 0,_xR_=1;
      if(! (_xS_ < 1))
       {var i=_xR_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _xT_=i + 1 | 0;
          if(_xS_ !== i){var i=_xT_;continue}
          break}}
      return r}
    function map2$0(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Array_map2_arrays_must_hav);
      if(0 === la)return [0];
      var r=caml_make_vect(la,caml_call2(f,a[1],b[1])),_xP_=la - 1 | 0,_xO_=1;
      if(! (_xP_ < 1))
       {var i=_xO_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _xQ_=i + 1 | 0;
          if(_xP_ !== i){var i=_xQ_;continue}
          break}}
      return r}
    function iteri$2(f,a)
     {var _xM_=a.length - 1 - 1 | 0,_xL_=0;
      if(! (_xM_ < 0))
       {var i=_xL_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _xN_=i + 1 | 0;
          if(_xM_ !== i){var i=_xN_;continue}
          break}}
      return 0}
    function mapi$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call2(f,0,a[1])),_xJ_=l - 1 | 0,_xI_=1;
      if(! (_xJ_ < 1))
       {var i=_xI_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _xK_=i + 1 | 0;
          if(_xJ_ !== i){var i=_xK_;continue}
          break}}
      return r}
    function to_list$1(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         a=caml_make_vect(list_length(0,l),hd),
         i=1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i + 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    function fold_left$1(f,x,a)
     {var r=[0,x],_xG_=a.length - 1 - 1 | 0,_xF_=0;
      if(! (_xG_ < 0))
       {var i=_xF_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _xH_=i + 1 | 0;
          if(_xG_ !== i){var i=_xH_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_xD_=a.length - 1 - 1 | 0;
      if(! (_xD_ < 0))
       {var i=_xD_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _xE_=i - 1 | 0;
          if(0 !== i){var i=_xE_;continue}
          break}}
      return r[1]}
    function exists$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$0(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function memq$0(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x === a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom=[248,cst_Stdlib_Array_Bottom,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var _xw_=i31 + 1 | 0,_xx_=caml_check_bound(a,_xw_)[1 + _xw_];
          if(caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xx_) < 0)
           x[1] = i31 + 1 | 0;
          var
           _xy_=i31 + 2 | 0,
           _xz_=caml_check_bound(a,_xy_)[1 + _xy_],
           _xA_=x[1];
          if(caml_call2(cmp,caml_check_bound(a,_xA_)[1 + _xA_],_xz_) < 0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var _xB_=i31 + 1 | 0,_xC_=caml_check_bound(a,_xB_)[1 + _xB_];
          if(! (0 <= caml_call2(cmp,caml_check_bound(a,i31)[1 + i31],_xC_)))
           return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_check_bound(a,j)[1 + j],e))
           {var _xv_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _xv_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _xu_=trickledown(l,i,e);return _xu_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_xt_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _xt_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _xs_=bubbledown(l,i);return _xs_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_xk_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_xk_ < 0))
       {var i$2=_xk_;
        for(;;)
         {trickle(l,i$2,caml_check_bound(a,i$2)[1 + i$2]);
          var _xr_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_xr_;continue}
          break}}
      var _xl_=l - 1 | 0;
      if(! (_xl_ < 2))
       {var i$0=_xl_;
        a:
        for(;;)
         {var
           e$0=caml_check_bound(a,i$0)[1 + i$0],
           _xp_=caml_check_bound(a,0)[1];
          caml_check_bound(a,i$0)[1 + i$0] = _xp_;
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_s_];
            if
             (0 <= caml_call2(cmp,caml_check_bound(a,father)[1 + father],e$0))
             caml_check_bound(a,i)[1 + i] = e$0;
            else
             {var _xj_=caml_check_bound(a,father)[1 + father];
              caml_check_bound(a,i)[1 + i] = _xj_;
              if(0 < father){var i=father;continue}
              caml_check_bound(a,0)[1] = e$0}
            var _xq_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_xq_;continue a}
            break}
          break}}
      var _xm_=1 < l?1:0;
      if(_xm_)
       {var e=caml_check_bound(a,1)[2],_xn_=caml_check_bound(a,0)[1];
        caml_check_bound(a,1)[2] = _xn_;
        caml_check_bound(a,0)[1] = e;
        var _xo_=0}
      else
       var _xo_=_xm_;
      return _xo_}
    function fast_sort$0(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_check_bound(src2,src2ofs)[1 + src2ofs],
         s1$1=caml_check_bound(a,src1ofs)[1 + src1ofs],
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_check_bound(dst,d)[1 + d] = s2;
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_check_bound(src2,i2$0)[1 + i2$0],
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$1(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_check_bound(dst,d)[1 + d] = s1;
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_check_bound(a,i1$0)[1 + i1$0],
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$1(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _xb_=len - 1 | 0,_xa_=0;
        if(! (_xb_ < 0))
         {var i=_xa_;
          a:
          for(;;)
           {var
             _xc_=srcofs + i | 0,
             e=caml_check_bound(a,_xc_)[1 + _xc_],
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if(dstofs <= j[1])
               {var _xd_=j[1];
                if(0 < caml_call2(cmp,caml_check_bound(dst,_xd_)[1 + _xd_],e))
                 {var
                   _xe_=j[1],
                   _xf_=caml_check_bound(dst,_xe_)[1 + _xe_],
                   _xg_=j[1] + 1 | 0;
                  caml_check_bound(dst,_xg_)[1 + _xg_] = _xf_;
                  j[1] += -1;
                  continue}}
              var _xh_=j[1] + 1 | 0;
              caml_check_bound(dst,_xh_)[1 + _xh_] = e;
              var _xi_=i + 1 | 0;
              if(_xb_ !== i){var i=_xi_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var
       l1=l / 2 | 0,
       l2=l - l1 | 0,
       t=caml_make_vect(l2,caml_check_bound(a,0)[1]);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$4(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_w__=i + 1 | 0;
          return [0,x,function(_w$_){return aux(_w__,_w$_)}]}
        return 0}
      var _w8_=0;
      return function(_w9_){return aux(_w8_,_w9_)}}
    function to_seqi$1(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_w6_=i + 1 | 0;
          return [0,[0,i,x],function(_w7_){return aux(_w6_,_w7_)}]}
        return 0}
      var _w4_=0;
      return function(_w5_){return aux(_w4_,_w5_)}}
    function of_seq$2(i$2)
     {var _w3_=0,l=fold_left(function(acc,x){return [0,x,acc]},_w3_,i$2);
      if(l)
       {var
         tl=l[2],
         hd=l[1],
         len=list_length(0,l),
         a=caml_make_vect(len,hd),
         i$1=len - 2 | 0,
         i=i$1,
         param=tl;
        for(;;)
         {if(param)
           {var tl$0=param[2],hd$0=param[1];
            a[1 + i] = hd$0;
            var i$0=i - 1 | 0,i=i$0,param=tl$0;
            continue}
          return a}}
      return [0]}
    var
     concat$1=caml_array_concat,
     include$2=
      [0,
       make_float,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       iteri$2,
       map$5,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       for_all$0,
       exists$0,
       mem$0,
       memq$0,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(762,include$2,"Stdlib__array");
    var zero=0.,one=1.,minus_one=-1.;
    function is_finite(x){return x - x == 0.?1:0}
    function is_infinite(x){return 1. / x == 0.?1:0}
    function is_nan(x){return x != x?1:0}
    var pi=3.14159265358979312;
    function is_integer(x)
     {var _w2_=x == runtime.caml_trunc_float(x)?1:0;
      return _w2_?is_finite(x):_w2_}
    function succ$0(x){return caml_nextafter_float(x,infinity)}
    function pred$0(x){return caml_nextafter_float(x,neg_infinity)}
    function equal$7(x,y){return 0 === caml_float_compare(x,y)?1:0}
    function min$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?x:y}
      return y != y?y:x}
    function max$1(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?y:x}
      return x != x?x:y}
    function min_max(x,y)
     {if(x == x && y == y)
       {if(! (x < y))
         {var switch$0=0;
          if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
          if(switch$0)return [0,y,x]}
        return [0,x,y]}
      return [0,nan,nan]}
    function min_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return y != y?x:y}
      return x != x?y:x}
    function max_num(x,y)
     {if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return x != x?y:x}
      return y != y?x:y}
    function min_max_num(x,y)
     {if(x != x)return [0,y,y];
      if(y != y)return [0,x,x];
      if(! (x < y))
       {var switch$0=0;
        if(caml_signbit_float(y) || ! caml_signbit_float(x))switch$0 = 1;
        if(switch$0)return [0,y,x]}
      return [0,x,y]}
    function hash$0(x){return caml_hash(10,100,0,x)}
    function unsafe_fill(a,ofs,len,v)
     {var _w0_=(ofs + len | 0) - 1 | 0;
      if(! (_w0_ < ofs))
       {var i=ofs;
        for(;;)
         {a[1 + i] = v;
          var _w1_=i + 1 | 0;
          if(_w0_ !== i){var i=_w1_;continue}
          break}}
      return 0}
    function unsafe_blit(src,sofs,dst,dofs,len)
     {var _wY_=len - 1 | 0,_wX_=0;
      if(! (_wY_ < 0))
       {var i=_wX_;
        for(;;)
         {dst[1 + (dofs + i | 0)] = src[1 + (sofs + i | 0)];
          var _wZ_=i + 1 | 0;
          if(_wY_ !== i){var i=_wZ_;continue}
          break}}
      return 0}
    function check(a,ofs,len,msg)
     {var _wT_=ofs < 0?1:0;
      if(_wT_)
       var _wU_=_wT_;
      else
       {var _wV_=len < 0?1:0;
        if(_wV_)
         var _wU_=_wV_;
        else
         var
          _wW_=(ofs + len | 0) < 0?1:0,
          _wU_=_wW_ || (a.length - 1 < (ofs + len | 0)?1:0)}
      return _wU_?invalid_arg(msg):_wU_}
    function make$1(n,v)
     {var result=caml_floatarray_create(n);
      unsafe_fill(result,0,n,v);
      return result}
    function init$3(l,f)
     {if(0 <= l)
       {var res=caml_floatarray_create(l),_wR_=l - 1 | 0,_wQ_=0;
        if(! (_wR_ < 0))
         {var i=_wQ_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _wS_=i + 1 | 0;
            if(_wR_ !== i){var i=_wS_;continue}
            break}}
        return res}
      return invalid_arg(cst_Float_Array_init)}
    function append$1(a1,a2)
     {var
       l1=a1.length - 1,
       l2=a2.length - 1,
       result=caml_floatarray_create(l1 + l2 | 0);
      unsafe_blit(a1,0,result,0,l1);
      unsafe_blit(a2,0,result,l1,l2);
      return result}
    function concat$2(l)
     {var acc=0,param=l;
      for(;;)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           x=hd.length - 1 + acc | 0,
           acc$0=acc <= x?x:invalid_arg(cst_Float_Array_concat),
           acc=acc$0,
           param=tl;
          continue}
        var result=caml_floatarray_create(acc),l$0=l,i=0;
        for(;;)
         {if(l$0)
           {var tl$0=l$0[2],hd$0=l$0[1],hlen=hd$0.length - 1;
            unsafe_blit(hd$0,0,result,i,hlen);
            var i$0=i + hlen | 0,l$0=tl$0,i=i$0;
            continue}
          if(i === acc)return result;
          throw [0,Assert_failure,_t_]}}}
    function sub$2(a,ofs,len)
     {check(a,ofs,len,cst_Float_Array_sub);
      var result=caml_floatarray_create(len);
      unsafe_blit(a,ofs,result,0,len);
      return result}
    function copy$2(a)
     {var l=a.length - 1,result=caml_floatarray_create(l);
      unsafe_blit(a,0,result,0,l);
      return result}
    function fill$1(a,ofs,len,v)
     {check(a,ofs,len,cst_Float_Array_fill);return unsafe_fill(a,ofs,len,v)}
    function blit$2(src,sofs,dst,dofs,len)
     {check(src,sofs,len,cst_Float_array_blit);
      check(dst,dofs,len,cst_Float_array_blit$0);
      return unsafe_blit(src,sofs,dst,dofs,len)}
    function to_list$2(a)
     {return init(a.length - 1,function(_wP_){return a[1 + _wP_]})}
    function of_list$0(l)
     {var result=caml_floatarray_create(length(l)),i=0,l$0=l;
      for(;;)
       {if(l$0)
         {var t=l$0[2],h=l$0[1];
          result[1 + i] = h;
          var i$0=i + 1 | 0,i=i$0,l$0=t;
          continue}
        return result}}
    function iter$6(f,a)
     {var _wN_=a.length - 1 - 1 | 0,_wM_=0;
      if(! (_wN_ < 0))
       {var i=_wM_;
        for(;;)
         {caml_call1(f,a[1 + i]);
          var _wO_=i + 1 | 0;
          if(_wN_ !== i){var i=_wO_;continue}
          break}}
      return 0}
    function iter2$1(f,a,b)
     {if(a.length - 1 !== b.length - 1)
       return invalid_arg(cst_Float_Array_iter2_arrays_m);
      var _wK_=a.length - 1 - 1 | 0,_wJ_=0;
      if(! (_wK_ < 0))
       {var i=_wJ_;
        for(;;)
         {caml_call2(f,a[1 + i],b[1 + i]);
          var _wL_=i + 1 | 0;
          if(_wK_ !== i){var i=_wL_;continue}
          break}}
      return 0}
    function map$6(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wH_=l - 1 | 0,_wG_=0;
      if(! (_wH_ < 0))
       {var i=_wG_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _wI_=i + 1 | 0;
          if(_wH_ !== i){var i=_wI_;continue}
          break}}
      return r}
    function map2$1(f,a,b)
     {var la=a.length - 1,lb=b.length - 1;
      if(la !== lb)return invalid_arg(cst_Float_Array_map2_arrays_mu);
      var r=caml_floatarray_create(la),_wE_=la - 1 | 0,_wD_=0;
      if(! (_wE_ < 0))
       {var i=_wD_;
        for(;;)
         {r[1 + i] = caml_call2(f,a[1 + i],b[1 + i]);
          var _wF_=i + 1 | 0;
          if(_wE_ !== i){var i=_wF_;continue}
          break}}
      return r}
    function iteri$3(f,a)
     {var _wB_=a.length - 1 - 1 | 0,_wA_=0;
      if(! (_wB_ < 0))
       {var i=_wA_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _wC_=i + 1 | 0;
          if(_wB_ !== i){var i=_wC_;continue}
          break}}
      return 0}
    function mapi$3(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_wy_=l - 1 | 0,_wx_=0;
      if(! (_wy_ < 0))
       {var i=_wx_;
        for(;;)
         {r[1 + i] = caml_call2(f,i,a[1 + i]);
          var _wz_=i + 1 | 0;
          if(_wy_ !== i){var i=_wz_;continue}
          break}}
      return r}
    function fold_left$2(f,x,a)
     {var r=[0,x],_wv_=a.length - 1 - 1 | 0,_wu_=0;
      if(! (_wv_ < 0))
       {var i=_wu_;
        for(;;)
         {r[1] = caml_call2(f,r[1],a[1 + i]);
          var _ww_=i + 1 | 0;
          if(_wv_ !== i){var i=_ww_;continue}
          break}}
      return r[1]}
    function fold_right$1(f,a,x)
     {var r=[0,x],_ws_=a.length - 1 - 1 | 0;
      if(! (_ws_ < 0))
       {var i=_ws_;
        for(;;)
         {r[1] = caml_call2(f,a[1 + i],r[1]);
          var _wt_=i - 1 | 0;
          if(0 !== i){var i=_wt_;continue}
          break}}
      return r[1]}
    function exists$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(caml_call1(p,a[1 + i]))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function for_all$1(p,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 1;
        if(caml_call1(p,a[1 + i])){var i$0=i + 1 | 0,i=i$0;continue}
        return 0}}
    function mem$1(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(0 === caml_float_compare(a[1 + i],x))return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    function mem_ieee(x,a)
     {var n=a.length - 1,i=0;
      for(;;)
       {if(i === n)return 0;
        if(x == a[1 + i])return 1;
        var i$0=i + 1 | 0,i=i$0;
        continue}}
    var Bottom$0=[248,cst_Stdlib_Float_Array_Bottom,caml_fresh_oo_id(0)];
    function sort$0(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {if
           (caml_call2
             (cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))
            <
            0)
           x[1] = i31 + 1 | 0;
          if
           (caml_call2
             (cmp,caml_array_get(a,x[1]),caml_array_get(a,i31 + 2 | 0))
            <
            0)
           x[1] = i31 + 2 | 0;
          return x[1]}
        if
         ((i31 + 1 | 0)
          <
          l
          &&
          !
          (0
           <=
           caml_call2(cmp,caml_array_get(a,i31),caml_array_get(a,i31 + 1 | 0))))
         return i31 + 1 | 0;
        if(i31 < l)return i31;
        throw [0,Bottom$0,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0);
          if(0 < caml_call2(cmp,caml_array_get(a,j),e))
           {caml_array_set(a,i$0,caml_array_get(a,j));var i$0=j;continue}
          return caml_array_set(a,i$0,e)}}
      function trickle(l,i,e)
       {try
         {var _wr_=trickledown(l,i,e);return _wr_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0)
           {var i$0=exn[2];return caml_array_set(a,i$0,e)}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0);
          caml_array_set(a,i$0,caml_array_get(a,i$1));
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _wq_=bubbledown(l,i);return _wq_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom$0){var i$0=exn[2];return i$0}
          throw exn}}
      var l=a.length - 1,_wk_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_wk_ < 0))
       {var i$2=_wk_;
        for(;;)
         {trickle(l,i$2,caml_array_get(a,i$2));
          var _wp_=i$2 - 1 | 0;
          if(0 !== i$2){var i$2=_wp_;continue}
          break}}
      var _wl_=l - 1 | 0;
      if(! (_wl_ < 2))
       {var i$0=_wl_;
        a:
        for(;;)
         {var e$0=caml_array_get(a,i$0);
          caml_array_set(a,i$0,caml_array_get(a,0));
          var i$1=bubble(i$0,0),i=i$1;
          for(;;)
           {var father=(i - 1 | 0) / 3 | 0;
            if(i === father)throw [0,Assert_failure,_u_];
            if(0 <= caml_call2(cmp,caml_array_get(a,father),e$0))
             caml_array_set(a,i,e$0);
            else
             {caml_array_set(a,i,caml_array_get(a,father));
              if(0 < father){var i=father;continue}
              caml_array_set(a,0,e$0)}
            var _wo_=i$0 - 1 | 0;
            if(2 !== i$0){var i$0=_wo_;continue a}
            break}
          break}}
      var _wm_=1 < l?1:0;
      if(_wm_)
       {var e=caml_array_get(a,1);
        caml_array_set(a,1,caml_array_get(a,0));
        var _wn_=caml_array_set(a,0,e)}
      else
       var _wn_=_wm_;
      return _wn_}
    function stable_sort(cmp,a)
     {function merge(src1ofs,src1len,src2,src2ofs,src2len,dst,dstofs)
       {var
         src1r=src1ofs + src1len | 0,
         src2r=src2ofs + src2len | 0,
         s2$1=caml_array_get(src2,src2ofs),
         s1$1=caml_array_get(a,src1ofs),
         i1=src1ofs,
         s1=s1$1,
         i2=src2ofs,
         s2=s2$1,
         d=dstofs;
        for(;;)
         {if(0 < caml_call2(cmp,s1,s2))
           {caml_array_set(dst,d,s2);
            var i2$0=i2 + 1 | 0;
            if(i2$0 < src2r)
             {var
               d$0=d + 1 | 0,
               s2$0=caml_array_get(src2,i2$0),
               i2=i2$0,
               s2=s2$0,
               d=d$0;
              continue}
            return blit$2(a,i1,dst,d + 1 | 0,src1r - i1 | 0)}
          caml_array_set(dst,d,s1);
          var i1$0=i1 + 1 | 0;
          if(i1$0 < src1r)
           {var
             d$1=d + 1 | 0,
             s1$0=caml_array_get(a,i1$0),
             i1=i1$0,
             s1=s1$0,
             d=d$1;
            continue}
          return blit$2(src2,i2,dst,d + 1 | 0,src2r - i2 | 0)}}
      function isortto(srcofs,dst,dstofs,len)
       {var _wi_=len - 1 | 0,_wh_=0;
        if(! (_wi_ < 0))
         {var i=_wh_;
          a:
          for(;;)
           {var
             e=caml_array_get(a,srcofs + i | 0),
             j=[0,(dstofs + i | 0) - 1 | 0];
            for(;;)
             {if
               (dstofs
                <=
                j[1]
                &&
                0
                <
                caml_call2(cmp,caml_array_get(dst,j[1]),e))
               {caml_array_set(dst,j[1] + 1 | 0,caml_array_get(dst,j[1]));
                j[1] += -1;
                continue}
              caml_array_set(dst,j[1] + 1 | 0,e);
              var _wj_=i + 1 | 0;
              if(_wi_ !== i){var i=_wj_;continue a}
              break}
            break}}
        return 0}
      function sortto(srcofs,dst,dstofs,len)
       {if(len <= 5)return isortto(srcofs,dst,dstofs,len);
        var l1=len / 2 | 0,l2=len - l1 | 0;
        sortto(srcofs + l1 | 0,dst,dstofs + l1 | 0,l2);
        sortto(srcofs,a,srcofs + l2 | 0,l1);
        return merge(srcofs + l2 | 0,l1,dst,dstofs + l1 | 0,l2,dst,dstofs)}
      var l=a.length - 1;
      if(l <= 5)return isortto(0,a,0,l);
      var l1=l / 2 | 0,l2=l - l1 | 0,t=caml_floatarray_create(l2);
      sortto(l1,t,0,l2);
      sortto(0,a,l2,l1);
      return merge(l2,l1,t,0,l2,a,0)}
    function to_seq$5(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wf_=i + 1 | 0;
          return [0,x,function(_wg_){return aux(_wf_,_wg_)}]}
        return 0}
      var _wd_=0;
      return function(_we_){return aux(_wd_,_we_)}}
    function to_seqi$2(a)
     {function aux(i,param)
       {if(i < a.length - 1)
         {var x=a[1 + i],_wb_=i + 1 | 0;
          return [0,[0,i,x],function(_wc_){return aux(_wb_,_wc_)}]}
        return 0}
      var _v$_=0;
      return function(_wa_){return aux(_v$_,_wa_)}}
    function of_seq$3(i$2)
     {var
       _v__=0,
       param$0=fold_left(function(acc,x){return [0,x,acc]},_v__,i$2),
       len=length(param$0),
       a=caml_floatarray_create(len),
       i$1=len - 1 | 0,
       i=i$1,
       param=param$0;
      for(;;)
       {if(param)
         {var tl=param[2],hd=param[1];
          a[1 + i] = hd;
          var i$0=i - 1 | 0,i=i$0,param=tl;
          continue}
        return a}}
    function map_to_array(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_v8_=l - 1 | 0,_v7_=1;
      if(! (_v8_ < 1))
       {var i=_v7_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _v9_=i + 1 | 0;
          if(_v8_ !== i){var i=_v9_;continue}
          break}}
      return r}
    function map_from_array(f,a)
     {var l=a.length - 1,r=caml_floatarray_create(l),_v5_=l - 1 | 0,_v4_=0;
      if(! (_v5_ < 0))
       {var i=_v4_;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _v6_=i + 1 | 0;
          if(_v5_ !== i){var i=_v6_;continue}
          break}}
      return r}
    var
     _v_=caml_floatarray_create,
     _w_=caml_array_set,
     _x_=caml_array_get,
     _y_=
      [0,
       function(_v3_){return _v3_.length - 1},
       _x_,
       _w_,
       make$1,
       _v_,
       init$3,
       append$1,
       concat$2,
       sub$2,
       copy$2,
       fill$1,
       blit$2,
       to_list$2,
       of_list$0,
       iter$6,
       iteri$3,
       map$6,
       mapi$3,
       fold_left$2,
       fold_right$1,
       iter2$1,
       map2$1,
       for_all$1,
       exists$1,
       mem$1,
       mem_ieee,
       sort$0,
       stable_sort,
       stable_sort,
       to_seq$5,
       to_seqi$2,
       of_seq$3,
       map_to_array,
       map_from_array],
     _z_=caml_floatarray_create,
     _A_=caml_array_set,
     _B_=caml_array_get,
     Stdlib_float=
      [0,
       zero,
       one,
       minus_one,
       succ$0,
       pred$0,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal$7,
       min$1,
       max$1,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash$0,
       [0,
        function(_v2_){return _v2_.length - 1},
        _B_,
        _A_,
        make$1,
        _z_,
        init$3,
        append$1,
        concat$2,
        sub$2,
        copy$2,
        fill$1,
        blit$2,
        to_list$2,
        of_list$0,
        iter$6,
        iteri$3,
        map$6,
        mapi$3,
        fold_left$2,
        fold_right$1,
        iter2$1,
        map2$1,
        for_all$1,
        exists$1,
        mem$1,
        mem_ieee,
        sort$0,
        stable_sort,
        stable_sort,
        to_seq$5,
        to_seqi$2,
        of_seq$3,
        map_to_array,
        map_from_array],
       _y_];
    caml_register_global(763,Stdlib_float,"Stdlib__float");
    var zero$0=0,one$0=1,minus_one$0=-1;
    function abs$0(x){return 0 <= x?x:- x | 0}
    var max_int$0=2147483647,min_int$0=-2147483648;
    function lognot(x){return x ^ -1}
    function equal$8(_v1_,_v0_){return _v1_ === _v0_?1:0}
    var compare$7=caml_int_compare;
    function to_string$3(x){return caml_string_of_jsbytes("" + x)}
    var
     Stdlib_int=
      [0,
       zero$0,
       one$0,
       minus_one$0,
       abs$0,
       max_int$0,
       min_int$0,
       lognot,
       equal$8,
       compare$7,
       to_string$3];
    caml_register_global(764,Stdlib_int,"Stdlib__int");
    var zero$1=0,one$1=1,minus_one$1=-1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$1(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$1=-2147483648,max_int$1=2147483647;
    function lognot$0(n){return n ^ -1}
    function unsigned_to_int(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$4(n){return caml_format_int(cst_d,n)}
    function of_string_opt$0(s)
     {try
       {var _vY_=[0,caml_int_of_string(s)];return _vY_}
      catch(_vZ_)
       {_vZ_ = caml_wrap_exception(_vZ_);
        if(_vZ_[1] === Failure)return 0;
        throw _vZ_}}
    var compare$8=caml_int_compare;
    function equal$9(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare(n,d)?one$1:zero$1;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare(r,d)?q + 1 | 0:q}
    function unsigned_rem(n,d){return n - caml_mul(unsigned_div(n,d),d) | 0}
    var
     Stdlib_int32=
      [0,
       zero$1,
       one$1,
       minus_one$1,
       unsigned_div,
       unsigned_rem,
       succ$1,
       pred$1,
       abs$1,
       max_int$1,
       min_int$1,
       lognot$0,
       unsigned_to_int,
       of_string_opt$0,
       to_string$4,
       compare$8,
       unsigned_compare,
       equal$9];
    caml_register_global(765,Stdlib_int32,"Stdlib__int32");
    function succ$2(n){return caml_int64_add(n,_C_)}
    function pred$2(n){return caml_int64_sub(n,_D_)}
    function abs$2(n)
     {return caml_greaterequal(n,_E_)?n:runtime.caml_int64_neg(n)}
    function lognot$1(n){return runtime.caml_int64_xor(n,_F_)}
    var max_int$3=caml_int64_of_int32(2147483647);
    function unsigned_to_int$0(n)
     {if
       (!
        (0 < caml_int64_compare(zero$2,n))
        &&
        !
        (0 < caml_int64_compare(n,max_int$3)))
       return [0,runtime.caml_int64_to_int32(n)];
      return 0}
    function to_string$5(n){return caml_int64_format(cst_d$0,n)}
    function of_string_opt$1(s)
     {try
       {var _vW_=[0,caml_int64_of_string(s)];return _vW_}
      catch(_vX_)
       {_vX_ = caml_wrap_exception(_vX_);
        if(_vX_[1] === Failure)return 0;
        throw _vX_}}
    function compare$9(x,y){return caml_int64_compare(x,y)}
    function equal$10(x,y){return 0 === caml_int64_compare(x,y)?1:0}
    function unsigned_compare$0(n,m)
     {return caml_int64_compare
              (caml_int64_sub(n,min_int$2),caml_int64_sub(m,min_int$2))}
    function unsigned_div$0(n,d)
     {if(caml_lessthan(d,zero$2))
       return 0 <= unsigned_compare$0(n,d)?one$2:zero$2;
      var
       q=
        caml_int64_shift_left
         (runtime.caml_int64_div
           (runtime.caml_int64_shift_right_unsigned(n,1),d),
          1),
       r=caml_int64_sub(n,caml_int64_mul(q,d));
      return 0 <= unsigned_compare$0(r,d)?succ$2(q):q}
    function unsigned_rem$0(n,d)
     {return caml_int64_sub(n,caml_int64_mul(unsigned_div$0(n,d),d))}
    var
     Stdlib_int64=
      [0,
       zero$2,
       one$2,
       minus_one$2,
       unsigned_div$0,
       unsigned_rem$0,
       succ$2,
       pred$2,
       abs$2,
       max_int$2,
       min_int$2,
       lognot$1,
       unsigned_to_int$0,
       of_string_opt$1,
       to_string$5,
       compare$9,
       unsigned_compare$0,
       equal$10];
    caml_register_global(766,Stdlib_int64,"Stdlib__int64");
    var zero$3=0,one$3=1,minus_one$3=-1;
    function succ$3(n){return n + 1 | 0}
    function pred$3(n){return n - 1 | 0}
    function abs$3(n){return caml_greaterequal(n,0)?n:- n | 0}
    var min_int$3=-2147483648,max_int$4=2147483647;
    function lognot$2(n){return n ^ -1}
    function unsigned_to_int$1(n)
     {if
       (!
        (0 < caml_int_compare(0,n))
        &&
        !
        (0 < caml_int_compare(n,2147483647)))
       return [0,n];
      return 0}
    function to_string$6(n){return caml_format_int(cst_d$1,n)}
    function of_string_opt$2(s)
     {try
       {var _vU_=[0,caml_int_of_string(s)];return _vU_}
      catch(_vV_)
       {_vV_ = caml_wrap_exception(_vV_);
        if(_vV_[1] === Failure)return 0;
        throw _vV_}}
    var compare$10=caml_int_compare;
    function equal$11(x,y){return 0 === caml_int_compare(x,y)?1:0}
    function unsigned_compare$1(n,m)
     {return caml_int_compare(n + 2147483648 | 0,m + 2147483648 | 0)}
    function unsigned_div$1(n,d)
     {if(caml_lessthan(d,0))return 0 <= unsigned_compare$1(n,d)?one$3:zero$3;
      var q=caml_div(n >>> 1 | 0,d) << 1,r=n - caml_mul(q,d) | 0;
      return 0 <= unsigned_compare$1(r,d)?q + 1 | 0:q}
    function unsigned_rem$1(n,d)
     {return n - caml_mul(unsigned_div$1(n,d),d) | 0}
    var
     Stdlib_nativeint=
      [0,
       zero$3,
       one$3,
       minus_one$3,
       unsigned_div$1,
       unsigned_rem$1,
       succ$3,
       pred$3,
       abs$3,
       match$1,
       max_int$4,
       min_int$3,
       lognot$2,
       unsigned_to_int$1,
       of_string_opt$2,
       to_string$6,
       compare$10,
       unsigned_compare$1,
       equal$11];
    caml_register_global(767,Stdlib_nativeint,"Stdlib__nativeint");
    function engine(tbl,state,buf)
     {var
       result=runtime.caml_lex_engine(tbl,state,buf),
       _vR_=0 <= result?1:0,
       _vS_=_vR_?buf[12] !== dummy_pos?1:0:_vR_;
      if(_vS_)
       {buf[11] = buf[12];
        var _vT_=buf[12];
        buf[12] = [0,_vT_[1],_vT_[2],_vT_[3],buf[4] + buf[6] | 0]}
      return result}
    function new_engine(tbl,state,buf)
     {var
       result=runtime.caml_new_lex_engine(tbl,state,buf),
       _vO_=0 <= result?1:0,
       _vP_=_vO_?buf[12] !== dummy_pos?1:0:_vO_;
      if(_vP_)
       {buf[11] = buf[12];
        var _vQ_=buf[12];
        buf[12] = [0,_vQ_[1],_vQ_[2],_vQ_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_function(opt,f)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vA_=with_positions?zero_pos:dummy_pos,
       _vB_=with_positions?zero_pos:dummy_pos,
       aux_buffer=caml_create_bytes(512),
       _vC_=[0],
       _vD_=0,
       _vE_=0,
       _vF_=0,
       _vG_=0,
       _vH_=0,
       _vI_=0,
       _vJ_=0,
       _vK_=caml_create_bytes(1024);
      return [0,
              function(lexbuf)
               {var
                 read=
                  caml_call2(f,aux_buffer,caml_ml_bytes_length(aux_buffer)),
                 n=0 < read?read:(lexbuf[9] = 1,0);
                if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0))
                 {if
                   (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                    <=
                    caml_ml_bytes_length(lexbuf[2]))
                   blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   {var
                     newlen=
                      min
                       (2 * caml_ml_bytes_length(lexbuf[2]) | 0,max_string_length);
                    if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                     failwith(cst_Lexing_lex_refill_cannot_g);
                    var newbuf=caml_create_bytes(newlen);
                    blit(lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                    lexbuf[2] = newbuf}
                  var s=lexbuf[5];
                  lexbuf[4] = lexbuf[4] + s | 0;
                  lexbuf[6] = lexbuf[6] - s | 0;
                  lexbuf[5] = 0;
                  lexbuf[7] = lexbuf[7] - s | 0;
                  lexbuf[3] = lexbuf[3] - s | 0;
                  var t=lexbuf[10],_vM_=t.length - 1 - 1 | 0,_vL_=0;
                  if(! (_vM_ < 0))
                   {var i=_vL_;
                    for(;;)
                     {var v=caml_check_bound(t,i)[1 + i];
                      if(0 <= v)caml_check_bound(t,i)[1 + i] = v - s | 0;
                      var _vN_=i + 1 | 0;
                      if(_vM_ !== i){var i=_vN_;continue}
                      break}}}
                blit(aux_buffer,0,lexbuf[2],lexbuf[3],n);
                lexbuf[3] = lexbuf[3] + n | 0;
                return 0},
              _vK_,
              _vJ_,
              _vI_,
              _vH_,
              _vG_,
              _vF_,
              _vE_,
              _vD_,
              _vC_,
              _vB_,
              _vA_]}
    function from_channel(with_positions,ic)
     {return from_function
              (with_positions,function(buf,n){return input(ic,buf,0,n)})}
    function from_string$0(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _vp_=with_positions?zero_pos:dummy_pos,
       _vq_=with_positions?zero_pos:dummy_pos,
       _vr_=[0],
       _vs_=1,
       _vt_=0,
       _vu_=0,
       _vv_=0,
       _vw_=0,
       _vx_=0,
       _vy_=caml_ml_string_length(s),
       _vz_=of_string(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _vz_,
              _vy_,
              _vx_,
              _vw_,
              _vv_,
              _vu_,
              _vt_,
              _vs_,
              _vr_,
              _vq_,
              _vp_]}
    function with_positions(lexbuf){return lexbuf[12] !== dummy_pos?1:0}
    function lexeme(lexbuf)
     {var len=lexbuf[6] - lexbuf[5] | 0;
      return sub_string(lexbuf[2],lexbuf[5],len)}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_opt(lexbuf,i1,i2)
     {if(0 <= i1){var len=i2 - i1 | 0;return [0,sub_string(lexbuf[2],i1,len)]}
      return 0}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    function sub_lexeme_char_opt(lexbuf,i)
     {return 0 <= i?[0,caml_bytes_get(lexbuf[2],i)]:0}
    function lexeme_char(lexbuf,i)
     {return caml_bytes_get(lexbuf[2],lexbuf[5] + i | 0)}
    function lexeme_start(lexbuf){return lexbuf[11][4]}
    function lexeme_end(lexbuf){return lexbuf[12][4]}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _vn_=lcp !== dummy_pos?1:0,
       _vo_=_vn_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_vn_;
      return _vo_}
    function flush_input(lb)
     {lb[6] = 0;
      lb[4] = 0;
      var lcp=lb[12];
      if(lcp !== dummy_pos)
       lb[12] = [0,lcp[1],zero_pos[2],zero_pos[3],zero_pos[4]];
      lb[3] = 0;
      return 0}
    var
     Stdlib_lexing=
      [0,
       dummy_pos,
       from_channel,
       from_string$0,
       from_function,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
    caml_register_global(768,Stdlib_lexing,"Stdlib__lexing");
    var
     YYexit=[248,cst_Stdlib_Parsing_YYexit,caml_fresh_oo_id(0)],
     Parse_error=[248,cst_Stdlib_Parsing_Parse_error,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function grow_stacks(param)
     {var
       oldsize=env[5],
       newsize=oldsize * 2 | 0,
       new_s=caml_make_vect(newsize,0),
       new_v=caml_make_vect(newsize,0),
       new_start=caml_make_vect(newsize,dummy_pos),
       new_end=caml_make_vect(newsize,dummy_pos);
      blit$1(env[1],0,new_s,0,oldsize);
      env[1] = new_s;
      blit$1(env[2],0,new_v,0,oldsize);
      env[2] = new_v;
      blit$1(env[3],0,new_start,0,oldsize);
      env[3] = new_start;
      blit$1(env[4],0,new_end,0,oldsize);
      env[4] = new_end;
      env[5] = newsize;
      return 0}
    function clear_parser(param)
     {fill$0(env[2],0,env[5],0);env[8] = 0;return 0}
    var current_lookahead_fun=[0,function(param){return 0}];
    function yyparse(tables,start,lexer,lexbuf)
     {var
       init_asp=env[11],
       init_sp=env[14],
       init_stackbase=env[6],
       init_state=env[15],
       init_curr_char=env[7],
       init_lval=env[8],
       init_errflag=env[16];
      env[6] = env[14] + 1 | 0;
      env[7] = start;
      env[10] = lexbuf[12];
      try
       {var cmd=0,arg=0;
        for(;;)
         {var match=runtime.caml_parse_engine(tables,env,cmd,arg);
          switch(match)
           {case 0:
             var arg$0=caml_call1(lexer,lexbuf);
             env[9] = lexbuf[11];
             env[10] = lexbuf[12];
             var cmd=1,arg=arg$0;
             continue;
            case 1:throw Parse_error;
            case 2:grow_stacks(0);var cmd=2,arg=0;continue;
            case 3:grow_stacks(0);var cmd=3,arg=0;continue;
            case 4:
             try
              {var
                _vh_=env[13],
                _vi_=
                 caml_call1(caml_check_bound(tables[1],_vh_)[1 + _vh_],env),
                _vj_=4,
                arg$1=_vi_,
                cmd$0=_vj_}
             catch(_vm_)
              {_vm_ = caml_wrap_exception(_vm_);
               if(_vm_ !== Parse_error)throw _vm_;
               var arg$1=0,cmd$0=5,_vk_=_vm_}
             var cmd=cmd$0,arg=arg$1;
             continue;
            default:
             caml_call1(tables[14],cst_syntax_error);var cmd=5,arg=0;continue}}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var curr_char=env[7];
        env[11] = init_asp;
        env[14] = init_sp;
        env[6] = init_stackbase;
        env[15] = init_state;
        env[7] = init_curr_char;
        env[8] = init_lval;
        env[16] = init_errflag;
        if(exn[1] === YYexit){var v=exn[2];return v}
        current_lookahead_fun[1]
        =
        function(tok)
         {if(is_block(tok))
           {var _vl_=caml_obj_tag(tok);
            return caml_check_bound(tables[3],_vl_)[1 + _vl_] === curr_char
                    ?1
                    :0}
          return caml_check_bound(tables[2],tok)[1 + tok] === curr_char?1:0};
        throw exn}}
    function peek_val(env,n)
     {var _vg_=env[11] - n | 0;return caml_check_bound(env[2],_vg_)[1 + _vg_]}
    function symbol_start_pos(param)
     {var i=env[12];
      for(;;)
       {if(0 < i)
         {var
           _vd_=(env[11] - i | 0) + 1 | 0,
           st=caml_check_bound(env[3],_vd_)[1 + _vd_],
           _ve_=(env[11] - i | 0) + 1 | 0,
           en=caml_check_bound(env[4],_ve_)[1 + _ve_];
          if(caml_notequal(st,en))return st;
          var i$0=i - 1 | 0,i=i$0;
          continue}
        var _vf_=env[11];
        return caml_check_bound(env[4],_vf_)[1 + _vf_]}}
    function symbol_end_pos(param)
     {var _vc_=env[11];return caml_check_bound(env[4],_vc_)[1 + _vc_]}
    function rhs_start_pos(n)
     {var _vb_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[3],_vb_)[1 + _vb_]}
    function rhs_end_pos(n)
     {var _va_=env[11] - (env[12] - n | 0) | 0;
      return caml_check_bound(env[4],_va_)[1 + _va_]}
    function symbol_start(param){return symbol_start_pos(0)[4]}
    function symbol_end(param){return symbol_end_pos(0)[4]}
    function rhs_start(n){return rhs_start_pos(n)[4]}
    function rhs_end(n){return rhs_end_pos(n)[4]}
    function is_current_lookahead(tok)
     {return caml_call1(current_lookahead_fun[1],tok)}
    function parse_error(param){return 0}
    var
     Stdlib_parsing=
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       function(_u$_){return runtime.caml_set_parser_trace(_u$_)},
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    caml_register_global(769,Stdlib_parsing,"Stdlib__parsing");
    var
     Stdlib_set=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[4];return h}return 0}
         function create(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           var _u__=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_u__]}
         function bal(l,v,r)
          {if(l)var h=l[4],hl=h;else var hl=0;
           if(r)var h$0=r[4],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[3],lv=l[2],ll=l[1],_u5_=height(lr);
               if(_u5_ <= height(ll))return create(ll,lv,create(lr,v,r));
               if(lr)
                {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_u6_=create(lrr,v,r);
                 return create(create(ll,lv,lrl),lrv,_u6_)}
               return invalid_arg(cst_Set_bal)}
             return invalid_arg(cst_Set_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[3],rv=r[2],rl=r[1],_u7_=height(rl);
               if(_u7_ <= height(rr))return create(create(l,v,rl),rv,rr);
               if(rl)
                {var rlr=rl[3],rlv=rl[2],rll=rl[1],_u8_=create(rlr,rv,rr);
                 return create(create(l,v,rll),rlv,_u8_)}
               return invalid_arg(cst_Set_bal$1)}
             return invalid_arg(cst_Set_bal$2)}
           var _u9_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,v,r,_u9_]}
         function add(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return t;
             if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=add(x,l);
             return l === ll?t:bal(ll,v,r)}
           return [0,0,x,0,1]}
         function singleton(x){return [0,0,x,0,1]}
         function add_min_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(add_min_element(x,l),v,r)}
           return singleton(x)}
         function add_max_element(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1];
             return bal(l,v,add_max_element(x,r))}
           return singleton(x)}
         function join(l,v,r)
          {if(l)
            {if(r)
              {var
                rh=r[4],
                rr=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[4],
                lr=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,join(lr,v,r))
                       :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
             return add_max_element(v,l)}
           return add_min_element(v,r)}
         function min_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _u4_=param$0[1];
               if(_u4_){var param$0=_u4_;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function min_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _u3_=param$0[1];
               if(_u3_){var param$0=_u3_;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function max_elt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return v}
             throw Not_found}}
         function max_elt_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
               var v=param$0[2];
               return [0,v]}
             return 0}}
         function remove_min_elt(param)
          {if(param)
            {var _u2_=param[1];
             if(_u2_)
              {var r=param[3],v=param[2];return bal(remove_min_elt(_u2_),v,r)}
             var r$0=param[3];
             return r$0}
           return invalid_arg(cst_Set_remove_min_elt)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var _u1_=remove_min_elt(match);
               return join(t,min_elt(match),_u1_)}
             return t}
           return match}
         function split(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,1,r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,r)]}
           return _G_}
         var empty=0;
         function is_empty(param){return param?0:1}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _u0_=0 === c?1:0;
               if(_u0_)return _u0_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function remove(x,t)
          {if(t)
            {var r=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {if(l)
                {if(r)
                  {var _uZ_=remove_min_elt(r);return bal(l,min_elt(r),_uZ_)}
                 return l}
               return r}
             if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
             var ll=remove(x,l);
             return l === ll?t:bal(ll,v,r)}
           return 0}
         function union(t1,match)
          {if(t1)
            {if(match)
              {var
                h2=match[4],
                r2=match[3],
                v2=match[2],
                l2=match[1],
                h1=t1[4],
                r1=t1[3],
                v1=t1[2],
                l1=t1[1];
               if(h2 <= h1)
                {if(1 === h2)return add(v2,t1);
                 var
                  match$0=split(v1,match),
                  r2$0=match$0[3],
                  l2$0=match$0[1],
                  _uX_=union(r1,r2$0);
                 return join(union(l1,l2$0),v1,_uX_)}
               if(1 === h1)return add(v1,match);
               var
                match$1=split(v2,t1),
                r1$0=match$1[3],
                l1$0=match$1[1],
                _uY_=union(r1$0,r2);
               return join(union(l1$0,l2),v2,_uY_)}
             return t1}
           return match}
         function inter(s1,match)
          {if(s1)
            {if(match)
              {var
                r1=s1[3],
                v1=s1[2],
                l1=s1[1],
                _uT_=split(v1,match),
                _uU_=_uT_[1];
               if(_uT_[2])
                {var r2=_uT_[3],_uV_=inter(r1,r2);
                 return join(inter(l1,_uU_),v1,_uV_)}
               var r2$0=_uT_[3],_uW_=inter(r1,r2$0);
               return concat(inter(l1,_uU_),_uW_)}
             return 0}
           return 0}
         function split_bis(x,param)
          {if(param)
            {var r=param[3],v=param[2],l=param[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return 0;
             if(0 <= c)
              {var match=split_bis(x,r);
               if(match)
                {var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
               return 0}
             var match$0=split_bis(x,l);
             if(match$0)
              {var rl=match$0[2],ll=match$0[1];
               return [0,
                       ll,
                       function(param){return join(caml_call1(rl,0),v,r)}]}
             return 0}
           return [0,0,function(param){return 0}]}
         function disjoint(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0 && s2$0)
              {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
               if(s1$0 === s2$0)return 0;
               var match=split_bis(v1,s2$0);
               if(match)
                {var r2=match[2],l2=match[1],_uS_=disjoint(l1,l2);
                 if(_uS_)
                  {var s2$1=caml_call1(r2,0),s1$0=r1,s2$0=s2$1;continue}
                 return _uS_}
               return 0}
             return 1}}
         function diff(t1,match)
          {if(t1)
            {if(match)
              {var
                r1=t1[3],
                v1=t1[2],
                l1=t1[1],
                _uO_=split(v1,match),
                _uP_=_uO_[1];
               if(_uO_[2])
                {var r2=_uO_[3],_uQ_=diff(r1,r2);
                 return concat(diff(l1,_uP_),_uQ_)}
               var r2$0=_uO_[3],_uR_=diff(r1,r2$0);
               return join(diff(l1,_uP_),v1,_uR_)}
             return t1}
           return 0}
         function cons_enum(s,e)
          {var s$0=s,e$0=e;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                s$1=s$0[1],
                e$1=[0,v,r,e$0],
                s$0=s$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(s1,s2)
          {var e2$2=cons_enum(s2,0),e1$2=cons_enum(s1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[3],
                  r2=e2[2],
                  v2=e2[1],
                  e1$0=e1[3],
                  r1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var
                    e2$1=cons_enum(r2,e2$0),
                    e1$1=cons_enum(r1,e1$0),
                    e1=e1$1,
                    e2=e2$1;
                   continue}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
         function subset(s1,s2)
          {var s1$0=s1,s2$0=s2;
           for(;;)
            {if(s1$0)
              {if(s2$0)
                {var
                  r2=s2$0[3],
                  v2=s2$0[2],
                  l2=s2$0[1],
                  r1=s1$0[3],
                  v1=s1$0[2],
                  l1=s1$0[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var _uL_=subset(l1,l2);
                   if(_uL_){var s1$0=r1,s2$0=r2;continue}
                   return _uL_}
                 if(0 <= c)
                  {var _uM_=subset([0,0,v1,r1,0],r2);
                   if(_uM_){var s1$0=l1;continue}
                   return _uM_}
                 var _uN_=subset([0,l1,v1,0,0],l2);
                 if(_uN_){var s1$0=r1;continue}
                 return _uN_}
               return 0}
             return 1}}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call1(f,v);
               var param$0=r;
               continue}
             return 0}}
         function fold(f,s,accu)
          {var s$0=s,accu$0=accu;
           for(;;)
            {if(s$0)
              {var
                r=s$0[3],
                v=s$0[2],
                l=s$0[1],
                accu$1=caml_call2(f,v,fold(f,l,accu$0)),
                s$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uI_=caml_call1(p,v);
               if(_uI_)
                {var _uJ_=for_all(p,l);
                 if(_uJ_){var param$0=r;continue}
                 var _uK_=_uJ_}
               else
                var _uK_=_uI_;
               return _uK_}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _uF_=caml_call1(p,v);
               if(_uF_)
                var _uG_=_uF_;
               else
                {var _uH_=exists(p,l);
                 if(! _uH_){var param$0=r;continue}
                 var _uG_=_uH_}
               return _uG_}
             return 0}}
         function filter(p,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=filter(p,l),
              pv=caml_call1(p,v),
              r$0=filter(p,r);
             if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pv=caml_call1(p,v),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pv){var _uD_=concat(lf,rf);return [0,join(lt,v,rt),_uD_]}
             var _uE_=join(lf,v,rf);
             return [0,concat(lt,rt),_uE_]}
           return _H_}
         function cardinal(param)
          {if(param)
            {var r=param[3],l=param[1],_uC_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _uC_ | 0}
           return 0}
         function elements_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,v,elements_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function elements(s){return elements_aux(0,s)}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return v;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return v0}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return v0}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var r$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,v];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function map(f,t)
          {if(t)
            {var
              r=t[3],
              v=t[2],
              l=t[1],
              l$0=map(f,l),
              v$0=caml_call1(f,v),
              r$0=map(f,r);
             if(l === l$0 && v === v$0 && r === r$0)return t;
             var switch$0=0;
             if(0 !== l$0)
              {var _uB_=max_elt(l$0);
               if(0 <= caml_call2(Ord[1],_uB_,v$0))switch$0 = 1}
             if(! switch$0)
              {var switch$1=0;
               if(0 !== r$0)
                {var _uA_=min_elt(r$0);
                 if(0 <= caml_call2(Ord[1],v$0,_uA_))switch$1 = 1}
               if(! switch$1)return join(l$0,v$0,r$0)}
             return union(l$0,add(v$0,r$0))}
           return 0}
         function of_list(l)
          {if(l)
            {var _up_=l[2],_uq_=l[1];
             if(_up_)
              {var _ur_=_up_[2],_us_=_up_[1];
               if(_ur_)
                {var _ut_=_ur_[2],_uu_=_ur_[1];
                 if(_ut_)
                  {var _uv_=_ut_[2],_uw_=_ut_[1];
                   if(_uv_)
                    {if(_uv_[2])
                      {var
                        l$0=sort_uniq(Ord[1],l),
                        sub=
                         function(n,l)
                          {if(! (3 < n >>> 0))
                            switch(n)
                             {case 0:return [0,0,l];
                              case 1:
                               if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                               break;
                              case 2:
                               if(l)
                                {var _ux_=l[2];
                                 if(_ux_)
                                  {var l$4=_ux_[2],x1=_ux_[1],x0$0=l[1];
                                   return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                               break;
                              default:
                               if(l)
                                {var _uy_=l[2];
                                 if(_uy_)
                                  {var _uz_=_uy_[2];
                                   if(_uz_)
                                    {var l$5=_uz_[2],x2=_uz_[1],x1$0=_uy_[1],x0$1=l[1];
                                     return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                           var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                           if(l$0)
                            {var
                              l$1=l$0[2],
                              mid=l$0[1],
                              match$0=sub((n - nl | 0) - 1 | 0,l$1),
                              l$2=match$0[2],
                              right=match$0[1];
                             return [0,create(left,mid,right),l$2]}
                           throw [0,Assert_failure,_I_]};
                       return sub(length(l$0),l$0)[1]}
                     var x4=_uv_[1];
                     return add(x4,add(_uw_,add(_uu_,add(_us_,singleton(_uq_)))))}
                   return add(_uw_,add(_uu_,add(_us_,singleton(_uq_))))}
                 return add(_uu_,add(_us_,singleton(_uq_)))}
               return add(_us_,singleton(_uq_))}
             return singleton(_uq_)}
           return empty}
         function add_seq(i,m)
          {return fold_left(function(s,x){return add(x,s)},m,i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[3],t=c[2],x=c[1],_un_=cons_enum(t,rest);
             return [0,x,function(_uo_){return seq_of_enum(_un_,_uo_)}]}
           return 0}
         function to_seq(c)
          {var _ul_=cons_enum(c,0);
           return function(_um_){return seq_of_enum(_ul_,_um_)}}
         function to_seq_from(low,s)
          {var s$0=s,c=0;
           for(;;)
            {if(s$0)
              {var r=s$0[3],v=s$0[2],l=s$0[1],n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,r,c],s$0=l,c=c$0;continue}
                 var s$0=r;
                 continue}
               var _uj_=[0,v,r,c]}
             else
              var _uj_=c;
             return function(_uk_){return seq_of_enum(_uj_,_uk_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 singleton,
                 remove,
                 union,
                 inter,
                 disjoint,
                 diff,
                 compare,
                 equal,
                 subset,
                 iter,
                 map,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 elements,
                 min_elt,
                 min_elt_opt,
                 max_elt,
                 max_elt_opt,
                 min_elt,
                 min_elt_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 of_list,
                 to_seq_from,
                 to_seq,
                 add_seq,
                 of_seq]}];
    caml_register_global(770,Stdlib_set,"Stdlib__set");
    var
     Stdlib_map=
      [0,
       function(Ord)
        {function height(param){if(param){var h=param[5];return h}return 0}
         function create(l,x,d,r)
          {var hl=height(l),hr=height(r),_ui_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_ui_]}
         function singleton(x,d){return [0,0,x,d,0,1]}
         function bal(l,x,d,r)
          {if(l)var h=l[5],hl=h;else var hl=0;
           if(r)var h$0=r[5],hr=h$0;else var hr=0;
           if((hr + 2 | 0) < hl)
            {if(l)
              {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_ud_=height(lr);
               if(_ud_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
               if(lr)
                {var
                  lrr=lr[4],
                  lrd=lr[3],
                  lrv=lr[2],
                  lrl=lr[1],
                  _ue_=create(lrr,x,d,r);
                 return create(create(ll,lv,ld,lrl),lrv,lrd,_ue_)}
               return invalid_arg(cst_Map_bal)}
             return invalid_arg(cst_Map_bal$0)}
           if((hl + 2 | 0) < hr)
            {if(r)
              {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_uf_=height(rl);
               if(_uf_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
               if(rl)
                {var
                  rlr=rl[4],
                  rld=rl[3],
                  rlv=rl[2],
                  rll=rl[1],
                  _ug_=create(rlr,rv,rd,rr);
                 return create(create(l,x,d,rll),rlv,rld,_ug_)}
               return invalid_arg(cst_Map_bal$1)}
             return invalid_arg(cst_Map_bal$2)}
           var _uh_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
           return [0,l,x,d,r,_uh_]}
         var empty=0;
         function is_empty(param){return param?0:1}
         function add(x,data,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return d === data?m:[0,l,x,data,r,h];
             if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=add(x,data,l);
             return l === ll?m:bal(ll,v,d,r)}
           return [0,0,x,data,0,1]}
         function find(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return d;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             throw Not_found}}
         function find_first(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,v0,d0]}}
               var param$1=r$0;
               continue}
             throw Not_found}}
         function find_first_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=l$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                     var param=r;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=r$0;
               continue}
             return 0}}
         function find_last(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,v0,d0]}}
               var param$1=l$0;
               continue}
             throw Not_found}}
         function find_last_opt(f,param$0)
          {var param$1=param$0;
           for(;;)
            {if(param$1)
              {var
                r$0=param$1[4],
                d$0=param$1[3],
                v$0=param$1[2],
                l$0=param$1[1];
               if(caml_call1(f,v$0))
                {var v0=v$0,d0=d$0,param=r$0;
                 for(;;)
                  {if(param)
                    {var r=param[4],d=param[3],v=param[2],l=param[1];
                     if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                     var param=l;
                     continue}
                   return [0,[0,v0,d0]]}}
               var param$1=l$0;
               continue}
             return 0}}
         function find_opt(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v);
               if(0 === c)return [0,d];
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function mem(x,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                v=param$0[2],
                l=param$0[1],
                c=caml_call2(Ord[1],x,v),
                _uc_=0 === c?1:0;
               if(_uc_)return _uc_;
               var param$1=0 <= c?r:l,param$0=param$1;
               continue}
             return 0}}
         function min_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _ub_=param$0[1];
               if(_ub_){var param$0=_ub_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function min_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var _ua_=param$0[1];
               if(_ua_){var param$0=_ua_;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function max_binding(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,v,d]}
             throw Not_found}}
         function max_binding_opt(param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
               var d=param$0[3],v=param$0[2];
               return [0,[0,v,d]]}
             return 0}}
         function remove_min_binding(param)
          {if(param)
            {var _t$_=param[1];
             if(_t$_)
              {var r=param[4],d=param[3],v=param[2];
               return bal(remove_min_binding(_t$_),v,d,r)}
             var r$0=param[4];
             return r$0}
           return invalid_arg(cst_Map_remove_min_elt)}
         function _tO_(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return bal(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function remove(x,m)
          {if(m)
            {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)return _tO_(l,r);
             if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=remove(x,l);
             return l === ll?m:bal(ll,v,d,r)}
           return 0}
         function update(x,f,m)
          {if(m)
            {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
             if(0 === c)
              {var match=caml_call1(f,[0,d]);
               if(match)
                {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
               return _tO_(l,r)}
             if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
             var ll=update(x,f,l);
             return l === ll?m:bal(ll,v,d,r)}
           var match$0=caml_call1(f,0);
           if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
           return 0}
         function iter(f,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
               iter(f,l);
               caml_call2(f,v,d);
               var param$0=r;
               continue}
             return 0}}
         function map(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=map(f,l),
              d$0=caml_call1(f,d),
              r$0=map(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function mapi(f,param)
          {if(param)
            {var
              h=param[5],
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              l$0=mapi(f,l),
              d$0=caml_call2(f,v,d),
              r$0=mapi(f,r);
             return [0,l$0,v,d$0,r$0,h]}
           return 0}
         function fold(f,m,accu)
          {var m$0=m,accu$0=accu;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
                m$0=r,
                accu$0=accu$1;
               continue}
             return accu$0}}
         function for_all(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _t8_=caml_call2(p,v,d);
               if(_t8_)
                {var _t9_=for_all(p,l);
                 if(_t9_){var param$0=r;continue}
                 var _t__=_t9_}
               else
                var _t__=_t8_;
               return _t__}
             return 1}}
         function exists(p,param)
          {var param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                _t5_=caml_call2(p,v,d);
               if(_t5_)
                var _t6_=_t5_;
               else
                {var _t7_=exists(p,l);
                 if(! _t7_){var param$0=r;continue}
                 var _t6_=_t7_}
               return _t6_}
             return 0}}
         function add_min_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(add_min_binding(k,x,l),v,d,r)}
           return singleton(k,x)}
         function add_max_binding(k,x,param)
          {if(param)
            {var r=param[4],d=param[3],v=param[2],l=param[1];
             return bal(l,v,d,add_max_binding(k,x,r))}
           return singleton(k,x)}
         function join(l,v,d,r)
          {if(l)
            {if(r)
              {var
                rh=r[5],
                rr=r[4],
                rd=r[3],
                rv=r[2],
                rl=r[1],
                lh=l[5],
                lr=l[4],
                ld=l[3],
                lv=l[2],
                ll=l[1];
               return (rh + 2 | 0) < lh
                       ?bal(ll,lv,ld,join(lr,v,d,r))
                       :(lh + 2 | 0) < rh
                         ?bal(join(l,v,d,rl),rv,rd,rr)
                         :create(l,v,d,r)}
             return add_max_binding(v,d,l)}
           return add_min_binding(v,d,r)}
         function concat(t,match)
          {if(t)
            {if(match)
              {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
               return join(t,x,d,remove_min_binding(match))}
             return t}
           return match}
         function concat_or_join(t1,v,d,t2)
          {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
         function split(x,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              c=caml_call2(Ord[1],x,v);
             if(0 === c)return [0,l,[0,d],r];
             if(0 <= c)
              {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
               return [0,join(l,v,d,lr),pres,rr]}
             var
              match$0=split(x,l),
              rl=match$0[3],
              pres$0=match$0[2],
              ll=match$0[1];
             return [0,ll,pres$0,join(rl,v,d,r)]}
           return _J_}
         function merge(f,s1,s2)
          {if(s1)
            {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
             if(height(s2) <= h1)
              {var
                match=split(v1,s2),
                r2=match[3],
                d2=match[2],
                l2=match[1],
                _t1_=merge(f,r1,r2),
                _t2_=caml_call3(f,v1,[0,d1],d2);
               return concat_or_join(merge(f,l1,l2),v1,_t2_,_t1_)}}
           else
            if(! s2)return 0;
           if(s2)
            {var
              r2$0=s2[4],
              d2$0=s2[3],
              v2=s2[2],
              l2$0=s2[1],
              match$0=split(v2,s1),
              r1$0=match$0[3],
              d1$0=match$0[2],
              l1$0=match$0[1],
              _t3_=merge(f,r1$0,r2$0),
              _t4_=caml_call3(f,v2,d1$0,[0,d2$0]);
             return concat_or_join(merge(f,l1$0,l2$0),v2,_t4_,_t3_)}
           throw [0,Assert_failure,_K_]}
         function union(f,s1,s2)
          {if(s1)
            {if(s2)
              {var
                h2=s2[5],
                r2=s2[4],
                d2=s2[3],
                v2=s2[2],
                l2=s2[1],
                h1=s1[5],
                r1=s1[4],
                d1=s1[3],
                v1=s1[2],
                l1=s1[1];
               if(h2 <= h1)
                {var
                  match=split(v1,s2),
                  r2$0=match[3],
                  d2$0=match[2],
                  l2$0=match[1],
                  l=union(f,l1,l2$0),
                  r=union(f,r1,r2$0);
                 if(d2$0)
                  {var d2$1=d2$0[1];
                   return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
                 return join(l,v1,d1,r)}
               var
                match$0=split(v2,s1),
                r1$0=match$0[3],
                d1$0=match$0[2],
                l1$0=match$0[1],
                l$0=union(f,l1$0,l2),
                r$0=union(f,r1$0,r2);
               if(d1$0)
                {var d1$1=d1$0[1];
                 return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
               return join(l$0,v2,d2,r$0)}
             var s=s1}
           else
            var s=s2;
           return s}
         function filter(p,m)
          {if(m)
            {var
              r=m[4],
              d=m[3],
              v=m[2],
              l=m[1],
              l$0=filter(p,l),
              pvd=caml_call2(p,v,d),
              r$0=filter(p,r);
             if(pvd)
              {if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
             return concat(l$0,r$0)}
           return 0}
         function partition(p,param)
          {if(param)
            {var
              r=param[4],
              d=param[3],
              v=param[2],
              l=param[1],
              match=partition(p,l),
              lf=match[2],
              lt=match[1],
              pvd=caml_call2(p,v,d),
              match$0=partition(p,r),
              rf=match$0[2],
              rt=match$0[1];
             if(pvd){var _tZ_=concat(lf,rf);return [0,join(lt,v,d,rt),_tZ_]}
             var _t0_=join(lf,v,d,rf);
             return [0,concat(lt,rt),_t0_]}
           return _L_}
         function cons_enum(m,e)
          {var m$0=m,e$0=e;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                m$1=m$0[1],
                e$1=[0,v,d,r,e$0],
                m$0=m$1,
                e$0=e$1;
               continue}
             return e$0}}
         function compare(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  c=caml_call2(Ord[1],v1,v2);
                 if(0 === c)
                  {var c$0=caml_call2(cmp,d1,d2);
                   if(0 === c$0)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   return c$0}
                 return c}
               return 1}
             return e2?-1:0}}
         function equal(cmp,m1,m2)
          {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
           for(;;)
            {if(e1)
              {if(e2)
                {var
                  e2$0=e2[4],
                  r2=e2[3],
                  d2=e2[2],
                  v2=e2[1],
                  e1$0=e1[4],
                  r1=e1[3],
                  d1=e1[2],
                  v1=e1[1],
                  _tW_=0 === caml_call2(Ord[1],v1,v2)?1:0;
                 if(_tW_)
                  {var _tX_=caml_call2(cmp,d1,d2);
                   if(_tX_)
                    {var
                      e2$1=cons_enum(r2,e2$0),
                      e1$1=cons_enum(r1,e1$0),
                      e1=e1$1,
                      e2=e2$1;
                     continue}
                   var _tY_=_tX_}
                 else
                  var _tY_=_tW_;
                 return _tY_}
               return 0}
             return e2?0:1}}
         function cardinal(param)
          {if(param)
            {var r=param[4],l=param[1],_tV_=cardinal(r);
             return (cardinal(l) + 1 | 0) + _tV_ | 0}
           return 0}
         function bindings_aux(accu,param)
          {var accu$0=accu,param$0=param;
           for(;;)
            {if(param$0)
              {var
                r=param$0[4],
                d=param$0[3],
                v=param$0[2],
                l=param$0[1],
                accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
                accu$0=accu$1,
                param$0=l;
               continue}
             return accu$0}}
         function bindings(s){return bindings_aux(0,s)}
         function add_seq(i,m)
          {return fold_left
                   (function(m,param)
                     {var v=param[2],k=param[1];return add(k,v,m)},
                    m,
                    i)}
         function of_seq(i){return add_seq(i,empty)}
         function seq_of_enum(c,param)
          {if(c)
            {var rest=c[4],t=c[3],v=c[2],k=c[1],_tT_=cons_enum(t,rest);
             return [0,[0,k,v],function(_tU_){return seq_of_enum(_tT_,_tU_)}]}
           return 0}
         function to_seq(m)
          {var _tR_=cons_enum(m,0);
           return function(_tS_){return seq_of_enum(_tR_,_tS_)}}
         function to_seq_from(low,m)
          {var m$0=m,c=0;
           for(;;)
            {if(m$0)
              {var
                r=m$0[4],
                d=m$0[3],
                v=m$0[2],
                l=m$0[1],
                n=caml_call2(Ord[1],v,low);
               if(0 !== n)
                {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
                 var m$0=r;
                 continue}
               var _tP_=[0,v,d,r,c]}
             else
              var _tP_=c;
             return function(_tQ_){return seq_of_enum(_tP_,_tQ_)}}}
         return [0,
                 empty,
                 is_empty,
                 mem,
                 add,
                 update,
                 singleton,
                 remove,
                 merge,
                 union,
                 compare,
                 equal,
                 iter,
                 fold,
                 for_all,
                 exists,
                 filter,
                 partition,
                 cardinal,
                 bindings,
                 min_binding,
                 min_binding_opt,
                 max_binding,
                 max_binding_opt,
                 min_binding,
                 min_binding_opt,
                 split,
                 find,
                 find_opt,
                 find_first,
                 find_first_opt,
                 find_last,
                 find_last_opt,
                 map,
                 mapi,
                 to_seq,
                 to_seq_from,
                 add_seq,
                 of_seq]}];
    caml_register_global(771,Stdlib_map,"Stdlib__map");
    var Empty=[248,cst_Stdlib_Stack_Empty,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function copy$3(s){return [0,s[1],s[2]]}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _tN_=s[1];
      if(_tN_)
       {var tl=_tN_[2],hd=_tN_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function pop_opt(s)
     {var _tM_=s[1];
      if(_tM_)
       {var tl=_tM_[2],hd=_tM_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top(s)
     {var _tL_=s[1];if(_tL_){var hd=_tL_[1];return hd}throw Empty}
    function top_opt(s)
     {var _tK_=s[1];if(_tK_){var hd=_tK_[1];return [0,hd]}return 0}
    function is_empty(s){return 0 === s[1]?1:0}
    function length$1(s){return s[2]}
    function iter$7(f,s){return iter$2(f,s[1])}
    function fold$1(f,acc,s){return fold_left$0(f,acc,s[1])}
    function to_seq$6(s){return to_seq$1(s[1])}
    function add_seq(q,i){return iter(function(x){return push(x,q)},i)}
    function of_seq$4(g){var s=create$0(0);add_seq(s,g);return s}
    var
     Stdlib_stack=
      [0,
       Empty,
       create$0,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy$3,
       is_empty,
       length$1,
       iter$7,
       fold$1,
       to_seq$6,
       add_seq,
       of_seq$4];
    caml_register_global(772,Stdlib_stack,"Stdlib__stack");
    var Empty$0=[248,cst_Stdlib_Queue_Empty,caml_fresh_oo_id(0)];
    function create$1(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_tJ_=q[3];
      return _tJ_
              ?(q[1] = q[1] + 1 | 0,_tJ_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek(q)
     {var _tI_=q[2];if(_tI_){var content=_tI_[1];return content}throw Empty$0}
    function peek_opt(q)
     {var _tH_=q[2];if(_tH_){var content=_tH_[1];return [0,content]}return 0}
    function take(q)
     {var _tF_=q[2];
      if(_tF_)
       {var _tG_=_tF_[1];
        if(_tF_[2])
         {var next=_tF_[2];q[1] = q[1] - 1 | 0;q[2] = next;return _tG_}
        clear$0(q);
        return _tG_}
      throw Empty$0}
    function take_opt(q)
     {var _tD_=q[2];
      if(_tD_)
       {var _tE_=_tD_[1];
        if(_tD_[2])
         {var next=_tD_[2];q[1] = q[1] - 1 | 0;q[2] = next;return [0,_tE_]}
        clear$0(q);
        return [0,_tE_]}
      return 0}
    function copy$4(q)
     {var q_res=[0,q[1],0,0],prev=0,cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2],res=[0,content,0];
          if(prev)prev[2] = res;else q_res[2] = res;
          var prev=res,cell=next;
          continue}
        q_res[3] = prev;
        return q_res}}
    function is_empty$0(q){return 0 === q[1]?1:0}
    function length$2(q){return q[1]}
    function iter$8(f,q)
     {var cell=q[2];
      for(;;)
       {if(cell)
         {var content=cell[1],next=cell[2];
          caml_call1(f,content);
          var cell=next;
          continue}
        return 0}}
    function fold$2(f,accu$1,q)
     {var accu=accu$1,cell=q[2];
      for(;;)
       {if(cell)
         {var
           content=cell[1],
           next=cell[2],
           accu$0=caml_call2(f,accu,content),
           accu=accu$0,
           cell=next;
          continue}
        return accu}}
    function transfer(q1,q2)
     {var _tB_=0 < q1[1]?1:0;
      if(_tB_)
       {var _tC_=q2[3];
        return _tC_
                ?(q2[1]
                  =
                  q2[1]
                  +
                  q1[1]
                  |
                  0,
                  _tC_[2]
                  =
                  q1[2],
                  q2[3]
                  =
                  q1[3],
                  clear$0(q1))
                :(q2[1] = q1[1],q2[2] = q1[2],q2[3] = q1[3],clear$0(q1))}
      return _tB_}
    function to_seq$7(q)
     {function aux(c,param)
       {if(c)
         {var x=c[1],next=c[2];
          return [0,x,function(_tA_){return aux(next,_tA_)}]}
        return 0}
      var _ty_=q[2];
      return function(_tz_){return aux(_ty_,_tz_)}}
    function add_seq$0(q,i){return iter(function(x){return add(x,q)},i)}
    function of_seq$5(g){var q=create$1(0);add_seq$0(q,g);return q}
    var
     Stdlib_queue=
      [0,
       Empty$0,
       create$1,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear$0,
       copy$4,
       is_empty$0,
       length$2,
       iter$8,
       fold$2,
       transfer,
       to_seq$7,
       add_seq$0,
       of_seq$5];
    caml_register_global(773,Stdlib_queue,"Stdlib__queue");
    var Undefined=[248,cst_CamlinternalLazy_Undefined,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function force_val_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      var result=caml_call1(closure,0);
      caml_obj_make_forward(blk,result);
      return result}
    function force(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_lazy_block(lzv)}
    function force_val(lzv)
     {var t=caml_obj_tag(lzv);
      return t === 250?lzv[1]:t !== 246?lzv:force_val_lazy_block(lzv)}
    var
     CamlinternalLazy=
      [0,Undefined,force_lazy_block,force_val_lazy_block,force,force_val];
    caml_register_global(774,CamlinternalLazy,"CamlinternalLazy");
    function from_fun(f){var x=caml_obj_block(246,1);x[1] = f;return x}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 253)return v;
      return runtime.caml_lazy_make_forward(v)}
    function is_val(l){return caml_obj_tag(l) !== 246?1:0}
    var
     Stdlib_lazy=
      [0,
       Undefined,
       force_val,
       from_fun,
       from_val,
       is_val,
       from_fun,
       from_val,
       is_val];
    caml_register_global(775,Stdlib_lazy,"Stdlib__lazy");
    var
     Failure$0=[248,cst_Stdlib_Stream_Failure,caml_fresh_oo_id(0)],
     Error=[248,cst_Stdlib_Stream_Error,caml_fresh_oo_id(0)];
    function count(param)
     {if(param){var match=param[1],count=match[1];return count}return 0}
    function data(param)
     {if(param){var match=param[1],data=match[2];return data}return 0}
    function fill_buff(b)
     {b[3] = input(b[1],b[2],0,caml_ml_bytes_length(b[2]));b[4] = 0;return 0}
    function get_data(count,d)
     {var d$0=d;
      for(;;)
       {if(typeof d$0 !== "number")
         switch(d$0[0])
          {case 1:
            var d2=d$0[2],d1=d$0[1],match=get_data(count,d1);
            if(typeof match === "number")
             {var d$0=d2;continue}
            else
             {if(0 === match[0])
               {var d11=match[2],a=match[1];return [0,a,[1,d11,d2]]}
              throw [0,Assert_failure,_M_]}
           case 2:
            var
             f=d$0[1],
             _tu_=caml_obj_tag(f),
             d$1=250 === _tu_?f[1]:246 === _tu_?force_lazy_block(f):f,
             d$0=d$1;
            continue;
           case 3:
            var _tv_=d$0[1],_tw_=_tv_[1];
            if(_tw_)
             {var _tx_=_tw_[1];
              if(_tx_){var a$0=_tx_[1];_tv_[1] = 0;return [0,a$0,d$0]}
              return 0}
            var match$0=caml_call1(_tv_[2],count);
            if(match$0){var a$1=match$0[1];return [0,a$1,d$0]}
            _tv_[1] = _N_;
            return 0;
           case 4:
            var b=d$0[1];
            if(b[3] <= b[4])fill_buff(b);
            if(0 === b[3])return 0;
            var r=caml_bytes_unsafe_get(b[2],b[4]);
            b[4] = b[4] + 1 | 0;
            return [0,r,d$0]
           }
        return d$0}}
    function peek_data(s)
     {for(;;)
       {var _tp_=s[2];
        if(typeof _tp_ === "number")
         return 0;
        else
         switch(_tp_[0])
          {case 0:var a=_tp_[1];return [0,a];
           case 1:
            var d=get_data(s[1],s[2]);
            if(typeof d === "number")
             return 0;
            else
             {if(0 === d[0]){var a$0=d[1];s[2] = d;return [0,a$0]}
              throw [0,Assert_failure,_O_]}
           case 2:
            var
             f=_tp_[1],
             _tq_=caml_obj_tag(f),
             _tr_=250 === _tq_?f[1]:246 === _tq_?force_lazy_block(f):f;
            s[2] = _tr_;
            continue;
           case 3:
            var _ts_=_tp_[1],_tt_=_ts_[1];
            if(_tt_){var a$1=_tt_[1];return a$1}
            var x=caml_call1(_ts_[2],s[1]);
            _ts_[1] = [0,x];
            return x;
           default:
            var b=_tp_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :[0,caml_bytes_unsafe_get(b[2],b[4])]}}}
    function peek$0(param)
     {if(param){var s=param[1];return peek_data(s)}return 0}
    function junk_data(s)
     {for(;;)
       {var _tn_=s[2];
        if(typeof _tn_ !== "number")
         switch(_tn_[0])
          {case 0:var d=_tn_[2];s[1] = s[1] + 1 | 0;s[2] = d;return 0;
           case 3:
            var _to_=_tn_[1];
            if(_to_[1]){s[1] = s[1] + 1 | 0;_to_[1] = 0;return 0}
            break;
           case 4:
            var b=_tn_[1];
            if(b[3] <= b[4])fill_buff(b);
            return 0 === b[3]
                    ?(s[2] = 0,0)
                    :(s[1] = s[1] + 1 | 0,b[4] = b[4] + 1 | 0,0)
           }
        var match=peek_data(s);
        if(match)continue;
        return 0}}
    function junk(param)
     {if(param){var data=param[1];return junk_data(data)}return 0}
    function nget_data(n,s)
     {if(0 < n)
       {var match=peek_data(s);
        if(match)
         {var a=match[1];
          junk_data(s);
          var
           match$0=nget_data(n - 1 | 0,s),
           k=match$0[3],
           d=match$0[2],
           al=match$0[1];
          return [0,[0,a,al],[0,a,d],k + 1 | 0]}
        return [0,0,s[2],0]}
      return [0,0,s[2],0]}
    function npeek(n,param)
     {if(param)
       {var
         d$0=param[1],
         match=nget_data(n,d$0),
         len=match[3],
         d=match[2],
         al=match[1];
        d$0[1] = d$0[1] - len | 0;
        d$0[2] = d;
        return al}
      return 0}
    function next(s)
     {var match=peek$0(s);
      if(match){var a=match[1];junk(s);return a}
      throw Failure$0}
    function empty$1(s){var match=peek$0(s);if(match)throw Failure$0;return 0}
    function iter$9(f,strm)
     {for(;;)
       {var match=peek$0(strm);
        if(match){var a=match[1];junk(strm);caml_call1(f,a);continue}
        return 0}}
    function from(f){return [0,[0,0,[3,[0,0,f]]]]}
    function of_list$1(l)
     {var _tm_=0;
      return [0,[0,0,fold_right(function(x,l){return [0,x,l]},l,_tm_)]]}
    function of_string$0(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_string_length(s)
                         ?(count[1]++,[0,caml_string_get(s,c)])
                         :0})}
    function of_bytes(s)
     {var count=[0,0];
      return from
              (function(param)
                {var c=count[1];
                 return c < caml_ml_bytes_length(s)
                         ?(count[1]++,[0,caml_bytes_get(s,c)])
                         :0})}
    function of_channel(ic)
     {return [0,[0,0,[4,[0,ic,caml_create_bytes(4096),0,0]]]]}
    function iapp(i,s){var _tl_=data(s);return [0,[0,0,[1,data(i),_tl_]]]}
    function icons(i,s){return [0,[0,0,[0,i,data(s)]]]}
    function ising(i){return [0,[0,0,[0,i,0]]]}
    function lapp(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_tj_)
                  {var _tk_=data(s);return [1,data(caml_call1(f,0)),_tk_]}]]]]}
    function lcons(f,s)
     {return [0,
              [0,
               0,
               [2,
                [246,
                 function(_th_)
                  {var _ti_=data(s);return [0,caml_call1(f,0),_ti_]}]]]]}
    function lsing(f)
     {return [0,[0,0,[2,[246,function(_tg_){return [0,caml_call1(f,0),0]}]]]]}
    var sempty=0;
    function slazy(f)
     {return [0,[0,0,[2,[246,function(_tf_){return data(caml_call1(f,0))}]]]]}
    function dump_data(f,param)
     {if(typeof param === "number")
       return print_string(cst_Sempty);
      else
       switch(param[0])
        {case 0:
          var d=param[2],a=param[1];
          print_string(cst_Scons);
          caml_call1(f,a);
          print_string(cst$7);
          dump_data(f,d);
          return print_string(cst$8);
         case 1:
          var d2=param[2],d1=param[1];
          print_string(cst_Sapp);
          dump_data(f,d1);
          print_string(cst$9);
          dump_data(f,d2);
          return print_string(cst$10);
         case 2:return print_string(cst_Slazy);
         case 3:return print_string(cst_Sgen);
         default:return print_string(cst_Sbuffio)}}
    function dump(f,s)
     {print_string(cst_count);
      print_int(count(s));
      print_string(cst_data);
      dump_data(f,data(s));
      print_string(cst$6);
      return print_newline(0)}
    var
     Stdlib_stream=
      [0,
       Failure$0,
       Error,
       from,
       of_list$1,
       of_string$0,
       of_bytes,
       of_channel,
       iter$9,
       next,
       empty$1,
       peek$0,
       junk,
       count,
       npeek,
       iapp,
       icons,
       ising,
       lapp,
       lcons,
       lsing,
       sempty,
       slazy,
       dump];
    caml_register_global(776,Stdlib_stream,"Stdlib__stream");
    function create$2(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function to_bytes(b){return sub(b[1],0,b[2])}
    function sub$3(b,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((b[2] - len | 0) < ofs))
       return sub_string(b[1],ofs,len);
      return invalid_arg(cst_Buffer_sub)}
    function blit$3(src,srcoff,dst,dstoff,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        srcoff
        &&
        !
        ((src[2] - len | 0) < srcoff)
        &&
        0
        <=
        dstoff
        &&
        !
        ((caml_ml_bytes_length(dst) - len | 0) < dstoff))
       return caml_blit_bytes(src[1],srcoff,dst,dstoff,len);
      return invalid_arg(cst_Buffer_blit)}
    function nth$0(b,ofs)
     {if(0 <= ofs && ! (b[2] <= ofs))return caml_bytes_unsafe_get(b[1],ofs);
      return invalid_arg(cst_Buffer_nth)}
    function length$3(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(cst_Buffer_add_cannot_grow_buf);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_P_]}
        throw [0,Assert_failure,_Q_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_utf_8_uchar(b,u)
     {if(0 <= u)
       {if(127 < u)
         {if(2047 < u)
           {if(65535 < u)
             {if(1114111 < u)throw [0,Assert_failure,_R_];
              var pos=b[2];
              if(b[3] < (pos + 4 | 0))resize(b,4);
              caml_bytes_unsafe_set(b[1],pos,240 | u >>> 18 | 0);
              caml_bytes_unsafe_set
               (b[1],pos + 1 | 0,128 | (u >>> 12 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 2 | 0,128 | (u >>> 6 | 0) & 63);
              caml_bytes_unsafe_set(b[1],pos + 3 | 0,128 | u & 63);
              b[2] = pos + 4 | 0;
              return 0}
            var pos$0=b[2];
            if(b[3] < (pos$0 + 3 | 0))resize(b,3);
            caml_bytes_unsafe_set(b[1],pos$0,224 | u >>> 12 | 0);
            caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,128 | (u >>> 6 | 0) & 63);
            caml_bytes_unsafe_set(b[1],pos$0 + 2 | 0,128 | u & 63);
            b[2] = pos$0 + 3 | 0;
            return 0}
          var pos$1=b[2];
          if(b[3] < (pos$1 + 2 | 0))resize(b,2);
          caml_bytes_unsafe_set(b[1],pos$1,192 | u >>> 6 | 0);
          caml_bytes_unsafe_set(b[1],pos$1 + 1 | 0,128 | u & 63);
          b[2] = pos$1 + 2 | 0;
          return 0}
        return add_char(b,u)}
      throw [0,Assert_failure,_S_]}
    function add_utf_16be_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_T_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo & 255);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u >>> 8 | 0);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u & 255);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_U_]}
    function add_utf_16le_uchar(b,u)
     {if(0 <= u)
       {if(65535 < u)
         {if(1114111 < u)throw [0,Assert_failure,_V_];
          var
           u$0=u - 65536 | 0,
           hi=55296 | u$0 >>> 10 | 0,
           lo=56320 | u$0 & 1023,
           pos=b[2];
          if(b[3] < (pos + 4 | 0))resize(b,4);
          caml_bytes_unsafe_set(b[1],pos,hi & 255);
          caml_bytes_unsafe_set(b[1],pos + 1 | 0,hi >>> 8 | 0);
          caml_bytes_unsafe_set(b[1],pos + 2 | 0,lo & 255);
          caml_bytes_unsafe_set(b[1],pos + 3 | 0,lo >>> 8 | 0);
          b[2] = pos + 4 | 0;
          return 0}
        var pos$0=b[2];
        if(b[3] < (pos$0 + 2 | 0))resize(b,2);
        caml_bytes_unsafe_set(b[1],pos$0,u & 255);
        caml_bytes_unsafe_set(b[1],pos$0 + 1 | 0,u >>> 8 | 0);
        b[2] = pos$0 + 2 | 0;
        return 0}
      throw [0,Assert_failure,_W_]}
    function add_substring(b,s,offset,len)
     {var _tc_=offset < 0?1:0;
      if(_tc_)
       var _td_=_tc_;
      else
       var
        _te_=len < 0?1:0,
        _td_=_te_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_td_)invalid_arg(cst_Buffer_add_substring_add_s);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,offset,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_subbytes(b,s,offset,len)
     {return add_substring(b,caml_string_of_bytes(s),offset,len)}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function add_bytes(b,s){return add_string(b,caml_string_of_bytes(s))}
    function add_buffer(b,bs){return add_subbytes(b,bs[1],0,bs[2])}
    function add_channel(b,ic,len)
     {var _ta_=len < 0?1:0,_tb_=_ta_ || (max_string_length < len?1:0);
      if(_tb_)invalid_arg(cst_Buffer_add_channel);
      if(b[3] < (b[2] + len | 0))resize(b,len);
      var already_read=0,ofs=b[2],to_read=len,_s$_=b[1];
      for(;;)
       {if(0 !== to_read)
         {var r=input(ic,_s$_,ofs,to_read);
          if(0 !== r)
           {var
             already_read$0=already_read + r | 0,
             ofs$0=ofs + r | 0,
             to_read$0=to_read - r | 0,
             already_read=already_read$0,
             ofs=ofs$0,
             to_read=to_read$0;
            continue}}
        if((b[2] + already_read | 0) <= b[3])
         {b[2] = b[2] + already_read | 0;
          if(already_read < len)throw End_of_file;
          return 0}
        throw [0,Assert_failure,_X_]}}
    function output_buffer(oc,b){return output(oc,b[1],0,b[2])}
    function add_substitute(b,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {if(i$7 < lim$1)
         {var current=caml_string_get(s,i$7);
          if(36 === current)
           {if(92 === previous)
             {add_char(b,current);
              var i$8=i$7 + 1 | 0,previous=32,i$7=i$8;
              continue}
            var start=i$7 + 1 | 0;
            if(lim$1 <= start)throw Not_found;
            var opening=caml_string_get(s,start),switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var i$6=start + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$6;
              for(;;)
               {if(lim$0 <= i$3)
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(91 <= match)
                   {if(97 <= match)
                     {if(! (123 <= match))switch$1 = 1}
                    else
                     if(95 === match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(65 <= match)switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                  var stop=i$3}
                var match$0=[0,sub$0(s,start,stop - start | 0),stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var i$5=start + 1 | 0,k$2=0;
              if(40 === opening)
               var _s9_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_Y_];var _s9_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(lim <= i)throw Not_found;
                if(caml_string_get(s,i) === opening)
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(caml_string_get(s,i) !== _s9_)
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,sub$0(s,i$5,(i - start | 0) - 1 | 0),i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(b,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(92 === previous)
           {add_char(b,92);
            add_char(b,current);
            var i$9=i$7 + 1 | 0,previous=32,i$7=i$9;
            continue}
          if(92 === current)
           {var i$10=i$7 + 1 | 0,previous=current,i$7=i$10;continue}
          add_char(b,current);
          var i$11=i$7 + 1 | 0,previous=current,i$7=i$11;
          continue}
        var _s__=92 === previous?1:0;
        return _s__?add_char(b,previous):_s__}}
    function truncate(b,len)
     {if(0 <= len && ! (b[2] < len)){b[2] = len;return 0}
      return invalid_arg(cst_Buffer_truncate)}
    function to_seq$8(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_s7_=i + 1 | 0;
        return [0,x,function(_s8_){return aux(_s7_,_s8_)}]}
      var _s5_=0;
      return function(_s6_){return aux(_s5_,_s6_)}}
    function to_seqi$3(b)
     {function aux(i,param)
       {if(b[2] <= i)return 0;
        var x=caml_bytes_unsafe_get(b[1],i),_s3_=i + 1 | 0;
        return [0,[0,i,x],function(_s4_){return aux(_s3_,_s4_)}]}
      var _s1_=0;
      return function(_s2_){return aux(_s1_,_s2_)}}
    function add_seq$1(b,seq)
     {return iter(function(_s0_){return add_char(b,_s0_)},seq)}
    function of_seq$6(i){var b=create$2(32);add_seq$1(b,i);return b}
    function add_int8(b,x)
     {var new_position=b[2] + 1 | 0;
      if(b[3] < new_position)resize(b,1);
      caml_bytes_unsafe_set(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_ne(b,x)
     {var new_position=b[2] + 2 | 0;
      if(b[3] < new_position)resize(b,2);
      caml_bytes_set16(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int32_ne(b,x)
     {var new_position=b[2] + 4 | 0;
      if(b[3] < new_position)resize(b,4);
      caml_bytes_set32(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int64_ne(b,x)
     {var new_position=b[2] + 8 | 0;
      if(b[3] < new_position)resize(b,8);
      caml_bytes_set64(b[1],b[2],x);
      b[2] = new_position;
      return 0}
    function add_int16_le(b,x){return add_int16_ne(b,x)}
    function add_int16_be(b,x)
     {var x$0=caml_bswap16(x);return add_int16_ne(b,x$0)}
    function add_int32_le(b,x){return add_int32_ne(b,x)}
    function add_int32_be(b,x)
     {var x$0=caml_int32_bswap(x);return add_int32_ne(b,x$0)}
    function add_int64_le(b,x){return add_int64_ne(b,x)}
    function add_int64_be(b,x)
     {var x$0=caml_int64_bswap(x);return add_int64_ne(b,x$0)}
    var
     Stdlib_buffer=
      [0,
       create$2,
       contents,
       to_bytes,
       sub$3,
       blit$3,
       nth$0,
       length$3,
       clear$1,
       reset,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       output_buffer,
       truncate,
       to_seq$8,
       to_seqi$3,
       add_seq$1,
       of_seq$6,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
    caml_register_global(777,Stdlib_buffer,"Stdlib__buffer");
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function freeze_char_set(char_set){return to_string$1(char_set)}
    function rev_char_set(char_set)
     {var char_set$0=create_char_set(0),i=0;
      for(;;)
       {caml_bytes_set
         (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
        var _sZ_=i + 1 | 0;
        if(31 !== i){var i=_sZ_;continue}
        return caml_string_of_bytes(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_sY_=[0,ndec];else var _sY_=0;
          return [0,[8,_Z_,pad_of_pad_opt(pad_opt$5),_sY_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _sW_=len < min_len?1:0;
      if(_sW_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _sX_=0}
      else
       var _sX_=_sW_;
      return _sX_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_padty(buf,padty)
     {switch(padty)
       {case 0:return buffer_add_char(buf,45);
        case 1:return 0;
        default:return buffer_add_char(buf,48)}}
    function bprint_ignored_flag(buf,ign_flag)
     {return ign_flag?buffer_add_char(buf,95):ign_flag}
    function bprint_pad_opt(buf,pad_opt)
     {if(pad_opt)
       {var width=pad_opt[1];
        return buffer_add_string(buf,caml_string_of_jsbytes("" + width))}
      return 0}
    function bprint_padding(buf,pad)
     {if(typeof pad === "number")
       return 0;
      else
       {if(0 === pad[0])
         {var n=pad[2],padty=pad[1];
          bprint_padty(buf,padty);
          return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
        var padty$0=pad[1];
        bprint_padty(buf,padty$0);
        return buffer_add_char(buf,42)}}
    function bprint_precision(buf,prec)
     {if(typeof prec === "number")return prec?buffer_add_string(buf,cst$11):0;
      var n=prec[1];
      buffer_add_char(buf,46);
      return buffer_add_string(buf,caml_string_of_jsbytes("" + n))}
    function bprint_iconv_flag(buf,iconv)
     {switch(iconv)
       {case 1:
        case 4:return buffer_add_char(buf,43);
        case 2:
        case 5:return buffer_add_char(buf,32);
        case 7:
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:return buffer_add_char(buf,35);
        default:return 0}}
    function bprint_altint_fmt(buf,ign_flag,iconv,pad,prec,c)
     {buffer_add_char(buf,37);
      bprint_ignored_flag(buf,ign_flag);
      bprint_iconv_flag(buf,iconv);
      bprint_padding(buf,pad);
      bprint_precision(buf,prec);
      buffer_add_char(buf,c);
      return buffer_add_char(buf,char_of_iconv(iconv))}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return cst$12;
         case 1:return cst$13;
         case 2:return cst$14;
         case 3:return cst$15;
         case 4:return cst$16;
         case 5:return cst$17;
         default:return cst$18}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(cst$19,make$0(1,c))}}
    function bprint_char_literal(buf,chr)
     {return 37 === chr?buffer_add_string(buf,cst$20):buffer_add_char(buf,chr)}
    function bprint_string_literal(buf,str)
     {var _sU_=caml_ml_string_length(str) - 1 | 0,_sT_=0;
      if(! (_sU_ < 0))
       {var i=_sT_;
        for(;;)
         {bprint_char_literal(buf,caml_string_get(str,i));
          var _sV_=i + 1 | 0;
          if(_sU_ !== i){var i=_sV_;continue}
          break}}
      return 0}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,cst_c);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,cst_s);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,cst_i);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,cst_li);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,cst_ni);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,cst_Li);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,cst_f);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,cst_B);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,cst$21);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,cst$22);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,cst$23);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,cst$24);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,cst_a);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,cst_t$0);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,cst$25);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,cst_r$0);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,cst_r$1);
           var fmtty$0=rest$13;
           continue}}
    function int_of_custom_arity(param)
     {if(param){var x=param[1];return 1 + int_of_custom_arity(x) | 0}return 0}
    function string_of_fmt(fmt$1)
     {var buf=buffer_create(16),fmt=fmt$1,ign_flag=0;
      a:
      for(;;)
       if(typeof fmt === "number")
        return buffer_contents(buf);
       else
        switch(fmt[0])
         {case 0:
           var rest=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,99);
           var fmt=rest,ign_flag=0;
           continue;
          case 1:
           var rest$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,67);
           var fmt=rest$0,ign_flag=0;
           continue;
          case 2:
           var rest$1=fmt[2],pad=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad);
           buffer_add_char(buf,115);
           var fmt=rest$1,ign_flag=0;
           continue;
          case 3:
           var rest$2=fmt[2],pad$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$0);
           buffer_add_char(buf,83);
           var fmt=rest$2,ign_flag=0;
           continue;
          case 4:
           var rest$3=fmt[4],prec=fmt[3],pad$1=fmt[2],iconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_iconv_flag(buf,iconv);
           bprint_padding(buf,pad$1);
           bprint_precision(buf,prec);
           buffer_add_char(buf,char_of_iconv(iconv));
           var fmt=rest$3,ign_flag=0;
           continue;
          case 5:
           var rest$4=fmt[4],prec$0=fmt[3],pad$2=fmt[2],iconv$0=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$0,pad$2,prec$0,108);
           var fmt=rest$4,ign_flag=0;
           continue;
          case 6:
           var rest$5=fmt[4],prec$1=fmt[3],pad$3=fmt[2],iconv$1=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$1,pad$3,prec$1,110);
           var fmt=rest$5,ign_flag=0;
           continue;
          case 7:
           var rest$6=fmt[4],prec$2=fmt[3],pad$4=fmt[2],iconv$2=fmt[1];
           bprint_altint_fmt(buf,ign_flag,iconv$2,pad$4,prec$2,76);
           var fmt=rest$6,ign_flag=0;
           continue;
          case 8:
           var rest$7=fmt[4],prec$3=fmt[3],pad$5=fmt[2],fconv=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_fconv_flag(buf,fconv);
           bprint_padding(buf,pad$5);
           bprint_precision(buf,prec$3);
           buffer_add_char(buf,char_of_fconv(0,fconv));
           var fmt=rest$7,ign_flag=0;
           continue;
          case 9:
           var rest$8=fmt[2],pad$6=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_padding(buf,pad$6);
           buffer_add_char(buf,66);
           var fmt=rest$8,ign_flag=0;
           continue;
          case 10:
           var rest$9=fmt[1];
           buffer_add_string(buf,cst$26);
           var fmt=rest$9;
           continue;
          case 11:
           var rest$10=fmt[2],str=fmt[1];
           bprint_string_literal(buf,str);
           var fmt=rest$10;
           continue;
          case 12:
           var rest$11=fmt[2],chr$0=fmt[1];
           bprint_char_literal(buf,chr$0);
           var fmt=rest$11;
           continue;
          case 13:
           var rest$12=fmt[3],fmtty=fmt[2],pad_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt);
           buffer_add_char(buf,123);
           bprint_fmtty(buf,fmtty);
           buffer_add_char(buf,37);
           buffer_add_char(buf,125);
           var fmt=rest$12,ign_flag=0;
           continue;
          case 14:
           var rest$13=fmt[3],fmtty$0=fmt[2],pad_opt$0=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,pad_opt$0);
           buffer_add_char(buf,40);
           bprint_fmtty(buf,fmtty$0);
           buffer_add_char(buf,37);
           buffer_add_char(buf,41);
           var fmt=rest$13,ign_flag=0;
           continue;
          case 15:
           var rest$14=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,97);
           var fmt=rest$14,ign_flag=0;
           continue;
          case 16:
           var rest$15=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,116);
           var fmt=rest$15,ign_flag=0;
           continue;
          case 17:
           var rest$16=fmt[2],fmting_lit=fmt[1];
           bprint_string_literal(buf,string_of_formatting_lit(fmting_lit));
           var fmt=rest$16;
           continue;
          case 18:
           var rest$17=fmt[2],fmting_gen=fmt[1];
           if(0 === fmting_gen[0])
            {var match$1=fmting_gen[1],str$0=match$1[2];
             buffer_add_string(buf,cst$27);
             buffer_add_string(buf,str$0)}
           else
            {var match$2=fmting_gen[1],str$1=match$2[2];
             buffer_add_string(buf,cst$28);
             buffer_add_string(buf,str$1)}
           var fmt=rest$17;
           continue;
          case 19:
           var rest$18=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           buffer_add_char(buf,114);
           var fmt=rest$18,ign_flag=0;
           continue;
          case 20:
           var rest$19=fmt[3],char_set=fmt[2],width_opt=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_pad_opt(buf,width_opt);
           var
            print_char=
             function(buf,i)
              {var c=char_of_int(i);
               return 37 === c
                       ?(buffer_add_char(buf,37),buffer_add_char(buf,37))
                       :64 === c
                         ?(buffer_add_char(buf,37),buffer_add_char(buf,64))
                         :buffer_add_char(buf,c)};
           buffer_add_char(buf,91);
           var
            _sJ_=
             is_in_char_set(char_set,0)
              ?(buffer_add_char(buf,94),rev_char_set(char_set))
              :char_set,
            is_alone$0=
             function(_sO_)
              {function is_alone(c)
                {var
                  after=chr(c + 1 | 0),
                  before=chr(c - 1 | 0),
                  _sP_=is_in_char_set(_sO_,c);
                 if(_sP_)
                  var
                   _sQ_=is_in_char_set(_sO_,before),
                   _sR_=_sQ_?is_in_char_set(_sO_,after):_sQ_,
                   _sS_=1 - _sR_;
                 else
                  var _sS_=_sP_;
                 return _sS_}
               return is_alone},
            is_alone=is_alone$0(_sJ_);
           if(is_alone(93))buffer_add_char(buf,93);
           var i=1;
           b:
           for(;;)
            {if(i < 256)
              {if(! is_in_char_set(_sJ_,char_of_int(i)))
                {var i$0=i + 1 | 0,i=i$0;continue}
               var match=char_of_int(i),switcher=match - 45 | 0,switch$0=0;
               if(48 < switcher >>> 0)
                if(210 <= switcher)print_char(buf,255);else switch$0 = 1;
               else
                {var switcher$0=switcher - 1 | 0;
                 if(46 < switcher$0 >>> 0){var i$2=i + 1 | 0,i=i$2;continue}
                 switch$0 = 1}
               if(switch$0)
                {var i$1=i + 1 | 0;
                 if(! is_in_char_set(_sJ_,char_of_int(i$1)))
                  {print_char(buf,i$1 - 1 | 0);
                   var i$6=i$1 + 1 | 0,i=i$6;
                   continue}
                 var
                  match$0=char_of_int(i$1),
                  switcher$1=match$0 - 45 | 0,
                  switch$1=0;
                 if(48 < switcher$1 >>> 0)
                  if(210 <= switcher$1)
                   {print_char(buf,254);print_char(buf,255)}
                  else
                   switch$1 = 1;
                 else
                  {var switcher$2=switcher$1 - 1 | 0;
                   if(46 < switcher$2 >>> 0)
                    {if(! is_in_char_set(_sJ_,char_of_int(i$1 + 1 | 0)))
                      {print_char(buf,i$1 - 1 | 0);
                       var i$5=i$1 + 1 | 0,i=i$5;
                       continue}
                     switch$1 = 1}
                   else
                    switch$1 = 1}
                 if(switch$1)
                  {if(! is_in_char_set(_sJ_,char_of_int(i$1 + 1 | 0)))
                    {print_char(buf,i$1 - 1 | 0);
                     print_char(buf,i$1);
                     var i$4=i$1 + 2 | 0,i=i$4;
                     continue}
                   var j=i$1 + 2 | 0,i$3=i$1 - 1 | 0,j$0=j;
                   for(;;)
                    {if(256 !== j$0 && is_in_char_set(_sJ_,char_of_int(j$0)))
                      {var j$1=j$0 + 1 | 0,j$0=j$1;continue}
                     print_char(buf,i$3);
                     print_char(buf,45);
                     print_char(buf,j$0 - 1 | 0);
                     if(j$0 < 256){var i$7=j$0 + 1 | 0,i=i$7;continue b}
                     break}}}}
             if(is_alone(45))buffer_add_char(buf,45);
             buffer_add_char(buf,93);
             var fmt=rest$19,ign_flag=0;
             continue a}
          case 21:
           var rest$20=fmt[2],counter=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           switch(counter)
            {case 0:var _sK_=108;break;
             case 1:var _sK_=110;break;
             default:var _sK_=78}
           buffer_add_char(buf,_sK_);
           var fmt=rest$20,ign_flag=0;
           continue;
          case 22:
           var rest$21=fmt[1];
           buffer_add_char(buf,37);
           bprint_ignored_flag(buf,ign_flag);
           bprint_string_literal(buf,cst_0c);
           var fmt=rest$21,ign_flag=0;
           continue;
          case 23:
           var
            rest$22=fmt[2],
            ign=fmt[1],
            match$3=param_format_of_ignored_format(ign,rest$22),
            fmt$0=match$3[1],
            fmt=fmt$0,
            ign_flag=1;
           continue;
          default:
           var
            rest$23=fmt[3],
            arity=fmt[1],
            _sM_=int_of_custom_arity(arity),
            _sL_=1;
           if(! (_sM_ < 1))
            {var i$8=_sL_;
             for(;;)
              {buffer_add_char(buf,37);
               bprint_ignored_flag(buf,ign_flag);
               buffer_add_char(buf,63);
               var _sN_=i$8 + 1 | 0;
               if(_sM_ !== i$8){var i$8=_sN_;continue}
               break}}
           var fmt=rest$23,ign_flag=0;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,___]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_sq_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_sq_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_sr_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_sr_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_ss_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_ss_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_st_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_st_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_su_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_su_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_sv_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_sv_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_sw_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_sw_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_sx_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_sx_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_sy_=ty1[2],_sz_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_sA_=trans(_sy_,rest2$7);
              return [8,trans(_sz_,ty2),_sA_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ah_];
          break;
         case 9:
          var switch$10=0,_sB_=ty1[3],_sC_=ty1[2],_sD_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_sC_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_sD_,ty22,trans(_sB_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ai_];
          break;
         case 10:
          var _sE_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_sE_,rest2$9)]}
          throw [0,Assert_failure,_aj_];
         case 11:
          var switch$11=0,_sF_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_sF_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_ak_];
          break;
         case 12:
          var switch$12=0,_sG_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_sG_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_al_];
          break;
         case 13:
          var switch$13=0,_sH_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_sH_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_am_];
          break;
         default:
          var switch$14=0,_sI_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_sI_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_an_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ab_];
        case 1:throw [0,Assert_failure,_ac_];
        case 2:throw [0,Assert_failure,_ad_];
        case 3:throw [0,Assert_failure,_ae_];
        case 4:throw [0,Assert_failure,_af_];
        case 5:throw [0,Assert_failure,_$_];
        case 6:throw [0,Assert_failure,_aa_];
        default:throw [0,Assert_failure,_ag_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _r4_=function(param){return 0},
         _r5_=function(param){return 0},
         _r6_=function(param){return 0};
        return [0,function(param){return 0},_r6_,_r5_,_r4_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _r7_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_r7_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _r8_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _r8_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _r9_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _r9_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _r__=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _r__,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _r$_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _r$_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _sa_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _sa_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _sb_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _sb_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _sc_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _sc_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _sd_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _sd_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _se_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _sf_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _sg_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _sg_,
                  _sf_,
                  _se_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _sh_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _sh_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _si_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _si_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _sj_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _sj_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _sk_=function(param){caml_call1(de$12,0);return 0},
           _sl_=function(param){caml_call1(ed$12,0);return 0},
           _sm_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _sm_,
                  _sl_,
                  _sk_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _sn_=function(param){caml_call1(de$13,0);return 0},
           _so_=function(param){caml_call1(ed$13,0);return 0},
           _sp_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _sp_,
                  _so_,
                  _sn_]}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _r2_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_r3_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _r3_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_r3_,_r2_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    var
     Type_mismatch=
      [248,cst_CamlinternalFormat_Type_mi,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _r1_=match[2];
          if(typeof _r1_ !== "number" && 2 === _r1_[0])
           {var rest=_r1_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _rZ_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_rZ_))
             throw Type_mismatch;
            var _r0_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_r0_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _rI_=match$1[2],
           _rH_=match$1[1];
          if(typeof _rI_ !== "number" && 1 === _rI_[0])
           {var
             fmtty_rest$1=_rI_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_rH_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _rK_=match$3[2],
           _rJ_=match$3[1];
          if(typeof _rK_ !== "number" && 1 === _rK_[0])
           {var
             fmtty_rest$2=_rK_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_rJ_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _rM_=match$5[3],
           _rL_=match$5[1];
          if(typeof _rM_ !== "number" && 2 === _rM_[0])
           {var
             fmtty_rest$3=_rM_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_rL_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _rO_=match$7[3],
           _rN_=match$7[1];
          if(typeof _rO_ !== "number" && 3 === _rO_[0])
           {var
             fmtty_rest$4=_rO_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_rN_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _rQ_=match$9[3],
           _rP_=match$9[1];
          if(typeof _rQ_ !== "number" && 4 === _rQ_[0])
           {var
             fmtty_rest$5=_rQ_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_rP_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _rS_=match$11[3],
           _rR_=match$11[1];
          if(typeof _rS_ !== "number" && 5 === _rS_[0])
           {var
             fmtty_rest$6=_rS_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_rR_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _rU_=match$13[3],
           _rT_=match$13[1];
          if(typeof _rU_ !== "number" && 6 === _rU_[0])
           {var
             fmtty_rest$7=_rU_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_rT_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _rW_=match$15[2],
           _rV_=match$15[1];
          if(typeof _rW_ !== "number" && 7 === _rW_[0])
           {var
             fmtty_rest$8=_rW_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_rV_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _rX_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_rX_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _rY_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_rY_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_rY_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _rG_=type_format_gen(fmt,fmtty);
      if(typeof _rG_[2] === "number"){var fmt$0=_rG_[1];return fmt$0}
      throw Type_mismatch}
    function recast(fmt,fmtty){return type_format(fmt,erase_rel(symm(fmtty)))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _rF_=2 === padty$0?48:32,res=make(width$0,_rF_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_ao_,fconv),
       buf=buffer_create(16);
      buffer_add_char(buf,37);
      bprint_fconv_flag(buf,fconv);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_rA_=caml_ml_string_length(s) - 1 | 0,_rz_=0;
        if(! (_rA_ < 0))
         {var i$0=_rz_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _rE_=i$0 + 1 | 0;
            if(_rA_ !== i$0){var i$0=_rE_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _rC_=caml_ml_string_length(s) - 1 | 0,
         _rB_=0;
        if(! (_rC_ < 0))
         {var i=_rB_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _rD_=i + 1 | 0;
            if(_rC_ !== i){var i=_rD_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _ry_=cst_d$3;break;
        case 2:var _ry_=cst_d$4;break;
        case 4:var _ry_=cst_i$1;break;
        case 5:var _ry_=cst_i$2;break;
        case 6:var _ry_=cst_x;break;
        case 7:var _ry_=cst_x$0;break;
        case 8:var _ry_=cst_X$0;break;
        case 9:var _ry_=cst_X$1;break;
        case 10:var _ry_=cst_o;break;
        case 11:var _ry_=cst_o$0;break;
        case 0:
        case 13:var _ry_=cst_d$2;break;
        case 3:
        case 14:var _ry_=cst_i$0;break;
        default:var _ry_=cst_u}
      return transform_int_alt(iconv,caml_format_int(_ry_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _rx_=cst_ld$0;break;
        case 2:var _rx_=cst_ld$1;break;
        case 4:var _rx_=cst_li$1;break;
        case 5:var _rx_=cst_li$2;break;
        case 6:var _rx_=cst_lx;break;
        case 7:var _rx_=cst_lx$0;break;
        case 8:var _rx_=cst_lX;break;
        case 9:var _rx_=cst_lX$0;break;
        case 10:var _rx_=cst_lo;break;
        case 11:var _rx_=cst_lo$0;break;
        case 0:
        case 13:var _rx_=cst_ld;break;
        case 3:
        case 14:var _rx_=cst_li$0;break;
        default:var _rx_=cst_lu}
      return transform_int_alt(iconv,caml_format_int(_rx_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _rw_=cst_nd$0;break;
        case 2:var _rw_=cst_nd$1;break;
        case 4:var _rw_=cst_ni$1;break;
        case 5:var _rw_=cst_ni$2;break;
        case 6:var _rw_=cst_nx;break;
        case 7:var _rw_=cst_nx$0;break;
        case 8:var _rw_=cst_nX;break;
        case 9:var _rw_=cst_nX$0;break;
        case 10:var _rw_=cst_no;break;
        case 11:var _rw_=cst_no$0;break;
        case 0:
        case 13:var _rw_=cst_nd;break;
        case 3:
        case 14:var _rw_=cst_ni$0;break;
        default:var _rw_=cst_nu}
      return transform_int_alt(iconv,caml_format_int(_rw_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _rv_=cst_Ld$0;break;
        case 2:var _rv_=cst_Ld$1;break;
        case 4:var _rv_=cst_Li$1;break;
        case 5:var _rv_=cst_Li$2;break;
        case 6:var _rv_=cst_Lx;break;
        case 7:var _rv_=cst_Lx$0;break;
        case 8:var _rv_=cst_LX;break;
        case 9:var _rv_=cst_LX$0;break;
        case 10:var _rv_=cst_Lo;break;
        case 11:var _rv_=cst_Lo$0;break;
        case 0:
        case 13:var _rv_=cst_Ld;break;
        case 3:
        case 14:var _rv_=cst_Li$0;break;
        default:var _rv_=cst_Lu}
      return transform_int_alt(iconv,caml_int64_format(_rv_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return runtime.caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=runtime.caml_classify_float(x);
        return 3 === match
                ?x < 0.?cst_neg_infinity:cst_infinity
                :4 <= match?cst_nan:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i=0;
         for(;;)
          {if(i === len)
            var _rt_=0;
           else
            {var match=caml_string_get(str,i),_rs_=match - 46 | 0,switch$0=0;
             if(23 < _rs_ >>> 0)
              {if(55 === _rs_)switch$0 = 1}
             else
              if(21 < (_rs_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
             var _rt_=1}
           var _ru_=_rt_?str:symbol(str,cst$29);
           return caml_special_val(_ru_)}
        case 6:return hex(0);
        case 7:return uppercase_ascii$1(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var
              str=escaped(c),
              l=caml_ml_string_length(str),
              res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _rp_=pad$5[2],_rq_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_rq_,_rp_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_rq_,_rp_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_rq_,_rp_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _rr_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_rr_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_rr_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_rr_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,acc$0,concat_fmt(recast(fmt,fmtty),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _rn_=fmt$0[1];
           if(0 === _rn_[0])
            {var
              rest$13=fmt$0[2],
              match=_rn_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_rn_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_ap_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,cst_Printf_bad_conversion];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(cst_u$0,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param$0(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param$0,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _ro_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_ro_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_ro_])}}
    function make_ignored_param$0(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_aq_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_rm_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_ar_];
         default:throw [0,Assert_failure,_as_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _rl_=[8,acc,cst_Printf_bad_conversion$0];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rl_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_rl_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _rk_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_rk_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_rk_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_ignored_param(k,acc,ign,fmt)
     {return caml_trampoline(make_ignored_param$0(0,k,acc,ign,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _rh_=pad[2],_ri_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_ri_,_rh_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_ri_,_rh_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_ri_,_rh_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _rj_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_rj_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_rj_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_rj_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_iprintf$0(counter,k,o,fmt)
     {var k$0=k,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,o);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_qy_=make_iprintf(k$0,o,rest);
           return function(_rg_){return _qy_};
          case 1:
           var rest$0=fmt$0[1],_qz_=make_iprintf(k$0,o,rest$0);
           return function(_rf_){return _qz_};
          case 2:
           var _qA_=fmt$0[1];
           if(typeof _qA_ === "number")
            {var rest$1=fmt$0[2],_qB_=make_iprintf(k$0,o,rest$1);
             return function(_rb_){return _qB_}}
           else
            {if(0 === _qA_[0])
              {var rest$2=fmt$0[2],_qC_=make_iprintf(k$0,o,rest$2);
               return function(_re_){return _qC_}}
             var
              rest$3=fmt$0[2],
              _qD_=make_iprintf(k$0,o,rest$3),
              _qE_=function(_rd_){return _qD_};
             return function(_rc_){return _qE_}}
          case 3:
           var _qF_=fmt$0[1];
           if(typeof _qF_ === "number")
            {var rest$4=fmt$0[2],_qG_=make_iprintf(k$0,o,rest$4);
             return function(_q9_){return _qG_}}
           else
            {if(0 === _qF_[0])
              {var rest$5=fmt$0[2],_qH_=make_iprintf(k$0,o,rest$5);
               return function(_ra_){return _qH_}}
             var
              rest$6=fmt$0[2],
              _qI_=make_iprintf(k$0,o,rest$6),
              _qJ_=function(_q$_){return _qI_};
             return function(_q__){return _qJ_}}
          case 4:
           var rest$7=fmt$0[4],prec=fmt$0[3],pad=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$7,pad,prec);
          case 5:
           var rest$8=fmt$0[4],prec$0=fmt$0[3],pad$0=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$8,pad$0,prec$0);
          case 6:
           var rest$9=fmt$0[4],prec$1=fmt$0[3],pad$1=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$9,pad$1,prec$1);
          case 7:
           var rest$10=fmt$0[4],prec$2=fmt$0[3],pad$2=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$10,pad$2,prec$2);
          case 8:
           var rest$11=fmt$0[4],prec$3=fmt$0[3],pad$3=fmt$0[2];
           return fn_of_padding_precision(k$0,o,rest$11,pad$3,prec$3);
          case 9:
           var _qK_=fmt$0[1];
           if(typeof _qK_ === "number")
            {var rest$12=fmt$0[2],_qL_=make_iprintf(k$0,o,rest$12);
             return function(_q5_){return _qL_}}
           else
            {if(0 === _qK_[0])
              {var rest$13=fmt$0[2],_qM_=make_iprintf(k$0,o,rest$13);
               return function(_q8_){return _qM_}}
             var
              rest$14=fmt$0[2],
              _qN_=make_iprintf(k$0,o,rest$14),
              _qO_=function(_q7_){return _qN_};
             return function(_q6_){return _qO_}}
          case 10:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 11:var fmt$2=fmt$0[2],fmt$0=fmt$2;continue;
          case 12:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 13:
           var rest$15=fmt$0[3],_qP_=make_iprintf(k$0,o,rest$15);
           return function(_q4_){return _qP_};
          case 14:
           var rest$16=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_iprintf(k$0,o,concat_fmt(recast(fmt,fmtty),rest$16))};
          case 15:
           var
            rest$17=fmt$0[1],
            _qQ_=make_iprintf(k$0,o,rest$17),
            _qR_=function(_q3_){return _qQ_};
           return function(_q2_){return _qR_};
          case 16:
           var rest$18=fmt$0[1],_qS_=make_iprintf(k$0,o,rest$18);
           return function(_q1_){return _qS_};
          case 17:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 18:
           var _qT_=fmt$0[1];
           if(0 === _qT_[0])
            {var
              rest$19=fmt$0[2],
              match=_qT_[1],
              fmt$5=match[1],
              k$3=
               function(k,rest)
                {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
              k$1=k$3(k$0,rest$19),
              k$0=k$1,
              fmt$0=fmt$5;
             continue}
           var
            rest$20=fmt$0[2],
            match$0=_qT_[1],
            fmt$6=match$0[1],
            k$4=
             function(k,rest)
              {function k$0(koc){return make_iprintf(k,koc,rest)}return k$0},
            k$2=k$4(k$0,rest$20),
            k$0=k$2,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_at_];
          case 20:
           var rest$21=fmt$0[3],_qU_=make_iprintf(k$0,o,rest$21);
           return function(_q0_){return _qU_};
          case 21:
           var rest$22=fmt$0[2],_qV_=make_iprintf(k$0,o,rest$22);
           return function(_qZ_){return _qV_};
          case 22:
           var rest$23=fmt$0[1],_qW_=make_iprintf(k$0,o,rest$23);
           return function(_qY_){return _qW_};
          case 23:
           var rest$24=fmt$0[2],ign=fmt$0[1],_qX_=0;
           return make_ignored_param
                   (function(param){return caml_call1(k$0,o)},_qX_,ign,rest$24);
          default:
           var rest$25=fmt$0[3],arity=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fn_of_custom_arity$0(counter$0,k$0,o,rest$25,arity)}
           return caml_trampoline_return
                   (fn_of_custom_arity$0,[0,k$0,o,rest$25,arity])}}
    function fn_of_custom_arity$0(counter,k,o,fmt,param)
     {if(param)
       {var arity=param[1],_qw_=fn_of_custom_arity(k,o,fmt,arity);
        return function(_qx_){return _qw_}}
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_iprintf$0(counter$0,k,o,fmt)}
      return caml_trampoline_return(make_iprintf$0,[0,k,o,fmt])}
    function make_iprintf(k,o,fmt)
     {return caml_trampoline(make_iprintf$0(0,k,o,fmt))}
    function fn_of_custom_arity(k,o,fmt,param)
     {return caml_trampoline(fn_of_custom_arity$0(0,k,o,fmt,param))}
    function fn_of_padding_precision(k,o,fmt,pad,prec)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)
           {var _p4_=make_iprintf(k,o,fmt),_p5_=function(_qk_){return _p4_};
            return function(_qj_){return _p5_}}
          var _p6_=make_iprintf(k,o,fmt);
          return function(_qi_){return _p6_}}
        var _p7_=make_iprintf(k,o,fmt);
        return function(_qh_){return _p7_}}
      else
       {if(0 === pad[0])
         {if(typeof prec === "number")
           {if(prec)
             {var _p8_=make_iprintf(k,o,fmt),_p9_=function(_qv_){return _p8_};
              return function(_qu_){return _p9_}}
            var _p__=make_iprintf(k,o,fmt);
            return function(_qt_){return _p__}}
          var _p$_=make_iprintf(k,o,fmt);
          return function(_qs_){return _p$_}}
        if(typeof prec === "number")
         {if(prec)
           {var
             _qa_=make_iprintf(k,o,fmt),
             _qb_=function(_qr_){return _qa_},
             _qc_=function(_qq_){return _qb_};
            return function(_qp_){return _qc_}}
          var _qd_=make_iprintf(k,o,fmt),_qe_=function(_qo_){return _qd_};
          return function(_qn_){return _qe_}}
        var _qf_=make_iprintf(k,o,fmt),_qg_=function(_qm_){return _qf_};
        return function(_ql_){return _qg_}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _p2_=acc$0[2],_p3_=acc$0[1];
           if(0 === _p2_[0])
            {var acc$1=_p2_[1];
             output_acc(o,_p3_);
             output_string(o,cst$30);
             var acc$0=acc$1;
             continue}
           var acc$2=_p2_[1];
           output_acc(o,_p3_);
           output_string(o,cst$31);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _p0_=acc$0[2],_p1_=acc$0[1];
           if(0 === _p0_[0])
            {var acc$1=_p0_[1];
             bufput_acc(b,_p1_);
             add_string(b,cst$32);
             var acc$0=acc$1;
             continue}
           var acc$2=_p0_[1];
           bufput_acc(b,_p1_);
           add_string(b,cst$33);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _pY_=acc$0[2],_pZ_=acc$0[1];
           if(0 === _pY_[0])
            {var acc$1=_pY_[1];
             strput_acc(b,_pZ_);
             add_string(b,cst$34);
             var acc$0=acc$1;
             continue}
           var acc$2=_pY_[1];
           strput_acc(b,_pZ_);
           add_string(b,cst$35);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$2(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,cst$36))return _au_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_av_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _pW_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_pW_}
       catch(_pX_)
        {_pX_ = caml_wrap_exception(_pX_);
         if(_pX_[1] !== Failure)throw _pX_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,cst$37)
        &&
        caml_string_notequal(box_name,cst_b$0))
       var
        box_type=
         caml_string_notequal(box_name,cst_h)
          ?caml_string_notequal(box_name,cst_hov)
            ?caml_string_notequal(box_name,cst_hv)
              ?caml_string_notequal(box_name,cst_v)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_aw_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,cst_unexpected_end_of_format)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_ax_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_ay_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_aP_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,cst_digit,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_aQ_]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_aV_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,cst$49)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,cst$46)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$47)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,cst$48)}
          throw [0,Assert_failure,_aT_]}}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_aR_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character
                             (str_ind$0 + 1 | 0,cst_character,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,cst_character$0,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _pU_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _pU_=0;
          var _pT_=_pU_}
        catch(_pV_)
         {_pV_ = caml_wrap_exception(_pV_);
          if(_pV_ !== Not_found && _pV_[1] !== Failure)throw _pV_;
          var _pT_=0}
        if(_pT_)
         {var
           match=_pT_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_aN_,fmt_rest$0]]}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _pM_=str_ind === end_ind?1:0,
           _pN_=_pM_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_pN_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _pO_=[0,s,width,0],
             _pP_=str_ind_3 + 1 | 0,
             formatting_lit$0=_pO_,
             next_ind=_pP_;
           else
            switch$1 = 1;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$3=parse_integer(str_ind_3,end_ind),
               offset=match$3[2],
               str_ind_4=match$3[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=
                sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _pQ_=[0,s$0,width,offset],
               _pR_=str_ind_5 + 1 | 0,
               formatting_lit$0=_pQ_,
               next_ind=_pR_}
            else
             switch$1 = 1}
          if(switch$1)throw Not_found}
        catch(_pS_)
         {_pS_ = caml_wrap_exception(_pS_);
          if(_pS_ !== Not_found && _pS_[1] !== Failure)throw _pS_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from$0(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _pK_=[0,[18,formatting$0,fmt_rest$0]];
            return _pK_}
          throw Not_found}
        catch(_pL_)
         {_pL_ = caml_wrap_exception(_pL_);
          if(_pL_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _pL_}}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _pH_=flag[1],_pI_=_pH_?1 - legacy_behavior$0:_pH_;
          if(_pI_)
           {var _pJ_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_az_),str,str_ind,_pJ_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _pC_=space[1],
           _pD_=hash[1],
           _pE_=plus[1],
           _pF_=minus[1],
           _pG_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _pG_
             ?_pF_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,cst_0)
               :2
             :_pF_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _pF_,
                       _pE_,
                       _pD_,
                       _pC_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _pF_,
                     _pE_,
                     _pD_,
                     _pC_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,cst_padding);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pF_,_pE_,_pD_,_pC_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pF_,_pE_,_pD_,_pC_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_pF_,_pE_,_pD_,_pC_,ign,_aA_)}}}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         hash,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _pB_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_pB_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _aB_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,cst_precision)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number" && ! match)return parse_conv(0);
          if(minus)
           {if(typeof match === "number")return parse_conv(_aC_);
            var n=match[1];
            return parse_conv([0,0,n])}
          if(typeof match === "number")return parse_conv(_aD_);
          var n$0=match[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,cst_precision$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aE_
                      :incompatible_flag(pct_ind,str_ind,48,cst_precision$1)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,cst_0$0)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_aF_
                      :incompatible_flag(pct_ind,str_ind,symb,cst_0$1)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,cst$38);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,cst_0$2)}
            return incompatible_flag(pct_ind,str_ind,c,cst$39)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _o__=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _o__=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_o__;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _pa_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_pa_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_pg_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _pg_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_pg_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _ph_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _ph_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_ph_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set,char_of_int(i));
                    var _pA_=i + 1 | 0;
                    if(c !== i){var i=_pA_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_aO_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _pz_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_pz_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_pz_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _px_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_px_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_px_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _py_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_py_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_py_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _pw_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_pw_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_pw_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set$0=freeze_char_set(char_set),
             char_set$1=reverse?rev_char_set(char_set$0):char_set$0,
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$1],
              _pm_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _pm_=[0,[20,get_pad_opt(91),char_set$1,fmt_rest$19]];
            var fmt_result=_pm_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _pn_=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _po_=_pn_;
              else
               var
                _po_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message
                    (str_ind,cst_non_zero_widths_are_unsupp);
              var _pp_=_po_}
            else
             var _pp_=char_format(fmt_rest$21);
            var fmt_result=_pp_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _pq_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_pq_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _pr_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _pr_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_pr_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _ps_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _ps_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_ps_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _o$_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _o$_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_o$_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _pt_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _pt_ >>> 0))
               switch(_pt_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _pf_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _pf_=0;
              if(_pf_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 {var switcher$0=symb - 108 | 0;
                  switch(switcher$0)
                   {case 0:var counter=0;switch$3 = 1;break;
                    case 1:break;
                    default:var counter=1;switch$3 = 1}}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_aS_];
              if(get_ign(0))
               var ignored$5=[11,counter],_pe_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _pe_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_pe_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_aJ_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _pi_=get_space(0),
             _pj_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_pj_,_pi_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _pk_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _pl_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_pl_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _pk_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_pk_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,cst$50)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher$1=symb - 101 | 0;
              if(3 < switcher$1 >>> 0)
               switch$4 = 1;
              else
               {switch(switcher$1)
                 {case 0:var _pu_=1;break;
                  case 1:var _pu_=0;break;
                  case 2:var _pu_=3;break;
                  default:var _pu_=6}
                var kind=_pu_}}
            else
             if(69 <= symb)
              {var switcher$2=symb - 69 | 0,switch$5=0;
               switch(switcher$2)
                {case 0:var _pv_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _pv_=4;break;
                 default:var _pv_=7}
               if(! switch$5)var kind=_pv_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_aU_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _pb_=match?incompatible_flag(pct_ind,str_ind,95,cst$40):0;
              else
               var ndec=match[1],_pb_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_pb_],
               _pc_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _pd_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_pd_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _pc_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_pc_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switcher=symb - 108 | 0,switch$8=0;
             switch(switcher)
              {case 0:
                var
                 _oU_=caml_string_get(str,str_ind),
                 _oV_=get_space(0),
                 _oW_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_oW_,_oV_,_oU_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _oX_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _oZ_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_oZ_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _oX_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _oY_=_oX_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _o0_=caml_string_get(str,str_ind),
                 _o1_=get_space(0),
                 _o2_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_o2_,_o1_,_o0_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _o3_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _o4_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_o4_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _o3_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _oY_=_o3_}
             if(! switch$8)var fmt_result=_oY_}
          else
           if(76 === symb)
            {var
              _o5_=caml_string_get(str,str_ind),
              _o6_=get_space(0),
              _o7_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_o7_,_o6_,_o5_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _o8_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _o9_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_o9_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _o8_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_o8_}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_aG_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _oL_=1 - plus_used[1],plus$0=_oL_?plus:_oL_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,cst$41);
          var _oM_=1 - hash_used[1],hash$0=_oM_?hash:_oM_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,cst$42);
          var _oN_=1 - space_used[1],space$0=_oN_?space:_oN_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,cst$43);
          var _oO_=1 - pad_used[1],_oP_=_oO_?caml_notequal([0,pad],_aH_):_oO_;
          if(_oP_)incompatible_flag(pct_ind,str_ind,symb,cst_padding$0);
          var
           _oQ_=1 - prec_used[1],
           _oR_=_oQ_?caml_notequal([0,prec],_aI_):_oQ_;
          if(_oR_)
           {var _oS_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_oS_,cst_precision$2)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,cst$44)}
        var _oT_=1 - ign_used[1],ign$0=_oT_?ign:_oT_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,cst$45)}
        return fmt_result}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _oK_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_oK_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_aK_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]]}}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_aL_,fmt_rest$5]];
                     break;
                    case 5:
                     var switch$1=0;
                     if
                      ((str_ind$0 + 1 | 0)
                       <
                       end_ind
                       &&
                       37
                       ===
                       caml_string_get(str,str_ind$0 + 1 | 0))
                      {var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]];
                       switch$1 = 1}
                     if(! switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]];
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_aM_,fmt_rest$8]];
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]];
                     break;
                    case 27:
                     var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 28:
                     var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]];
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]];
                     break;
                    default:switch$0 = 1}}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var match=fmt_ebb_of_string(0,str),fmt=match[1];
      try
       {var _oI_=[0,type_format(fmt,fmtty),str];return _oI_}
      catch(_oJ_)
       {_oJ_ = caml_wrap_exception(_oJ_);
        if(_oJ_ === Type_mismatch)
         {var _oH_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_aW_),str,_oH_)}
        throw _oJ_}}
    function format_of_string_format(str,param)
     {var
       str$0=param[2],
       fmt=param[1],
       match=fmt_ebb_of_string(0,str),
       fmt$0=match[1];
      try
       {var _oF_=[0,type_format(fmt$0,fmtty_of_fmt(fmt)),str];return _oF_}
      catch(_oG_)
       {_oG_ = caml_wrap_exception(_oG_);
        if(_oG_ === Type_mismatch)
         return caml_call2(failwith_message(_aX_),str,str$0);
        throw _oG_}}
    var
     CamlinternalFormat=
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
    caml_register_global(778,CamlinternalFormat,"CamlinternalFormat");
    function kfprintf(k,o,param)
     {var fmt=param[1],_oE_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _oE_,
               fmt)}
    function kbprintf(k,b,param)
     {var fmt=param[1],_oD_=0;
      return make_printf
              (function(acc){bufput_acc(b,acc);return caml_call1(k,b)},
               _oD_,
               fmt)}
    function ikfprintf(k,oc,param)
     {var fmt=param[1];return make_iprintf(k,oc,fmt)}
    function fprintf(oc,fmt){return kfprintf(function(_oC_){return 0},oc,fmt)}
    function bprintf(b,fmt){return kbprintf(function(_oB_){return 0},b,fmt)}
    function ifprintf(oc,fmt)
     {return ikfprintf(function(_oA_){return 0},oc,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$2(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Stdlib_printf=
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ksprintf];
    caml_register_global(779,Stdlib_printf,"Stdlib__printf");
    var
     Bad=[248,cst_Stdlib_Arg_Bad,caml_fresh_oo_id(0)],
     Help=[248,cst_Stdlib_Arg_Help,caml_fresh_oo_id(0)],
     Stop=[248,cst_Stdlib_Arg_Stop,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$1=l$0[2],l$0=l$1;
          continue}
        throw Not_found}}
    function split$0(s)
     {var
       i=index$0(s,61),
       len=caml_ml_string_length(s),
       _oz_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_oz_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_oy_=symbol(prefix,h);
        return symbol
                (fold_left$0
                  (function(x,y){return symbol(x,symbol(sep,y))},_oy_,t),
                 suffix)}
      return cst_none}
    function help_action(param){throw [0,Stop,_a0_]}
    function add_help(speclist)
     {try
       {assoc3(cst_help$2,speclist);var _ov_=0,_ot_=_ov_}
      catch(_ox_)
       {_ox_ = caml_wrap_exception(_ox_);
        if(_ox_ !== Not_found)throw _ox_;
        var
         _ot_=
          [0,[0,cst_help,[0,help_action],cst_Display_this_list_of_optio],0]}
      try
       {assoc3(cst_help$1,speclist);var _ou_=0,add2=_ou_}
      catch(_ow_)
       {_ow_ = caml_wrap_exception(_ow_);
        if(_ow_ !== Not_found)throw _ow_;
        var
         add2=
          [0,
           [0,cst_help$0,[0,help_action],cst_Display_this_list_of_optio$0],
           0]}
      return append(speclist,append(_ot_,add2))}
    function usage_b(buf,speclist,errmsg)
     {caml_call1(bprintf(buf,_a1_),errmsg);
      var _oq_=add_help(speclist);
      return iter$2
              (function(param)
                {var
                  doc=param[3],
                  spec=param[2],
                  key=param[1],
                  _or_=0 < caml_ml_string_length(doc)?1:0;
                 if(_or_)
                  {if(11 === spec[0])
                    {var l=spec[1],_os_=make_symlist(cst$53,cst$52,cst$51,l);
                     return caml_call3(bprintf(buf,_aZ_),key,_os_,doc)}
                   return caml_call2(bprintf(buf,_aY_),key,doc)}
                 return _or_},
               _oq_)}
    function usage_string(speclist,errmsg)
     {var b=create$2(200);usage_b(b,speclist,errmsg);return contents(b)}
    function usage(speclist,errmsg)
     {var _op_=usage_string(speclist,errmsg);
      return caml_call1(eprintf(_a2_),_op_)}
    var current=[0,0];
    function bool_of_string_opt$0(x)
     {try
       {var _on_=[0,bool_of_string(x)];return _on_}
      catch(_oo_)
       {_oo_ = caml_wrap_exception(_oo_);
        if(_oo_[1] === Invalid_argument)return 0;
        throw _oo_}}
    function int_of_string_opt$0(x)
     {try
       {var _ol_=[0,caml_int_of_string(x)];return _ol_}
      catch(_om_)
       {_om_ = caml_wrap_exception(_om_);
        if(_om_[1] === Failure)return 0;
        throw _om_}}
    function float_of_string_opt(x)
     {try
       {var _oj_=[0,caml_float_of_string(x)];return _oj_}
      catch(_ok_)
       {_ok_ = caml_wrap_exception(_ok_);
        if(_ok_[1] === Failure)return 0;
        throw _ok_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         b=create$2(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :cst$54;
        switch(error[0])
         {case 0:
           var _oi_=error[1];
           if
            (caml_string_notequal(_oi_,cst_help$3)
             &&
             caml_string_notequal(_oi_,cst_help$4))
            caml_call2(bprintf(b,_a3_),progname,_oi_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(b,_a6_),progname,arg,opt,expected);
           break;
          case 2:var s=error[1];caml_call2(bprintf(b,_a7_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(b,_a8_),progname,s$0)}
        usage_b(b,speclist[1],errmsg);
        if(! caml_equal(error,_a4_) && ! caml_equal(error,_a5_))
         return [0,Bad,contents(b)];
        return [0,Help,contents(b)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var
             _n$_=current[1],
             s=caml_check_bound(argv[1],_n$_)[1 + _n$_],
             switch$0=0;
            if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
             {try
               {var
                 follow$1=0,
                 _ob_=assoc3(s,speclist[1]),
                 follow$0=follow$1,
                 action=_ob_}
              catch(_og_)
               {_og_ = caml_wrap_exception(_og_);
                if(_og_ !== Not_found)throw _og_;
                try
                 {var
                   match=split$0(s),
                   arg=match[2],
                   keyword=match[1],
                   follow=[0,arg],
                   _oa_=assoc3(keyword,speclist[1])}
                catch(_oh_)
                 {_oh_ = caml_wrap_exception(_oh_);
                  if(_oh_ === Not_found)throw [0,Stop,[0,s]];
                  throw _oh_;
                  var _oc_=_oh_}
                var follow$0=follow,action=_oa_,_od_=_og_}
              var
               no_arg$0=
                function(s,follow)
                 {function no_arg(param)
                   {if(follow)
                     {var arg=follow[1];throw [0,Stop,[1,s,arg,cst_no_argument]]}
                    return 0}
                  return no_arg},
               no_arg=no_arg$0(s,follow$0),
               get_arg$0=
                function(s,follow)
                 {function get_arg(param)
                   {if(follow){var arg=follow[1];return arg}
                    if((current[1] + 1 | 0) < argv[1].length - 1)
                     {var _of_=current[1] + 1 | 0;
                      return caml_check_bound(argv[1],_of_)[1 + _of_]}
                    throw [0,Stop,[2,s]]}
                  return get_arg},
               get_arg=get_arg$0(s,follow$0),
               consume_arg$0=
                function(follow)
                 {function consume_arg(param)
                   {return follow?0:(current[1]++,0)}
                  return consume_arg},
               consume_arg=consume_arg$0(follow$0),
               treat_action$0=
                function(s,no_arg,get_arg,consume_arg)
                 {function treat_action(param)
                   {switch(param[0])
                     {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                      case 1:
                       var
                        f$0=param[1],
                        arg=get_arg(0),
                        match=bool_of_string_opt$0(arg);
                       if(match)
                        {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg,cst_a_boolean]];
                      case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                      case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                      case 4:
                       var f$1=param[1],arg$0=get_arg(0);
                       caml_call1(f$1,arg$0);
                       return consume_arg(0);
                      case 5:
                       var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                      case 6:
                       var
                        f$2=param[1],
                        arg$1=get_arg(0),
                        match$0=int_of_string_opt$0(arg$1);
                       if(match$0)
                        {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$1,cst_an_integer]];
                      case 7:
                       var
                        r$2=param[1],
                        arg$2=get_arg(0),
                        match$1=int_of_string_opt$0(arg$2);
                       if(match$1)
                        {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$2,cst_an_integer$0]];
                      case 8:
                       var
                        f$3=param[1],
                        arg$3=get_arg(0),
                        match$2=float_of_string_opt(arg$3);
                       if(match$2)
                        {var x$1=match$2[1];
                         caml_call1(f$3,x$1);
                         return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$3,cst_a_float]];
                      case 9:
                       var
                        r$3=param[1],
                        arg$4=get_arg(0),
                        match$3=float_of_string_opt(arg$4);
                       if(match$3)
                        {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$4,cst_a_float$0]];
                      case 10:
                       var specs=param[1];
                       no_arg(0);
                       return iter$2(treat_action,specs);
                      case 11:
                       var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                       if(mem(arg$5,symb))
                        {caml_call1(f$4,arg$5);return consume_arg(0)}
                       throw [0,
                              Stop,
                              [1,
                               s,
                               arg$5,
                               symbol(cst_one_of,make_symlist(cst$57,cst$56,cst$55,symb))]];
                      case 12:
                       var f$5=param[1];
                       no_arg(0);
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _oe_=current[1] + 1 | 0;
                           caml_call1(f$5,caml_check_bound(argv[1],_oe_)[1 + _oe_]);
                           consume_arg(0);
                           continue}
                         return 0}
                      default:
                       var f$6=param[1];
                       if(1 - allow_expand)
                        throw [0,Invalid_argument,cst_Arg_Expand_is_is_only_allo];
                       var arg$6=get_arg(0),newarg=caml_call1(f$6,arg$6);
                       consume_arg(0);
                       var
                        before=sub$1(argv[1],0,current[1] + 1 | 0),
                        after=
                         sub$1
                          (argv[1],
                           current[1] + 1 | 0,
                           (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                       argv[1]
                       =
                       caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                       return 0}}
                  return treat_action},
               treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
              treat_action(action);
              switch$0 = 1}
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            if(exn$0[1] === Bad){var m=exn$0[2];throw convert_error([3,m])}
            if(exn$0[1] === Stop){var e=exn$0[2];throw convert_error(e)}
            throw exn$0;
            var exn=exn$0}
          current[1]++;
          continue}
        return 0}}
    function parse_and_expand_argv_dynamic
     (current,argv,speclist,anonfun,errmsg)
     {return parse_and_expand_argv_dynamic_
              (1,current,argv,speclist,anonfun,errmsg)}
    function parse_argv_dynamic(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_and_expand_argv_dynamic_
              (0,current$0,[0,argv],speclist,anonfun,errmsg)}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],current$0=sth;else var current$0=current;
      return parse_argv_dynamic
              ([0,current$0],argv,[0,speclist],anonfun,errmsg)}
    function parse(l,f,msg)
     {try
       {var _n__=parse_argv(0,caml_sys_argv(0),l,f,msg);return _n__}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_a9_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_a__),msg$1);return exit(0)}
        throw exn}}
    function parse_dynamic(l,f,msg)
     {try
       {var _n9_=parse_argv_dynamic(0,caml_sys_argv(0),l,f,msg);return _n9_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_a$_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_ba_),msg$1);return exit(0)}
        throw exn}}
    function parse_expand(l,f,msg)
     {try
       {var
         argv=[0,caml_sys_argv(0)],
         spec=[0,l],
         current$0=[0,current[1]],
         _n8_=parse_and_expand_argv_dynamic(current$0,argv,spec,f,msg);
        return _n8_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Bad)
         {var msg$0=exn[2];caml_call1(eprintf(_bb_),msg$0);return exit(2)}
        if(exn[1] === Help)
         {var msg$1=exn[2];caml_call1(printf(_bc_),msg$1);return exit(0)}
        throw exn}}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index$0(s,9)}
      catch(_n6_)
       {_n6_ = caml_wrap_exception(_n6_);
        if(_n6_ === Not_found)
         {try
           {var n=index$0(s,32)}
          catch(_n7_)
           {_n7_ = caml_wrap_exception(_n7_);
            if(_n7_ === Not_found)return len;
            throw _n7_}
          return loop(n + 1 | 0)}
        throw _n6_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      return map$4
              (function(c)
                {if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c},
               s)}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max_int;
      var
       completed=add_help(speclist),
       len=fold_left$0(max_arg_len,0,completed),
       len$0=min(len,limit);
      return map$2
              (function(ksd)
                {var _n4_=ksd[1],_n5_=ksd[2];
                 if(caml_string_notequal(ksd[3],cst$58))
                  {if(11 === _n5_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$0(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _n4_,
                             _n5_,
                             symbol(cst$59,symbol(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    spec=ksd[2],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_n4_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$0(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_n4_,spec,symbol(prefix,symbol(spaces,suffix))]}
                   return [0,_n4_,spec,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    function read_aux(trim,sep,file)
     {var ic=open_in_bin(file),buf=create$2(200),words=[0,0];
      function stash(param)
       {var s=contents(buf);
        if(trim)
         {var len=caml_ml_string_length(s),switch$0=0;
          if(0 < len && 13 === caml_string_get(s,len - 1 | 0))
           {var _n3_=sub$0(s,0,len - 1 | 0);switch$0 = 1}
          if(! switch$0)var _n3_=s;
          var word=_n3_}
        else
         var word=s;
        words[1] = [0,word,words[1]];
        return clear$1(buf)}
      try
       {for(;;)
         {var c=caml_ml_input_char(ic);
          if(c === sep)stash(0);else add_char(buf,c);
          continue}}
      catch(_n2_)
       {_n2_ = caml_wrap_exception(_n2_);
        if(_n2_ === End_of_file)
         {if(0 < buf[2])stash(0);
          caml_ml_close_channel(ic);
          return of_list(rev(words[1]))}
        throw _n2_}}
    var _bd_=10,_be_=1;
    function read_arg(_n1_){return read_aux(_be_,_bd_,_n1_)}
    var _bf_=0,_bg_=0;
    function read_arg0(_n0_){return read_aux(_bg_,_bf_,_n0_)}
    function write_aux(sep,file,args)
     {var oc=open_out_bin(file);
      iter$5(function(s){return caml_call2(fprintf(oc,_bh_),s,sep)},args);
      return close_out(oc)}
    var _bi_=10;
    function write_arg(_nY_,_nZ_){return write_aux(_bi_,_nY_,_nZ_)}
    var _bj_=0;
    function write_arg0(_nW_,_nX_){return write_aux(_bj_,_nW_,_nX_)}
    var
     Stdlib_arg=
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    caml_register_global(780,Stdlib_arg,"Stdlib__arg");
    var printers=[0,0];
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_bk_),f)
                :caml_obj_tag(f) === 253?to_string(f):cst$60
              :caml_call1(sprintf(_bl_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return cst$61;
      var _nU_=other_fields(x,i + 1 | 0),_nV_=field(x,i);
      return caml_call2(sprintf(_bm_),_nV_,_nU_)}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_nT_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(printers[1])}
    function to_string_default(x)
     {if(x === Out_of_memory)return cst_Out_of_memory;
      if(x === Stack_overflow)return cst_Stack_overflow;
      if(x[1] === Match_failure)
       {var match$0=x[2],char$0=match$0[3],line=match$0[2],file=match$0[1];
        return caml_call5
                (sprintf(locfmt),
                 file,
                 line,
                 char$0,
                 char$0 + 5 | 0,
                 cst_Pattern_matching_failed)}
      if(x[1] === Assert_failure)
       {var
         match$1=x[2],
         char$1=match$1[3],
         line$0=match$1[2],
         file$0=match$1[1];
        return caml_call5
                (sprintf(locfmt),
                 file$0,
                 line$0,
                 char$1,
                 char$1 + 6 | 0,
                 cst_Assertion_failed)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$2=x[2],
         char$2=match$2[3],
         line$1=match$2[2],
         file$1=match$2[1];
        return caml_call5
                (sprintf(locfmt),
                 file$1,
                 line$1,
                 char$2,
                 char$2 + 6 | 0,
                 cst_Undefined_recursive_module)}
      if(0 === caml_obj_tag(x))
       {var constructor=x[1][1],match=x.length - 1;
        if(2 < match >>> 0)
         var
          _nP_=other_fields(x,2),
          _nQ_=field(x,1),
          _nS_=caml_call2(sprintf(_bn_),_nQ_,_nP_);
        else
         switch(match)
          {case 0:var _nS_=cst$62;break;
           case 1:var _nS_=cst$63;break;
           default:var _nR_=field(x,1),_nS_=caml_call1(sprintf(_bo_),_nR_)}
        return symbol(constructor,_nS_)}
      return x[1]}
    function to_string$7(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function print(fct,arg)
     {try
       {var _nO_=caml_call1(fct,arg);return _nO_}
      catch(x)
       {x = caml_wrap_exception(x);
        var _nN_=to_string$7(x);
        caml_call1(eprintf(_bp_),_nN_);
        caml_ml_flush(stderr);
        throw x}}
    function catch$0(fct,arg)
     {try
       {var _nM_=caml_call1(fct,arg);return _nM_}
      catch(x)
       {x = caml_wrap_exception(x);
        caml_ml_flush(stdout);
        var _nL_=to_string$7(x);
        caml_call1(eprintf(_bq_),_nL_);
        return exit(2)}}
    function convert_raw_backtrace(bt)
     {return [0,runtime.caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise
                ?0 === pos?cst_Raised_at:cst_Re_raised_at
                :0 === pos?cst_Raised_by_primitive_operat:cst_Called_from}
      if(0 === slot[0])
       {var
         _nE_=slot[5],
         _nF_=slot[4],
         _nG_=slot[3],
         _nH_=slot[6]?cst_inlined:cst$64,
         _nI_=slot[2],
         _nJ_=info(slot[1]);
        return [0,caml_call6(sprintf(_br_),_nJ_,_nI_,_nH_,_nG_,_nF_,_nE_)]}
      if(slot[1])return 0;
      var _nK_=info(0);
      return [0,caml_call1(sprintf(_bs_),_nK_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_nC_=a.length - 1 - 1 | 0,_nB_=0;
        if(! (_nC_ < 0))
         {var i=_nB_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bt_),str)}
            var _nD_=i + 1 | 0;
            if(_nC_ !== i){var i=_nD_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bu_)}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtra(0))}
    function raw_backtrace_to_string(raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$2(1024),_nz_=a.length - 1 - 1 | 0,_ny_=0;
        if(! (_nz_ < 0))
         {var i=_ny_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(bprintf(b,_bv_),str)}
            var _nA_=i + 1 | 0;
            if(_nz_ !== i){var i=_nA_;continue}
            break}}
        return contents(b)}
      return cst_Program_not_linked_with_g_}
    function backtrace_slot_is_raise(param)
     {return 0 === param[0]?param[1]:param[1]}
    function backtrace_slot_is_inline(param){return 0 === param[0]?param[6]:0}
    function backtrace_slot_location(param)
     {return 0 === param[0]?[0,[0,param[2],param[3],param[4],param[5]]]:0}
    function backtrace_slots(raw_backtrace)
     {var match=convert_raw_backtrace(raw_backtrace);
      if(match)
       {var backtrace=match[1],i$1=backtrace.length - 1 - 1 | 0,i=i$1;
        for(;;)
         {if(-1 === i)
           var _nx_=0;
          else
           {var
             param=caml_check_bound(backtrace,i)[1 + i],
             _nw_=0 === param[0]?1:0;
            if(! _nw_){var i$0=i - 1 | 0,i=i$0;continue}
            var _nx_=_nw_}
          return _nx_?[0,backtrace]:0}}
      return 0}
    function get_backtrace(param)
     {return raw_backtrace_to_string(caml_get_exception_raw_backtra(0))}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function exn_slot(x){return 0 === caml_obj_tag(x)?x[1]:x}
    function exn_slot_id(x){var slot=exn_slot(x);return slot[2]}
    function exn_slot_name(x){var slot=exn_slot(x);return slot[1]}
    var uncaught_exception_handler=[0,0];
    function set_uncaught_exception_handler(fn)
     {uncaught_exception_handler[1] = [0,fn];return 0}
    function _bw_(_nv_){return runtime.caml_raw_backtrace_next_slot(_nv_)}
    function _bx_(_nu_){return runtime.caml_convert_raw_backtrace_slot(_nu_)}
    function _by_(_nt_,_ns_)
     {return runtime.caml_raw_backtrace_slot(_nt_,_ns_)}
    function _bz_(_nr_){return runtime.caml_raw_backtrace_length(_nr_)}
    var
     _bA_=
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       format_backtrace_slot];
    function _bB_(_nq_){return caml_get_exception_raw_backtra(_nq_)}
    function _bC_(_np_){return runtime.caml_backtrace_status(_np_)}
    var
     Stdlib_printexc=
      [0,
       to_string$7,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       function(_no_){return runtime.caml_record_backtrace(_no_)},
       _bC_,
       register_printer,
       use_printers,
       _bB_,
       print_raw_backtrace,
       raw_backtrace_to_string,
       set_uncaught_exception_handler,
       backtrace_slots,
       _bA_,
       _bz_,
       _by_,
       _bx_,
       _bw_,
       exn_slot_id,
       exn_slot_name];
    caml_register_global(781,Stdlib_printexc,"Stdlib__printexc");
    function const$0(c,param){return c}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function negate(p,v){return 1 - caml_call1(p,v)}
    var
     Finally_raised=
      [248,cst_Stdlib_Fun_Finally_raised,caml_fresh_oo_id(0)];
    function protect(finally$0,work)
     {function finally_no_exn(param)
       {try
         {var _nn_=caml_call1(finally$0,0);return _nn_}
        catch(e)
         {e = caml_wrap_exception(e);
          var bt=caml_get_exception_raw_backtra(0),exn=[0,Finally_raised,e];
          caml_restore_raw_backtrace(exn,bt);
          throw exn}}
      try
       {var result=caml_call1(work,0)}
      catch(work_exn)
       {work_exn = caml_wrap_exception(work_exn);
        var work_bt=caml_get_exception_raw_backtra(0);
        finally_no_exn(0);
        caml_restore_raw_backtrace(work_exn,work_bt);
        throw work_exn}
      finally_no_exn(0);
      return result}
    var Stdlib_fun=[0,const$0,flip,negate,protect,Finally_raised];
    caml_register_global(782,Stdlib_fun,"Stdlib__fun");
    function print_stat(c)
     {var st=runtime.caml_gc_stat(0),_m8_=st[4];
      caml_call1(fprintf(c,_bD_),_m8_);
      var _m9_=st[5];
      caml_call1(fprintf(c,_bE_),_m9_);
      var _m__=st[14];
      caml_call1(fprintf(c,_bF_),_m__);
      fprintf(c,_bG_);
      var
       _m$_=st[1],
       l1=caml_ml_string_length(caml_call1(sprintf(_bH_),_m$_)),
       _na_=st[1];
      caml_call2(fprintf(c,_bI_),l1,_na_);
      var _nb_=st[2];
      caml_call2(fprintf(c,_bJ_),l1,_nb_);
      var _nc_=st[3];
      caml_call2(fprintf(c,_bK_),l1,_nc_);
      fprintf(c,_bL_);
      var
       _nd_=st[15],
       l2=caml_ml_string_length(caml_call1(sprintf(_bM_),_nd_)),
       _ne_=st[15];
      caml_call2(fprintf(c,_bN_),l2,_ne_);
      var _nf_=st[6];
      caml_call2(fprintf(c,_bO_),l2,_nf_);
      var _ng_=st[8];
      caml_call2(fprintf(c,_bP_),l2,_ng_);
      var _nh_=st[10];
      caml_call2(fprintf(c,_bQ_),l2,_nh_);
      var _ni_=st[12];
      caml_call2(fprintf(c,_bR_),l2,_ni_);
      var _nj_=st[13];
      caml_call2(fprintf(c,_bS_),l2,_nj_);
      fprintf(c,_bT_);
      var _nk_=st[9];
      caml_call1(fprintf(c,_bU_),_nk_);
      var _nl_=st[11];
      caml_call1(fprintf(c,_bV_),_nl_);
      var _nm_=st[7];
      return caml_call1(fprintf(c,_bW_),_nm_)}
    function allocated_bytes(param)
     {var
       match=runtime.caml_gc_counters(0),
       ma=match[3],
       pro=match[2],
       mi=match[1];
      return (mi + ma - pro) * 4}
    function create_alarm(f){return [0,1]}
    function delete_alarm(a){a[1] = 0;return 0}
    function _bX_(_m7_){return runtime.caml_final_release(_m7_)}
    function _bY_(_m6_,_m5_)
     {return runtime.caml_final_register_called_without_value(_m6_,_m5_)}
    var
     Stdlib_gc=
      [0,
       print_stat,
       allocated_bytes,
       function(_m4_,_m3_){return runtime.caml_final_register(_m4_,_m3_)},
       _bY_,
       _bX_,
       create_alarm,
       delete_alarm];
    caml_register_global(783,Stdlib_gc,"Stdlib__gc");
    function string(str)
     {return caml_md5_string(str,0,caml_ml_string_length(str))}
    function bytes(b){return string(caml_string_of_bytes(b))}
    function substring(str,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(str) - len | 0) < ofs))
       return caml_md5_string(str,ofs,len);
      return invalid_arg(cst_Digest_substring)}
    function subbytes(b,ofs,len)
     {return substring(caml_string_of_bytes(b),ofs,len)}
    function file(filename)
     {var ic=open_in_bin(filename);
      try
       {var d=runtime.caml_md5_chan(ic,-1)}
      catch(e){e = caml_wrap_exception(e);caml_ml_close_channel(ic);throw e}
      caml_ml_close_channel(ic);
      return d}
    function output$0(chan,digest){return output_string(chan,digest)}
    function input$0(chan){return really_input_string(chan,16)}
    function char_hex(n){var _m2_=10 <= n?87:48;return n + _m2_ | 0}
    function to_hex(d)
     {if(16 !== caml_ml_string_length(d))invalid_arg(cst_Digest_to_hex);
      var result=caml_create_bytes(32),i=0;
      for(;;)
       {var x=caml_string_get(d,i);
        caml_bytes_unsafe_set(result,i * 2 | 0,char_hex(x >>> 4 | 0));
        caml_bytes_unsafe_set(result,(i * 2 | 0) + 1 | 0,char_hex(x & 15));
        var _m1_=i + 1 | 0;
        if(15 !== i){var i=_m1_;continue}
        return caml_string_of_bytes(result)}}
    function from_hex(s)
     {if(32 !== caml_ml_string_length(s))invalid_arg(cst_Digest_from_hex);
      function digit(c)
       {if(65 <= c)
         {if(97 <= c)
           {if(! (103 <= c))return (c - 97 | 0) + 10 | 0}
          else
           if(! (71 <= c))return (c - 65 | 0) + 10 | 0}
        else
         {var switcher=c - 48 | 0;if(! (9 < switcher >>> 0))return c - 48 | 0}
        throw [0,Invalid_argument,cst_Digest_from_hex$0]}
      var result=caml_create_bytes(16),i=0;
      for(;;)
       {var i$0=2 * i | 0,_mZ_=digit(caml_string_get(s,i$0 + 1 | 0));
        caml_bytes_set
         (result,i,chr((digit(caml_string_get(s,i$0)) << 4) + _mZ_ | 0));
        var _m0_=i + 1 | 0;
        if(15 !== i){var i=_m0_;continue}
        return caml_string_of_bytes(result)}}
    var
     Stdlib_digest=
      [0,
       compare$5,
       equal$5,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output$0,
       input$0,
       to_hex,
       from_hex];
    caml_register_global(784,Stdlib_digest,"Stdlib__digest");
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$1(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[1 + i$0] = i$0;
        var _mY_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_mY_;continue}
        var accu=[0,cst_x$1],_mU_=54 + max(55,l) | 0,_mT_=0;
        if(! (_mU_ < 0))
         {var i=_mT_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[1 + k];
            accu[1] = string(symbol(accu[1],caml_string_of_jsbytes("" + x)));
            var
             _mV_=accu[1],
             _mP_=caml_string_get(_mV_,3) << 24,
             _mQ_=caml_string_get(_mV_,2) << 16,
             _mR_=caml_string_get(_mV_,1) << 8,
             _mS_=((caml_string_get(_mV_,0) + _mR_ | 0) + _mQ_ | 0) + _mP_ | 0,
             _mW_=(caml_check_bound(s[1],j)[1 + j] ^ _mS_) & 1073741823;
            caml_check_bound(s[1],j)[1 + j] = _mW_;
            var _mX_=i + 1 | 0;
            if(_mU_ !== i){var i=_mX_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$2(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$2(caml_sys_random_seed(0))}
    function copy$5(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _mM_=s[2],
       curval=caml_check_bound(s[1],_mM_)[1 + _mM_],
       _mN_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_mN_)[1 + _mN_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _mO_=s[2];
      caml_check_bound(s[1],_mO_)[1 + _mO_] = newval30;
      return newval30}
    function int$0(s,bound)
     {if(! (1073741823 < bound) && 0 < bound)
       for(;;)
        {var r=bits(s),v=caml_mod(r,bound);
         if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
         return v}
      return invalid_arg(cst_Random_int)}
    function int32(s,bound)
     {if(caml_lessequal(bound,0))return invalid_arg(cst_Random_int32);
      for(;;)
       {var b1=bits(s),b2=(bits(s) & 1) << 30,r=b1 | b2,v=caml_mod(r,bound);
        if(caml_greaterthan(r - v | 0,(2147483647 - bound | 0) + 1 | 0))
         continue;
        return v}}
    function int64(s,bound)
     {if(caml_lessequal(bound,_b0_))return invalid_arg(cst_Random_int64);
      for(;;)
       {var
         b1=caml_int64_of_int32(bits(s)),
         b2=caml_int64_shift_left(caml_int64_of_int32(bits(s)),30),
         b3=caml_int64_shift_left(caml_int64_of_int32(bits(s) & 7),60),
         r=caml_int64_or(b1,caml_int64_or(b2,b3)),
         v=runtime.caml_int64_mod(r,bound);
        if
         (caml_greaterthan
           (caml_int64_sub(r,v),
            caml_int64_add(caml_int64_sub(max_int$2,bound),_bZ_)))
         continue;
        return v}}
    function nativeint(s,bound){return int32(s,bound)}
    function float$0(s,bound)
     {var r1=bits(s),r2=bits(s);
      return (r1 / 1073741824. + r2) / 1073741824. * bound}
    function bool(s){return 0 === (bits(s) & 1)?1:0}
    var default$0=[0,_b1_.slice(),0];
    function bits$0(param){return bits(default$0)}
    function int$1(bound){return int$0(default$0,bound)}
    function int32$0(bound){return int32(default$0,bound)}
    function nativeint$0(bound){return nativeint(default$0,bound)}
    function int64$0(bound){return int64(default$0,bound)}
    function float$1(scale){return float$0(default$0,scale)}
    function bool$0(param){return bool(default$0)}
    function full_init$0(seed){return full_init(default$0,seed)}
    function init$4(seed){return full_init(default$0,[0,seed])}
    function self_init(param){return full_init$0(caml_sys_random_seed(0))}
    function get_state(param){return copy$5(default$0)}
    function set_state(s){return assign(default$0,s)}
    var
     _b2_=
      [0,
       make$2,
       make_self_init,
       copy$5,
       bits,
       int$0,
       int32,
       nativeint,
       int64,
       float$0,
       bool],
     Stdlib_random=
      [0,
       init$4,
       full_init$0,
       self_init,
       bits$0,
       int$1,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       _b2_,
       get_state,
       set_state];
    caml_register_global(785,Stdlib_random,"Stdlib__random");
    function ongoing_traversal(h)
     {var _mK_=h.length - 1 < 4?1:0,_mL_=_mK_ || (h[4] < 0?1:0);return _mL_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _cI_=caml_sys_getenv(cst_OCAMLRUNPARAM),params=_cI_}
    catch(_mI_)
     {_mI_ = caml_wrap_exception(_mI_);
      if(_mI_ !== Not_found)throw _mI_;
      try
       {var _cH_=caml_sys_getenv(cst_CAMLRUNPARAM),_b3_=_cH_}
      catch(_mJ_)
       {_mJ_ = caml_wrap_exception(_mJ_);
        if(_mJ_ !== Not_found)throw _mJ_;
        var _b3_=cst$65}
      var params=_b3_}
    var
     randomized_default=contains$0(params,82),
     randomized=[0,randomized_default];
    function randomize(param){randomized[1] = 1;return 0}
    function is_randomized(param){return randomized[1]}
    var prng=[246,function(_mH_){return caml_call1(_b2_[2],0)}];
    function create$3(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized[1];
      var x=16;
      for(;;)
       {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _mF_=caml_obj_tag(prng),
          _mG_=250 === _mF_?prng[1]:246 === _mF_?force_lazy_block(prng):prng,
          seed=caml_call1(_b2_[4],_mG_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function clear$2(h)
     {var _mE_=0 < h[1]?1:0;
      return _mE_?(h[1] = 0,fill$0(h[2],0,h[2].length - 1,0)):_mE_}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1 && len !== abs(h[4]))
       {h[1] = 0;h[2] = caml_make_vect(abs(h[4]),0);return 0}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec){prec[3] = r;var prec=r,param$0=next$0;continue}
            throw [0,Assert_failure,_b4_]}
          return prec$0}}
      return 0}
    function copy$6(init)
     {var _mB_=init[4],_mC_=init[3],_mD_=map$5(copy_bucketlist,init[2]);
      return [0,init[1],_mD_,_mC_,_mB_]}
    function length$4(h){return h[1]}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _ms_=nsize < max_array_length?1:0;
      if(_ms_)
       {var
         ndata=caml_make_vect(nsize,0),
         ndata_tail=caml_make_vect(nsize,0),
         inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        var _mu_=osize - 1 | 0,_mt_=0;
        if(! (_mu_ < 0))
         {var i$0=_mt_;
          a:
          for(;;)
           {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
            for(;;)
             {if(cell)
               {var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                 nidx=caml_call2(indexfun,h,key),
                 match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                if(match)
                 match[3] = cell$0;
                else
                 caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                var cell=next;
                continue}
              var _mA_=i$0 + 1 | 0;
              if(_mu_ !== i$0){var i$0=_mA_;continue a}
              break}
            break}}
        if(inplace)
         {var _mw_=nsize - 1 | 0,_mv_=0;
          if(! (_mw_ < 0))
           {var i=_mv_;
            for(;;)
             {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
              if(match$0)match$0[3] = 0;
              var _mz_=i + 1 | 0;
              if(_mw_ !== i){var i=_mz_;continue}
              break}}
          var _mx_=0}
        else
         var _mx_=inplace;
        var _my_=_mx_}
      else
       var _my_=_ms_;
      return _my_}
    function iter$10(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_mo_=d.length - 1 - 1 | 0,_mn_=0;
        if(! (_mo_ < 0))
         {var i=_mn_;
          for(;;)
           {do_bucket(caml_check_bound(d,i)[1 + i]);
            var _mr_=i + 1 | 0;
            if(_mo_ !== i){var i=_mr_;continue}
            break}}
        var _mp_=1 - old_trav,_mq_=_mp_?flip_ongoing_traversal(h):_mp_;
        return _mq_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             caml_check_bound(h[2],i)[1 + i] = slot$0;
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        return prec$0
                ?(prec$0[3] = 0,0)
                :(caml_check_bound(h[2],i)[1 + i] = 0,0)}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _mk_=d.length - 1 - 1 | 0,_mj_=0;
        if(! (_mk_ < 0))
         {var i=_mj_;
          for(;;)
           {filter_map_inplace_bucket(f,h,i,0,caml_check_bound(h[2],i)[1 + i]);
            var _mm_=i + 1 | 0;
            if(_mk_ !== i){var i=_mm_;continue}
            break}}
        var _ml_=0;
        return _ml_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$3(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_mf_=d.length - 1 - 1 | 0,_me_=0;
        if(! (_mf_ < 0))
         {var i=_me_;
          for(;;)
           {var _mh_=accu[1];
            accu[1] = do_bucket(caml_check_bound(d,i)[1 + i],_mh_);
            var _mi_=i + 1 | 0;
            if(_mf_ !== i){var i=_mi_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _mg_=accu[1];
        return _mg_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var
       _mb_=h[2],
       _mc_=0,
       mbl=
        fold_left$1(function(m,b){return max(m,bucket_length(0,b))},_mc_,_mb_),
       histo=caml_make_vect(mbl + 1 | 0,0),
       _md_=h[2];
      iter$5
       (function(b)
         {var l=bucket_length(0,b);
          histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
          return 0},
        _md_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq$9(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,[0,key,data],function(_ma_){return aux(i$0,next,_ma_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _l9_=0,_l__=0;
      return function(_l$_){return aux(_l__,_l9_,_l$_)}}
    function to_seq_keys(m)
     {var _l5_=to_seq$9(m);
      function _l6_(_l8_){return _l8_[1]}
      return function(_l7_){return map(_l6_,_l5_,_l7_)}}
    function to_seq_values(m)
     {var _l1_=to_seq$9(m);
      function _l2_(_l4_){return _l4_[2]}
      return function(_l3_){return map(_l2_,_l1_,_l3_)}}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _l0_=h[2].length - 1 - 1 | 0;
        return caml_call2(H[2],h[3],key) & _l0_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _lZ_=h[2].length - 1 << 1 < h[1]?1:0;
        return _lZ_?resize$0(key_index,h):_lZ_}
      function remove(h,key)
       {var
         i=key_index(h,key),
         c$0=caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
            if(caml_call2(H[1],k,key))
             {h[1] = h[1] - 1 | 0;
              return prec
                      ?(prec[3] = next,0)
                      :(caml_check_bound(h[2],i)[1 + i] = next,0)}
            var prec=c,c=next;
            continue}
          return 0}}
      function find(h,key)
       {var _lY_=key_index(h,key),match=caml_check_bound(h[2],_lY_)[1 + _lY_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return data;
                  var param=next;
                  continue}
                throw Not_found}}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_opt(h,key)
       {var _lX_=key_index(h,key),match=caml_check_bound(h[2],_lX_)[1 + _lX_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
          if(caml_call2(H[1],key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
            if(caml_call2(H[1],key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
              if(caml_call2(H[1],key,k3))return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                  if(caml_call2(H[1],key,k))return [0,data];
                  var param=next;
                  continue}
                return 0}}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
              if(caml_call2(H[1],k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _lW_=key_index(h,key);
        return find_in_bucket(caml_check_bound(h[2],_lW_)[1 + _lW_])}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         param$0=caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
            if(! caml_call2(H[1],k,key)){var param=next;continue}
            param[1] = key;
            param[2] = data;
            var _lT_=0}
          else
           var _lT_=1;
          if(_lT_)
           {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
            h[1] = h[1] + 1 | 0;
            var _lU_=h[2].length - 1 << 1 < h[1]?1:0;
            if(_lU_)return resize$0(key_index,h);
            var _lV_=_lU_}
          else
           var _lV_=_lT_;
          return _lV_}}
      function mem(h,key)
       {var
         _lS_=key_index(h,key),
         param$0=caml_check_bound(h[2],_lS_)[1 + _lS_],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3],_lR_=caml_call2(H[1],k,key);
            if(_lR_)return _lR_;
            var param=next;
            continue}
          return 0}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create$3,
              clear$2,
              reset$0,
              copy$6,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$10,
              filter_map_inplace,
              fold$3,
              length$4,
              stats,
              to_seq$9,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make$0(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _lQ_=include[1];
      function create(sz){return caml_call2(_lQ_,_b5_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function hash$1(x){return caml_hash(10,100,0,x)}
    function hash_param(n1,n2,x){return caml_hash(n1,n2,0,x)}
    function seeded_hash(seed,x){return caml_hash(10,100,seed,x)}
    function key_index(h,key)
     {return 3 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :caml_mod
                (runtime.caml_hash_univ_param(10,100,key),h[2].length - 1)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       bucket=[0,key,data,caml_check_bound(h[2],i)[1 + i]];
      caml_check_bound(h[2],i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _lP_=h[2].length - 1 << 1 < h[1]?1:0;
      return _lP_?resize$0(key_index,h):_lP_}
    function remove(h,key)
     {var i=key_index(h,key),c$0=caml_check_bound(h[2],i)[1 + i],prec=0,c=c$0;
      for(;;)
       {if(c)
         {var k=c[1],next=c[3];
          if(0 === caml_compare(k,key))
           {h[1] = h[1] - 1 | 0;
            return prec
                    ?(prec[3] = next,0)
                    :(caml_check_bound(h[2],i)[1 + i] = next,0)}
          var prec=c,c=next;
          continue}
        return 0}}
    function find$0(h,key)
     {var _lO_=key_index(h,key),match=caml_check_bound(h[2],_lO_)[1 + _lO_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return d3;
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return data;
                var param=next;
                continue}
              throw Not_found}}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function find_opt$0(h,key)
     {var _lN_=key_index(h,key),match=caml_check_bound(h[2],_lN_)[1 + _lN_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return [0,d1];
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return [0,d2];
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            if(0 === caml_compare(key,k3))return [0,d3];
            var param=next3;
            for(;;)
             {if(param)
               {var k=param[1],data=param[2],next=param[3];
                if(0 === caml_compare(key,k))return [0,data];
                var param=next;
                continue}
              return 0}}
          return 0}
        return 0}
      return 0}
    function find_all$0(h,key)
     {function find_in_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3];
            if(0 === caml_compare(k,key))return [0,data,find_in_bucket(next)];
            var param$0=next;
            continue}
          return 0}}
      var _lM_=key_index(h,key);
      return find_in_bucket(caml_check_bound(h[2],_lM_)[1 + _lM_])}
    function replace(h,key,data)
     {var
       i=key_index(h,key),
       param$0=caml_check_bound(h[2],i)[1 + i],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3];
          if(0 !== caml_compare(k,key)){var param=next;continue}
          param[1] = key;
          param[2] = data;
          var _lJ_=0}
        else
         var _lJ_=1;
        if(_lJ_)
         {caml_check_bound(h[2],i)[1 + i] = [0,key,data,param$0];
          h[1] = h[1] + 1 | 0;
          var _lK_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_lK_)return resize$0(key_index,h);
          var _lL_=_lK_}
        else
         var _lL_=_lJ_;
        return _lL_}}
    function mem$2(h,key)
     {var
       _lI_=key_index(h,key),
       param$0=caml_check_bound(h[2],_lI_)[1 + _lI_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_lH_=0 === caml_compare(k,key)?1:0;
          if(_lH_)return _lH_;
          var param=next;
          continue}
        return 0}}
    function add_seq$2(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return add$0(tbl,k,v)},
               i)}
    function replace_seq(tbl,i)
     {return iter
              (function(param)
                {var v=param[2],k=param[1];return replace(tbl,k,v)},
               i)}
    function of_seq$7(i){var tbl=create$3(0,16);replace_seq(tbl,i);return tbl}
    var
     Stdlib_hashtbl=
      [0,
       create$3,
       clear$2,
       reset$0,
       copy$6,
       add$0,
       find$0,
       find_opt$0,
       find_all$0,
       mem$2,
       remove,
       replace,
       iter$10,
       filter_map_inplace,
       fold$3,
       length$4,
       randomize,
       is_randomized,
       stats,
       to_seq$9,
       to_seq_keys,
       to_seq_values,
       add_seq$2,
       replace_seq,
       of_seq$7,
       Make$0,
       MakeSeeded,
       hash$1,
       seeded_hash,
       hash_param,
       caml_hash];
    caml_register_global(786,Stdlib_hashtbl,"Stdlib__hashtbl");
    function weak_create(l)
     {var _lF_=0 <= l?1:0,_lG_=_lF_?l <= _r_[15]?1:0:_lF_;
      if(1 - _lG_)invalid_arg(cst_Weak_create);
      return runtime.caml_weak_create(l)}
    function length$5(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset$0(e,o,msg)
     {var _lC_=0 <= o?1:0,_lD_=_lC_?o < length$5(e)?1:0:_lC_,_lE_=1 - _lD_;
      return _lE_?invalid_arg(msg):_lE_}
    function set(e,o,x)
     {raise_if_invalid_offset$0(e,o,cst_Weak_set);
      if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
      return caml_ephe_unset_key(e,o)}
    function get$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get);
      return runtime.caml_weak_get(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_get_copy);
      return runtime.caml_weak_get_copy(e,o)}
    function check$0(e,o)
     {raise_if_invalid_offset$0(e,o,cst_Weak_check);
      return runtime.caml_weak_check(e,o)}
    function blit$4(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$5(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$5(e2) - l | 0) < o2))
       {var
         _lA_=0 !== l?1:0,
         _lB_=_lA_?runtime.caml_weak_blit(e1,o1,e2,o2,l):_lA_;
        return _lB_}
      return invalid_arg(cst_Weak_blit)}
    function fill$2(ar,ofs,len,x)
     {if(0 <= ofs && 0 <= len && ! ((length$5(ar) - len | 0) < ofs))
       {var _ly_=(ofs + len | 0) - 1 | 0;
        if(! (_ly_ < ofs))
         {var i=ofs;
          for(;;)
           {set(ar,i,x);
            var _lz_=i + 1 | 0;
            if(_ly_ !== i){var i=_lz_;continue}
            break}}
        return 0}
      throw [0,Invalid_argument,cst_Weak_fill]}
    function Make$1(H)
     {var emptybucket=weak_create(0);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0;
        return [0,
                caml_make_vect(sz$1,emptybucket),
                caml_make_vect(sz$1,[0]),
                limit,
                0,
                0]}
      function clear(t)
       {var _lw_=t[1].length - 1 - 1 | 0,_lv_=0;
        if(! (_lw_ < 0))
         {var i=_lv_;
          for(;;)
           {caml_check_bound(t[1],i)[1 + i] = emptybucket;
            caml_check_bound(t[2],i)[1 + i] = [0];
            var _lx_=i + 1 | 0;
            if(_lw_ !== i){var i=_lx_;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {var _lu_=t[1],i=0;
        return fold_right$0
                (function(b,accu$1)
                  {var i$0=i,accu=accu$1;
                   for(;;)
                    {if(length$5(b) <= i$0)return accu;
                     var match=get$0(b,i$0);
                     if(match)
                      {var
                        v=match[1],
                        accu$0=caml_call2(f,v,accu),
                        i$1=i$0 + 1 | 0,
                        i$0=i$1,
                        accu=accu$0;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lu_,
                 init)}
      function iter(f,t)
       {var _lt_=t[1],i=0;
        return iter$5
                (function(b)
                  {var i$0=i;
                   for(;;)
                    {if(length$5(b) <= i$0)return 0;
                     var match=get$0(b,i$0);
                     if(match)
                      {var v=match[1];
                       caml_call1(f,v);
                       var i$1=i$0 + 1 | 0,i$0=i$1;
                       continue}
                     var i$2=i$0 + 1 | 0,i$0=i$2;
                     continue}},
                 _lt_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$5(b) <= i$0)return accu$0;
          var
           _ls_=check$0(b,i$0)?1:0,
           accu$1=accu$0 + _ls_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _ln_=0,_lo_=t[1],_lp_=0;
        return fold_right$0
                (function(_lq_,_lr_){return count_bucket(_lp_,_lq_,_lr_)},
                 _lo_,
                 _ln_)}
      function add_aux(t,setter,d,h,index)
       {var
         bucket$0=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket$0),
         i$3=0;
        for(;;)
         {if(sz <= i$3)
           {var
             newsz=
              min(((3 * sz | 0) / 2 | 0) + 3 | 0,max_array_length - 2 | 0);
            if(newsz <= sz)failwith(cst_Weak_Make_hash_bucket_cann);
            var
             newbucket$0=weak_create(newsz),
             newhashes=caml_make_vect(newsz,0);
            blit$4(bucket$0,0,newbucket$0,0,sz);
            blit$1(hashes,0,newhashes,0,sz);
            caml_call3(setter,newbucket$0,sz,d);
            caml_check_bound(newhashes,sz)[1 + sz] = h;
            caml_check_bound(t[1],index)[1 + index] = newbucket$0;
            caml_check_bound(t[2],index)[1 + index] = newhashes;
            var _lj_=sz <= t[3]?1:0,_lk_=_lj_?t[3] < newsz?1:0:_lj_;
            if(_lk_)
             {t[4] = t[4] + 1 | 0;
              var i$4=0;
              for(;;)
               {var
                 _k$_=t[5],
                 bucket=caml_check_bound(t[1],_k$_)[1 + _k$_],
                 _la_=t[5],
                 hbucket=caml_check_bound(t[2],_la_)[1 + _la_],
                 n=length$5(bucket),
                 prev_len=(((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
                 live=count_bucket(0,bucket,0);
                if(live <= prev_len)
                 {var j$2=length$5(bucket) - 1 | 0,i$0=0,j=j$2;
                  for(;;)
                   {if(prev_len <= j)
                     {if(check$0(bucket,i$0))
                       {var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                      if(check$0(bucket,j))
                       {blit$4(bucket,j,bucket,i$0,1);
                        var _lb_=caml_check_bound(hbucket,j)[1 + j];
                        caml_check_bound(hbucket,i$0)[1 + i$0] = _lb_;
                        var j$0=j - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j=j$0;
                        continue}
                      var j$1=j - 1 | 0,j=j$1;
                      continue}
                    if(0 === prev_len)
                     {var _lc_=t[5];
                      caml_check_bound(t[1],_lc_)[1 + _lc_] = emptybucket;
                      var _ld_=t[5];
                      caml_check_bound(t[2],_ld_)[1 + _ld_] = [0]}
                    else
                     {var newbucket=weak_create(prev_len);
                      blit$4(bucket,0,newbucket,0,prev_len);
                      var _lg_=t[5];
                      caml_check_bound(t[1],_lg_)[1 + _lg_] = newbucket;
                      var _lh_=sub$1(hbucket,0,prev_len),_li_=t[5];
                      caml_check_bound(t[2],_li_)[1 + _li_] = _lh_}
                    var _le_=t[3] < n?1:0,_lf_=_le_?prev_len <= t[3]?1:0:_le_;
                    if(_lf_)t[4] = t[4] - 1 | 0;
                    break}}
                t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
                var _lm_=i$4 + 1 | 0;
                if(2 !== i$4){var i$4=_lm_;continue}
                break}}
            var _ll_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
            if(_ll_)
             {var
               n$0=t[1].length - 1,
               newlen=min(((3 * n$0 | 0) / 2 | 0) + 3 | 0,max_array_length);
              if(n$0 < newlen)
               {var newt=create(newlen),_k__=t[1],i=0;
                iteri$2
                 (function(j,ob)
                   {var i$0=i;
                    for(;;)
                     {if(length$5(ob) <= i$0)return 0;
                      var match=check$0(ob,i$0);
                      if(match)
                       {var
                         oh=caml_check_bound(t[2],j)[1 + j],
                         setter$0=
                          function(i)
                           {function setter(nb,ni,param){return blit$4(ob,i,nb,ni,1)}
                            return setter},
                         setter=setter$0(i$0),
                         h=caml_check_bound(oh,i$0)[1 + i$0];
                        add_aux(newt,setter,0,h,get_index(newt,h));
                        var i$1=i$0 + 1 | 0,i$0=i$1;
                        continue}
                      var i$2=i$0 + 1 | 0,i$0=i$2;
                      continue}},
                  _k__);
                t[1] = newt[1];
                t[2] = newt[2];
                t[3] = newt[3];
                t[4] = newt[4];
                t[5] = caml_mod(t[5],newt[1].length - 1);
                return 0}
              t[3] = max_int;
              t[4] = 0;
              return 0}
            return _ll_}
          if(check$0(bucket$0,i$3)){var i$5=i$3 + 1 | 0,i$3=i$5;continue}
          caml_call3(setter,bucket$0,i$3,d);
          caml_check_bound(hashes,i$3)[1 + i$3] = h;
          return 0}}
      function add(t,d)
       {var h=caml_call1(H[2],d);return add_aux(t,set,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return caml_call2(ifnotfound,h,index);
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0){var v$0=match$0[1];return v$0}
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function merge(t,d)
       {return find_or
                (t,d,function(h,index){add_aux(t,set,[0,d],h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return 0;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var v$0=get$0(bucket,i);
                if(v$0)return v$0;
                var i$0=i + 1 | 0,i=i$0;
                continue}}
            var i$1=i + 1 | 0,i=i$1;
            continue}
          var i$2=i + 1 | 0,i=i$2;
          continue}}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0;
        for(;;)
         {if(sz <= i)return ifnotfound;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))return caml_call2(iffound,bucket,i)}
            var i$0=i + 1 | 0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}}
      function remove(t,d)
       {var _k9_=0;
        return find_shadow(t,d,function(w,i){return set(w,i,0)},_k9_)}
      function mem(t,d)
       {var _k8_=0;return find_shadow(t,d,function(w,i){return 1},_k8_)}
      function find_all(t,d)
       {var
         h=caml_call1(H[2],d),
         index=get_index(t,h),
         bucket=caml_check_bound(t[1],index)[1 + index],
         hashes=caml_check_bound(t[2],index)[1 + index],
         sz=length$5(bucket),
         i=0,
         accu=0;
        for(;;)
         {if(sz <= i)return accu;
          if(h === caml_check_bound(hashes,i)[1 + i])
           {var match=get_copy(bucket,i);
            if(match)
             {var v=match[1];
              if(caml_call2(H[1],v,d))
               {var match$0=get$0(bucket,i);
                if(match$0)
                 {var
                   v$0=match$0[1],
                   accu$0=[0,v$0,accu],
                   i$0=i + 1 | 0,
                   i=i$0,
                   accu=accu$0;
                  continue}
                var i$1=i + 1 | 0,i=i$1;
                continue}}
            var i$2=i + 1 | 0,i=i$2;
            continue}
          var i$3=i + 1 | 0,i=i$3;
          continue}}
      function stats(t)
       {var len=t[1].length - 1,lens=map$5(length$5,t[1]);
        sort(caml_int_compare,lens);
        var
         _k0_=0,
         totlen=
          fold_left$1(function(_k7_,_k6_){return _k7_ + _k6_ | 0},_k0_,lens),
         _k1_=len - 1 | 0,
         _k3_=len / 2 | 0,
         _k2_=caml_check_bound(lens,_k1_)[1 + _k1_],
         _k4_=caml_check_bound(lens,_k3_)[1 + _k3_],
         _k5_=caml_check_bound(lens,0)[1];
        return [0,len,count(t),totlen,_k5_,_k4_,_k2_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    var
     Stdlib_weak=
      [0,weak_create,length$5,set,get$0,get_copy,check$0,fill$2,blit$4,Make$1];
    caml_register_global(787,Stdlib_weak,"Stdlib__weak");
    function id$0(x){return x}
    var
     String_tag=[248,cst_Stdlib_Format_String_tag,caml_fresh_oo_id(0)],
     size=0,
     unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _kZ_=caml_string_notequal(s,cst$66);
      return _kZ_?format_pp_text(state,caml_ml_string_length(s),s):_kZ_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_b6_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     {for(;;)
       {var match$12=peek_opt(state[28]);
        if(match$12)
         {var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
           _kX_=0 <= size$0?1:0,
           _kY_=_kX_ || (state[9] <= pending_count?1:0);
          if(_kY_)
           {take(state[28]);
            var size$1=0 <= size$0?size$0:pp_infinity;
            if(typeof token === "number")
             switch(token)
              {case 0:
                var match$3=top_opt(state[3]);
                if(match$3)
                 {var
                   match$4=match$3[1],
                   tabs=match$4[1],
                   add_tab=
                    function(n,ls)
                     {if(ls)
                       {var l=ls[2],x=ls[1];
                        return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                      return [0,n,0]};
                  tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1])}
                break;
               case 1:pop_opt(state[2]);break;
               case 2:pop_opt(state[3]);break;
               case 3:
                var match$5=top_opt(state[2]);
                if(match$5)
                 {var match$6=match$5[1],width$0=match$6[2];
                  break_line(state,width$0)}
                else
                 pp_output_newline(state);
                break;
               case 4:
                if(state[10] !== (state[6] - state[9] | 0))
                 {var match$1=take_opt(state[28]);
                  if(match$1)
                   {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                    state[12] = state[12] - length | 0;
                    state[9] = state[9] + size | 0}}
                break;
               default:
                var match$7=pop_opt(state[5]);
                if(match$7)
                 {var
                   tag_name=match$7[1],
                   marker=caml_call1(state[25],tag_name);
                  pp_output_string(state,marker)}}
            else
             switch(token[0])
              {case 0:var s=token[1];format_pp_text(state,size$1,s);break;
               case 1:
                var
                 breaks=token[2],
                 fits=token[1],
                 off=breaks[2],
                 before=breaks[1],
                 match$8=top_opt(state[2]);
                if(match$8)
                 {var
                   match$9=match$8[1],
                   width$1=match$9[2],
                   box_type$0=match$9[1];
                  switch(box_type$0)
                   {case 0:break_same_line(state,fits);break;
                    case 1:break_new_line(state,breaks,width$1);break;
                    case 2:break_new_line(state,breaks,width$1);break;
                    case 3:
                     if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                      break_new_line(state,breaks,width$1);
                     else
                      break_same_line(state,fits);
                     break;
                    case 4:
                     if(state[11])
                      break_same_line(state,fits);
                     else
                      if(state[9] < (size$1 + caml_ml_string_length(before) | 0))
                       break_new_line(state,breaks,width$1);
                      else
                       if(((state[6] - width$1 | 0) + off | 0) < state[10])
                        break_new_line(state,breaks,width$1);
                       else
                        break_same_line(state,fits);
                     break;
                    default:break_same_line(state,fits)}}
                break;
               case 2:
                var
                 off$0=token[2],
                 n=token[1],
                 insertion_point=state[6] - state[9] | 0,
                 match$10=top_opt(state[3]);
                if(match$10)
                 {var match$11=match$10[1],tabs$0=match$11[1],_kV_=tabs$0[1];
                  if(_kV_)
                   {var first=_kV_[1],param=tabs$0[1];
                    for(;;)
                     {if(param)
                       {var tail=param[2],head=param[1];
                        if(! (insertion_point <= head)){var param=tail;continue}
                        var _kW_=head}
                      else
                       var _kW_=first;
                      var tab=_kW_;
                      break}}
                  else
                   var tab=insertion_point;
                  var offset=tab - insertion_point | 0;
                  if(0 <= offset)
                   break_same_line(state,[0,cst$68,offset + n | 0,cst$67]);
                  else
                   break_new_line
                    (state,[0,cst$70,tab + off$0 | 0,cst$69],state[6])}
                break;
               case 3:
                var
                 ty=token[2],
                 off$1=token[1],
                 insertion_point$0=state[6] - state[9] | 0;
                if(state[8] < insertion_point$0)
                 {var match=top_opt(state[2]);
                  if(match)
                   {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                    if(state[9] < width)
                     {var switcher=box_type - 1 | 0;
                      if(! (3 < switcher >>> 0))break_line(state,width)}}
                  else
                   pp_output_newline(state)}
                var
                 width$2=state[9] - off$1 | 0,
                 box_type$1=1 === ty?1:state[9] < size$1?ty:5;
                push([0,box_type$1,width$2],state[2]);
                break;
               case 4:var tbox=token[1];push(tbox,state[3]);break;
               default:
                var
                 tag_name$0=token[1],
                 marker$0=caml_call1(state[24],tag_name$0);
                pp_output_string(state,marker$0);
                push(tag_name$0,state[5])}
            state[12] = length$0 + state[12] | 0;
            continue}
          return _kY_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_b7_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _kS_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _kT_=queue_elem[2];
        if(typeof _kT_ !== "number")
         switch(_kT_[0])
          {case 3:
            var _kU_=1 - ty;
            return _kU_
                    ?(queue_elem[1] = state[13] + _kS_ | 0,pop_opt(state[1]),0)
                    :_kU_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _kS_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _kQ_=state[14] === state[15]?1:0;
      if(_kQ_)
       {var _kR_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_kR_),_kR_)}
      return _kQ_}
    function pp_close_box(state,param)
     {var _kO_=1 < state[14]?1:0;
      if(_kO_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _kP_=0}
      else
       var _kP_=_kO_;
      return _kP_}
    function pp_open_stag(state,tag_name)
     {if(state[22]){push(tag_name,state[4]);caml_call1(state[26],tag_name)}
      var _kN_=state[23];
      if(_kN_)
       {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
      return _kN_}
    function pp_close_stag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _kL_=state[22];
      if(_kL_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _kM_=0}
      else
       var _kM_=_kL_;
      return _kM_}
    function pp_open_tag(state,s){return pp_open_stag(state,[0,String_tag,s])}
    function pp_close_tag(state,param){return pp_close_stag(state,0)}
    function pp_set_print_tags(state,b){state[22] = b;return 0}
    function pp_set_mark_tags(state,b){state[23] = b;return 0}
    function pp_get_print_tags(state,param){return state[22]}
    function pp_get_mark_tags(state,param){return state[23]}
    function pp_set_tags(state,b)
     {pp_set_print_tags(state,b);return pp_set_mark_tags(state,b)}
    function pp_get_formatter_stag_function(state,param)
     {return [0,state[24],state[25],state[26],state[27]]}
    function pp_set_formatter_stag_function(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      state[24] = mot;
      state[25] = mct;
      state[26] = pot;
      state[27] = pct;
      return 0}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _kK_=state[4];
      iter$7(function(param){return pp_close_tag(state,0)},_kK_);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _kJ_=state[14] < state[15]?1:0;
      return _kJ_?enqueue_string_as(state,size,s):_kJ_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_int(state,i)
     {return pp_print_string(state,caml_string_of_jsbytes("" + i))}
    function pp_print_float(state,f)
     {return pp_print_string(state,to_string(f))}
    function pp_print_bool(state,b)
     {return pp_print_string(state,string_of_bool(b))}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_hbox(state,param){return pp_open_box_gen(state,0,0)}
    function pp_open_vbox(state,indent)
     {return pp_open_box_gen(state,indent,1)}
    function pp_open_hvbox(state,indent)
     {return pp_open_box_gen(state,indent,2)}
    function pp_open_hovbox(state,indent)
     {return pp_open_box_gen(state,indent,3)}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {pp_flush_queue(state,1);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _kI_=state[14] < state[15]?1:0;
      return _kI_?enqueue_advance(state,[0,size,3,0]):_kI_}
    function pp_print_if_newline(state,param)
     {var _kH_=state[14] < state[15]?1:0;
      return _kH_?enqueue_advance(state,[0,size,4,0]):_kH_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _kG_=state[14] < state[15]?1:0;
      if(_kG_)
       {var
         size=- state[13] | 0,
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _kG_}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,cst$74,width,cst$73],[0,cst$72,offset,cst$71])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_open_tbox(state,param)
     {state[14] = state[14] + 1 | 0;
      var _kF_=state[14] < state[15]?1:0;
      if(_kF_)
       {var elem=[0,size,[4,[0,[0,0]]],0];return enqueue_advance(state,elem)}
      return _kF_}
    function pp_close_tbox(state,param)
     {var _kC_=1 < state[14]?1:0;
      if(_kC_)
       {var _kD_=state[14] < state[15]?1:0;
        if(_kD_)
         {var elem=[0,size,2,0];
          enqueue_advance(state,elem);
          state[14] = state[14] - 1 | 0;
          var _kE_=0}
        else
         var _kE_=_kD_}
      else
       var _kE_=_kC_;
      return _kE_}
    function pp_print_tbreak(state,width,offset)
     {var _kB_=state[14] < state[15]?1:0;
      if(_kB_)
       {var size=- state[13] | 0,elem=[0,size,[2,width,offset],width];
        return scan_push(state,1,elem)}
      return _kB_}
    function pp_print_tab(state,param){return pp_print_tbreak(state,0,0)}
    function pp_set_tab(state,param)
     {var _kA_=state[14] < state[15]?1:0;
      if(_kA_){var elem=[0,size,0,0];return enqueue_advance(state,elem)}
      return _kA_}
    function pp_set_max_boxes(state,n)
     {var _ky_=1 < n?1:0,_kz_=_ky_?(state[15] = n,0):_ky_;return _kz_}
    function pp_get_max_boxes(state,param){return state[15]}
    function pp_over_max_boxes(state,param)
     {return state[14] === state[15]?1:0}
    function pp_set_ellipsis_text(state,s){state[16] = s;return 0}
    function pp_get_ellipsis_text(state,param){return state[16]}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _kx_=1 < n$0?1:0;
      if(_kx_)
       {var n$1=state[6] - n$0 | 0,_kw_=1 <= n$1?1:0;
        if(_kw_)
         {var n=pp_limit(n$1);
          state[7] = n;
          state[8] = state[6] - state[7] | 0;
          return pp_rinit(state)}
        return _kw_}
      return _kx_}
    function pp_get_max_indent(state,param){return state[8]}
    function pp_set_margin(state,n)
     {var _kv_=1 <= n?1:0;
      if(_kv_)
       {var n$0=pp_limit(n);
        state[6] = n$0;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _kv_}
    function check_geometry(geometry)
     {var
       _kt_=1 < geometry[1]?1:0,
       _ku_=_kt_?geometry[1] < geometry[2]?1:0:_kt_;
      return _ku_}
    function pp_get_margin(state,param){return state[6]}
    function pp_set_geometry(state,max_indent,margin)
     {if(2 <= max_indent)
       {if(margin <= max_indent)
         throw [0,Invalid_argument,cst_Format_pp_set_geometry_mar];
        pp_set_margin(state,margin);
        return pp_set_max_indent(state,max_indent)}
      throw [0,Invalid_argument,cst_Format_pp_set_geometry_max]}
    function pp_safe_set_geometry(state,max_indent,margin)
     {return check_geometry([0,max_indent,margin])
              ?pp_set_geometry(state,max_indent,margin)
              :0}
    function pp_get_geometry(state,param){return [0,state[8],state[6]]}
    function pp_set_formatter_out_functions(state,param)
     {var j=param[5],i=param[4],h=param[3],g=param[2],f=param[1];
      state[17] = f;
      state[18] = g;
      state[19] = h;
      state[20] = i;
      state[21] = j;
      return 0}
    function pp_get_formatter_out_functions(state,param)
     {return [0,state[17],state[18],state[19],state[20],state[21]]}
    function pp_set_formatter_output_functi(state,f,g)
     {state[17] = f;state[18] = g;return 0}
    function pp_get_formatter_output_functi(state,param)
     {return [0,state[17],state[18]]}
    function display_newline(state,param)
     {return caml_call3(state[17],cst$75,0,1)}
    var blank_line=make$0(80,32);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _ks_=0 < n$0?1:0;
        if(_ks_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _ks_}}
    function pp_set_formatter_out_channel(state,oc)
     {state[17]
      =
      function(_kp_,_kq_,_kr_){return output_substring(oc,_kp_,_kq_,_kr_)};
      state[18] = function(param){return caml_ml_flush(oc)};
      state[19] = function(_ko_){return display_newline(state,_ko_)};
      state[20] = function(_kn_){return display_indent(state,_kn_)};
      state[21] = function(_km_){return display_indent(state,_km_)};
      return 0}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$77,symbol(s,cst$76))}
      return cst$78}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(cst$80,symbol(s,cst$79))}
      return cst$81}
    function default_pp_print_open_tag(_kl_){return 0}
    function default_pp_print_close_tag(_kk_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var pp_queue=create$1(0),sys_tok=[0,unknown,_b8_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create$0(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var _kh_=create$0(0),_ki_=create$0(0),_kj_=create$0(0);
      return [0,
              scan_stack,
              create$0(0),
              _kj_,
              _ki_,
              _kh_,
              78,
              10,
              68,
              78,
              0,
              1,
              1,
              1,
              1,
              max_int,
              cst$82,
              f,
              g,
              h,
              i,
              j,
              0,
              0,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function formatter_of_out_functions(out_funs)
     {return pp_make_formatter
              (out_funs[1],out_funs[2],out_funs[3],out_funs[4],out_funs[5])}
    function make_formatter(output,flush)
     {function _j$_(_kg_){return 0}
      function _ka_(_kf_){return 0}
      var
       ppf=
        pp_make_formatter(output,flush,function(_ke_){return 0},_ka_,_j$_);
      ppf[19] = function(_kd_){return display_newline(ppf,_kd_)};
      ppf[20] = function(_kc_){return display_indent(ppf,_kc_)};
      ppf[21] = function(_kb_){return display_indent(ppf,_kb_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _j7_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(_j8_,_j9_,_j__)
                {return output_substring(oc,_j8_,_j9_,_j__)},
               _j7_)}
    function formatter_of_buffer(b)
     {function _j2_(_j6_){return 0}
      return make_formatter
              (function(_j3_,_j4_,_j5_)
                {return add_substring(b,_j3_,_j4_,_j5_)},
               _j2_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$2(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr),
     str_formatter=formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {pp_flush_queue(ppf,0);var s=contents(buf);reset(buf);return s}
    function flush_str_formatter(param)
     {return flush_buffer_formatter(stdbuf,str_formatter)}
    function make_symbolic_output_buffer(param){return [0,0]}
    function clear_symbolic_output_buffer(sob){sob[1] = 0;return 0}
    function get_symbolic_output_buffer(sob){return rev(sob[1])}
    function flush_symbolic_output_buffer(sob)
     {var items=get_symbolic_output_buffer(sob);
      clear_symbolic_output_buffer(sob);
      return items}
    function add_symbolic_output_item(sob,item)
     {sob[1] = [0,item,sob[1]];return 0}
    function formatter_of_symbolic_output_b(sob)
     {function f(s,i,n){return add_symbolic_output_item(sob,[0,sub$0(s,i,n)])}
      function g(_j1_){return add_symbolic_output_item(sob,0)}
      function h(_j0_){return add_symbolic_output_item(sob,1)}
      function i(n){return add_symbolic_output_item(sob,[1,n])}
      function j(n){return add_symbolic_output_item(sob,[2,n])}
      return pp_make_formatter(f,g,h,i,j)}
    function open_hbox(_jZ_){return pp_open_hbox(std_formatter,_jZ_)}
    function open_vbox(_jY_){return pp_open_vbox(std_formatter,_jY_)}
    function open_hvbox(_jX_){return pp_open_hvbox(std_formatter,_jX_)}
    function open_hovbox(_jW_){return pp_open_hovbox(std_formatter,_jW_)}
    function open_box(_jV_){return pp_open_box(std_formatter,_jV_)}
    function close_box(_jU_){return pp_close_box(std_formatter,_jU_)}
    function open_tag(_jT_){return pp_open_tag(std_formatter,_jT_)}
    function close_tag(_jS_){return pp_close_tag(std_formatter,_jS_)}
    function open_stag(_jR_){return pp_open_stag(std_formatter,_jR_)}
    function close_stag(_jQ_){return pp_close_stag(std_formatter,_jQ_)}
    function print_as(_jO_,_jP_){return pp_print_as(std_formatter,_jO_,_jP_)}
    function print_string$0(_jN_){return pp_print_string(std_formatter,_jN_)}
    function print_int$0(_jM_){return pp_print_int(std_formatter,_jM_)}
    function print_float$0(_jL_){return pp_print_float(std_formatter,_jL_)}
    function print_char$0(_jK_){return pp_print_char(std_formatter,_jK_)}
    function print_bool(_jJ_){return pp_print_bool(std_formatter,_jJ_)}
    function print_break(_jH_,_jI_)
     {return pp_print_break(std_formatter,_jH_,_jI_)}
    function print_cut(_jG_){return pp_print_cut(std_formatter,_jG_)}
    function print_space(_jF_){return pp_print_space(std_formatter,_jF_)}
    function force_newline(_jE_){return pp_force_newline(std_formatter,_jE_)}
    function print_flush(_jD_){return pp_print_flush(std_formatter,_jD_)}
    function print_newline$0(_jC_)
     {return pp_print_newline(std_formatter,_jC_)}
    function print_if_newline(_jB_)
     {return pp_print_if_newline(std_formatter,_jB_)}
    function open_tbox(_jA_){return pp_open_tbox(std_formatter,_jA_)}
    function close_tbox(_jz_){return pp_close_tbox(std_formatter,_jz_)}
    function print_tbreak(_jx_,_jy_)
     {return pp_print_tbreak(std_formatter,_jx_,_jy_)}
    function set_tab(_jw_){return pp_set_tab(std_formatter,_jw_)}
    function print_tab(_jv_){return pp_print_tab(std_formatter,_jv_)}
    function set_margin(_ju_){return pp_set_margin(std_formatter,_ju_)}
    function get_margin(_jt_){return std_formatter[6]}
    function set_max_indent(_js_)
     {return pp_set_max_indent(std_formatter,_js_)}
    function get_max_indent(_jr_){return std_formatter[8]}
    function set_geometry(_jp_,_jq_)
     {return pp_set_geometry(std_formatter,_jp_,_jq_)}
    function safe_set_geometry(_jn_,_jo_)
     {return pp_safe_set_geometry(std_formatter,_jn_,_jo_)}
    function get_geometry(_jm_){return pp_get_geometry(std_formatter,_jm_)}
    function set_max_boxes(_jl_){return pp_set_max_boxes(std_formatter,_jl_)}
    function get_max_boxes(_jk_){return std_formatter[15]}
    function over_max_boxes(_jj_)
     {return pp_over_max_boxes(std_formatter,_jj_)}
    function set_ellipsis_text(_ji_)
     {return pp_set_ellipsis_text(std_formatter,_ji_)}
    function get_ellipsis_text(_jh_){return std_formatter[16]}
    function set_formatter_out_channel(_jg_)
     {return pp_set_formatter_out_channel(std_formatter,_jg_)}
    function set_formatter_out_functions(_jf_)
     {return pp_set_formatter_out_functions(std_formatter,_jf_)}
    function get_formatter_out_functions(_je_)
     {return pp_get_formatter_out_functions(std_formatter,_je_)}
    function set_formatter_output_functions(_jc_,_jd_)
     {return pp_set_formatter_output_functi(std_formatter,_jc_,_jd_)}
    function get_formatter_output_functions(_jb_)
     {return pp_get_formatter_output_functi(std_formatter,_jb_)}
    function set_formatter_stag_functions(_ja_)
     {return pp_set_formatter_stag_function(std_formatter,_ja_)}
    function get_formatter_stag_functions(_i$_)
     {return pp_get_formatter_stag_function(std_formatter,_i$_)}
    function set_print_tags(_i__)
     {return pp_set_print_tags(std_formatter,_i__)}
    function get_print_tags(_i9_){return std_formatter[22]}
    function set_mark_tags(_i8_){return pp_set_mark_tags(std_formatter,_i8_)}
    function get_mark_tags(_i7_){return std_formatter[23]}
    function set_tags(_i6_){return pp_set_tags(std_formatter,_i6_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _i5_=param$0[1];
          if(param$0[2])
           {var vs=param$0[2];
            caml_call2(pp_v,ppf,_i5_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=vs;
            continue}
          return caml_call2(pp_v,ppf,_i5_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {pp_print_string(ppf,sub$0(s,left[1],right[1] - left[1] | 0));
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var match=caml_string_get(s,right[1]);
          if(10 === match)
           {flush(0);pp_force_newline(ppf,0)}
          else
           if(32 === match){flush(0);pp_print_space(ppf,0)}else right[1]++;
          continue}
        var _i4_=left[1] !== len?1:0;
        return _i4_?flush(0):_i4_}}
    function pp_print_option(opt,pp_v,ppf,param)
     {if(opt)
       var sth=opt[1],none=sth;
      else
       var none=function(param,_i3_){return 0};
      if(param){var v=param[1];return caml_call2(pp_v,ppf,v)}
      return caml_call2(none,ppf,0)}
    function pp_print_result(ok,error,ppf,param)
     {if(0 === param[0]){var v=param[1];return caml_call2(ok,ppf,v)}
      var e=param[1];
      return caml_call2(error,ppf,e)}
    function compute_tag(output,tag_acc)
     {var buf=create$2(16),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=buf[2];
      return 2 <= len?sub$3(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1];
          pp_print_char(ppf,64);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iT_=acc[2],_iU_=acc[1];
          if(0 === _iT_[0])
           {var acc$0=_iT_[1];
            output_acc$0(ppf,_iU_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
          var acc$1=_iT_[1];
          output_acc$0(ppf,_iU_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iV_=acc[1],switch$1=0;
          if(typeof _iV_ !== "number" && 0 === _iV_[0])
           {var _iW_=_iV_[2],switch$2=0;
            if(typeof _iW_ !== "number" && 1 === _iW_[0])
             {var s$0=acc[2],size=_iW_[2],p$1=_iV_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_iV_;switch$0 = 2}
          break;
         case 3:
          var _iX_=acc[1],switch$3=0;
          if(typeof _iX_ !== "number" && 0 === _iX_[0])
           {var _iY_=_iX_[2],switch$4=0;
            if(typeof _iY_ !== "number" && 1 === _iY_[0])
             {var c$0=acc[2],size$0=_iY_[2],p$3=_iX_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_iX_;switch$0 = 3}
          break;
         case 4:
          var _iZ_=acc[1],switch$5=0;
          if(typeof _iZ_ !== "number" && 0 === _iZ_[0])
           {var _i0_=_iZ_[2],switch$6=0;
            if(typeof _i0_ !== "number" && 1 === _i0_[0])
             {var s$0=acc[2],size=_i0_[2],p$1=_iZ_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_iZ_;switch$0 = 2}
          break;
         case 5:
          var _i1_=acc[1],switch$7=0;
          if(typeof _i1_ === "number" || ! (0 === _i1_[0]))
           switch$7 = 1;
          else
           {var _i2_=_i1_[2],switch$8=0;
            if(typeof _i2_ !== "number" && 1 === _i2_[0])
             {var c$0=acc[2],size$0=_i2_[2],p$3=_i1_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_i1_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _iH_=acc[2],_iI_=acc[1];
          if(0 === _iH_[0])
           {var acc$0=_iH_[1];
            strput_acc$0(ppf,_iI_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
          var acc$1=_iH_[1];
          strput_acc$0(ppf,_iI_);
          var
           match=open_box_of_string(compute_tag(strput_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _iJ_=acc[1],switch$1=0;
          if(typeof _iJ_ !== "number" && 0 === _iJ_[0])
           {var _iK_=_iJ_[2],switch$2=0;
            if(typeof _iK_ !== "number" && 1 === _iK_[0])
             {var s$0=acc[2],size=_iK_[2],p$1=_iJ_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_iJ_;switch$0 = 2}
          break;
         case 3:
          var _iL_=acc[1],switch$3=0;
          if(typeof _iL_ !== "number" && 0 === _iL_[0])
           {var _iM_=_iL_[2],switch$4=0;
            if(typeof _iM_ !== "number" && 1 === _iM_[0])
             {var c$0=acc[2],size$0=_iM_[2],p$3=_iL_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c=acc[2],p$2=_iL_;switch$0 = 3}
          break;
         case 4:
          var _iN_=acc[1],switch$5=0;
          if(typeof _iN_ !== "number" && 0 === _iN_[0])
           {var _iO_=_iN_[2],switch$6=0;
            if(typeof _iO_ !== "number" && 1 === _iO_[0])
             {var s$0=acc[2],size=_iO_[2],p$1=_iN_[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_iN_;switch$0 = 2}
          break;
         case 5:
          var _iP_=acc[1],switch$7=0;
          if(typeof _iP_ === "number" || ! (0 === _iP_[0]))
           switch$7 = 1;
          else
           {var _iQ_=_iP_[2],switch$8=0;
            if(typeof _iQ_ !== "number" && 1 === _iQ_[0])
             {var c$0=acc[2],size$0=_iQ_[2],p$3=_iP_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c=acc[2],p$2=_iP_;switch$0 = 3}
          break;
         case 6:
          var _iR_=acc[1];
          if(typeof _iR_ !== "number" && 0 === _iR_[0])
           {var _iS_=_iR_[2];
            if(typeof _iS_ !== "number" && 1 === _iS_[0])
             {var f$1=acc[2],size$1=_iS_[2],p$4=_iR_[1];
              strput_acc$0(ppf,p$4);
              return pp_print_as_size(ppf,size$1,caml_call1(f$1,0))}}
          var f$0=acc[2];
          strput_acc$0(ppf,_iR_);
          return pp_print_string(ppf,caml_call1(f$0,0));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$0));
        case 2:strput_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_iG_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _iG_,
               fmt)}
    function ikfprintf$0(k,ppf,param)
     {var fmt=param[1];return make_iprintf(k,ppf,fmt)}
    function ifprintf$0(ppf,param)
     {var fmt=param[1],_iE_=0;
      return make_iprintf(function(_iF_){return 0},_iE_,fmt)}
    function fprintf$0(ppf)
     {function _iB_(_iD_){return 0}
      return function(_iC_){return kfprintf$0(_iB_,ppf,_iC_)}}
    function printf$0(fmt){return caml_call1(fprintf$0(std_formatter),fmt)}
    function eprintf$0(fmt){return caml_call1(fprintf$0(err_formatter),fmt)}
    function kdprintf(k,param)
     {var fmt=param[1],_iA_=0;
      return make_printf
              (function(acc)
                {return caml_call1
                         (k,function(ppf){return output_acc$0(ppf,acc)})},
               _iA_,
               fmt)}
    function dprintf(fmt){return kdprintf(function(i){return i},fmt)}
    function kprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return kprintf(id$0,fmt)}
    function kasprintf(k,param)
     {var fmt=param[1],b=pp_make_buffer(0),ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id$0,fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(std_formatter,0);return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    function pp_set_all_formatter_output_fu(state,f,g,h,i)
     {pp_set_formatter_output_functi(state,f,g);
      state[19] = h;
      state[20] = i;
      return 0}
    function pp_get_all_formatter_output_fu(state,param)
     {return [0,state[17],state[18],state[19],state[20]]}
    function set_all_formatter_output_funct(_iw_,_ix_,_iy_,_iz_)
     {return pp_set_all_formatter_output_fu(std_formatter,_iw_,_ix_,_iy_,_iz_)}
    function get_all_formatter_output_funct(_iv_)
     {return pp_get_all_formatter_output_fu(std_formatter,_iv_)}
    function bprintf$0(b,param)
     {var fmt=param[1],ppf=formatter_of_buffer(b);
      function k(acc){output_acc$0(ppf,acc);return pp_flush_queue(ppf,0)}
      return make_printf(k,0,fmt)}
    function pp_set_formatter_tag_functions(state,param)
     {var pct=param[4],pot=param[3],mct=param[2],mot=param[1];
      function stringify(f,e,param)
       {if(param[1] === String_tag){var s=param[2];return caml_call1(f,s)}
        return e}
      state[24] = function(_iu_){return stringify(mot,cst$83,_iu_)};
      state[25] = function(_it_){return stringify(mct,cst$84,_it_)};
      var _ip_=0;
      state[26] = function(_is_){return stringify(pot,_ip_,_is_)};
      var _iq_=0;
      state[27] = function(_ir_){return stringify(pct,_iq_,_ir_)};
      return 0}
    function pp_get_formatter_tag_functions(fmt,param)
     {var funs=pp_get_formatter_stag_function(fmt,0);
      function mark_open_tag(s){return caml_call1(funs[1],[0,String_tag,s])}
      function mark_close_tag(s){return caml_call1(funs[2],[0,String_tag,s])}
      function print_open_tag(s){return caml_call1(funs[3],[0,String_tag,s])}
      function print_close_tag(s){return caml_call1(funs[4],[0,String_tag,s])}
      return [0,mark_open_tag,mark_close_tag,print_open_tag,print_close_tag]}
    function set_formatter_tag_functions(_io_)
     {return pp_set_formatter_tag_functions(std_formatter,_io_)}
    function get_formatter_tag_functions(_in_)
     {return pp_get_formatter_tag_functions(std_formatter,_in_)}
    var
     Stdlib_format=
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string$0,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int$0,
       pp_print_float,
       print_float$0,
       pp_print_char,
       print_char$0,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline$0,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       fprintf$0,
       printf$0,
       eprintf$0,
       sprintf$0,
       asprintf,
       dprintf,
       ifprintf$0,
       kfprintf$0,
       kdprintf,
       ikfprintf$0,
       kprintf,
       kasprintf,
       bprintf$0,
       kprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions];
    caml_register_global(788,Stdlib_format,"Stdlib__format");
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_im_)
       {_im_ = caml_wrap_exception(_im_);
        if(_im_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _im_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function beginning_of_input(ib){return 0 === ib[4]?1:0}
    function name_of_input(ib)
     {var _il_=ib[9];
      if(typeof _il_ === "number")
       return 0 === _il_?cst_unnamed_function:cst_unnamed_character_string;
      else
       {if(0 === _il_[0])return cst_unnamed_Stdlib_input_chann;
        var fname=_il_[1];
        return fname}}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$4(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$2(default_token_buffer_size),
              iname]}
    function from_string$1(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      return create$4(1,next)}
    var _b9_=0;
    function from_function$0(_ik_){return create$4(_b9_,_ik_)}
    var len=1024;
    function scan_close_at_end(ic)
     {caml_ml_close_channel(ic);throw End_of_file}
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(buf,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        lim[1] = input(ic,buf,0,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$4(iname,next)}
    var stdib=from_ic(scan_raise_at_end,[1,cst$85,stdin],stdin);
    function open_in_file(open_in,fname)
     {if(caml_string_notequal(fname,cst$86))
       {var ic=caml_call1(open_in,fname);
        return from_ic(scan_close_at_end,[1,fname,ic],ic)}
      return stdib}
    function from_file(_ij_){return open_in_file(open_in,_ij_)}
    function from_file_bin(_ii_){return open_in_file(open_in_bin,_ii_)}
    function from_channel$0(ic){return from_ic(scan_raise_at_end,[0,ic],ic)}
    function close_in$0(ib)
     {var _ih_=ib[9];
      if(typeof _ih_ === "number")
       return 0;
      else
       {if(0 === _ih_[0]){var ic=_ih_[1];return caml_ml_close_channel(ic)}
        var ic$0=_ih_[2];
        return caml_ml_close_channel(ic$0)}}
    var memo=[0,0];
    function memo_from_ic(scan_close_ic,ic)
     {try
       {var _if_=assq(ic,memo[1]);return _if_}
      catch(_ig_)
       {_ig_ = caml_wrap_exception(_ig_);
        if(_ig_ === Not_found)
         {var ib=from_ic(scan_close_ic,[0,ic],ic);
          memo[1] = [0,[0,ic,ib],memo[1]];
          return ib}
        throw _ig_}}
    function memo_from_channel(_ie_)
     {return memo_from_ic(scan_raise_at_end,_ie_)}
    var Scan_failure=[248,cst_Stdlib_Scanf_Scan_failure,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_b__),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_b$_),message))}
    function bad_float(param)
     {return bad_input(cst_no_dot_or_exponent_part_fo)}
    function bad_hex_float(param)
     {return bad_input(cst_not_a_valid_float_in_hexad)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cb_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_ic_=1 - ib[1];
         if(_ic_)
          {var _id_=c - 9 | 0,switch$0=0;
           if(4 < _id_ >>> 0)
            {if(23 === _id_)switch$0 = 1}
           else
            if(1 < (_id_ - 2 | 0) >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _ic_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,cst_false$3)
              ?caml_string_notequal(s,cst_true$3)
                ?bad_input(caml_call1(sprintf(_cc_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cd_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=symbol(cst_0b,token_string(ib));break;
        case 3:var tok=symbol(cst_0o,token_string(ib));break;
        case 4:var tok=symbol(cst_0u,token_string(ib));break;
        case 5:var tok=symbol(cst_0x,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(cst_decimal_digits);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_ce_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(cst_digits);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_cf_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_ia_,_ib_)
     {return scan_digit_plus(cst_binary,is_binary_digit,_ia_,_ib_)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_h__,_h$_)
     {return scan_digit_plus(cst_octal,is_octal_digit,_h__,_h$_)}
    function is_hexa_digit(param)
     {var _h9_=param - 48 | 0,switch$0=0;
      if(22 < _h9_ >>> 0)
       {if(! (5 < (_h9_ - 49 | 0) >>> 0))switch$0 = 1}
      else
       if(6 < (_h9_ - 10 | 0) >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_h7_,_h8_)
     {return scan_digit_plus(cst_hexadecimal,is_hexa_digit,_h7_,_h8_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {var switcher=c - 65 | 0;
        return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _h4_=len - 1 | 0,
       _h3_=0;
      if(! (_h4_ < 0))
       {var i=_h3_;
        for(;;)
         {var c=peek_char(ib),_h5_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _h5_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _h6_=i + 1 | 0;
          if(_h4_ !== i){var i=_h6_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _hQ_=0 === width?1:0,_hR_=_hQ_ || end_of_input(ib);
      if(_hR_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _hS_=0 === width$0?1:0,
       _hT_=_hS_ || end_of_input(ib);
      if(_hT_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _hU_=0 === width$1?1:0,
             _hV_=_hU_ || end_of_input(ib);
            if(_hV_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,cst_an)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _hY_=0 === width$3?1:0,
           _hZ_=_hY_ || end_of_input(ib);
          if(_hZ_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,cst_x$2);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_h0_=match - 46 | 0,switch$1=0;
            if(34 < _h0_ >>> 0)
             {if(66 === _h0_)switch$1 = 1}
            else
             if(32 < (_h0_ - 1 | 0) >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _h1_=0 === width$9?1:0,
                 _h2_=_h1_ || end_of_input(ib);
                if(_h2_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _hW_=0 === width$2?1:0,
         _hX_=_hW_ || end_of_input(ib);
        if(_hX_)bad_hex_float(0);
        return check_case_insensitive_string
                (width$2,ib,bad_hex_float,cst_nfinity)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _hM_=0 === width?1:0,_hN_=_hM_ || end_of_input(ib);
      if(_hN_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _hO_=0 === width$0?1:0,
       _hP_=_hO_ || end_of_input(ib);
      if(_hP_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _hy_=0 === width?1:0,_hz_=_hy_ || end_of_input(ib);
      if(_hz_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _hA_=0 === width$0?1:0,
       _hB_=_hA_ || end_of_input(ib);
      if(_hB_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _hC_=0 === width$1?1:0,
           _hD_=_hC_ || end_of_input(ib);
          if(_hD_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _hE_=0 === width$2?1:0,
          _hF_=_hE_ || end_of_input(ib);
         if(_hF_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _hG_=0 === width$3?1:0,
          _hH_=_hG_ || end_of_input(ib);
         if(_hH_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _hI_=0 === width$4?1:0,
          _hJ_=_hI_ || end_of_input(ib);
         if(_hJ_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          {var switcher$0=switcher - 1 | 0;
           if(30 < switcher$0 >>> 0)var width$7=width$4;else switch$0 = 1}
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _hK_=0 === width$9?1:0,
            _hL_=_hK_ || end_of_input(ib);
           if(_hL_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _hx_=c - 9 | 0,switch$0=0;
        if(4 < _hx_ >>> 0)
         {if(23 === _hx_)switch$0 = 1}
        else
         if(1 < (_hx_ - 2 | 0) >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_ca_),message)):c}
    function check_next_char_for_char(_hv_,_hw_)
     {return check_next_char(cst_a_Char,_hv_,_hw_)}
    function check_next_char_for_string(_ht_,_hu_)
     {return check_next_char(cst_a_String,_ht_,_hu_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher$0=c0 - 92 | 0;
          if(! (28 < switcher$0 >>> 0))
           switch(switcher$0)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_hs_=c - 48 | 0,switch$0=0;
                  if(22 < _hs_ >>> 0)
                   {if(! (5 < (_hs_ - 49 | 0) >>> 0))switch$0 = 1}
                  else
                   if(6 < (_hs_ - 10 | 0) >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _ho_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _ho_ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _hq_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _hq_=bad_input(caml_call2(sprintf(_ch_),c1,c2));
              return store_char(width - 2 | 0,ib,_hq_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _hr_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _hr_=bad_input(caml_call3(sprintf(_cg_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_hr_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _hp_=10;break;
             case 4:var _hp_=13;break;
             case 6:var _hp_=9;break;
             default:switch$3 = 1}}
        else
         if(98 === c0)var _hp_=8;else switch$3 = 1;
        if(switch$3)var _hp_=c0;
        return store_char(width,ib,_hp_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _hm_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_hm_)}
              return caml_trampoline_return(skip_spaces,[0,_hm_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _hn_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_hn_)}
                return caml_trampoline_return(skip_spaces,[0,_hn_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_hi_=0 < i$0?1:0;
          if(_hi_)
           {var _hj_=1 - ib[1];
            if(_hj_)
             var _hk_=is_in_char_set(char_set,c),_hl_=_hk_?c !== stp?1:0:_hk_;
            else
             var _hl_=_hj_}
          else
           var _hl_=_hi_;
          if(_hl_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _hl_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _hh_=1 - ib[1];
        if(_hh_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _hh_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_cj_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _ck_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_hf_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_hf_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_hf_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _hg_=fmt$0[1];
           if(0 === _hg_[0])
            {var
              rest$0=fmt$0[2],
              match=_hg_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_hg_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _g4_=fmt$0[1],_g5_=fmt$0[2];
           if(typeof _g5_ !== "number")
            switch(_g5_[0])
             {case 17:
               var
                rest$2=_g5_[2],
                fmting_lit=_g5_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_g4_,0,scan$0,token_string);
              case 18:
               var _g6_=_g5_[1];
               if(0 === _g6_[0])
                {var
                  rest$3=_g5_[2],
                  match$0=_g6_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_cl_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$3),
                          readers,
                          _g4_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_g5_[2],
                match$1=_g6_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_cm_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$4),
                        readers,
                        _g4_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$0[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_g4_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$0[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=
             function(param,_he_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_ci_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$14;continue}
           return bad_input(cst_end_of_input_not_found);
          case 11:
           var rest$15=fmt$0[2],str$0=fmt$0[1];
           iter$4(function(_hd_){return check_char(ib,_hd_)},str$0);
           var fmt$0=rest$15;
           continue;
          case 12:
           var rest$16=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$16;
           continue;
          case 13:
           var rest$17=fmt$0[3],fmtty=fmt$0[2],pad_opt=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var s=token_string(ib);
           try
            {var _g7_=format_of_string_fmtty(s,fmtty),fmt$3=_g7_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$3=bad_input(msg)}
           return [0,fmt$3,make_scanf(ib,rest$17,readers)];
          case 14:
           var rest$18=fmt$0[3],fmtty$0=fmt$0[2],pad_opt$0=fmt$0[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s$0=token_string(ib);
           try
            {var
              match$2=fmt_ebb_of_string(0,s$0),
              fmt$6=match$2[1],
              match$3=fmt_ebb_of_string(0,s$0),
              fmt$7=match$3[1],
              fmt$8=type_format(fmt$7,erase_rel(symm(fmtty$0))),
              _g9_=type_format(fmt$6,erase_rel(fmtty$0)),
              fmt$5=fmt$8,
              fmt$4=_g9_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _g8_=bad_input(msg$0),
              fmt$5=_g8_[2],
              fmt$4=_g8_[1]}
           return [0,
                   [0,fmt$4,s$0],
                   make_scanf(ib,concat_fmt(fmt$5,rest$18),readers)];
          case 15:return invalid_arg(cst_scanf_bad_conversion_a);
          case 16:return invalid_arg(cst_scanf_bad_conversion_t);
          case 17:
           var
            rest$19=fmt$0[2],
            formatting_lit=fmt$0[1],
            _g__=string_of_formatting_lit(formatting_lit);
           iter$4(function(_hc_){return check_char(ib,_hc_)},_g__);
           var fmt$0=rest$19;
           continue;
          case 18:
           var _g$_=fmt$0[1];
           if(0 === _g$_[0])
            {var rest$20=fmt$0[2],match$4=_g$_[1],fmt$9=match$4[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$10=concat_fmt(fmt$9,rest$20),fmt$0=fmt$10;
             continue}
           var rest$21=fmt$0[2],match$5=_g$_[1],fmt$11=match$5[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$12=concat_fmt(fmt$11,rest$21),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(cst_scanf_missing_reader);
          case 20:
           var _ha_=fmt$0[1],_hb_=fmt$0[3];
           if(typeof _hb_ !== "number" && 17 === _hb_[0])
            {var
              rest$23=_hb_[2],
              fmting_lit$0=_hb_[1],
              char_set$0=fmt$0[2],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_ha_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$23];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$0[3],
            char_set=fmt$0[2],
            width=width_of_pad_opt(_ha_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$0[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$26),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_cn_];
          default:return invalid_arg(cst_scanf_bad_conversion_custo)}}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(cst_scanf_bad_conversion);
          caml_call3(scan,max_int,max_int,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _g3_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(cst_scanf_bad_conversion$0);
              caml_call3(scan,_g3_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_g3_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(cst_scanf_bad_conversion$1)}
        return invalid_arg(cst_scanf_bad_conversion$2)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _g2_=[0,make_scanf(ib,fmt,readers)],_g1_=_g2_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _g0_=
              invalid_arg
               (symbol
                 (msg,symbol(cst_in_format,symbol(escaped$1(str),cst$87))));
            switch$0 = 1}
          if(! switch$0)var _g0_=[1,exc];
          var _g1_=_g0_}
        if(0 === _g1_[0]){var args=_g1_[1];return apply(f,args)}
        var exc=_g1_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function bscanf(ib,fmt){return kscanf(ib,scanf_bad_input,fmt)}
    function ksscanf(s,ef,fmt){return kscanf(from_string$1(s),ef,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$1(s),scanf_bad_input,fmt)}
    function scanf(fmt){return kscanf(stdib,scanf_bad_input,fmt)}
    function bscanf_format(ib,format,f)
     {scan_caml_string(max_int,ib);
      var str=token_string(ib);
      try
       {var _gZ_=format_of_string_format(str,format),fmt=_gZ_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] !== Failure)throw exn;
        var msg=exn[2],fmt=bad_input(msg)}
      return caml_call1(f,fmt)}
    function sscanf_format(s,format,f)
     {return bscanf_format(from_string$1(s),format,f)}
    function format_from_string(s,fmt)
     {function _gY_(x){return x}
      return sscanf_format
              (symbol(cst$89,symbol(escaped$1(s),cst$88)),fmt,_gY_)}
    function unescaped(s)
     {function _gX_(x){return x}
      return caml_call1(sscanf(symbol(cst$91,symbol(s,cst$90)),_co_),_gX_)}
    function kfscanf(ic,ef,fmt){return kscanf(memo_from_channel(ic),ef,fmt)}
    function fscanf(ic,fmt)
     {return kscanf(memo_from_channel(ic),scanf_bad_input,fmt)}
    var
     Stdlib_scanf=
      [0,
       [0,
        stdib,
        from_file,
        from_file_bin,
        close_in$0,
        from_file,
        from_file_bin,
        from_string$1,
        from_function$0,
        from_channel$0,
        end_of_input,
        beginning_of_input,
        name_of_input,
        stdib],
       Scan_failure,
       bscanf,
       sscanf,
       scanf,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped,
       fscanf,
       kfscanf];
    caml_register_global(789,Stdlib_scanf,"Stdlib__scanf");
    var register=caml_register_named_value;
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var Stdlib_callback=[0,register,register_exception];
    caml_register_global(790,Stdlib_callback,"Stdlib__callback");
    function copy$7(o){var o$0=o.slice();return caml_set_oo_id(o$0)}
    var params$0=[0,1,1,1,3,16],initial_object_size=2,dummy_item=0;
    function public_method_label(s)
     {var accu=[0,0],_gU_=caml_ml_string_length(s) - 1 | 0,_gT_=0;
      if(! (_gU_ < 0))
       {var i=_gT_;
        for(;;)
         {var _gV_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _gV_ | 0;
          var _gW_=i + 1 | 0;
          if(_gU_ !== i){var i=_gW_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$11=caml_string_compare,
     Vars=caml_call1(Stdlib_map[1],[0,compare$11]),
     compare$12=caml_string_compare,
     Meths=caml_call1(Stdlib_map[1],[0,compare$12]),
     compare$13=caml_int_compare,
     Labs=caml_call1(Stdlib_map[1],[0,compare$13]),
     dummy_table=[0,0,[0,dummy_item],Meths[1],Labs[1],0,0,Vars[1],0],
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _gN_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _gN_;
      var _gP_=len - 1 | 0,_gO_=0;
      if(! (_gP_ < 0))
       {var i=_gO_;
        for(;;)
         {var
           _gR_=(i * 2 | 0) + 3 | 0,
           _gQ_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_gR_)[1 + _gR_] = _gQ_;
          var _gS_=i + 1 | 0;
          if(_gP_ !== i){var i=_gS_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_gL_=old_size < new_size?1:0;
      if(_gL_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _gM_=0}
      else
       var _gM_=_gL_;
      return _gM_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$1(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _gJ_=caml_call2(Meths[27],name,table[3]);return _gJ_}
      catch(_gK_)
       {_gK_ = caml_wrap_exception(_gK_);
        if(_gK_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _gK_}}
    function get_method_labels(table,names)
     {return map$5(function(_gI_){return get_method_label(table,_gI_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      return caml_call2(Labs[27],label,table[4])
              ?(resize$1(table,label + 1 | 0),
                caml_check_bound(table[2],label)[1 + label]
                =
                element,
                0)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function get_method(table,label)
     {try
       {var _gG_=assoc(label,table[6]);return _gG_}
      catch(_gH_)
       {_gH_ = caml_wrap_exception(_gH_);
        if(_gH_ === Not_found)
         return caml_check_bound(table[2],label)[1 + label];
        throw _gH_}}
    function to_list$3(arr){return 0 === arr?0:to_list$1(arr)}
    function narrow(table,vars,virt_meths,concr_meths)
     {var
       vars$0=to_list$3(vars),
       virt_meths$0=to_list$3(virt_meths),
       concr_meths$0=to_list$3(concr_meths),
       virt_meth_labs=
        map$2
         (function(_gF_){return get_method_label(table,_gF_)},virt_meths$0),
       concr_meth_labs=
        map$2
         (function(_gE_){return get_method_label(table,_gE_)},concr_meths$0);
      table[5]
      =
      [0,
       [0,table[3],table[4],table[6],table[7],virt_meth_labs,vars$0],
       table[5]];
      var _gv_=Vars[1],_gw_=table[7];
      function _gx_(lab,info,tvars)
       {return mem(lab,vars$0)?caml_call3(Vars[4],lab,info,tvars):tvars}
      table[7] = caml_call3(Vars[13],_gx_,_gw_,_gv_);
      var by_name=[0,Meths[1]],by_label=[0,Labs[1]];
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          var _gA_=by_label[1];
          try
           {var _gC_=caml_call2(Labs[27],label,table[4]),_gB_=_gC_}
          catch(_gD_)
           {_gD_ = caml_wrap_exception(_gD_);
            if(_gD_ !== Not_found)throw _gD_;
            var _gB_=1}
          by_label[1] = caml_call3(Labs[4],label,_gB_,_gA_);
          return 0},
        concr_meths$0,
        concr_meth_labs);
      iter2
       (function(met,label)
         {by_name[1] = caml_call3(Meths[4],met,label,by_name[1]);
          by_label[1] = caml_call3(Labs[4],label,0,by_label[1]);
          return 0},
        virt_meths$0,
        virt_meth_labs);
      table[3] = by_name[1];
      table[4] = by_label[1];
      var _gy_=0,_gz_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meth_labs)?hm:[0,met,hm]},
        _gz_,
        _gy_);
      return 0}
    function widen(table)
     {var
       match=hd(table[5]),
       vars=match[6],
       virt_meths=match[5],
       saved_vars=match[4],
       saved_hidden_meths=match[3],
       by_label=match[2],
       by_name=match[1];
      table[5] = tl(table[5]);
      table[7]
      =
      fold_left$0
       (function(s,v)
         {var _gu_=caml_call2(Vars[27],v,table[7]);
          return caml_call3(Vars[4],v,_gu_,s)},
        saved_vars,
        vars);
      table[3] = by_name;
      table[4] = by_label;
      var _gt_=table[6];
      table[6]
      =
      fold_right
       (function(met,hm)
         {var lab=met[1];return mem(lab,virt_meths)?hm:[0,met,hm]},
        _gt_,
        saved_hidden_meths);
      return 0}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _gr_=caml_call2(Vars[27],name,table[7]);return _gr_}
      catch(_gs_)
       {_gs_ = caml_wrap_exception(_gs_);
        if(_gs_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,cst$92))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _gs_}}
    function to_array(arr){return caml_equal(arr,0)?[0]:arr}
    function new_methods_variables(table,meths,vals)
     {var
       meths$0=to_array(meths),
       nmeths=meths$0.length - 1,
       nvals=vals.length - 1,
       res=caml_make_vect(nmeths + nvals | 0,0),
       _gj_=nmeths - 1 | 0,
       _gi_=0;
      if(! (_gj_ < 0))
       {var i$0=_gi_;
        for(;;)
         {var
           _gp_=
            get_method_label(table,caml_check_bound(meths$0,i$0)[1 + i$0]);
          caml_check_bound(res,i$0)[1 + i$0] = _gp_;
          var _gq_=i$0 + 1 | 0;
          if(_gj_ !== i$0){var i$0=_gq_;continue}
          break}}
      var _gl_=nvals - 1 | 0,_gk_=0;
      if(! (_gl_ < 0))
       {var i=_gk_;
        for(;;)
         {var
           _gn_=i + nmeths | 0,
           _gm_=new_variable(table,caml_check_bound(vals,i)[1 + i]);
          caml_check_bound(res,_gn_)[1 + _gn_] = _gm_;
          var _go_=i + 1 | 0;
          if(_gl_ !== i){var i=_go_;continue}
          break}}
      return res}
    function get_variable(table,name)
     {try
       {var _gg_=caml_call2(Vars[27],name,table[7]);return _gg_}
      catch(_gh_)
       {_gh_ = caml_wrap_exception(_gh_);
        if(_gh_ === Not_found)throw [0,Assert_failure,_cp_];
        throw _gh_}}
    function get_variables(table,names)
     {return map$5(function(_gf_){return get_variable(table,_gf_)},names)}
    function add_initializer(table,f){table[8] = [0,f,table[8]];return 0}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$5(public_method_label,public_methods),
       table=new_table(tags);
      iteri$2
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      table[8] = rev(table[8]);
      return resize$1
              (table,
               3 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0)}
    function inherits(cla,vals,virt_meths,concr_meths,param,top)
     {var env=param[4],super$0=param[2];
      narrow(cla,vals,virt_meths,concr_meths);
      var init=top?caml_call2(super$0,cla,env):caml_call1(super$0,cla);
      widen(cla);
      var
       _ga_=0,
       _gb_=to_array(concr_meths),
       _gc_=
        [0,
         map$5
          (function(nm){return get_method(cla,get_method_label(cla,nm))},_gb_),
         _ga_],
       _gd_=to_array(vals);
      return caml_array_concat
              ([0,
                [0,init],
                [0,
                 map$5(function(_ge_){return get_variable(cla,_ge_)},_gd_),
                 _gc_]])}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function make_class_store(pub_meths,class_init,init_table)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      init_table[2] = class_init;
      init_table[1] = env_init;
      return 0}
    function dummy_class(loc)
     {function undef(param){throw [0,Undefined_recursive_module,loc]}
      return [0,undef,undef,undef,0]}
    function create_object(table)
     {var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=caml_obj_block(248,table[1]);
      obj[1] = table[2];
      return caml_set_oo_id(obj)}
    function iter_f(obj,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],f=param$0[1];
          caml_call1(f,obj);
          var param$0=l;
          continue}
        return 0}}
    function run_initializers(obj,table)
     {var inits=table[8],_f$_=0 !== inits?1:0;
      return _f$_?iter_f(obj,inits):_f$_}
    function run_initializers_opt(obj_0,obj,table)
     {if(obj_0)return obj;
      var inits=table[8];
      if(0 !== inits)iter_f(obj,inits);
      return obj}
    function create_object_and_run_initiali(obj_0,table)
     {if(obj_0)return obj_0;
      var obj=create_object(table);
      run_initializers(obj,table);
      return obj}
    function get_data$0(param)
     {if(param)return param[2];throw [0,Assert_failure,_ct_]}
    function build_path(n,keys,tables)
     {var res=[0,0,0,0],r=[0,res],_f7_=0;
      if(! (n < 0))
       {var i=_f7_;
        for(;;)
         {var _f9_=r[1];
          r[1] = [0,caml_check_bound(keys,i)[1 + i],_f9_,0];
          var _f__=i + 1 | 0;
          if(n !== i){var i=_f__;continue}
          break}}
      var _f8_=r[1];
      if(tables){tables[2] = _f8_;return res}
      throw [0,Assert_failure,_cq_]}
    function lookup_tables(root,keys)
     {var tables$2=get_data$0(root);
      if(tables$2)
       {var i$1=keys.length - 1 - 1 | 0,i=i$1,tables=tables$2;
        a:
        for(;;)
         {if(0 <= i)
           {var key=caml_check_bound(keys,i)[1 + i],tables$0=tables;
            for(;;)
             {if(tables$0)
               {if(tables$0[1] === key)
                 {var tables$1=get_data$0(tables$0);
                  if(tables$1)
                   {var i$0=i - 1 | 0,i=i$0,tables=tables$1;continue a}
                  throw [0,Assert_failure,_cv_]}
                if(tables$0)
                 {var _f6_=tables$0[3];
                  if(_f6_){var tables$0=_f6_;continue}
                  var v=[0,key,0,0];
                  if(tables$0)
                   {tables$0[3] = v;return build_path(i - 1 | 0,keys,v)}
                  throw [0,Assert_failure,_cr_]}
                throw [0,Assert_failure,_cu_]}
              throw [0,Assert_failure,_cs_]}}
          return tables}}
      return build_path(keys.length - 1 - 1 | 0,keys,root)}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if
       (0
        !==
        (n % 2 | 0)
        &&
        !
        ((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n))
       {var n$0=new_method(table);switch$0 = 1}
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _f0_=i[1],
           label=caml_check_bound(methods,_f0_)[1 + _f0_],
           next=
            function(param)
             {i[1]++;
              var _f5_=i[1];
              return caml_check_bound(methods,_f5_)[1 + _f5_]},
           clo=next(0);
          if(typeof clo === "number")
           switch(clo)
            {case 0:
              var
               x=next(0),
               clo$0=function(x){return function(obj){return x}}(x);
              break;
             case 1:
              var
               n=next(0),
               clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
              break;
             case 2:
              var
               e=next(0),
               n$0=next(0),
               clo$0=
                function(e,n){return function(obj){return obj[1 + e][1 + n]}}
                 (e,n$0);
              break;
             case 3:
              var
               n$1=next(0),
               clo$0=
                function(n)
                  {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
                 (n$1);
              break;
             case 4:
              var
               n$2=next(0),
               clo$0=
                function(n){return function(obj,x){obj[1 + n] = x;return 0}}
                 (n$2);
              break;
             case 5:
              var
               f=next(0),
               x$0=next(0),
               clo$0=
                function(f,x){return function(obj){return caml_call1(f,x)}}
                 (f,x$0);
              break;
             case 6:
              var
               f$0=next(0),
               n$3=next(0),
               clo$0=
                function(f,n)
                  {return function(obj){return caml_call1(f,obj[1 + n])}}
                 (f$0,n$3);
              break;
             case 7:
              var
               f$1=next(0),
               e$0=next(0),
               n$4=next(0),
               clo$0=
                function(f,e,n)
                  {return function(obj)
                    {return caml_call1(f,obj[1 + e][1 + n])}}
                 (f$1,e$0,n$4);
              break;
             case 8:
              var
               f$2=next(0),
               n$5=next(0),
               clo$0=
                function(f,n)
                  {return function(obj)
                    {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
                 (f$2,n$5);
              break;
             case 9:
              var
               f$3=next(0),
               x$1=next(0),
               y=next(0),
               clo$0=
                function(f,x,y)
                  {return function(obj){return caml_call2(f,x,y)}}
                 (f$3,x$1,y);
              break;
             case 10:
              var
               f$4=next(0),
               x$2=next(0),
               n$6=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj){return caml_call2(f,x,obj[1 + n])}}
                 (f$4,x$2,n$6);
              break;
             case 11:
              var
               f$5=next(0),
               x$3=next(0),
               e$1=next(0),
               n$7=next(0),
               clo$0=
                function(f,x,e,n)
                  {return function(obj)
                    {return caml_call2(f,x,obj[1 + e][1 + n])}}
                 (f$5,x$3,e$1,n$7);
              break;
             case 12:
              var
               f$6=next(0),
               x$4=next(0),
               n$8=next(0),
               clo$0=
                function(f,x,n)
                  {return function(obj)
                    {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
                 (f$6,x$4,n$8);
              break;
             case 13:
              var
               f$7=next(0),
               n$9=next(0),
               x$5=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj){return caml_call2(f,obj[1 + n],x)}}
                 (f$7,n$9,x$5);
              break;
             case 14:
              var
               f$8=next(0),
               e$2=next(0),
               n$10=next(0),
               x$6=next(0),
               clo$0=
                function(f,e,n,x)
                  {return function(obj)
                    {return caml_call2(f,obj[1 + e][1 + n],x)}}
                 (f$8,e$2,n$10,x$6);
              break;
             case 15:
              var
               f$9=next(0),
               n$11=next(0),
               x$7=next(0),
               clo$0=
                function(f,n,x)
                  {return function(obj)
                    {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
                 (f$9,n$11,x$7);
              break;
             case 16:
              var
               n$12=next(0),
               x$8=next(0),
               clo$0=
                function(n,x)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,x)}}
                 (n$12,x$8);
              break;
             case 17:
              var
               n$13=next(0),
               m=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
                 (n$13,m);
              break;
             case 18:
              var
               n$14=next(0),
               e$3=next(0),
               m$0=next(0),
               clo$0=
                function(n,e,m)
                  {return function(obj)
                    {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
                 (n$14,e$3,m$0);
              break;
             case 19:
              var
               n$15=next(0),
               m$1=next(0),
               clo$0=
                function(n,m)
                  {return function(obj)
                    {var _f3_=caml_call1(obj[1][1 + m],obj);
                     return caml_call2(obj[1][1 + n],obj,_f3_)}}
                 (n$15,m$1);
              break;
             case 20:
              var
               m$2=next(0),
               x$9=next(0),
               c=new_cache(table),
               clo$0=
                function(m,x,c)
                  {return function(obj)
                    {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
                 (m$2,x$9,c);
              break;
             case 21:
              var
               m$3=next(0),
               n$16=next(0),
               c$0=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _f2_=obj[1 + n];
                     return caml_call2(caml_get_public_method(_f2_,m,0),_f2_,c)}}
                 (m$3,n$16,c$0);
              break;
             case 22:
              var
               m$4=next(0),
               e$4=next(0),
               n$17=next(0),
               c$1=new_cache(table),
               clo$0=
                function(m,e,n,c)
                  {return function(obj)
                    {var _f1_=obj[1 + e][1 + n];
                     return caml_call2(caml_get_public_method(_f1_,m,0),_f1_,c)}}
                 (m$4,e$4,n$17,c$1);
              break;
             default:
              var
               m$5=next(0),
               n$18=next(0),
               c$2=new_cache(table),
               clo$0=
                function(m,n,c)
                  {return function(obj)
                    {var _f4_=caml_call1(obj[1][1 + n],obj);
                     return caml_call2(caml_get_public_method(_f4_,m,0),_f4_,c)}}
                 (m$5,n$18,c$2)}
          else
           var clo$0=clo;
          set_method(table,label,clo$0);
          i[1]++;
          continue}
        return 0}}
    function stats$0(param)
     {return [0,table_count[1],method_count[1],inst_var_count[1]]}
    var
     CamlinternalOO=
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy$7,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params$0,
       stats$0];
    caml_register_global(791,CamlinternalOO,"CamlinternalOO");
    var Stdlib_oo=[0,copy$7,public_method_label,public_method_label];
    caml_register_global(792,Stdlib_oo,"Stdlib__oo");
    var
     update_mod=runtime.caml_CamlinternalMod_update_mod,
     init_mod=runtime.caml_CamlinternalMod_init_mod,
     CamlinternalMod=[0,init_mod,update_mod];
    caml_register_global(793,CamlinternalMod,"CamlinternalMod");
    var
     initial_buffer=caml_create_bytes(32),
     buffer=[0,initial_buffer],
     bufpos=[0,0];
    function reset_buffer(param)
     {buffer[1] = initial_buffer;bufpos[1] = 0;return 0}
    function store(c)
     {if(caml_ml_bytes_length(buffer[1]) <= bufpos[1])
       {var newbuffer=caml_create_bytes(2 * bufpos[1] | 0);
        blit(buffer[1],0,newbuffer,0,bufpos[1]);
        buffer[1] = newbuffer}
      caml_bytes_set(buffer[1],bufpos[1],c);
      bufpos[1]++;
      return 0}
    function get_string(param)
     {var s=sub_string(buffer[1],0,bufpos[1]);
      buffer[1] = initial_buffer;
      return s}
    function make_lexer(keywords)
     {var kwd_table=caml_call2(Stdlib_hashtbl[1],0,17);
      iter$2
       (function(s){return caml_call3(Stdlib_hashtbl[5],kwd_table,s,[0,s])},
        keywords);
      function ident_or_keyword(id)
       {try
         {var _fY_=caml_call2(Stdlib_hashtbl[6],kwd_table,id);return _fY_}
        catch(_fZ_)
         {_fZ_ = caml_wrap_exception(_fZ_);
          if(_fZ_ === Not_found)return [1,id];
          throw _fZ_}}
      function keyword_or_error(c)
       {var s=make$0(1,c);
        try
         {var _fW_=caml_call2(Stdlib_hashtbl[6],kwd_table,s);return _fW_}
        catch(_fX_)
         {_fX_ = caml_wrap_exception(_fX_);
          if(_fX_ === Not_found)
           throw [0,Error,symbol(cst_Illegal_character,s)];
          throw _fX_}}
      function comment(strm)
       {a:
        for(;;)
         {var match=peek$0(strm);
          if(match)
           {var switcher=match[1] - 40 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:
                junk(strm);
                var match$0=peek$0(strm);
                if(match$0)
                 {if(42 === match$0[1]){junk(strm);comment(strm);continue}
                  junk(strm);
                  continue}
                throw Failure$0;
               case 1:break;
               default:
                junk(strm);
                for(;;)
                 {var match$1=peek$0(strm);
                  if(match$1)
                   {var _fV_=match$1[1];
                    if(41 === _fV_){junk(strm);return 0}
                    if(42 === _fV_){junk(strm);continue}
                    junk(strm);
                    continue a}
                  throw Failure$0}}
            junk(strm);
            continue}
          throw Failure$0}}
      function escape(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fS_=match[1];
          if(58 <= _fS_)
           {var switcher=_fS_ - 110 | 0;
            if(! (6 < switcher >>> 0))
             switch(switcher)
              {case 0:junk(strm);return 10;
               case 4:junk(strm);return 13;
               case 6:junk(strm);return 9
               }}
          else
           if(48 <= _fS_)
            {junk(strm);
             var match$0=peek$0(strm);
             if(match$0)
              {var _fT_=match$0[1],switcher$0=_fT_ - 48 | 0;
               if(! (9 < switcher$0 >>> 0))
                {junk(strm);
                 var match$1=peek$0(strm);
                 if(match$1)
                  {var _fU_=match$1[1],switcher$1=_fU_ - 48 | 0;
                   if(! (9 < switcher$1 >>> 0))
                    {junk(strm);
                     return chr
                             ((((_fS_ - 48 | 0) * 100 | 0)
                               +
                               ((_fT_ - 48 | 0) * 10 | 0)
                               |
                               0)
                              +
                              (_fU_ - 48 | 0)
                              |
                              0)}}
                 throw [0,Error,cst$98]}}
             throw [0,Error,cst$97]}
          junk(strm);
          return _fS_}
        throw Failure$0}
      function end_exponent_part(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fR_=match[1],switcher=_fR_ - 48 | 0;
            if(! (9 < switcher >>> 0)){junk(strm);store(_fR_);continue}}
          return [0,[3,caml_float_of_string(get_string(0))]]}}
      function exponent_part(strm)
       {var match=peek$0(strm);
        if(match)
         {var _fQ_=match[1],switch$0=0;
          if(43 !== _fQ_ && 45 !== _fQ_)switch$0 = 1;
          if(! switch$0)
           {junk(strm);store(_fQ_);return end_exponent_part(strm)}}
        return end_exponent_part(strm)}
      function number(s)
       {for(;;)
         {var match=peek$0(s);
          if(match)
           {var _fN_=match[1];
            if(58 <= _fN_)
             {var switch$0=0;
              if(69 === _fN_ || 101 === _fN_)switch$0 = 1;
              if(switch$0){junk(s);store(69);return exponent_part(s)}}
            else
             {if(46 === _fN_)
               {junk(s);
                store(46);
                for(;;)
                 {var match$0=peek$0(s);
                  if(match$0)
                   {var _fO_=match$0[1],_fP_=_fO_ - 69 | 0;
                    if(32 < _fP_ >>> 0)
                     {var switcher=_fP_ + 21 | 0;
                      if(! (9 < switcher >>> 0)){junk(s);store(_fO_);continue}}
                    else
                     {var switcher$0=_fP_ - 1 | 0;
                      if(30 < switcher$0 >>> 0)
                       {junk(s);store(69);return exponent_part(s)}}}
                  return [0,[3,caml_float_of_string(get_string(0))]]}}
              if(48 <= _fN_){junk(s);store(_fN_);continue}}}
          return [0,[2,caml_int_of_string(get_string(0))]]}}
      function ident2(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fL_=match[1],switch$0=0;
            if(94 <= _fL_)
             {var _fM_=_fL_ - 95 | 0;
              if(30 < _fM_ >>> 0)
               {if(! (32 <= _fM_))switch$0 = 1}
              else
               if(29 === _fM_)switch$0 = 1}
            else
             if(65 <= _fL_)
              {if(92 === _fL_)switch$0 = 1}
             else
              if(33 <= _fL_)
               switch(_fL_ - 33 | 0)
                {case 0:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 9:
                 case 10:
                 case 12:
                 case 14:
                 case 25:
                 case 27:
                 case 28:
                 case 29:
                 case 30:
                 case 31:switch$0 = 1;break
                 }
            if(switch$0){junk(strm);store(_fL_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function neg_number(s)
       {var match=peek$0(s);
        if(match)
         {var _fK_=match[1],switcher=_fK_ - 48 | 0;
          if(! (9 < switcher >>> 0))
           {junk(s);reset_buffer(0);store(45);store(_fK_);return number(s)}}
        reset_buffer(0);
        store(45);
        return ident2(s)}
      function ident(strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fI_=match[1],switch$0=0;
            if(91 <= _fI_)
             {var _fJ_=_fI_ - 95 | 0;
              if(27 < _fJ_ >>> 0)
               {if(97 <= _fJ_)switch$0 = 1}
              else
               if(1 !== _fJ_)switch$0 = 1}
            else
             if(48 <= _fI_)
              {if(6 < (_fI_ - 58 | 0) >>> 0)switch$0 = 1}
             else
              if(39 === _fI_)switch$0 = 1;
            if(switch$0){junk(strm);store(_fI_);continue}}
          return [0,ident_or_keyword(get_string(0))]}}
      function next_token$0(counter,strm)
       {for(;;)
         {var match=peek$0(strm);
          if(match)
           {var _fy_=match[1],switch$0=0;
            if(124 <= _fy_)
             {if(127 <= _fy_)
               {if(192 <= _fy_)switch$0 = 1}
              else
               if(125 !== _fy_)switch$0 = 2}
            else
             {var _fz_=_fy_ - 65 | 0;
              if(57 < _fz_ >>> 0)
               {if(! (58 <= _fz_))
                 {var switcher=_fz_ + 65 | 0;
                  switch(switcher)
                   {case 34:
                     junk(strm);
                     reset_buffer(0);
                     for(;;)
                      {var match$1=peek$0(strm);
                       if(match$1)
                        {var _fB_=match$1[1];
                         if(34 === _fB_){junk(strm);return [0,[4,get_string(0)]]}
                         if(92 === _fB_)
                          {junk(strm);
                           try
                            {var c$0=escape(strm)}
                           catch(_fH_)
                            {_fH_ = caml_wrap_exception(_fH_);
                             if(_fH_ === Failure$0)throw [0,Error,cst$95];
                             throw _fH_;
                             var _fE_=_fH_}
                           store(c$0);
                           continue}
                         junk(strm);
                         store(_fB_);
                         continue}
                       throw Failure$0}
                    case 39:
                     junk(strm);
                     try
                      {var match$2=peek$0(strm);
                       if(! match$2)throw Failure$0;
                       var _fC_=match$2[1];
                       if(92 === _fC_)
                        {junk(strm);
                         try
                          {var _fD_=escape(strm)}
                         catch(_fG_)
                          {_fG_ = caml_wrap_exception(_fG_);
                           if(_fG_ === Failure$0)throw [0,Error,cst$96];
                           throw _fG_}
                         var c=_fD_}
                       else
                        {junk(strm);var c=_fC_}}
                     catch(_fF_)
                      {_fF_ = caml_wrap_exception(_fF_);
                       if(_fF_ === Failure$0)throw [0,Error,cst$93];
                       throw _fF_}
                     var match$0=peek$0(strm);
                     if(match$0 && 39 === match$0[1])
                      {junk(strm);return [0,[5,c]]}
                     throw [0,Error,cst$94];
                    case 40:
                     junk(strm);
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return maybe_comment(counter$0,strm)}
                     return caml_trampoline_return(maybe_comment,[0,strm]);
                    case 45:junk(strm);return neg_number(strm);
                    case 9:
                    case 10:
                    case 12:
                    case 13:
                    case 26:
                    case 32:junk(strm);continue;
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                     junk(strm);reset_buffer(0);store(_fy_);return number(strm);
                    case 33:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 42:
                    case 43:
                    case 47:
                    case 58:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:switch$0 = 2;break
                    }}}
              else
               {var _fA_=_fz_ - 26 | 0;
                if(5 < _fA_ >>> 0)
                 switch$0 = 1;
                else
                 switch(_fA_)
                  {case 4:switch$0 = 1;break;case 1:case 3:switch$0 = 2;break}}}
            switch(switch$0)
             {case 0:junk(strm);return [0,keyword_or_error(_fy_)];
              case 1:
               junk(strm);reset_buffer(0);store(_fy_);return ident(strm);
              default:
               junk(strm);reset_buffer(0);store(_fy_);return ident2(strm)}}
          return 0}}
      function maybe_comment(counter,strm)
       {var match=peek$0(strm);
        if(match && 42 === match[1])
         {junk(strm);
          comment(strm);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return next_token$0(counter$0,strm)}
          return caml_trampoline_return(next_token$0,[0,strm])}
        return [0,keyword_or_error(40)]}
      function next_token(strm){return caml_trampoline(next_token$0(0,strm))}
      return function(input)
       {return from(function(count){return next_token(input)})}}
    var Stdlib_genlex=[0,make_lexer];
    caml_register_global(794,Stdlib_genlex,"Stdlib__genlex");
    function MakeSeeded$0(H)
     {var prng=[246,function(_fx_){return caml_call1(_b2_[2],0)}];
      function create(opt,initial_size)
       {if(opt)
         var sth=opt[1],random=sth;
        else
         var random=caml_call1(Stdlib_hashtbl[17],0);
        var x=16;
        for(;;)
         {if(! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
           {var x$0=x * 2 | 0,x=x$0;continue}
          if(random)
           var
            _fv_=caml_obj_tag(prng),
            _fw_=250 === _fv_?prng[1]:246 === _fv_?force_lazy_block(prng):prng,
            seed=caml_call1(_b2_[4],_fw_);
          else
           var seed=0;
          return [0,0,caml_make_vect(x,0),seed,x]}}
      function clear(h)
       {h[1] = 0;
        var len=h[2].length - 1,_ft_=len - 1 | 0,_fs_=0;
        if(! (_ft_ < 0))
         {var i=_fs_;
          for(;;)
           {caml_check_bound(h[2],i)[1 + i] = 0;
            var _fu_=i + 1 | 0;
            if(_ft_ !== i){var i=_fu_;continue}
            break}}
        return 0}
      function reset(h)
       {var len=h[2].length - 1;
        return len === h[4]
                ?clear(h)
                :(h[1] = 0,h[2] = caml_make_vect(h[4],0),0)}
      function copy(init)
       {var _fp_=init[4],_fq_=init[3],_fr_=copy$1(init[2]);
        return [0,init[1],_fr_,_fq_,_fp_]}
      function key_index(h,hkey){return hkey & (h[2].length - 1 - 1 | 0)}
      function clean(h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hkey=param$0[1],rest=param$0[3],c=param$0[2];
              if(caml_call1(H[7],c))
               {var rest$0=param$0[3],c$0=param$0[2];
                return [0,hkey,c$0,do_bucket(rest$0)]}
              h[1] = h[1] - 1 | 0;
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_fm_=d.length - 1 - 1 | 0,_fl_=0;
        if(! (_fm_ < 0))
         {var i=_fl_;
          for(;;)
           {var _fn_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _fn_;
            var _fo_=i + 1 | 0;
            if(_fm_ !== i){var i=_fo_;continue}
            break}}
        return 0}
      function resize(h)
       {var odata=h[2],osize=odata.length - 1,nsize=osize * 2 | 0;
        clean(h);
        var
         _ff_=nsize < max_array_length?1:0,
         _fg_=_ff_?(osize >>> 1 | 0) <= h[1]?1:0:_ff_;
        if(_fg_)
         {var ndata=caml_make_vect(nsize,0);
          h[2] = ndata;
          var
           insert_bucket=
            function(param)
             {if(param)
               {var rest=param[3],data=param[2],hkey=param[1];
                insert_bucket(rest);
                var nidx=key_index(h,hkey);
                ndata[1 + nidx]
                =
                [0,hkey,data,caml_check_bound(ndata,nidx)[1 + nidx]];
                return 0}
              return 0},
           _fi_=osize - 1 | 0,
           _fh_=0;
          if(! (_fi_ < 0))
           {var i=_fh_;
            for(;;)
             {insert_bucket(caml_check_bound(odata,i)[1 + i]);
              var _fk_=i + 1 | 0;
              if(_fi_ !== i){var i=_fk_;continue}
              break}}
          var _fj_=0}
        else
         var _fj_=_fg_;
        return _fj_}
      function add(h,key,info)
       {var
         hkey=caml_call2(H[2],h[3],key),
         i=key_index(h,hkey),
         container=caml_call2(H[1],key,info),
         bucket=[0,hkey,container,caml_check_bound(h[2],i)[1 + i]];
        caml_check_bound(h[2],i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _fe_=h[2].length - 1 << 1 < h[1]?1:0;
        return _fe_?resize(h):_fe_}
      function remove(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function remove_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:h[1] = h[1] - 1 | 0;return next;
                  case 1:return [0,hk,c,remove_bucket(next)];
                  default:h[1] = h[1] - 1 | 0;var param$0=next;continue}}
              var next$0=param$0[3],c$0=param$0[2];
              return [0,hk,c$0,remove_bucket(next$0)]}
            return 0}}
        var
         i=key_index(h,hkey),
         _fd_=remove_bucket(caml_check_bound(h[2],i)[1 + i]);
        caml_check_bound(h[2],i)[1 + i] = _fd_;
        return 0}
      function find(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fc_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fc_)[1 + _fc_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var match$0=caml_call1(H[4],c);
                 if(match$0){var d=match$0[1];return d}
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          throw Not_found}}
      function find_opt(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _fb_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_fb_)[1 + _fb_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hkey === hk)
             {var match=caml_call2(H[3],c,key);
              switch(match)
               {case 0:
                 var d=caml_call1(H[4],c);
                 if(d)return d;
                 var param=rest;
                 continue;
                case 1:var param=rest;continue;
                default:var param=rest;continue}}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function find_all(h,key)
       {var hkey=caml_call2(H[2],h[3],key);
        function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],rest=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                switch(match)
                 {case 0:
                   var match$0=caml_call1(H[4],c);
                   if(match$0)
                    {var d=match$0[1];return [0,d,find_in_bucket(rest)]}
                   var param$0=rest;
                   continue;
                  case 1:var param$0=rest;continue;
                  default:var param$0=rest;continue}}
              var param$1=param$0[3],param$0=param$1;
              continue}
            return 0}}
        var _fa_=key_index(h,hkey);
        return find_in_bucket(caml_check_bound(h[2],_fa_)[1 + _fa_])}
      function replace(h,key,info)
       {var hkey=caml_call2(H[2],h[3],key);
        function replace_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var hk=param$0[1],next=param$0[3],c=param$0[2];
              if(hkey === hk)
               {var match=caml_call2(H[3],c,key);
                if(match){var param$0=next;continue}
                return caml_call3(H[6],c,key,info)}
              var param$1=param$0[3],param$0=param$1;
              continue}
            throw Not_found}}
        var i=key_index(h,hkey),l=caml_check_bound(h[2],i)[1 + i];
        try
         {var _e__=replace_bucket(l);return _e__}
        catch(_e$_)
         {_e$_ = caml_wrap_exception(_e$_);
          if(_e$_ === Not_found)
           {var container=caml_call2(H[1],key,info);
            caml_check_bound(h[2],i)[1 + i] = [0,hkey,container,l];
            h[1] = h[1] + 1 | 0;
            var _e9_=h[2].length - 1 << 1 < h[1]?1:0;
            return _e9_?resize(h):_e9_}
          throw _e$_}}
      function mem(h,key)
       {var
         hkey=caml_call2(H[2],h[3],key),
         _e8_=key_index(h,hkey),
         param$1=caml_check_bound(h[2],_e8_)[1 + _e8_],
         param=param$1;
        for(;;)
         {if(param)
           {var hk=param[1],rest=param[3],c=param[2];
            if(hk === hkey)
             {var match=caml_call2(H[3],c,key);
              if(match){var param=rest;continue}
              return 1}
            var param$0=param[3],param=param$0;
            continue}
          return 0}}
      function iter$0(f,h)
       {var d$0=h[2],_e6_=d$0.length - 1 - 1 | 0,_e5_=0;
        if(! (_e6_ < 0))
         {var i=_e5_;
          a:
          for(;;)
           {var param$0=caml_check_bound(d$0,i)[1 + i],param=param$0;
            for(;;)
             {if(param)
               {var
                 rest=param[3],
                 c=param[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1];caml_call2(f,k,d);switch$0 = 1}
                var param=rest;
                continue}
              var _e7_=i + 1 | 0;
              if(_e6_ !== i){var i=_e7_;continue a}
              break}
            break}}
        return 0}
      function fold(f,h,init)
       {var d$0=h[2],accu$1=[0,init],_e2_=d$0.length - 1 - 1 | 0,_e1_=0;
        if(! (_e2_ < 0))
         {var i=_e1_;
          a:
          for(;;)
           {var
             _e3_=accu$1[1],
             b$0=caml_check_bound(d$0,i)[1 + i],
             b=b$0,
             accu=_e3_;
            for(;;)
             {if(b)
               {var
                 rest=b[3],
                 c=b[2],
                 match=caml_call1(H[5],c),
                 match$0=caml_call1(H[4],c),
                 switch$0=0;
                if(match && match$0)
                 {var d=match$0[1],k=match[1],accu$0=caml_call3(f,k,d,accu);
                  switch$0 = 1}
                if(! switch$0)var accu$0=accu;
                var b=rest,accu=accu$0;
                continue}
              accu$1[1] = accu;
              var _e4_=i + 1 | 0;
              if(_e2_ !== i){var i=_e4_;continue a}
              break}
            break}}
        return accu$1[1]}
      function filter_map_inplace(f,h)
       {function do_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               rest=param$0[3],
               c=param$0[2],
               hk=param$0[1],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var d=match$0[1],k=match[1],match$1=caml_call2(f,k,d);
                if(match$1)
                 {var new_d=match$1[1];
                  caml_call3(H[6],c,k,new_d);
                  return [0,hk,c,do_bucket(rest)]}
                var param$0=rest;
                continue}
              var param$0=rest;
              continue}
            return 0}}
        var d=h[2],_eY_=d.length - 1 - 1 | 0,_eX_=0;
        if(! (_eY_ < 0))
         {var i=_eX_;
          for(;;)
           {var _eZ_=do_bucket(caml_check_bound(d,i)[1 + i]);
            caml_check_bound(d,i)[1 + i] = _eZ_;
            var _e0_=i + 1 | 0;
            if(_eY_ !== i){var i=_e0_;continue}
            break}}
        return 0}
      function length(h){return h[1]}
      function bucket_length(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             param$1=param$0[3],
             accu$1=accu$0 + 1 | 0,
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function stats(h)
       {var
         _eU_=h[2],
         _eV_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length(0,b))},_eV_,_eU_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eW_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length(0,b);
            histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
            return 0},
          _eW_);
        return [0,h[1],h[2].length - 1,mbl,histo]}
      function bucket_length_alive(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var rest=param$0[3],c=param$0[2];
            if(caml_call1(H[7],c))
             {var accu$1=accu$0 + 1 | 0,accu$0=accu$1,param$0=rest;continue}
            var param$1=param$0[3],param$0=param$1;
            continue}
          return accu$0}}
      function stats_alive(h)
       {var
         size=[0,0],
         _eR_=h[2],
         _eS_=0,
         mbl=
          fold_left$1
           (function(m,b){return max(m,bucket_length_alive(0,b))},_eS_,_eR_),
         histo=caml_make_vect(mbl + 1 | 0,0),
         _eT_=h[2];
        iter$5
         (function(b)
           {var l=bucket_length_alive(0,b);
            size[1] = size[1] + l | 0;
            histo[1 + l] = caml_check_bound(histo,l)[1 + l] + 1 | 0;
            return 0},
          _eT_);
        return [0,size[1],h[2].length - 1,mbl,histo]}
      function to_seq(tbl)
       {var tbl_data=tbl[2];
        function aux(i,buck,param)
         {var i$0=i,buck$0=buck;
          for(;;)
           {if(buck$0)
             {var
               next=buck$0[3],
               c=buck$0[2],
               match=caml_call1(H[5],c),
               match$0=caml_call1(H[4],c);
              if(match && match$0)
               {var data=match$0[1],key=match[1];
                return [0,
                        [0,key,data],
                        function(_eQ_){return aux(i$0,next,_eQ_)}]}
              var buck$0=next;
              continue}
            if(i$0 === tbl_data.length - 1)return 0;
            var
             buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
             i$1=i$0 + 1 | 0,
             i$0=i$1,
             buck$0=buck$1;
            continue}}
        var _eN_=0,_eO_=0;
        return function(_eP_){return aux(_eO_,_eN_,_eP_)}}
      function to_seq_keys(m)
       {var _eJ_=to_seq(m);
        function _eK_(_eM_){return _eM_[1]}
        return function(_eL_){return map(_eK_,_eJ_,_eL_)}}
      function to_seq_values(m)
       {var _eF_=to_seq(m);
        function _eG_(_eI_){return _eI_[2]}
        return function(_eH_){return map(_eG_,_eF_,_eH_)}}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i){var tbl=create(0,16);replace_seq(tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$0,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$5(param){return caml_call1(_r_[1],1)}
    function get_key$0(t){return caml_call2(_r_[3],t,0)}
    function get_key_copy$0(t){return caml_call2(_r_[4],t,0)}
    function set_key$0(t,k){return caml_call3(_r_[5],t,0,k)}
    function unset_key$0(t){return caml_call2(_r_[6],t,0)}
    function check_key$0(t){return caml_call2(_r_[7],t,0)}
    function blit_key$0(t1,t2){return caml_call5(_r_[8],t1,0,t2,0,1)}
    function get_data$1(t){return caml_call1(_r_[9],t)}
    function get_data_copy(t){return caml_call1(_r_[10],t)}
    function set_data(t,d){return caml_call2(_r_[11],t,d)}
    function unset_data(t){return caml_call1(_r_[12],t)}
    function check_data(t){return caml_call1(_r_[13],t)}
    function blit_data(t1,t2){return caml_call2(_r_[14],t1,t2)}
    function MakeSeeded$1(H)
     {function create(k,d)
       {var c=create$5(0);set_data(c,d);set_key$0(c,k);return c}
      var hash=H[2];
      function equal(c,k)
       {var match=get_key$0(c);
        if(match){var k$0=match[1];return caml_call2(H[1],k,k$0)?0:1}
        return 2}
      function set_key_data(c,k,d)
       {unset_data(c);set_key$0(c,k);return set_data(c,d)}
      return MakeSeeded$0
              ([0,
                create,
                hash,
                equal,
                get_data$1,
                get_key$0,
                set_key_data,
                check_key$0])}
    function Make$2(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$1([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eE_=include[1];
      function create(sz){return caml_call2(_eE_,_cw_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$6(param){return caml_call1(_r_[1],2)}
    function get_key1(t){return caml_call2(_r_[3],t,0)}
    function get_key1_copy(t){return caml_call2(_r_[4],t,0)}
    function set_key1(t,k){return caml_call3(_r_[5],t,0,k)}
    function unset_key1(t){return caml_call2(_r_[6],t,0)}
    function check_key1(t){return caml_call2(_r_[7],t,0)}
    function get_key2(t){return caml_call2(_r_[3],t,1)}
    function get_key2_copy(t){return caml_call2(_r_[4],t,1)}
    function set_key2(t,k){return caml_call3(_r_[5],t,1,k)}
    function unset_key2(t){return caml_call2(_r_[6],t,1)}
    function check_key2(t){return caml_call2(_r_[7],t,1)}
    function blit_key1(t1,t2){return caml_call5(_r_[8],t1,0,t2,0,1)}
    function blit_key2(t1,t2){return caml_call5(_r_[8],t1,1,t2,1,1)}
    function blit_key12(t1,t2){return caml_call5(_r_[8],t1,0,t2,0,2)}
    function get_data$2(t){return caml_call1(_r_[9],t)}
    function get_data_copy$0(t){return caml_call1(_r_[10],t)}
    function set_data$0(t,d){return caml_call2(_r_[11],t,d)}
    function unset_data$0(t){return caml_call1(_r_[12],t)}
    function check_data$0(t){return caml_call1(_r_[13],t)}
    function blit_data$0(t1,t2){return caml_call2(_r_[14],t1,t2)}
    function MakeSeeded$2(H1,H2)
     {function create(param,d)
       {var k2=param[2],k1=param[1],c=create$6(0);
        set_data$0(c,d);
        set_key1(c,k1);
        set_key2(c,k2);
        return c}
      function hash(seed,param)
       {var
         k2=param[2],
         k1=param[1],
         _eD_=caml_call2(H2[2],seed,k2) * 65599 | 0;
        return caml_call2(H1[2],seed,k1) + _eD_ | 0}
      function equal(c,param)
       {var k2=param[2],k1=param[1],match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2$0=match$0[1],k1$0=match[1];
          if(caml_call2(H1[1],k1,k1$0) && caml_call2(H2[1],k2,k2$0))return 0;
          return 1}
        return 2}
      function get_key(c)
       {var match=get_key1(c),match$0=get_key2(c);
        if(match && match$0)
         {var k2=match$0[1],k1=match[1];return [0,[0,k1,k2]]}
        return 0}
      function set_key_data(c,param,d)
       {var k2=param[2],k1=param[1];
        unset_data$0(c);
        set_key1(c,k1);
        set_key2(c,k2);
        return set_data$0(c,d)}
      function check_key(c)
       {var _eC_=check_key1(c);return _eC_?check_key2(c):_eC_}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$2,get_key,set_key_data,check_key])}
    function Make$3(H1,H2)
     {var equal=H2[1];
      function hash(seed,x){return caml_call1(H2[2],x)}
      var equal$0=H1[1],_eA_=[0,equal,hash];
      function hash$0(seed,x){return caml_call1(H1[2],x)}
      var
       include=MakeSeeded$2([0,equal$0,hash$0],_eA_),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _eB_=include[1];
      function create(sz){return caml_call2(_eB_,_cx_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    function create$7(n){return caml_call1(_r_[1],n)}
    function length$6(k){return caml_call1(_r_[2],k)}
    function get_key$1(t,n){return caml_call2(_r_[3],t,n)}
    function get_key_copy$1(t,n){return caml_call2(_r_[4],t,n)}
    function set_key$1(t,n,k){return caml_call3(_r_[5],t,n,k)}
    function unset_key$1(t,n){return caml_call2(_r_[6],t,n)}
    function check_key$1(t,n){return caml_call2(_r_[7],t,n)}
    function blit_key$1(t1,o1,t2,o2,l)
     {return caml_call5(_r_[8],t1,o1,t2,o2,l)}
    function get_data$3(t){return caml_call1(_r_[9],t)}
    function get_data_copy$1(t){return caml_call1(_r_[10],t)}
    function set_data$1(t,d){return caml_call2(_r_[11],t,d)}
    function unset_data$1(t){return caml_call1(_r_[12],t)}
    function check_data$1(t){return caml_call1(_r_[13],t)}
    function blit_data$1(t1,t2){return caml_call2(_r_[14],t1,t2)}
    function MakeSeeded$3(H)
     {function create(k,d)
       {var c=create$7(k.length - 1);
        set_data$1(c,d);
        var _ey_=k.length - 1 - 1 | 0,_ex_=0;
        if(! (_ey_ < 0))
         {var i=_ex_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _ez_=i + 1 | 0;
            if(_ey_ !== i){var i=_ez_;continue}
            break}}
        return c}
      function hash(seed,k)
       {var h=[0,0],_et_=k.length - 1 - 1 | 0,_es_=0;
        if(! (_et_ < 0))
         {var i=_es_;
          for(;;)
           {var _eu_=h[1],_ev_=caml_check_bound(k,i)[1 + i];
            h[1] = (caml_call2(H[2],seed,_ev_) * 65599 | 0) + _eu_ | 0;
            var _ew_=i + 1 | 0;
            if(_et_ !== i){var i=_ew_;continue}
            break}}
        return h[1]}
      function equal(c,k)
       {var len=k.length - 1,len$0=length$6(c);
        if(len !== len$0)return 1;
        var i$1=len - 1 | 0,i=i$1;
        for(;;)
         {if(0 <= i)
           {var match=get_key$1(c,i);
            if(match)
             {var ki=match[1],_er_=caml_check_bound(k,i)[1 + i];
              if(caml_call2(H[1],_er_,ki)){var i$0=i - 1 | 0,i=i$0;continue}
              return 1}
            return 2}
          return 0}}
      function get_key(c)
       {var len=length$6(c);
        if(0 === len)return [0,[0]];
        var match=get_key$1(c,0);
        if(match)
         {var k0=match[1],a=caml_make_vect(len,k0),i$1=len - 1 | 0,i=i$1;
          for(;;)
           {if(1 <= i)
             {var match$0=get_key$1(c,i);
              if(match$0)
               {var ki=match$0[1];
                caml_check_bound(a,i)[1 + i] = ki;
                var i$0=i - 1 | 0,i=i$0;
                continue}
              return 0}
            return [0,a]}}
        return 0}
      function set_key_data(c,k,d)
       {unset_data$1(c);
        var _ep_=k.length - 1 - 1 | 0,_eo_=0;
        if(! (_ep_ < 0))
         {var i=_eo_;
          for(;;)
           {set_key$1(c,i,caml_check_bound(k,i)[1 + i]);
            var _eq_=i + 1 | 0;
            if(_ep_ !== i){var i=_eq_;continue}
            break}}
        return set_data$1(c,d)}
      function check_key(c)
       {var i$1=length$6(c) - 1 | 0,i=i$1;
        for(;;)
         {var _el_=i < 0?1:0;
          if(_el_)
           var _em_=_el_;
          else
           {var _en_=check_key$1(c,i);
            if(_en_){var i$0=i - 1 | 0,i=i$0;continue}
            var _em_=_en_}
          return _em_}}
      return MakeSeeded$0
              ([0,create,hash,equal,get_data$3,get_key,set_key_data,check_key])}
    function Make$4(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded$3([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       clean=include[23],
       stats_alive=include[24],
       _ek_=include[1];
      function create(sz){return caml_call2(_ek_,_cy_,sz)}
      function of_seq(i)
       {var tbl=create(16);caml_call2(replace_seq,tbl,i);return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq,
              clean,
              stats_alive]}
    var
     Stdlib_ephemeron=
      [0,
       [0,
        create$5,
        get_key$0,
        get_key_copy$0,
        set_key$0,
        unset_key$0,
        check_key$0,
        blit_key$0,
        get_data$1,
        get_data_copy,
        set_data,
        unset_data,
        check_data,
        blit_data,
        Make$2,
        MakeSeeded$1],
       [0,
        create$6,
        get_key1,
        get_key1_copy,
        set_key1,
        unset_key1,
        check_key1,
        get_key2,
        get_key2_copy,
        set_key2,
        unset_key2,
        check_key2,
        blit_key1,
        blit_key2,
        blit_key12,
        get_data$2,
        get_data_copy$0,
        set_data$0,
        unset_data$0,
        check_data$0,
        blit_data$0,
        Make$3,
        MakeSeeded$2],
       [0,
        create$7,
        get_key$1,
        get_key_copy$1,
        set_key$1,
        unset_key$1,
        check_key$1,
        blit_key$1,
        get_data$3,
        get_data_copy$1,
        set_data$1,
        unset_data$1,
        check_data$1,
        blit_data$1,
        Make$4,
        MakeSeeded$3],
       [0,
        function(_ej_)
         {return MakeSeeded$0
                  ([0,_ej_[3],_ej_[1],_ej_[2],_ej_[5],_ej_[4],_ej_[6],_ej_[7]])}]];
    caml_register_global(795,Stdlib_ephemeron,"Stdlib__ephemeron");
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$99))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,cst$100))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _eh_=caml_ml_string_length(n) < 1?1:0,
       _ei_=_eh_ || (47 !== caml_string_get(n,0)?1:0);
      return _ei_}
    function is_implicit(n)
     {var _ec_=is_relative(n);
      if(_ec_)
       {var
         _ed_=caml_ml_string_length(n) < 2?1:0,
         _ee_=_ed_ || caml_string_notequal(sub$0(n,0,2),cst$102);
        if(_ee_)
         var
          _ef_=caml_ml_string_length(n) < 3?1:0,
          _eg_=_ef_ || caml_string_notequal(sub$0(n,0,3),cst$101);
        else
         var _eg_=_ee_}
      else
       var _eg_=_ec_;
      return _eg_}
    function check_suffix(name,suff)
     {var
       _ea_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _eb_=
        _ea_
         ?caml_string_equal
           (sub$0
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_ea_;
      return _eb_}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s);
        return caml_string_equal(r,suffix)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cG_=caml_sys_getenv(cst_TMPDIR),_cz_=_cG_}
    catch(_d$_)
     {_d$_ = caml_wrap_exception(_d$_);
      if(_d$_ !== Not_found)throw _d$_;
      var _cz_=cst_tmp}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,39);
      var _d9_=l - 1 | 0,_d8_=0;
      if(! (_d9_ < 0))
       {var i=_d8_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _d__=i + 1 | 0;
          if(_d9_ !== i){var i=_d__;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function quote_command(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _d2_=caml_equal(stderr,stdout)?cst_2_1:symbol(cst_2,quote(f)),
        _d3_=_d2_;
      else
       var _d3_=cst$108;
      if(stdout)
       var f$0=stdout[1],_d4_=symbol(cst$103,quote(f$0));
      else
       var _d4_=cst$107;
      var _d5_=symbol(_d4_,_d3_);
      if(stdin)
       var f$1=stdin[1],_d6_=symbol(cst$104,quote(f$1));
      else
       var _d6_=cst$106;
      var _d7_=symbol(_d6_,_d5_);
      return symbol(concat$0(cst$105,map$2(quote,[0,cmd,args])),_d7_)}
    function basename(_d1_)
     {return generic_basename(is_dir_sep,current_dir_name,_d1_)}
    function dirname(_d0_)
     {return generic_dirname(is_dir_sep,current_dir_name,_d0_)}
    var
     Unix=
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       _cz_,
       quote,
       quote_command,
       basename,
       dirname];
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_dX_=47 === c?1:0;
      if(_dX_)
       var _dY_=_dX_;
      else
       var _dZ_=92 === c?1:0,_dY_=_dZ_ || (58 === c?1:0);
      return _dY_}
    function is_relative$0(n)
     {var
       _dR_=caml_ml_string_length(n) < 1?1:0,
       _dS_=_dR_ || (47 !== caml_string_get(n,0)?1:0);
      if(_dS_)
       {var
         _dT_=caml_ml_string_length(n) < 1?1:0,
         _dU_=_dT_ || (92 !== caml_string_get(n,0)?1:0);
        if(_dU_)
         var
          _dV_=caml_ml_string_length(n) < 2?1:0,
          _dW_=_dV_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _dW_=_dU_}
      else
       var _dW_=_dS_;
      return _dW_}
    function is_implicit$0(n)
     {var _dI_=is_relative$0(n);
      if(_dI_)
       {var
         _dJ_=caml_ml_string_length(n) < 2?1:0,
         _dK_=_dJ_ || caml_string_notequal(sub$0(n,0,2),cst$112);
        if(_dK_)
         {var
           _dL_=caml_ml_string_length(n) < 2?1:0,
           _dM_=_dL_ || caml_string_notequal(sub$0(n,0,2),cst$111);
          if(_dM_)
           {var
             _dN_=caml_ml_string_length(n) < 3?1:0,
             _dO_=_dN_ || caml_string_notequal(sub$0(n,0,3),cst$110);
            if(_dO_)
             var
              _dP_=caml_ml_string_length(n) < 3?1:0,
              _dQ_=_dP_ || caml_string_notequal(sub$0(n,0,3),cst$109);
            else
             var _dQ_=_dO_}
          else
           var _dQ_=_dM_}
        else
         var _dQ_=_dK_}
      else
       var _dQ_=_dI_;
      return _dQ_}
    function check_suffix$0(name,suff)
     {var _dF_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_dF_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _dG_=lowercase_ascii$1(suff),
        _dH_=caml_string_equal(lowercase_ascii$1(s),_dG_);
      else
       var _dH_=_dF_;
      return _dH_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var
         r=sub$0(filename,len_f - len_s | 0,len_s),
         _dE_=lowercase_ascii$1(suffix);
        return caml_string_equal(lowercase_ascii$1(r),_dE_)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _cF_=caml_sys_getenv(cst_TEMP),temp_dir_name=_cF_}
    catch(_dD_)
     {_dD_ = caml_wrap_exception(_dD_);
      if(_dD_ !== Not_found)throw _dD_;
      var temp_dir_name=cst$113}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$2(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _dB_=1;
        if(! (n < 1))
         {var j=_dB_;
          for(;;)
           {add_char(b,92);
            var _dC_=j + 1 | 0;
            if(n !== j){var j=_dC_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _dz_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_dz_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dz_,i$0])}
          if(92 === c)
           {var _dA_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_dA_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_dA_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _dy_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_dy_)}
            return caml_trampoline_return(loop$0,[0,_dy_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function quote_cmd_filename(f)
     {if(! contains$0(f,34) && ! contains$0(f,37))
       return contains$0(f,32)?symbol(cst$115,symbol(f,cst$114)):f;
      return failwith(symbol(cst_Filename_quote_command_bad,f))}
    function quote_command$0(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _dp_=
         caml_equal(stderr,stdout)
          ?cst_2_1$0
          :symbol(cst_2$0,quote_cmd_filename(f)),
        _dq_=_dp_;
      else
       var _dq_=cst$124;
      var _dr_=[0,_dq_,_cA_];
      if(stdout)
       var f$0=stdout[1],_ds_=symbol(cst$116,quote_cmd_filename(f$0));
      else
       var _ds_=cst$123;
      var _dt_=[0,_ds_,_dr_];
      if(stdin)
       var f$1=stdin[1],_du_=symbol(cst$117,quote_cmd_filename(f$1));
      else
       var _du_=cst$122;
      var
       s=concat$0(cst$118,map$2(quote$0,args)),
       b=create$2(caml_ml_string_length(s) + 20 | 0),
       _dv_=[0,_du_,_dt_];
      iter$4
       (function(c)
         {var switch$0=0;
          if(62 <= c)
           {var _dx_=c - 63 | 0;
            if(60 < _dx_ >>> 0)
             {if(! (62 <= _dx_))switch$0 = 1}
            else
             if(31 === _dx_)switch$0 = 1}
          else
           if(42 <= c)
            {if(60 === c)switch$0 = 1}
           else
            if(33 <= c)
             switch(c - 33 | 0)
              {case 2:case 3:case 6:break;default:switch$0 = 1}
          return switch$0?(add_char(b,94),add_char(b,c)):add_char(b,c)},
        s);
      var _dw_=[0,cst$119,[0,contents(b),_dv_]];
      return concat$0(cst$121,[0,cst$120,[0,quote_cmd_filename(cmd),_dw_]])}
    function drive_and_path(s)
     {var _dl_=2 <= caml_ml_string_length(s)?1:0;
      if(_dl_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(! (25 < (param - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _dm_=switch$0?1:0,_dn_=_dm_?58 === caml_string_get(s,1)?1:0:_dm_}
      else
       var _dn_=_dl_;
      if(_dn_)
       {var _do_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_do_]}
      return [0,cst$125,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return symbol(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    var
     Win32=
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    function basename$1(_dk_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_dk_)}
    function dirname$1(_dj_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_dj_)}
    var
     Cygwin=
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       _cz_,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     Sysdeps=
      caml_string_notequal(os_type,cst_Cygwin)
       ?caml_string_notequal(os_type,cst_Win32)?Unix:Win32
       :Cygwin,
     null$3=Sysdeps[1],
     current_dir_name$2=Sysdeps[2],
     parent_dir_name$2=Sysdeps[3],
     dir_sep$2=Sysdeps[4],
     is_dir_sep$1=Sysdeps[5],
     is_relative$1=Sysdeps[6],
     is_implicit$1=Sysdeps[7],
     check_suffix$1=Sysdeps[8],
     chop_suffix_opt$1=Sysdeps[9],
     temp_dir_name$0=Sysdeps[10],
     quote$1=Sysdeps[11],
     quote_command$1=Sysdeps[12],
     basename$2=Sysdeps[13],
     dirname$2=Sysdeps[14];
    function concat$3(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
       return symbol(dirname,symbol(dir_sep$2,filename));
      return symbol(dirname,filename)}
    function chop_suffix(name,suff)
     {var n=caml_ml_string_length(name) - caml_ml_string_length(suff) | 0;
      return 0 <= n?sub$0(name,0,n):invalid_arg(cst_Filename_chop_suffix)}
    function extension_len(name)
     {var i$4=caml_ml_string_length(name) - 1 | 0,i$1=i$4;
      for(;;)
       {if(0 <= i$1 && ! is_dir_sep$1(name,i$1))
         {if(46 === caml_string_get(name,i$1))
           {var i$2=i$1 - 1 | 0,i=i$2;
            for(;;)
             {if(0 <= i && ! is_dir_sep$1(name,i))
               {if(46 === caml_string_get(name,i))
                 {var i$0=i - 1 | 0,i=i$0;continue}
                return caml_ml_string_length(name) - i$1 | 0}
              return 0}}
          var i$3=i$1 - 1 | 0,i$1=i$3;
          continue}
        return 0}}
    function extension(name)
     {var l=extension_len(name);
      return 0 === l?cst$126:sub$0(name,caml_ml_string_length(name) - l | 0,l)}
    function chop_extension(name)
     {var l=extension_len(name);
      return 0 === l
              ?invalid_arg(cst_Filename_chop_extension)
              :sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    function remove_extension(name)
     {var l=extension_len(name);
      return 0 === l?name:sub$0(name,0,caml_ml_string_length(name) - l | 0)}
    var prng$0=[246,function(_di_){return caml_call1(_b2_[2],0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _dg_=caml_obj_tag(prng$0),
       _dh_=
        250 === _dg_?prng$0[1]:246 === _dg_?force_lazy_block(prng$0):prng$0,
       rnd=caml_call1(_b2_[4],_dh_) & 16777215;
      return concat$3(temp_dir,caml_call3(sprintf(_cB_),prefix,rnd,suffix))}
    var current_temp_dir_name=[0,temp_dir_name$0];
    function set_temp_dir_name(s){current_temp_dir_name[1] = s;return 0}
    function get_temp_dir_name(param){return current_temp_dir_name[1]}
    function temp_file(opt,prefix,suffix)
     {if(opt)
       var sth=opt[1],temp_dir=sth;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {runtime.caml_sys_close(caml_sys_open(name,_cC_,384));return name}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    function open_temp_file(opt,_de_,_dd_,prefix,suffix)
     {if(opt)var sth=opt[1],mode=sth;else var mode=_cD_;
      if(_de_)var sth$0=_de_[1],perms=sth$0;else var perms=384;
      if(_dd_)
       var sth$1=_dd_[1],temp_dir=sth$1;
      else
       var temp_dir=current_temp_dir_name[1];
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var name=temp_file_name(temp_dir,prefix,suffix);
          try
           {var _df_=[0,name,open_out_gen([0,1,[0,3,[0,5,mode]]],perms,name)];
            return _df_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] === Sys_error)
             {if(1000 <= counter$0)throw e;
              var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
              continue}
            throw e}}}
      return try_name(0)}
    var
     Stdlib_filename=
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat$3,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       temp_dir_name$0,
       quote$1,
       quote_command$1];
    caml_register_global(796,Stdlib_filename,"Stdlib__filename");
    function add$1(x,y){return [254,x[1] + y[1],x[2] + y[2]]}
    function sub$4(x,y){return [254,x[1] - y[1],x[2] - y[2]]}
    function neg(x){return [254,- x[1],- x[2]]}
    function conj(x){return [254,x[1],- x[2]]}
    function mul(x,y)
     {return [254,x[1] * y[1] - x[2] * y[2],x[1] * y[2] + x[2] * y[1]]}
    function div(x,y)
     {if(Math.abs(y[2]) <= Math.abs(y[1]))
       {var r=y[2] / y[1],d=y[1] + r * y[2];
        return [254,(x[1] + r * x[2]) / d,(x[2] - r * x[1]) / d]}
      var r$0=y[1] / y[2],d$0=y[2] + r$0 * y[1];
      return [254,(r$0 * x[1] + x[2]) / d$0,(r$0 * x[2] - x[1]) / d$0]}
    function inv(x){return div(one$4,x)}
    function norm2(x){return x[1] * x[1] + x[2] * x[2]}
    function norm(x)
     {var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(r == 0.)return i;
      if(i == 0.)return r;
      if(i <= r){var q=i / r;return r * Math.sqrt(1. + q * q)}
      var q$0=r / i;
      return i * Math.sqrt(1. + q$0 * q$0)}
    function arg(x){return Math.atan2(x[2],x[1])}
    function polar(n,a){return [254,Math.cos(a) * n,Math.sin(a) * n]}
    function sqrt(x)
     {if(x[1] == 0. && x[2] == 0.)return _cE_;
      var r=Math.abs(x[1]),i=Math.abs(x[2]);
      if(i <= r)
       var
        q=i / r,
        w=Math.sqrt(r) * Math.sqrt(0.5 * (1. + Math.sqrt(1. + q * q)));
      else
       var
        q$0=r / i,
        w=Math.sqrt(i) * Math.sqrt(0.5 * (q$0 + Math.sqrt(1. + q$0 * q$0)));
      if(0. <= x[1])return [254,w,0.5 * x[2] / w];
      var w$0=0. <= x[2]?w:- w;
      return [254,0.5 * i / w,w$0]}
    function exp(x)
     {var e=Math.exp(x[1]);return [254,e * Math.cos(x[2]),e * Math.sin(x[2])]}
    function log(x)
     {var _dc_=Math.atan2(x[2],x[1]);return [254,Math.log(norm(x)),_dc_]}
    function pow(x,y){return exp(mul(y,log(x)))}
    var
     Stdlib_complex=
      [0,
       zero$4,
       one$4,
       i,
       neg,
       conj,
       add$1,
       sub$4,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
    caml_register_global(797,Stdlib_complex,"Stdlib__complex");
    var
     Stdlib_arrayLabels=
      [0,
       init$2,
       create_matrix,
       create_matrix,
       append$0,
       concat$1,
       sub$1,
       copy$1,
       fill$0,
       blit$1,
       to_list$1,
       of_list,
       iter$5,
       map$5,
       iteri$2,
       mapi$2,
       fold_left$1,
       fold_right$0,
       iter2$0,
       map2$0,
       exists$0,
       for_all$0,
       mem$0,
       memq$0,
       make_float,
       sort,
       fast_sort$0,
       fast_sort$0,
       to_seq$4,
       to_seqi$1,
       of_seq$2,
       Floatarray];
    caml_register_global(798,Stdlib_arrayLabels,"Stdlib__arrayLabels");
    var
     Stdlib_listLabels=
      [0,
       length,
       hd,
       compare_lengths,
       compare_length_with,
       cons,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       iter$2,
       iteri,
       map$2,
       mapi,
       rev_map,
       filter_map$0,
       concat_map,
       fold_left$0,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       partition,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       fast_sort,
       fast_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq$1,
       of_seq];
    caml_register_global(799,Stdlib_listLabels,"Stdlib__listLabels");
    var
     Stdlib_bytesLabels=
      [0,
       make,
       init$0,
       empty$0,
       copy,
       of_string,
       to_string$1,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit$0,
       concat,
       cat,
       iter$3,
       iteri$0,
       map$3,
       mapi$0,
       trim,
       escaped$0,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase$0,
       lowercase$0,
       capitalize,
       uncapitalize,
       uppercase_ascii$0,
       lowercase_ascii$0,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$4,
       equal$4,
       to_seq$2,
       to_seqi,
       of_seq$0,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_to_string,
       unsafe_of_string];
    caml_register_global(800,Stdlib_bytesLabels,"Stdlib__bytesLabels");
    var
     Stdlib_stringLabels=
      [0,
       make$0,
       init$1,
       copy$0,
       sub$0,
       fill,
       blit$0,
       concat$0,
       iter$4,
       iteri$1,
       map$4,
       mapi$1,
       trim$0,
       escaped$1,
       index$0,
       index_opt$0,
       rindex$0,
       rindex_opt$0,
       index_from$0,
       index_from_opt$0,
       rindex_from$0,
       rindex_from_opt$0,
       contains$0,
       contains_from$0,
       rcontains_from$0,
       uppercase$1,
       lowercase$1,
       capitalize$0,
       uncapitalize$0,
       uppercase_ascii$1,
       lowercase_ascii$1,
       capitalize_ascii$0,
       uncapitalize_ascii$0,
       compare$5,
       equal$5,
       split_on_char,
       to_seq$3,
       to_seqi$0,
       of_seq$1];
    caml_register_global(801,Stdlib_stringLabels,"Stdlib__stringLabels");
    var Stdlib_moreLabels=[0,Stdlib_hashtbl,Stdlib_map,Stdlib_set];
    caml_register_global(802,Stdlib_moreLabels,"Stdlib__moreLabels");
    var Stdlib_stdLabels=[0];
    caml_register_global(803,Stdlib_stdLabels,"Stdlib__stdLabels");
    var enabled=caml_spacetime_enabled(0);
    function if_spacetime_enabled(f){return enabled?caml_call1(f,0):0}
    function create$8(path)
     {if(caml_spacetime_enabled(0))
       {var channel=open_out(path),t=[0,channel,0];
        caml_spacetime_only_works_for_(t[1]);
        return t}
      return [0,stdout,1]}
    function save_event(time,t,event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(time,t[1],event_name)})}
    function save_and_close(time,t)
     {return if_spacetime_enabled
              (function(param)
                {if(t[2])failwith(cst_Series_is_closed);
                 caml_spacetime_only_works_for_(time,t[1]);
                 close_out(t[1]);
                 t[2] = 1;
                 return 0})}
    var Series=[0,create$8,save_event,save_and_close];
    function take$0(time,param)
     {var channel=param[1],closed=param[2];
      return if_spacetime_enabled
              (function(param)
                {if(closed)failwith(cst_Series_is_closed$0);
                 runtime.caml_gc_minor(0);
                 return caml_spacetime_only_works_for_(time,channel)})}
    var Snapshot=[0,take$0];
    function save_event_for_automatic_snaps(event_name)
     {return if_spacetime_enabled
              (function(param)
                {return caml_spacetime_only_works_for_(event_name)})}
    var
     Stdlib_spacetime=
      [0,enabled,Series,Snapshot,save_event_for_automatic_snaps];
    caml_register_global(804,Stdlib_spacetime,"Stdlib__spacetime");
    var
     float32=0,
     float64=1,
     int8_signed=2,
     int8_unsigned=3,
     int16_signed=4,
     int16_unsigned=5,
     int32$1=6,
     int64$1=7,
     int$2=8,
     nativeint$1=9,
     complex32=10,
     complex64=11,
     char$0=12;
    function kind_size_in_bytes(param)
     {switch(param)
       {case 0:return 4;
        case 1:return 8;
        case 2:return 1;
        case 3:return 1;
        case 4:return 2;
        case 5:return 2;
        case 6:return 4;
        case 7:return 8;
        case 8:return 4;
        case 9:return 4;
        case 10:return 8;
        case 11:return 16;
        default:return 1}}
    var c_layout=0,fortran_layout=1;
    function dims(a)
     {var n=caml_ba_num_dims(a),d=caml_make_vect(n,0),_c$_=n - 1 | 0,_c__=0;
      if(! (_c$_ < 0))
       {var i=_c__;
        for(;;)
         {var _da_=runtime.caml_ba_dim(a,i);
          caml_check_bound(d,i)[1 + i] = _da_;
          var _db_=i + 1 | 0;
          if(_c$_ !== i){var i=_db_;continue}
          break}}
      return d}
    function size_in_bytes(arr)
     {var _c9_=fold_left$1(caml_mul,1,dims(arr));
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c9_)}
    var Genarray=[0,dims,size_in_bytes];
    function create$9(kind,layout){return caml_ba_create(kind,layout,[0])}
    function get$1(arr){return runtime.caml_ba_get_generic(arr,[0])}
    function set$0(arr)
     {var _c7_=[0];
      return function(_c8_){return runtime.caml_ba_set_generic(arr,_c7_,_c8_)}}
    function size_in_bytes$0(arr)
     {return kind_size_in_bytes(caml_ba_kind(arr))}
    function of_value(kind,layout,v)
     {var a=create$9(kind,layout);caml_call1(set$0(a),v);return a}
    function create$10(kind,layout,dim)
     {return caml_ba_create(kind,layout,[0,dim])}
    function size_in_bytes$1(arr)
     {var _c6_=caml_ba_dim_1(arr);
      return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c6_)}
    function slice(a,n)
     {var match=runtime.caml_ba_layout(a);
      return match?caml_ba_slice(a,[0,n]):caml_ba_slice(a,[0,n])}
    function of_array(kind,layout,data)
     {var
       ba=create$10(kind,layout,data.length - 1),
       ofs=layout?1:0,
       _c4_=data.length - 1 - 1 | 0,
       _c3_=0;
      if(! (_c4_ < 0))
       {var i=_c3_;
        for(;;)
         {runtime.caml_ba_set_1
           (ba,i + ofs | 0,caml_check_bound(data,i)[1 + i]);
          var _c5_=i + 1 | 0;
          if(_c4_ !== i){var i=_c5_;continue}
          break}}
      return ba}
    function create$11(kind,layout,dim1,dim2)
     {return caml_ba_create(kind,layout,[0,dim1,dim2])}
    function size_in_bytes$2(arr)
     {var _c1_=caml_ba_dim_2(arr),_c2_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_c2_),_c1_)}
    function slice_left(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$0(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       ba=create$11(kind,layout,dim1,dim2),
       ofs=layout?1:0,
       _cW_=dim1 - 1 | 0,
       _cV_=0;
      if(! (_cW_ < 0))
       {var i=_cV_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array2_of_array_n);
          var _cY_=dim2 - 1 | 0,_cX_=0;
          if(! (_cY_ < 0))
           {var j=_cX_;
            for(;;)
             {runtime.caml_ba_set_2
               (ba,i + ofs | 0,j + ofs | 0,caml_check_bound(row,j)[1 + j]);
              var _c0_=j + 1 | 0;
              if(_cY_ !== j){var j=_c0_;continue}
              break}}
          var _cZ_=i + 1 | 0;
          if(_cW_ !== i){var i=_cZ_;continue}
          break}}
      return ba}
    function create$12(kind,layout,dim1,dim2,dim3)
     {return caml_ba_create(kind,layout,[0,dim1,dim2,dim3])}
    function size_in_bytes$3(arr)
     {var
       _cS_=runtime.caml_ba_dim_3(arr),
       _cT_=caml_ba_dim_2(arr),
       _cU_=caml_ba_dim_1(arr);
      return caml_mul
              (caml_mul
                (caml_mul(kind_size_in_bytes(caml_ba_kind(arr)),_cU_),_cT_),
               _cS_)}
    function slice_left_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_right_1(a,n,m){return caml_ba_slice(a,[0,n,m])}
    function slice_left_2(a,n){return caml_ba_slice(a,[0,n])}
    function slice_right_2(a,n){return caml_ba_slice(a,[0,n])}
    function of_array$1(kind,layout,data)
     {var
       dim1=data.length - 1,
       dim2=0 === dim1?0:caml_check_bound(data,0)[1].length - 1,
       dim3=
        0 === dim2
         ?0
         :caml_check_bound(caml_check_bound(data,0)[1],0)[1].length - 1,
       ba=create$12(kind,layout,dim1,dim2,dim3),
       ofs=layout?1:0,
       _cK_=dim1 - 1 | 0,
       _cJ_=0;
      if(! (_cK_ < 0))
       {var i=_cJ_;
        for(;;)
         {var row=caml_check_bound(data,i)[1 + i];
          if(row.length - 1 !== dim2)
           invalid_arg(cst_Bigarray_Array3_of_array_n);
          var _cM_=dim2 - 1 | 0,_cL_=0;
          if(! (_cM_ < 0))
           {var j=_cL_;
            for(;;)
             {var col=caml_check_bound(row,j)[1 + j];
              if(col.length - 1 !== dim3)
               invalid_arg(cst_Bigarray_Array3_of_array_n$0);
              var _cP_=dim3 - 1 | 0,_cO_=0;
              if(! (_cP_ < 0))
               {var k=_cO_;
                for(;;)
                 {runtime.caml_ba_set_3
                   (ba,
                    i + ofs | 0,
                    j + ofs | 0,
                    k + ofs | 0,
                    caml_check_bound(col,k)[1 + k]);
                  var _cR_=k + 1 | 0;
                  if(_cP_ !== k){var k=_cR_;continue}
                  break}}
              var _cQ_=j + 1 | 0;
              if(_cM_ !== j){var j=_cQ_;continue}
              break}}
          var _cN_=i + 1 | 0;
          if(_cK_ !== i){var i=_cN_;continue}
          break}}
      return ba}
    function array0_of_genarray(a)
     {return 0 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array0_of_genarra)}
    function array1_of_genarray(a)
     {return 1 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array1_of_genarra)}
    function array2_of_genarray(a)
     {return 2 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array2_of_genarra)}
    function array3_of_genarray(a)
     {return 3 === caml_ba_num_dims(a)
              ?a
              :invalid_arg(cst_Bigarray_array3_of_genarra)}
    function reshape_0(a){return caml_ba_reshape(a,[0])}
    function reshape_1(a,dim1){return caml_ba_reshape(a,[0,dim1])}
    function reshape_2(a,dim1,dim2){return caml_ba_reshape(a,[0,dim1,dim2])}
    function reshape_3(a,dim1,dim2,dim3)
     {return caml_ba_reshape(a,[0,dim1,dim2,dim3])}
    var
     Stdlib_bigarray=
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$2,
       int32$1,
       int64$1,
       nativeint$1,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       Genarray,
       [0,create$9,caml_ba_change_layout,size_in_bytes$0,get$1,set$0,of_value],
       [0,create$10,caml_ba_change_layout,size_in_bytes$1,slice,of_array],
       [0,
        create$11,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$12,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
    caml_register_global(805,Stdlib_bigarray,"Stdlib__bigarray");
    return}
  (function(){return this}()));


//# 1 "../lib/stdlib2/.stdlib2.objs/stdlib2.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_equal=runtime.caml_equal,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mul=runtime.caml_mul,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst=caml_string_of_jsbytes(""),
     cst$0=caml_string_of_jsbytes("/"),
     cst$1=caml_string_of_jsbytes(""),
     cst$2=caml_string_of_jsbytes("/"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_js_of_ocaml=caml_string_of_jsbytes("js_of_ocaml"),
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_int=global_data.Stdlib__int,
     Stdlib_listLabels=global_data.Stdlib__listLabels,
     Stdlib_option=global_data.Stdlib__option,
     Stdlib_random=global_data.Stdlib__random,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_sys=global_data.Stdlib__sys,
     _a_=[0,0],
     _c_=[0,0,0],
     _b_=[0,0,0],
     _e_=[0,1,0],
     _d_=[0,0,0],
     _k_=[0,0];
    function binsert(y,tree)
     {if(tree)
       {var right=tree[3],x=tree[2],left=tree[1];
        return y === x
                ?tree
                :runtime.caml_lessthan(y,x)
                  ?[0,binsert(y,left),x,right]
                  :[0,left,x,binsert(y,right)]}
      return [0,0,y,0]}
    function pre_order(tree)
     {if(tree)
       {var
         right=tree[3],
         x=tree[2],
         left=tree[1],
         _a2_=pre_order(right),
         _a3_=pre_order(left),
         _a4_=caml_call2(Stdlib[37],_a3_,_a2_);
        return caml_call2(Stdlib[37],[0,x,0],_a4_)}
      return 0}
    function in_order(tree)
     {if(tree)
       {var
         right=tree[3],
         x=tree[2],
         left=tree[1],
         _aZ_=in_order(right),
         _a0_=caml_call2(Stdlib[37],[0,x,0],_aZ_),
         _a1_=in_order(left);
        return caml_call2(Stdlib[37],_a1_,_a0_)}
      return 0}
    function post_order(tree)
     {if(tree)
       {var
         right=tree[3],
         x=tree[2],
         left=tree[1],
         _aW_=post_order(right),
         _aX_=caml_call2(Stdlib[37],_aW_,[0,x,0]),
         _aY_=post_order(left);
        return caml_call2(Stdlib[37],_aY_,_aX_)}
      return 0}
    function count_leaves(tree)
     {if(tree)
       {var right=tree[3],left=tree[1],_aV_=count_leaves(right);
        return count_leaves(left) + _aV_ | 0}
      return 1}
    function count_nodes(tree)
     {if(tree)
       {var right=tree[3],left=tree[1],_aU_=count_nodes(right);
        return (1 + count_nodes(left) | 0) + _aU_ | 0}
      return 0}
    function map(f,tree)
     {if(tree)
       {var
         right=tree[3],
         x=tree[2],
         left=tree[1],
         _aS_=map(f,right),
         _aT_=caml_call1(f,x);
        return [0,map(f,left),_aT_,_aS_]}
      return 0}
    function count_nodes_at_level(level,tree)
     {if(0 <= level)
       {if(tree)
         {var right=tree[3],left=tree[1];
          if(0 === level)return 1;
          var _aR_=count_nodes_at_level(level - 1 | 0,right);
          return count_nodes_at_level(level - 1 | 0,left) + _aR_ | 0}
        return 0}
      return 0}
    var
     Tree2=
      [0,
       binsert,
       pre_order,
       in_order,
       post_order,
       count_leaves,
       count_nodes,
       map,
       count_nodes_at_level];
    caml_register_global(16,Tree2,"Tree2");
    function map$0(f,param)
     {if(param){var x=param[1];return [0,caml_call1(f,x)]}return 0}
    function pure_bind(ox,f){return map$0(f,ox)}
    function bind(ox,f){if(ox){var x=ox[1];return caml_call1(f,x)}return 0}
    function and_then(f,ox){return bind(ox,f)}
    function guard(b){return b?_a_:0}
    function sequence(param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var tail=param$0[2],head=param$0[1];
          if(head)
           {var x=head[1],acc$0=[0,x,acc],acc=acc$0,param$0=tail;continue}
          return 0}
        return [0,caml_call1(Stdlib_list[9],acc)]}}
    function with_default(default$0,ox)
     {if(ox){var x=ox[1];return x}return default$0}
    function sequence_fst(param)
     {var y=param[2],ox=param[1];
      if(ox){var x=ox[1];return [0,[0,x,y]]}
      return 0}
    function sequence_snd(param)
     {var oy=param[2],x=param[1];
      if(oy){var y=oy[1];return [0,[0,x,y]]}
      return 0}
    function filter(pred,ox)
     {if(ox){var x=ox[1];return caml_call1(pred,x)?[0,x]:0}return 0}
    var
     Syntax=[0,pure_bind,bind],
     Option2=
      [0,
       map$0,
       pure_bind,
       bind,
       and_then,
       guard,
       sequence,
       with_default,
       sequence_fst,
       sequence_snd,
       filter,
       Syntax];
    caml_register_global(18,Option2,"Option2");
    function identity(x){return x}
    function symbol(f,g,x){return caml_call1(f,caml_call1(g,x))}
    function symbol$0(f,g,x){return caml_call1(g,caml_call1(f,x))}
    function curry(f,x,y){return caml_call1(f,[0,x,y])}
    function uncurry(f,param)
     {var y=param[2],x=param[1];return caml_call2(f,x,y)}
    var Pervasives2=[0,identity,symbol,symbol$0,curry,uncurry];
    caml_register_global(19,Pervasives2,"Pervasives2");
    function pure_bind$0(xs,f){return caml_call2(Stdlib_list[17],f,xs)}
    function pure(x){return [0,x,0]}
    function bind$0(xs,f)
     {var _aQ_=caml_call2(Stdlib_list[17],f,xs);
      return caml_call1(Stdlib_list[13],_aQ_)}
    function concat_map(f,xs){return bind$0(xs,f)}
    function maximum(param)
     {if(param)
       {var tail=param[2],head=param[1];
        return [0,caml_call3(Stdlib_list[22],Stdlib[17],head,tail)]}
      return 0}
    function repeat(k,x)
     {var k$0=k,acc=0;
      for(;;)
       {if(0 < k$0)
         {var acc$0=[0,x,acc],k$1=k$0 - 1 | 0,k$0=k$1,acc=acc$0;continue}
        return acc}}
    function sequence$0(mxs)
     {function _aP_(xs,acc)
       {return bind$0
                (xs,
                 function(x)
                  {return pure_bind$0(acc,function(ys){return [0,x,ys]})})}
      return caml_call3(Stdlib_list[23],_aP_,mxs,_b_)}
    function filter_somes(xs)
     {function _aN_(_aO_){return _aO_}
      return caml_call2(Stdlib_list[20],_aN_,xs)}
    function intersperse(sep,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var _aM_=param$0[1];
          if(param$0[2])
           {var
             param$1=param$0[2],
             acc$0=[0,sep,[0,_aM_,acc]],
             acc=acc$0,
             param$0=param$1;
            continue}
          return caml_call1(Stdlib_list[9],[0,_aM_,acc])}
        return caml_call1(Stdlib_list[9],acc)}}
    function range(low,high)
     {function _aK_(_aL_){return low + _aL_ | 0}
      return caml_call2(Stdlib_listLabels[10],(high - low | 0) + 1 | 0,_aK_)}
    function remove_first(y,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var tail=param$0[2],head=param$0[1];
          if(caml_equal(head,y))return caml_call2(Stdlib_list[12],acc,tail);
          var acc$0=[0,head,acc],acc=acc$0,param$0=tail;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    function permutations(ys)
     {function permutations(xs)
       {return 0 === xs
                ?_c_
                :bind$0
                  (xs,
                   function(x)
                    {function _aJ_(permutation){return [0,[0,x,permutation],0]}
                     return bind$0(permutations(remove_first(x,xs)),_aJ_)})}
      var _aI_=permutations(ys);
      return caml_call2(Stdlib_list[54],runtime.caml_compare,_aI_)}
    function map3(f,xs1,xs2,xs3)
     {var _aG_=caml_call2(Stdlib_list[50],xs1,xs2);
      function _aH_(param,x3)
       {var x2=param[2],x1=param[1];return caml_call3(f,x1,x2,x3)}
      return caml_call3(Stdlib_list[25],_aH_,_aG_,xs3)}
    function hd_opt(xs){if(xs){var head=xs[1];return [0,head]}return 0}
    function tl_opt(xs){if(xs){var tail=xs[2];return [0,tail]}return 0}
    function uncons(xs)
     {if(xs){var tail=xs[2],head=xs[1];return [0,[0,head,tail]]}return 0}
    function is_empty(xs){return xs?0:1}
    function transpose(xss)
     {if(caml_call2(Stdlib_list[29],is_empty,xss))return 0;
      var _aA_=0;
      function _aB_(_aF_){return with_default(_aA_,_aF_)}
      function _aC_(_aE_){return symbol$0(tl_opt,_aB_,_aE_)}
      var _aD_=transpose(caml_call2(Stdlib_list[17],_aC_,xss));
      return [0,caml_call2(Stdlib_list[20],hd_opt,xss),_aD_]}
    function collapse_equal(xs)
     {if(xs)
       {var tail=xs[2],head=xs[1],_az_=function(x){return caml_equal(x,head)};
        return caml_call2(Stdlib_list[29],_az_,tail)?[0,head]:0}
      return 0}
    function index_left(xs)
     {function _ay_(i,x){return [0,i,x]}
      return caml_call2(Stdlib_list[18],_ay_,xs)}
    function index_right(xs)
     {function _ax_(i,x){return [0,x,i]}
      return caml_call2(Stdlib_list[18],_ax_,xs)}
    function find_map(f,xs)
     {var xs$0=xs;
      for(;;)
       {if(xs$0)
         {var tail=xs$0[2],head=xs$0[1],match=caml_call1(f,head);
          if(match){var x=match[1];return [0,x]}
          var xs$0=tail;
          continue}
        return 0}}
    function sum(xs)
     {var _at_=0;
      function _au_(_aw_,_av_){return _aw_ + _av_ | 0}
      return caml_call3(Stdlib_list[22],_au_,_at_,xs)}
    function fsum(xs)
     {var _ap_=0.;
      function _aq_(_as_,_ar_){return _as_ + _ar_}
      return caml_call3(Stdlib_list[22],_aq_,_ap_,xs)}
    function average(xs)
     {var len=caml_call1(Stdlib_list[1],xs);
      return caml_call2(Stdlib_int[8],len,0)?0:[0,fsum(xs) / len]}
    function take(n,xs)
     {var acc=0,n$0=n,xs$0=xs;
      for(;;)
       {if(0 < n$0)
         {if(xs$0)
           {var
             xs$1=xs$0[2],
             head=xs$0[1],
             n$1=n$0 - 1 | 0,
             acc$0=[0,head,acc],
             acc=acc$0,
             n$0=n$1,
             xs$0=xs$1;
            continue}
          return caml_call1(Stdlib_list[9],acc)}
        return caml_call1(Stdlib_list[9],acc)}}
    function drop(n,xs)
     {var n$0=n,xs$0=xs;
      for(;;)
       {if(0 < n$0)
         {if(xs$0)
           {var xs$1=xs$0[2],n$1=n$0 - 1 | 0,n$0=n$1,xs$0=xs$1;continue}
          return 0}
        return xs$0}}
    function cartesian_product(xs,ys)
     {return concat_map
              (function(x)
                {function _ao_(y){return [0,x,y]}
                 return caml_call2(Stdlib_list[17],_ao_,ys)},
               xs)}
    function count(pred,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           tail=param$0[2],
           head=param$0[1],
           acc$0=caml_call1(pred,head)?acc + 1 | 0:acc,
           acc=acc$0,
           param$0=tail;
          continue}
        return acc}}
    var
     List2=
      [0,
       pure_bind$0,
       pure,
       bind$0,
       concat_map,
       maximum,
       repeat,
       sequence$0,
       filter_somes,
       intersperse,
       range,
       remove_first,
       permutations,
       map3,
       hd_opt,
       tl_opt,
       uncons,
       is_empty,
       transpose,
       collapse_equal,
       index_left,
       index_right,
       find_map,
       sum,
       fsum,
       average,
       take,
       drop,
       cartesian_product,
       count];
    caml_register_global(22,List2,"List2");
    function partition(n,k)
     {if(0 === n && 0 === k)return _d_;
      if(0 < n && 0 < k)
       {var
         _ai_=partition(n - 1 | 0,k - 1 | 0),
         _aj_=function(parts){return caml_call2(Stdlib[37],parts,_e_)},
         option1=caml_call2(Stdlib_list[17],_aj_,_ai_),
         _ak_=partition(n - k | 0,k),
         _al_=function(_an_){return 1 + _an_ | 0},
         _am_=caml_call1(Stdlib_list[17],_al_),
         option2=caml_call2(Stdlib_list[17],_am_,_ak_);
        return caml_call2(Stdlib[37],option1,option2)}
      return 0}
    function partition_permutations(n,k)
     {return concat_map(permutations,partition(n,k))}
    function pow(a,n)
     {if(0 === n)return 1;
      if(1 === n)return a;
      var b=pow(a,n / 2 | 0),_ah_=0 === (n % 2 | 0)?1:a;
      return caml_mul(caml_mul(b,b),_ah_)}
    var Int2=[0,partition,partition_permutations,pow];
    caml_register_global(23,Int2,"Int2");
    function weighted(first,others$0)
     {function normalize(param){var weight=param[1];return Math.abs(weight)}
      var
       _ag_=fsum(caml_call2(Stdlib_list[17],normalize,others$0)),
       total=normalize(first) + _ag_,
       countdown$1=caml_call1(Stdlib_random[9],total),
       param=first,
       others=others$0,
       countdown=countdown$1;
      for(;;)
       {var value=param[2],weight=param[1];
        if(others)
         {var other_others=others[2],second=others[1];
          if(countdown <= Math.abs(weight))return value;
          var
           countdown$0=countdown - Math.abs(weight),
           param=second,
           others=other_others,
           countdown=countdown$0;
          continue}
        return value}}
    function sample_unique(info$0)
     {var acc=0,info=info$0;
      for(;;)
       {if(info)
         {var rest_info=info[2],match=info[1],gen=match[2],size=match[1];
          if(size <= caml_call1(Stdlib_list[1],acc))
           {var info=rest_info;continue}
          var
           x=caml_call1(gen,0),
           _ad_=
            function(x){return function(_af_){return caml_equal(x,_af_)}}(x),
           _ae_=caml_call2(Stdlib_list[36],_ad_,acc);
          if(caml_call1(Stdlib_option[11],_ae_))continue;
          var acc$0=[0,x,acc],acc=acc$0;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    var Random2=[0,weighted,sample_unique];
    caml_register_global(26,Random2,"Random2");
    var
     max_nat_list_length=4,
     max_list_length=4,
     max_inner_list_length=2,
     max_bool_list_length=4,
     max_nat_tree_size=4,
     max_bool_tree_size=6;
    function all(base,shapes,element_size,max_size)
     {var _aa_=range(1,max_size);
      return [0,
              [0,1.,base],
              concat_map
               (function(size)
                 {var _ab_=caml_call1(shapes,size);
                  function _ac_(shape){return [0,1.,shape]}
                  return caml_call2(Stdlib_list[17],_ac_,_ab_)},
                _aa_)]}
    function constant(x,param){return x}
    function from(param,___)
     {var
       xs=param[2],
       x=param[1],
       _$_=caml_call1(Stdlib_list[1],xs) + 1 | 0,
       choice=caml_call1(Stdlib_random[5],_$_);
      return caml_call2(Stdlib_int[8],choice,0)
              ?x
              :caml_call2(Stdlib_list[7],xs,choice - 1 | 0)}
    function pair(x,y,param)
     {var _Z_=caml_call1(y,0);return [0,caml_call1(x,0),_Z_]}
    function triple(x,y,z,param)
     {var _X_=caml_call1(z,0),_Y_=caml_call1(y,0);
      return [0,caml_call1(x,0),_Y_,_X_]}
    var list_base=0;
    function list_shapes(n)
     {if(0 === n)return [0,list_base,0];
      var _V_=list_shapes(n - 1 | 0);
      function _W_(s){return [0,s]}
      return caml_call2(Stdlib_list[17],_W_,_V_)}
    function list_fill(gen,shape)
     {if(shape)
       {var rest=shape[1],_U_=list_fill(gen,rest);
        return [0,caml_call1(gen,0),_U_]}
      return 0}
    function list(max_list_size,element_size,element_gen,param)
     {return list_fill
              (element_gen,
               uncurry
                (weighted,
                 all(list_base,list_shapes,element_size,max_list_size)))}
    var tree_base=0;
    function tree_shapes(n)
     {if(0 === n)return [0,tree_base,0];
      var _Q_=range(0,n - 1 | 0);
      return concat_map
              (function(k)
                {var
                  _R_=tree_shapes((n - 1 | 0) - k | 0),
                  _S_=cartesian_product(tree_shapes(k),_R_);
                 function _T_(param)
                  {var right=param[2],left=param[1];return [0,left,right]}
                 return caml_call2(Stdlib_list[17],_T_,_S_)},
               _Q_)}
    function tree_fill(gen,t)
     {if(t)
       {var
         right=t[2],
         left=t[1],
         _O_=tree_fill(gen,right),
         _P_=caml_call1(gen,0);
        return [0,tree_fill(gen,left),_P_,_O_]}
      return 0}
    function tree(max_tree_size,element_size,element_gen,param)
     {return tree_fill
              (element_gen,
               uncurry
                (weighted,
                 all(tree_base,tree_shapes,element_size,max_tree_size)))}
    function element_gen(param){return caml_call1(Stdlib_random[5],4)}
    var _f_=Stdlib_random[10],_g_=4;
    function nat_list(_N_)
     {return list(max_nat_list_length,_g_,element_gen,_N_)}
    var element_size=4;
    function nested_nat_list(_L_)
     {var _I_=range(0,max_inner_list_length);
      function _J_(len){return pow(element_size,len)}
      var
       inner_list_size=sum(caml_call2(Stdlib_list[17],_J_,_I_)),
       _K_=
        uncurry
         (weighted,all(list_base,list_shapes,inner_list_size,max_list_length));
      return list_fill
              (function(_M_)
                {return list
                         (max_inner_list_length,element_size,element_gen,_M_)},
               _K_)}
    var _h_=2;
    function bool_list(_H_){return list(max_bool_list_length,_h_,_f_,_H_)}
    var _i_=4;
    function nat_tree(_G_){return tree(max_nat_tree_size,_i_,element_gen,_G_)}
    var _j_=2;
    function bool_tree(_F_){return tree(max_bool_tree_size,_j_,_f_,_F_)}
    function io(f,gen,param)
     {var x=caml_call1(gen,0);return [0,x,caml_call1(f,x)]}
    function io_trial(n,k,ref,input,base_case_opt)
     {function _y_(param)
       {var _z_=0,_A_=[0,[0,k,function(_E_){return io(ref,input,_E_)}],_z_];
        if(base_case_opt)
         var
          base_case=base_case_opt[1],
          _B_=0,
          _C_=[0,[0,1,function(_D_){return io(ref,base_case,_D_)}],_B_];
        else
         var _C_=0;
        var amounts=caml_call2(Stdlib[37],_C_,_A_);
        return sample_unique(amounts)}
      return caml_call2(Stdlib_list[10],n,_y_)}
    var
     Sample2=
      [0,
       constant,
       from,
       pair,
       triple,
       element_gen,
       _f_,
       nat_list,
       nested_nat_list,
       bool_list,
       nat_tree,
       bool_tree,
       io_trial];
    caml_register_global(27,Sample2,"Sample2");
    function map$1(f,param)
     {if(0 === param[0]){var x=param[1];return [0,caml_call1(f,x)]}
      var e=param[1];
      return [1,e]}
    function pure_bind$1(x,f){return map$1(f,x)}
    function bind$1(rx,f)
     {if(0 === rx[0]){var x=rx[1];return caml_call1(f,x)}
      var e=rx[1];
      return [1,e]}
    function and_then$0(f,rx){return bind$1(rx,f)}
    function guard$0(e,b){return b?_k_:[1,e]}
    function sequence$1(param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var tail=param$0[2],head=param$0[1];
          if(0 === head[0])
           {var x=head[1],acc$0=[0,x,acc],acc=acc$0,param$0=tail;continue}
          var e=head[1];
          return [1,e]}
        return [0,caml_call1(Stdlib_list[9],acc)]}}
    function to_option(r){if(0 === r[0]){var x=r[1];return [0,x]}return 0}
    function with_default$0(default$0,r)
     {if(0 === r[0]){var x=r[1];return x}return default$0}
    function unwrap(f,g,r)
     {if(0 === r[0]){var x=r[1];return caml_call1(f,x)}
      var y=r[1];
      return caml_call1(g,y)}
    var
     Syntax$0=[0,pure_bind$1,bind$1],
     Result2=
      [0,
       map$1,
       pure_bind$1,
       bind$1,
       and_then$0,
       guard$0,
       sequence$1,
       to_option,
       with_default$0,
       unwrap,
       Syntax$0];
    caml_register_global(28,Result2,"Result2");
    function pair$0(x,y){return [0,x,y]}
    function map_fst(f,param)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map_snd(f,param)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function lift_snd_result(param)
     {var r=param[2],x=param[1];
      if(0 === r[0]){var y=r[1];return [0,[0,x,y]]}
      var e=r[1];
      return [1,e]}
    var Pair2=[0,pair$0,map_fst,map_snd,lift_snd_result];
    caml_register_global(29,Pair2,"Pair2");
    function read_all(channel)
     {var
       _x_=caml_call1(Stdlib[92],channel),
       contents=caml_call2(Stdlib[86],channel,_x_);
      caml_call1(Stdlib[93],channel);
      return contents}
    function read_file(path){return read_all(caml_call1(Stdlib[79],path))}
    function path(parts)
     {var _t_=concat_map(caml_call1(Stdlib_string[35],47),parts);
      function _u_(s){return 1 - caml_call2(Stdlib_string[34],s,cst)}
      var
       _v_=caml_call2(Stdlib_list[38],_u_,_t_),
       standard=caml_call2(Stdlib_string[7],cst$0,_v_),
       _w_=caml_call2(Stdlib_string[7],cst$1,parts),
       combined=caml_call1(Stdlib_string[12],_w_);
      if
       (0
        <
        caml_ml_string_length(combined)
        &&
        47
        ===
        caml_string_get(combined,0))
       return caml_call2(Stdlib[28],cst$2,standard);
      return standard}
    function read_path(parts){return read_file(path(parts))}
    function visible_files(dir)
     {var
       _m_=runtime.caml_sys_read_directory(dir),
       _n_=caml_call1(Stdlib_array[11],_m_);
      function _o_(file)
       {var _q_=1 - runtime.caml_sys_is_directory(path([0,dir,[0,file,0]]));
        if(_q_)
         var
          _r_=0 < caml_ml_string_length(file)?1:0,
          _s_=_r_?46 !== caml_string_get(file,0)?1:0:_r_;
        else
         var _s_=_q_;
        return _s_}
      var _p_=caml_call2(Stdlib_list[38],_o_,_n_);
      return caml_call2(Stdlib_list[51],Stdlib_string[33],_p_)}
    var Io2=[0,read_all,read_file,path,read_path,visible_files];
    caml_register_global(32,Io2,"Io2");
    function to_string(f)
     {var default$0=caml_call1(Stdlib[35],f);
      return 46
              ===
              caml_string_get
               (default$0,caml_ml_string_length(default$0) - 1 | 0)
              ?caml_call2(Stdlib[28],default$0,cst_0)
              :default$0}
    var Float2=[0,to_string];
    caml_register_global(33,Float2,"Float2");
    var _l_=Stdlib_sys[5],switch$0=0;
    if
     (typeof _l_
      !==
      "number"
      &&
      !
      runtime.caml_string_notequal(_l_[1],cst_js_of_ocaml))
     {var is_js=1;switch$0 = 1}
    if(! switch$0)var is_js=0;
    var Compilation2=[0,is_js];
    caml_register_global(35,Compilation2,"Compilation2");
    function uppercase_char(param)
     {var switcher=param - 65 | 0;return 25 < switcher >>> 0?0:1}
    function lowercase_char(param)
     {var switcher=param - 97 | 0;return 25 < switcher >>> 0?0:1}
    function digit_char(param)
     {var switcher=param - 48 | 0;return 9 < switcher >>> 0?0:1}
    var Char2=[0,uppercase_char,lowercase_char,digit_char];
    caml_register_global(36,Char2,"Char2");
    return}
  (function(){return this}()));


//# 1 "../.js/unix/unix.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_channel_descriptor=runtime.caml_channel_descriptor,
     caml_check_bound=runtime.caml_check_bound,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_sys_exit=runtime.caml_sys_exit,
     caml_sys_unsafe_getenv=runtime.caml_sys_unsafe_getenv,
     caml_wrap_exception=runtime.caml_wrap_exception,
     unix_inet_addr_of_string=runtime.unix_inet_addr_of_string;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_close_process_full=caml_string_of_jsbytes("close_process_full"),
     cst_close_process=caml_string_of_jsbytes("close_process"),
     cst_close_process_out=caml_string_of_jsbytes("close_process_out"),
     cst_close_process_in=caml_string_of_jsbytes("close_process_in"),
     cst_process_full_pid=caml_string_of_jsbytes("process_full_pid"),
     cst_process_pid=caml_string_of_jsbytes("process_pid"),
     cst_process_out_pid=caml_string_of_jsbytes("process_out_pid"),
     cst_process_in_pid=caml_string_of_jsbytes("process_in_pid"),
     cst$9=caml_string_of_jsbytes(""),
     cst_c$0=caml_string_of_jsbytes("-c"),
     cst_c=caml_string_of_jsbytes("-c"),
     cst$8=caml_string_of_jsbytes(""),
     cst_udp$1=caml_string_of_jsbytes("udp"),
     cst_tcp$1=caml_string_of_jsbytes("tcp"),
     cst$5=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst_tcp=caml_string_of_jsbytes("tcp"),
     cst_udp=caml_string_of_jsbytes("udp"),
     cst_udp$0=caml_string_of_jsbytes("udp"),
     cst_tcp$0=caml_string_of_jsbytes("tcp"),
     cst$6=caml_string_of_jsbytes(""),
     cst_0_0_0_0$0=caml_string_of_jsbytes("0.0.0.0"),
     cst_127_0_0_1$0=caml_string_of_jsbytes("127.0.0.1"),
     cst_Unix_sendto=caml_string_of_jsbytes("Unix.sendto"),
     cst_Unix_send=caml_string_of_jsbytes("Unix.send"),
     cst_Unix_recvfrom=caml_string_of_jsbytes("Unix.recvfrom"),
     cst_Unix_recv=caml_string_of_jsbytes("Unix.recv"),
     cst_Unix_single_write=caml_string_of_jsbytes("Unix.single_write"),
     cst_Unix_write=caml_string_of_jsbytes("Unix.write"),
     cst_Unix_read=caml_string_of_jsbytes("Unix.read"),
     cst$4=caml_string_of_jsbytes(""),
     cst_execvpe=caml_string_of_jsbytes("execvpe"),
     cst_PATH=caml_string_of_jsbytes("PATH"),
     cst_bin_usr_bin=caml_string_of_jsbytes("/bin:/usr/bin"),
     cst$1=caml_string_of_jsbytes(': "'),
     cst_failed=caml_string_of_jsbytes('" failed'),
     cst_on=caml_string_of_jsbytes(' on "'),
     cst$2=caml_string_of_jsbytes('"'),
     cst$3=caml_string_of_jsbytes(": "),
     cst_E2BIG=caml_string_of_jsbytes("E2BIG"),
     cst_EACCES=caml_string_of_jsbytes("EACCES"),
     cst_EAGAIN=caml_string_of_jsbytes("EAGAIN"),
     cst_EBADF=caml_string_of_jsbytes("EBADF"),
     cst_EBUSY=caml_string_of_jsbytes("EBUSY"),
     cst_ECHILD=caml_string_of_jsbytes("ECHILD"),
     cst_EDEADLK=caml_string_of_jsbytes("EDEADLK"),
     cst_EDOM=caml_string_of_jsbytes("EDOM"),
     cst_EEXIST=caml_string_of_jsbytes("EEXIST"),
     cst_EFAULT=caml_string_of_jsbytes("EFAULT"),
     cst_EFBIG=caml_string_of_jsbytes("EFBIG"),
     cst_EINTR=caml_string_of_jsbytes("EINTR"),
     cst_EINVAL=caml_string_of_jsbytes("EINVAL"),
     cst_EIO=caml_string_of_jsbytes("EIO"),
     cst_EISDIR=caml_string_of_jsbytes("EISDIR"),
     cst_EMFILE=caml_string_of_jsbytes("EMFILE"),
     cst_EMLINK=caml_string_of_jsbytes("EMLINK"),
     cst_ENAMETOOLONG=caml_string_of_jsbytes("ENAMETOOLONG"),
     cst_ENFILE=caml_string_of_jsbytes("ENFILE"),
     cst_ENODEV=caml_string_of_jsbytes("ENODEV"),
     cst_ENOENT=caml_string_of_jsbytes("ENOENT"),
     cst_ENOEXEC=caml_string_of_jsbytes("ENOEXEC"),
     cst_ENOLCK=caml_string_of_jsbytes("ENOLCK"),
     cst_ENOMEM=caml_string_of_jsbytes("ENOMEM"),
     cst_ENOSPC=caml_string_of_jsbytes("ENOSPC"),
     cst_ENOSYS=caml_string_of_jsbytes("ENOSYS"),
     cst_ENOTDIR=caml_string_of_jsbytes("ENOTDIR"),
     cst_ENOTEMPTY=caml_string_of_jsbytes("ENOTEMPTY"),
     cst_ENOTTY=caml_string_of_jsbytes("ENOTTY"),
     cst_ENXIO=caml_string_of_jsbytes("ENXIO"),
     cst_EPERM=caml_string_of_jsbytes("EPERM"),
     cst_EPIPE=caml_string_of_jsbytes("EPIPE"),
     cst_ERANGE=caml_string_of_jsbytes("ERANGE"),
     cst_EROFS=caml_string_of_jsbytes("EROFS"),
     cst_ESPIPE=caml_string_of_jsbytes("ESPIPE"),
     cst_ESRCH=caml_string_of_jsbytes("ESRCH"),
     cst_EXDEV=caml_string_of_jsbytes("EXDEV"),
     cst_EWOULDBLOCK=caml_string_of_jsbytes("EWOULDBLOCK"),
     cst_EINPROGRESS=caml_string_of_jsbytes("EINPROGRESS"),
     cst_EALREADY=caml_string_of_jsbytes("EALREADY"),
     cst_ENOTSOCK=caml_string_of_jsbytes("ENOTSOCK"),
     cst_EDESTADDRREQ=caml_string_of_jsbytes("EDESTADDRREQ"),
     cst_EMSGSIZE=caml_string_of_jsbytes("EMSGSIZE"),
     cst_EPROTOTYPE=caml_string_of_jsbytes("EPROTOTYPE"),
     cst_ENOPROTOOPT=caml_string_of_jsbytes("ENOPROTOOPT"),
     cst_EPROTONOSUPPORT=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     cst_ESOCKTNOSUPPORT=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     cst_EOPNOTSUPP=caml_string_of_jsbytes("EOPNOTSUPP"),
     cst_EPFNOSUPPORT=caml_string_of_jsbytes("EPFNOSUPPORT"),
     cst_EAFNOSUPPORT=caml_string_of_jsbytes("EAFNOSUPPORT"),
     cst_EADDRINUSE=caml_string_of_jsbytes("EADDRINUSE"),
     cst_EADDRNOTAVAIL=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     cst_ENETDOWN=caml_string_of_jsbytes("ENETDOWN"),
     cst_ENETUNREACH=caml_string_of_jsbytes("ENETUNREACH"),
     cst_ENETRESET=caml_string_of_jsbytes("ENETRESET"),
     cst_ECONNABORTED=caml_string_of_jsbytes("ECONNABORTED"),
     cst_ECONNRESET=caml_string_of_jsbytes("ECONNRESET"),
     cst_ENOBUFS=caml_string_of_jsbytes("ENOBUFS"),
     cst_EISCONN=caml_string_of_jsbytes("EISCONN"),
     cst_ENOTCONN=caml_string_of_jsbytes("ENOTCONN"),
     cst_ESHUTDOWN=caml_string_of_jsbytes("ESHUTDOWN"),
     cst_ETOOMANYREFS=caml_string_of_jsbytes("ETOOMANYREFS"),
     cst_ETIMEDOUT=caml_string_of_jsbytes("ETIMEDOUT"),
     cst_ECONNREFUSED=caml_string_of_jsbytes("ECONNREFUSED"),
     cst_EHOSTDOWN=caml_string_of_jsbytes("EHOSTDOWN"),
     cst_EHOSTUNREACH=caml_string_of_jsbytes("EHOSTUNREACH"),
     cst_ELOOP=caml_string_of_jsbytes("ELOOP"),
     cst_EOVERFLOW=caml_string_of_jsbytes("EOVERFLOW"),
     shell=caml_string_of_jsbytes("/bin/sh"),
     cst_Unix_Unix_error=caml_string_of_jsbytes("Unix.Unix_error"),
     cst=caml_string_of_jsbytes(""),
     cst$0=caml_string_of_jsbytes(""),
     cst_Unix_Unix_error$0=caml_string_of_jsbytes("Unix.Unix_error"),
     cst_0_0_0_0=caml_string_of_jsbytes("0.0.0.0"),
     cst_127_0_0_1=caml_string_of_jsbytes("127.0.0.1"),
     cst$10=caml_string_of_jsbytes("::"),
     cst_1=caml_string_of_jsbytes("::1"),
     Stdlib=global_data.Stdlib,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_int=global_data.Stdlib__int,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Stdlib_filename=global_data.Stdlib__filename,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_printf=global_data.Stdlib__printf,
     Stdlib_callback=global_data.Stdlib__callback,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Unix_error=[248,cst_Unix_Unix_error,runtime.caml_fresh_oo_id(0)];
    caml_call2
     (Stdlib_callback[2],cst_Unix_Unix_error$0,[0,Unix_error,0,cst$0,cst]);
    var
     _p_=[0,1],
     _q_=[0,1],
     _o_=[0,1],
     _l_=[0,1],
     _m_=[0,1],
     _n_=[0,1],
     _j_=[0,1],
     _k_=[0,1],
     _i_=[0,1],
     _h_=[0,1],
     _e_=[0,0],
     _f_=[0,0],
     _g_=[0,0],
     _d_=runtime.caml_int64_create_lo_mi_hi(0,0,0),
     _c_=
      [0,
       [11,caml_string_of_jsbytes("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_string_of_jsbytes("EUNKNOWNERR %d")],
     _b_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(", "),
          [3,0,[11,caml_string_of_jsbytes(", "),[3,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("Unix.Unix_error(Unix.%s, %S, %S)")];
    function _a_(param)
     {if(param[1] === Unix_error)
       {var s=param[4],s$0=param[3],e=param[2];
        if(typeof e === "number")
         {var _dz_=e;
          if(34 <= _dz_)
           switch(_dz_)
            {case 34:var msg=cst_ESPIPE;break;
             case 35:var msg=cst_ESRCH;break;
             case 36:var msg=cst_EXDEV;break;
             case 37:var msg=cst_EWOULDBLOCK;break;
             case 38:var msg=cst_EINPROGRESS;break;
             case 39:var msg=cst_EALREADY;break;
             case 40:var msg=cst_ENOTSOCK;break;
             case 41:var msg=cst_EDESTADDRREQ;break;
             case 42:var msg=cst_EMSGSIZE;break;
             case 43:var msg=cst_EPROTOTYPE;break;
             case 44:var msg=cst_ENOPROTOOPT;break;
             case 45:var msg=cst_EPROTONOSUPPORT;break;
             case 46:var msg=cst_ESOCKTNOSUPPORT;break;
             case 47:var msg=cst_EOPNOTSUPP;break;
             case 48:var msg=cst_EPFNOSUPPORT;break;
             case 49:var msg=cst_EAFNOSUPPORT;break;
             case 50:var msg=cst_EADDRINUSE;break;
             case 51:var msg=cst_EADDRNOTAVAIL;break;
             case 52:var msg=cst_ENETDOWN;break;
             case 53:var msg=cst_ENETUNREACH;break;
             case 54:var msg=cst_ENETRESET;break;
             case 55:var msg=cst_ECONNABORTED;break;
             case 56:var msg=cst_ECONNRESET;break;
             case 57:var msg=cst_ENOBUFS;break;
             case 58:var msg=cst_EISCONN;break;
             case 59:var msg=cst_ENOTCONN;break;
             case 60:var msg=cst_ESHUTDOWN;break;
             case 61:var msg=cst_ETOOMANYREFS;break;
             case 62:var msg=cst_ETIMEDOUT;break;
             case 63:var msg=cst_ECONNREFUSED;break;
             case 64:var msg=cst_EHOSTDOWN;break;
             case 65:var msg=cst_EHOSTUNREACH;break;
             case 66:var msg=cst_ELOOP;break;
             default:var msg=cst_EOVERFLOW}
          else
           switch(_dz_)
            {case 0:var msg=cst_E2BIG;break;
             case 1:var msg=cst_EACCES;break;
             case 2:var msg=cst_EAGAIN;break;
             case 3:var msg=cst_EBADF;break;
             case 4:var msg=cst_EBUSY;break;
             case 5:var msg=cst_ECHILD;break;
             case 6:var msg=cst_EDEADLK;break;
             case 7:var msg=cst_EDOM;break;
             case 8:var msg=cst_EEXIST;break;
             case 9:var msg=cst_EFAULT;break;
             case 10:var msg=cst_EFBIG;break;
             case 11:var msg=cst_EINTR;break;
             case 12:var msg=cst_EINVAL;break;
             case 13:var msg=cst_EIO;break;
             case 14:var msg=cst_EISDIR;break;
             case 15:var msg=cst_EMFILE;break;
             case 16:var msg=cst_EMLINK;break;
             case 17:var msg=cst_ENAMETOOLONG;break;
             case 18:var msg=cst_ENFILE;break;
             case 19:var msg=cst_ENODEV;break;
             case 20:var msg=cst_ENOENT;break;
             case 21:var msg=cst_ENOEXEC;break;
             case 22:var msg=cst_ENOLCK;break;
             case 23:var msg=cst_ENOMEM;break;
             case 24:var msg=cst_ENOSPC;break;
             case 25:var msg=cst_ENOSYS;break;
             case 26:var msg=cst_ENOTDIR;break;
             case 27:var msg=cst_ENOTEMPTY;break;
             case 28:var msg=cst_ENOTTY;break;
             case 29:var msg=cst_ENXIO;break;
             case 30:var msg=cst_EPERM;break;
             case 31:var msg=cst_EPIPE;break;
             case 32:var msg=cst_ERANGE;break;
             default:var msg=cst_EROFS}}
        else
         var x=e[1],msg=caml_call2(Stdlib_printf[4],_c_,x);
        return [0,caml_call4(Stdlib_printf[4],_b_,msg,s$0,s)]}
      return 0}
    caml_call1(Stdlib_printexc[9],_a_);
    function handle_unix_error(f,arg)
     {try
       {var _dy_=caml_call1(f,arg);return _dy_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Unix_error)
         {var
           arg$0=exn[4],
           fun_name=exn[3],
           err=exn[2],
           _dw_=caml_check_bound(runtime.caml_sys_argv(0),0)[1];
          caml_call1(Stdlib[49],_dw_);
          caml_call1(Stdlib[49],cst$1);
          caml_call1(Stdlib[49],fun_name);
          caml_call1(Stdlib[49],cst_failed);
          if(0 < caml_ml_string_length(arg$0))
           {caml_call1(Stdlib[49],cst_on);
            caml_call1(Stdlib[49],arg$0);
            caml_call1(Stdlib[49],cst$2)}
          caml_call1(Stdlib[49],cst$3);
          var _dx_=runtime.unix_error_message(err);
          caml_call1(Stdlib[53],_dx_);
          return caml_call1(Stdlib[99],2)}
        throw exn}}
    function execvpe(name,args,env)
     {try
       {var _dq_=runtime.unix_execvpe(name,args,env);return _dq_}
      catch(_dr_)
       {_dr_ = caml_wrap_exception(_dr_);
        if(_dr_[1] === Unix_error)
         {var _dp_=_dr_[2];
          if(typeof _dp_ === "number" && 25 === _dp_)
           {var
             exec=
              function(file)
               {try
                 {var _du_=runtime.unix_execve(file,args,env);return _du_}
                catch(_dv_)
                 {_dv_ = caml_wrap_exception(_dv_);
                  if(_dv_[1] === Unix_error)
                   {var _dt_=_dv_[2];
                    if(typeof _dt_ === "number" && 21 === _dt_)
                     {var
                       argc=args.length - 1,
                       args$0=
                        0 === argc
                         ?args
                         :caml_call3(Stdlib_array[7],args,1,argc - 1 | 0),
                       new_args=caml_call2(Stdlib_array[5],[0,shell,file],args$0);
                      return runtime.unix_execve
                              (caml_check_bound(new_args,0)[1],new_args,env)}}
                  throw _dv_}};
            if(caml_call2(Stdlib_string[22],name,47))return exec(name);
            try
             {var _do_=caml_sys_unsafe_getenv(cst_PATH),_dn_=_do_}
            catch(_ds_)
             {_ds_ = caml_wrap_exception(_ds_);
              if(_ds_ !== Stdlib[8])throw _ds_;
              var _dn_=cst_bin_usr_bin}
            var
             param$0=caml_call2(Stdlib_string[35],58,_dn_),
             eacces=0,
             param=param$0;
            for(;;)
             {if(param)
               {var
                 rem=param[2],
                 dir=param[1],
                 dir$0=caml_string_equal(dir,cst$4)?Stdlib_filename[1]:dir;
                try
                 {var _dl_=exec(caml_call2(Stdlib_filename[4],dir$0,name));
                  return _dl_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  if(exn[1] === Unix_error)
                   {var err=exn[2];
                    if(typeof err === "number")
                     {var _dk_=err - 62 | 0,switch$0=0;
                      if(4 < _dk_ >>> 0)
                       {if(! (-35 <= _dk_))
                         {var switcher=_dk_ + 62 | 0;
                          switch(switcher)
                           {case 1:var eacces=1,param=rem;continue;
                            case 14:
                            case 17:
                            case 19:
                            case 20:
                            case 26:switch$0 = 1;break
                            }}}
                      else
                       if(2 < (_dk_ - 1 | 0) >>> 0)switch$0 = 1;
                      if(switch$0){var param=rem;continue}}
                    throw exn}
                  throw exn}}
              var _dm_=eacces?1:20;
              throw [0,Unix_error,_dm_,cst_execvpe,name]}}}
        throw _dr_}}
    var stdin=0,stdout=1,stderr=2;
    function read(fd,buf,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_read(fd,buf,ofs,len);
      return caml_call1(Stdlib[1],cst_Unix_read)}
    function write(fd,buf,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_write(fd,buf,ofs,len);
      return caml_call1(Stdlib[1],cst_Unix_write)}
    function single_write(fd,buf,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_single_write(fd,buf,ofs,len);
      return caml_call1(Stdlib[1],cst_Unix_single_write)}
    function write_substring(fd,buf,ofs,len)
     {return write(fd,caml_call1(Stdlib_bytes[43],buf),ofs,len)}
    function single_write_substring(fd,buf,ofs,len)
     {return single_write(fd,caml_call1(Stdlib_bytes[43],buf),ofs,len)}
    function map_file(fd,opt,kind,layout,shared,dims)
     {if(opt)var sth=opt[1],pos=sth;else var pos=_d_;
      return runtime.caml_unix_map_file_bytecode
              (fd,kind,layout,shared,dims,pos)}
    function pause(param)
     {var sigs=runtime.unix_sigprocmask(1,0);
      return runtime.unix_sigsuspend(sigs)}
    function sleep(duration){return runtime.unix_sleep(duration)}
    var
     inet_addr_any=unix_inet_addr_of_string(cst_0_0_0_0),
     inet_addr_loopback=unix_inet_addr_of_string(cst_127_0_0_1);
    try
     {var _A_=unix_inet_addr_of_string(cst$10),inet_addr_any$0=_A_}
    catch(_dj_)
     {_dj_ = caml_wrap_exception(_dj_);
      if(_dj_[1] !== Stdlib[7])throw _dj_;
      var inet_addr_any$0=inet_addr_any}
    try
     {var _z_=unix_inet_addr_of_string(cst_1),inet6_addr_loopback=_z_}
    catch(_di_)
     {_di_ = caml_wrap_exception(_di_);
      if(_di_[1] !== Stdlib[7])throw _di_;
      var inet6_addr_loopback=inet_addr_loopback}
    function domain_of_sockaddr(param)
     {if(0 === param[0])return 0;
      var a=param[1];
      return 16 === caml_ml_string_length(a)?2:1}
    function recv(fd,buf,ofs,len,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_recv(fd,buf,ofs,len,flags);
      return caml_call1(Stdlib[1],cst_Unix_recv)}
    function recvfrom(fd,buf,ofs,len,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_recvfrom(fd,buf,ofs,len,flags);
      return caml_call1(Stdlib[1],cst_Unix_recvfrom)}
    function send(fd,buf,ofs,len,flags)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_send(fd,buf,ofs,len,flags);
      return caml_call1(Stdlib[1],cst_Unix_send)}
    function sendto(fd,buf,ofs,len,flags,addr)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_bytes_length(buf) - len | 0) < ofs))
       return runtime.unix_sendto(fd,buf,ofs,len,flags,addr);
      return caml_call1(Stdlib[1],cst_Unix_sendto)}
    function send_substring(fd,buf,ofs,len,flags)
     {return send(fd,caml_call1(Stdlib_bytes[43],buf),ofs,len,flags)}
    function sendto_substring(fd,buf,ofs,len,flags,addr)
     {return sendto(fd,caml_call1(Stdlib_bytes[43],buf),ofs,len,flags,addr)}
    function getsockopt(fd,opt){return runtime.unix_getsockopt(0,fd,opt)}
    function setsockopt(fd,opt,v){return runtime.unix_setsockopt(0,fd,opt,v)}
    function getsockopt_int(fd,opt){return runtime.unix_getsockopt(1,fd,opt)}
    function setsockopt_int(fd,opt,v)
     {return runtime.unix_setsockopt(1,fd,opt,v)}
    function getsockopt_optint(fd,opt)
     {return runtime.unix_getsockopt(2,fd,opt)}
    function setsockopt_optint(fd,opt,v)
     {return runtime.unix_setsockopt(2,fd,opt,v)}
    function getsockopt_float(fd,opt)
     {return runtime.unix_getsockopt(3,fd,opt)}
    function setsockopt_float(fd,opt,v)
     {return runtime.unix_setsockopt(3,fd,opt,v)}
    function getsockopt_error(fd){return runtime.unix_getsockopt(4,fd,0)}
    function getaddrinfo(node,service,opts)
     {try
       {var
         _c__=runtime.unix_getaddrinfo(node,service,opts),
         _c$_=caml_call1(Stdlib_list[9],_c__);
        return _c$_}
      catch(_da_)
       {_da_ = caml_wrap_exception(_da_);
        if(_da_[1] === Stdlib[6])
         {var
           opt_socktype=[0,0],
           opt_protocol=[0,0],
           opt_passive=[0,0],
           _cX_=
            function(param)
             {if(typeof param === "number")
               {if(2 === param){opt_passive[1] = 1;return 0}}
              else
               switch(param[0])
                {case 1:var s=param[1];opt_socktype[1] = [0,s];return 0;
                 case 2:var p=param[1];opt_protocol[1] = p;return 0
                 }
              return 0};
          caml_call2(Stdlib_list[15],_cX_,opts);
          var
           get_port=
            function(ty,kind)
             {if(caml_string_equal(service,cst$5))return [0,[0,ty,0],0];
              try
               {var _df_=[0,[0,ty,runtime.caml_int_of_string(service)],0];
                return _df_}
              catch(_dg_)
               {_dg_ = caml_wrap_exception(_dg_);
                if(_dg_[1] === Stdlib[7])
                 try
                  {var
                    _de_=
                     [0,[0,ty,runtime.unix_getservbyname(service,kind)[3]],0];
                   return _de_}
                 catch(_dh_)
                  {_dh_ = caml_wrap_exception(_dh_);
                   if(_dh_ === Stdlib[8])return 0;
                   throw _dh_}
                throw _dg_}},
           _cY_=opt_socktype[1];
          if(_cY_)
           var
            _cZ_=_cY_[1],
            _c0_=
             1 === _cZ_
              ?get_port(1,cst_udp)
              :_cZ_
                ?caml_string_equal(service,cst$7)?[0,[0,_cZ_,0],0]:0
                :get_port(0,cst_tcp),
            ports=_c0_;
          else
           var
            _c8_=get_port(1,cst_udp$0),
            _c9_=get_port(0,cst_tcp$0),
            ports=caml_call2(Stdlib[37],_c9_,_c8_);
          if(caml_string_equal(node,cst$6))
           var
            addresses=
             caml_call2(Stdlib_list[33],2,opts)
              ?[0,[0,inet_addr_any,cst_0_0_0_0$0],0]
              :[0,[0,inet_addr_loopback,cst_127_0_0_1$0],0];
          else
           try
            {var
              _c7_=[0,[0,unix_inet_addr_of_string(node),node],0],
              addresses=_c7_}
           catch(_dc_)
            {_dc_ = caml_wrap_exception(_dc_);
             if(_dc_[1] !== Stdlib[7])throw _dc_;
             try
              {var
                he=runtime.unix_gethostbyname(node),
                _c4_=caml_call1(Stdlib_array[11],he[4]),
                _c5_=function(a){return [0,a,he[1]]},
                _c6_=caml_call2(Stdlib_list[17],_c5_,_c4_),
                _c3_=_c6_}
             catch(_dd_)
              {_dd_ = caml_wrap_exception(_dd_);
               if(_dd_ !== Stdlib[8])throw _dd_;
               var _c3_=0}
             var addresses=_c3_}
          var
           _c1_=
            function(param)
             {var port=param[2],ty=param[1];
              function _db_(param)
               {var name=param[2],addr=param[1];
                return [0,1,ty,opt_protocol[1],[1,addr,port],name]}
              return caml_call2(Stdlib_list[17],_db_,addresses)},
           _c2_=caml_call2(Stdlib_list[17],_c1_,ports);
          return caml_call1(Stdlib_list[14],_c2_)}
        throw _da_}}
    function getnameinfo(addr,opts)
     {try
       {var _cT_=runtime.unix_getnameinfo(addr,opts);return _cT_}
      catch(_cU_)
       {_cU_ = caml_wrap_exception(_cU_);
        if(_cU_[1] === Stdlib[6])
         {if(0 === addr[0]){var f=addr[1];return [0,cst$8,f]}
          var p=addr[2],a=addr[1];
          try
           {if(caml_call2(Stdlib_list[33],1,opts))throw Stdlib[8];
            var _cS_=runtime.unix_gethostbyaddr(a)[1],hostname=_cS_}
          catch(_cW_)
           {_cW_ = caml_wrap_exception(_cW_);
            if(_cW_ !== Stdlib[8])throw _cW_;
            if(caml_call2(Stdlib_list[33],2,opts))throw Stdlib[8];
            var hostname=runtime.unix_string_of_inet_addr(a)}
          try
           {if(caml_call2(Stdlib_list[33],3,opts))throw Stdlib[8];
            var
             kind=caml_call2(Stdlib_list[33],4,opts)?cst_udp$1:cst_tcp$1,
             _cR_=runtime.unix_getservbyport(p,kind)[1],
             service=_cR_}
          catch(_cV_)
           {_cV_ = caml_wrap_exception(_cV_);
            if(_cV_ !== Stdlib[8])throw _cV_;
            var service=caml_call1(Stdlib_int[10],p)}
          return [0,hostname,service]}
        throw _cU_}}
    function waitpid_non_intr(pid)
     {for(;;)
       try
        {var _cP_=runtime.unix_waitpid(0,pid);return _cP_}
       catch(_cQ_)
        {_cQ_ = caml_wrap_exception(_cQ_);
         if(_cQ_[1] === Unix_error)
          {var _cO_=_cQ_[2];
           if(typeof _cO_ === "number" && 11 === _cO_)continue}
         throw _cQ_}}
    function system(cmd)
     {var id=runtime.unix_fork(0);
      if(0 === id)
       try
        {var _cM_=runtime.unix_execv(shell,[0,shell,cst_c,cmd]);return _cM_}
       catch(_cN_){return caml_sys_exit(127)}
      return waitpid_non_intr(id)[2]}
    function file_descr_not_standard(fd)
     {var fd$0=fd;
      for(;;)
       {if(3 <= fd$0)return fd$0;
        var fd$1=runtime.unix_dup(0,fd$0),fd$0=fd$1;
        continue}}
    function safe_close(fd)
     {try
       {var _cK_=runtime.unix_close(fd);return _cK_}
      catch(_cL_)
       {_cL_ = caml_wrap_exception(_cL_);
        if(_cL_[1] === Unix_error)return 0;
        throw _cL_}}
    function perform_redirections(new_stdin,new_stdout,new_stderr)
     {var
       new_stdin$0=file_descr_not_standard(new_stdin),
       new_stdout$0=file_descr_not_standard(new_stdout),
       new_stderr$0=file_descr_not_standard(new_stderr);
      runtime.unix_dup2(_e_,new_stdin$0,0);
      runtime.unix_dup2(_f_,new_stdout$0,1);
      runtime.unix_dup2(_g_,new_stderr$0,2);
      safe_close(new_stdin$0);
      safe_close(new_stdout$0);
      return safe_close(new_stderr$0)}
    function create_process(cmd,args,new_stdin,new_stdout,new_stderr)
     {var id=runtime.unix_fork(0);
      if(0 === id)
       try
        {perform_redirections(new_stdin,new_stdout,new_stderr);
         var _cI_=runtime.unix_execvp(cmd,args);
         return _cI_}
       catch(_cJ_){return caml_sys_exit(127)}
      return id}
    function create_process_env(cmd,args,env,new_stdin,new_stdout,new_stderr)
     {var id=runtime.unix_fork(0);
      if(0 === id)
       try
        {perform_redirections(new_stdin,new_stdout,new_stderr);
         var _cG_=execvpe(cmd,args,env);
         return _cG_}
       catch(_cH_){return caml_sys_exit(127)}
      return id}
    var popen_processes=caml_call2(Stdlib_hashtbl[1],0,7);
    function open_proc(prog,args,envopt,proc,input,output,error)
     {var id=runtime.unix_fork(0);
      if(0 === id)
       {perform_redirections(input,output,error);
        try
         {if(envopt)
           var env=envopt[1],_cE_=runtime.unix_execve(prog,args,env);
          else
           var _cE_=runtime.unix_execv(prog,args);
          return _cE_}
        catch(_cF_){return caml_sys_exit(127)}}
      return caml_call3(Stdlib_hashtbl[5],popen_processes,proc,id)}
    function open_process_args_in(prog,args)
     {var
       match=runtime.unix_pipe(_h_,0),
       in_write=match[2],
       in_read=match[1],
       inchan=runtime.unix_inchannel_of_filedescr(in_read);
      try
       {open_proc(prog,args,0,[1,inchan],stdin,in_write,stderr)}
      catch(e)
       {e = caml_wrap_exception(e);
        caml_call1(Stdlib[93],inchan);
        runtime.unix_close(in_write);
        throw e}
      runtime.unix_close(in_write);
      return inchan}
    function open_process_args_out(prog,args)
     {var
       match=runtime.unix_pipe(_i_,0),
       out_write=match[2],
       out_read=match[1],
       outchan=runtime.unix_outchannel_of_filedescr(out_write);
      try
       {open_proc(prog,args,0,[2,outchan],out_read,stdout,stderr)}
      catch(e)
       {e = caml_wrap_exception(e);
        caml_call1(Stdlib[76],outchan);
        runtime.unix_close(out_read);
        throw e}
      runtime.unix_close(out_read);
      return outchan}
    function open_process_args(prog,args)
     {var match=runtime.unix_pipe(_j_,0),in_write=match[2],in_read=match[1];
      try
       {var match$0=runtime.unix_pipe(_k_,0)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.unix_close(in_read);
        runtime.unix_close(in_write);
        throw e}
      var
       out_write=match$0[2],
       out_read=match$0[1],
       inchan=runtime.unix_inchannel_of_filedescr(in_read),
       outchan=runtime.unix_outchannel_of_filedescr(out_write);
      try
       {open_proc(prog,args,0,[0,inchan,outchan],out_read,in_write,stderr)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.unix_close(out_read);
        runtime.unix_close(out_write);
        runtime.unix_close(in_read);
        runtime.unix_close(in_write);
        throw e}
      runtime.unix_close(out_read);
      runtime.unix_close(in_write);
      return [0,inchan,outchan]}
    function open_process_args_full(prog,args,env)
     {var match=runtime.unix_pipe(_l_,0),in_write=match[2],in_read=match[1];
      try
       {var match$0=runtime.unix_pipe(_m_,0)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.unix_close(in_read);
        runtime.unix_close(in_write);
        throw e}
      var out_write=match$0[2],out_read=match$0[1];
      try
       {var match$1=runtime.unix_pipe(_n_,0)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.unix_close(in_read);
        runtime.unix_close(in_write);
        runtime.unix_close(out_read);
        runtime.unix_close(out_write);
        throw e}
      var
       err_write=match$1[2],
       err_read=match$1[1],
       inchan=runtime.unix_inchannel_of_filedescr(in_read),
       outchan=runtime.unix_outchannel_of_filedescr(out_write),
       errchan=runtime.unix_inchannel_of_filedescr(err_read);
      try
       {open_proc
         (prog,
          args,
          [0,env],
          [3,inchan,outchan,errchan],
          out_read,
          in_write,
          err_write)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.unix_close(out_read);
        runtime.unix_close(out_write);
        runtime.unix_close(in_read);
        runtime.unix_close(in_write);
        runtime.unix_close(err_read);
        runtime.unix_close(err_write);
        throw e}
      runtime.unix_close(out_read);
      runtime.unix_close(in_write);
      runtime.unix_close(err_write);
      return [0,inchan,outchan,errchan]}
    function open_process_shell(fn,cmd)
     {return caml_call2(fn,shell,[0,shell,cst_c$0,cmd])}
    function open_process_in(cmd)
     {return open_process_shell(open_process_args_in,cmd)}
    function open_process_out(cmd)
     {return open_process_shell(open_process_args_out,cmd)}
    function open_process(cmd)
     {return open_process_shell(open_process_args,cmd)}
    function open_process_full(cmd)
     {return open_process_shell(open_process_args_full,cmd)}
    function find_proc_id(fun_name,proc)
     {try
       {var _cC_=caml_call2(Stdlib_hashtbl[6],popen_processes,proc);
        return _cC_}
      catch(_cD_)
       {_cD_ = caml_wrap_exception(_cD_);
        if(_cD_ === Stdlib[8])throw [0,Unix_error,3,fun_name,cst$9];
        throw _cD_}}
    function remove_proc_id(proc)
     {return caml_call2(Stdlib_hashtbl[10],popen_processes,proc)}
    function process_in_pid(inchan)
     {return find_proc_id(cst_process_in_pid,[1,inchan])}
    function process_out_pid(outchan)
     {return find_proc_id(cst_process_out_pid,[2,outchan])}
    function process_pid(param)
     {var outchan=param[2],inchan=param[1];
      return find_proc_id(cst_process_pid,[0,inchan,outchan])}
    function process_full_pid(param)
     {var errchan=param[3],outchan=param[2],inchan=param[1];
      return find_proc_id(cst_process_full_pid,[3,inchan,outchan,errchan])}
    function close_process_in(inchan)
     {var proc=[1,inchan],pid=find_proc_id(cst_close_process_in,proc);
      remove_proc_id(proc);
      caml_call1(Stdlib[93],inchan);
      return waitpid_non_intr(pid)[2]}
    function close_process_out(outchan)
     {var proc=[2,outchan],pid=find_proc_id(cst_close_process_out,proc);
      remove_proc_id(proc);
      try
       {caml_call1(Stdlib[76],outchan)}
      catch(_cB_)
       {_cB_ = caml_wrap_exception(_cB_);if(_cB_[1] !== Stdlib[11])throw _cB_}
      return waitpid_non_intr(pid)[2]}
    function close_process(param)
     {var
       outchan=param[2],
       inchan=param[1],
       proc=[0,inchan,outchan],
       pid=find_proc_id(cst_close_process,proc);
      remove_proc_id(proc);
      caml_call1(Stdlib[93],inchan);
      try
       {caml_call1(Stdlib[76],outchan)}
      catch(_cA_)
       {_cA_ = caml_wrap_exception(_cA_);if(_cA_[1] !== Stdlib[11])throw _cA_}
      return waitpid_non_intr(pid)[2]}
    function close_process_full(param)
     {var
       errchan=param[3],
       outchan=param[2],
       inchan=param[1],
       proc=[3,inchan,outchan,errchan],
       pid=find_proc_id(cst_close_process_full,proc);
      remove_proc_id(proc);
      caml_call1(Stdlib[93],inchan);
      try
       {caml_call1(Stdlib[76],outchan)}
      catch(_cz_)
       {_cz_ = caml_wrap_exception(_cz_);if(_cz_[1] !== Stdlib[11])throw _cz_}
      caml_call1(Stdlib[93],errchan);
      return waitpid_non_intr(pid)[2]}
    function open_connection(sockaddr)
     {var sock=runtime.unix_socket(_o_,domain_of_sockaddr(sockaddr),0,0);
      try
       {runtime.unix_connect(sock,sockaddr);
        var
         _cx_=runtime.unix_outchannel_of_filedescr(sock),
         _cy_=[0,runtime.unix_inchannel_of_filedescr(sock),_cx_];
        return _cy_}
      catch(exn)
       {exn = caml_wrap_exception(exn);runtime.unix_close(sock);throw exn}}
    function shutdown_connection(inchan)
     {return runtime.unix_shutdown(caml_channel_descriptor(inchan),1)}
    function accept_non_intr(s)
     {for(;;)
       try
        {var _cv_=runtime.unix_accept(_p_,s);return _cv_}
       catch(_cw_)
        {_cw_ = caml_wrap_exception(_cw_);
         if(_cw_[1] === Unix_error)
          {var _cu_=_cw_[2];
           if(typeof _cu_ === "number" && 11 === _cu_)continue}
         throw _cw_}}
    function establish_server(server_fun,sockaddr)
     {var sock=runtime.unix_socket(_q_,domain_of_sockaddr(sockaddr),0,0);
      runtime.unix_setsockopt(0,sock,2,1);
      runtime.unix_bind(sock,sockaddr);
      runtime.unix_listen(sock,5);
      for(;;)
       {var match=accept_non_intr(sock),s=match[1],id=runtime.unix_fork(0);
        if(0 === id)
         {if(0 !== runtime.unix_fork(0))caml_sys_exit(0);
          runtime.unix_close(sock);
          var
           inchan=runtime.unix_inchannel_of_filedescr(s),
           outchan=runtime.unix_outchannel_of_filedescr(s);
          caml_call2(server_fun,inchan,outchan);
          caml_call1(Stdlib[99],0)}
        else
         {runtime.unix_close(s);waitpid_non_intr(id)}
        continue}}
    function setsid(_ct_){return runtime.unix_setsid(_ct_)}
    function tcflow(_cs_,_cr_){return runtime.unix_tcflow(_cs_,_cr_)}
    function tcflush(_cq_,_cp_){return runtime.unix_tcflush(_cq_,_cp_)}
    function tcdrain(_co_){return runtime.unix_tcdrain(_co_)}
    function tcsendbreak(_cn_,_cm_)
     {return runtime.unix_tcsendbreak(_cn_,_cm_)}
    function tcsetattr(_cl_,_ck_,_cj_)
     {return runtime.unix_tcsetattr(_cl_,_ck_,_cj_)}
    function tcgetattr(_ci_){return runtime.unix_tcgetattr(_ci_)}
    function getservbyport(_ch_,_cg_)
     {return runtime.unix_getservbyport(_ch_,_cg_)}
    function getservbyname(_cf_,_ce_)
     {return runtime.unix_getservbyname(_cf_,_ce_)}
    function getprotobynumber(_cd_)
     {return runtime.unix_getprotobynumber(_cd_)}
    function getprotobyname(_cc_){return runtime.unix_getprotobyname(_cc_)}
    function gethostbyaddr(_cb_){return runtime.unix_gethostbyaddr(_cb_)}
    function gethostbyname(_ca_){return runtime.unix_gethostbyname(_ca_)}
    function gethostname(_b$_){return runtime.unix_gethostname(_b$_)}
    function getpeername(_b__){return runtime.unix_getpeername(_b__)}
    function getsockname(_b9_){return runtime.unix_getsockname(_b9_)}
    function shutdown(_b8_,_b7_){return runtime.unix_shutdown(_b8_,_b7_)}
    function listen(_b6_,_b5_){return runtime.unix_listen(_b6_,_b5_)}
    function connect(_b4_,_b3_){return runtime.unix_connect(_b4_,_b3_)}
    function bind(_b2_,_b1_){return runtime.unix_bind(_b2_,_b1_)}
    function accept(_b0_,_bZ_){return runtime.unix_accept(_b0_,_bZ_)}
    function socketpair(_bY_,_bX_,_bW_,_bV_)
     {return runtime.unix_socketpair(_bY_,_bX_,_bW_,_bV_)}
    function socket(_bU_,_bT_,_bS_,_bR_)
     {return runtime.unix_socket(_bU_,_bT_,_bS_,_bR_)}
    function string_of_inet_addr(_bQ_)
     {return runtime.unix_string_of_inet_addr(_bQ_)}
    function inet_addr_of_string(_bP_){return unix_inet_addr_of_string(_bP_)}
    function getgrgid(_bO_){return runtime.unix_getgrgid(_bO_)}
    function getpwuid(_bN_){return runtime.unix_getpwuid(_bN_)}
    function getgrnam(_bM_){return runtime.unix_getgrnam(_bM_)}
    function getpwnam(_bL_){return runtime.unix_getpwnam(_bL_)}
    function getlogin(_bK_){return runtime.unix_getlogin(_bK_)}
    function initgroups(_bJ_,_bI_){return runtime.unix_initgroups(_bJ_,_bI_)}
    function setgroups(_bH_){return runtime.unix_setgroups(_bH_)}
    function getgroups(_bG_){return runtime.unix_getgroups(_bG_)}
    function setgid(_bF_){return runtime.unix_setgid(_bF_)}
    function getegid(_bE_){return runtime.unix_getegid(_bE_)}
    function getgid(_bD_){return runtime.unix_getgid(_bD_)}
    function setuid(_bC_){return runtime.unix_setuid(_bC_)}
    function geteuid(_bB_){return runtime.unix_geteuid(_bB_)}
    function getuid(_bA_){return runtime.unix_getuid(_bA_)}
    function setitimer(_bz_,_by_){return runtime.unix_setitimer(_bz_,_by_)}
    function getitimer(_bx_){return runtime.unix_getitimer(_bx_)}
    function utimes(_bw_,_bv_,_bu_)
     {return runtime.unix_utimes(_bw_,_bv_,_bu_)}
    function times(_bt_){return runtime.unix_times(_bt_)}
    function _r_(_bs_){return runtime.unix_sleep(_bs_)}
    function alarm(_br_){return runtime.unix_alarm(_br_)}
    var
     mktime=runtime.unix_mktime,
     localtime=runtime.unix_localtime,
     gmtime=runtime.unix_gmtime;
    function gettimeofday(_bq_){return runtime.unix_gettimeofday(_bq_)}
    function time(_bp_){return runtime.unix_time(_bp_)}
    function sigsuspend(_bo_){return runtime.unix_sigsuspend(_bo_)}
    function sigpending(_bn_){return runtime.unix_sigpending(_bn_)}
    function sigprocmask(_bm_,_bl_)
     {return runtime.unix_sigprocmask(_bm_,_bl_)}
    function kill(_bk_,_bj_){return runtime.unix_kill(_bk_,_bj_)}
    function lockf(_bi_,_bh_,_bg_){return runtime.unix_lockf(_bi_,_bh_,_bg_)}
    function select(_bf_,_be_,_bd_,_bc_)
     {return runtime.unix_select(_bf_,_be_,_bd_,_bc_)}
    function readlink(_bb_){return runtime.unix_readlink(_bb_)}
    function has_symlink(_ba_){return runtime.unix_has_symlink(_ba_)}
    function symlink(_a$_,_a__,_a9_)
     {return runtime.unix_symlink(_a$_,_a__,_a9_)}
    function mkfifo(_a8_,_a7_){return runtime.unix_mkfifo(_a8_,_a7_)}
    function pipe(_a6_,_a5_){return runtime.unix_pipe(_a6_,_a5_)}
    function closedir(_a4_){return runtime.unix_closedir(_a4_)}
    function rewinddir(_a3_){return runtime.unix_rewinddir(_a3_)}
    function readdir(_a2_){return runtime.unix_readdir(_a2_)}
    function opendir(_a1_){return runtime.unix_opendir(_a1_)}
    function chroot(_a0_){return runtime.unix_chroot(_a0_)}
    function getcwd(_aZ_){return runtime.unix_getcwd(_aZ_)}
    function chdir(_aY_){return runtime.unix_chdir(_aY_)}
    function rmdir(_aX_){return runtime.unix_rmdir(_aX_)}
    function mkdir(_aW_,_aV_){return runtime.unix_mkdir(_aW_,_aV_)}
    function clear_close_on_exec(_aU_)
     {return runtime.unix_clear_close_on_exec(_aU_)}
    function set_close_on_exec(_aT_)
     {return runtime.unix_set_close_on_exec(_aT_)}
    function clear_nonblock(_aS_){return runtime.unix_clear_nonblock(_aS_)}
    function set_nonblock(_aR_){return runtime.unix_set_nonblock(_aR_)}
    function dup2(_aQ_,_aP_,_aO_){return runtime.unix_dup2(_aQ_,_aP_,_aO_)}
    function dup(_aN_,_aM_){return runtime.unix_dup(_aN_,_aM_)}
    function access(_aL_,_aK_){return runtime.unix_access(_aL_,_aK_)}
    function umask(_aJ_){return runtime.unix_umask(_aJ_)}
    function fchown(_aI_,_aH_,_aG_)
     {return runtime.unix_fchown(_aI_,_aH_,_aG_)}
    function chown(_aF_,_aE_,_aD_){return runtime.unix_chown(_aF_,_aE_,_aD_)}
    function fchmod(_aC_,_aB_){return runtime.unix_fchmod(_aC_,_aB_)}
    function chmod(_aA_,_az_){return runtime.unix_chmod(_aA_,_az_)}
    function link(_ay_,_ax_,_aw_){return runtime.unix_link(_ay_,_ax_,_aw_)}
    function rename(_av_,_au_){return runtime.unix_rename(_av_,_au_)}
    function unlink(_at_){return runtime.unix_unlink(_at_)}
    function _s_(_as_){return runtime.unix_fstat_64(_as_)}
    function _t_(_ar_){return runtime.unix_lstat_64(_ar_)}
    function _u_(_aq_){return runtime.unix_stat_64(_aq_)}
    function _v_(_ap_,_ao_){return runtime.unix_ftruncate_64(_ap_,_ao_)}
    function _w_(_an_,_am_){return runtime.unix_truncate_64(_an_,_am_)}
    var
     LargeFile=
      [0,
       function(_al_,_ak_,_aj_){return runtime.unix_lseek_64(_al_,_ak_,_aj_)},
       _w_,
       _v_,
       _u_,
       _t_,
       _s_],
     isatty=runtime.unix_isatty;
    function fstat(_ai_){return runtime.unix_fstat(_ai_)}
    function lstat(_ah_){return runtime.unix_lstat(_ah_)}
    function stat(_ag_){return runtime.unix_stat(_ag_)}
    function ftruncate(_af_,_ae_){return runtime.unix_ftruncate(_af_,_ae_)}
    function truncate(_ad_,_ac_){return runtime.unix_truncate(_ad_,_ac_)}
    function lseek(_ab_,_aa_,_$_){return runtime.unix_lseek(_ab_,_aa_,_$_)}
    var
     descr_of_out_channel=caml_channel_descriptor,
     descr_of_in_channel=caml_channel_descriptor;
    function out_channel_of_descr(___)
     {return runtime.unix_outchannel_of_filedescr(___)}
    function in_channel_of_descr(_Z_)
     {return runtime.unix_inchannel_of_filedescr(_Z_)}
    function _x_(_Y_){return runtime.unix_fsync(_Y_)}
    function close(_X_){return runtime.unix_close(_X_)}
    function openfile(_W_,_V_,_U_){return runtime.unix_open(_W_,_V_,_U_)}
    function nice(_T_){return runtime.unix_nice(_T_)}
    function getppid(_S_){return runtime.unix_getppid(_S_)}
    function getpid(_R_){return runtime.unix_getpid(_R_)}
    function waitpid(_Q_,_P_){return runtime.unix_waitpid(_Q_,_P_)}
    function wait(_O_){return runtime.unix_wait(_O_)}
    function fork(_N_){return runtime.unix_fork(_N_)}
    function execvp(_M_,_L_){return runtime.unix_execvp(_M_,_L_)}
    function execve(_K_,_J_,_I_){return runtime.unix_execve(_K_,_J_,_I_)}
    function execv(_H_,_G_){return runtime.unix_execv(_H_,_G_)}
    function putenv(_F_,_E_){return runtime.unix_putenv(_F_,_E_)}
    var unsafe_getenv=caml_sys_unsafe_getenv,getenv=runtime.caml_sys_getenv;
    function _y_(_D_){return runtime.unix_environment_unsafe(_D_)}
    function environment(_C_){return runtime.unix_environment(_C_)}
    function error_message(_B_){return runtime.unix_error_message(_B_)}
    var
     include=
      [0,
       Unix_error,
       error_message,
       handle_unix_error,
       environment,
       _y_,
       getenv,
       unsafe_getenv,
       putenv,
       execv,
       execve,
       execvp,
       execvpe,
       fork,
       wait,
       waitpid,
       system,
       getpid,
       getppid,
       nice,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       _x_,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       lseek,
       truncate,
       ftruncate,
       stat,
       lstat,
       fstat,
       isatty,
       LargeFile,
       map_file,
       unlink,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       process_in_pid,
       process_out_pid,
       process_pid,
       process_full_pid,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       has_symlink,
       readlink,
       select,
       lockf,
       kill,
       sigprocmask,
       sigpending,
       sigsuspend,
       pause,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       alarm,
       sleep,
       _r_,
       times,
       utimes,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       getgroups,
       setgroups,
       initgroups,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       inet_addr_of_string,
       string_of_inet_addr,
       inet_addr_any,
       inet_addr_loopback,
       inet_addr_any$0,
       inet6_addr_loopback,
       socket,
       domain_of_sockaddr,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       setsid];
    caml_register_global(143,include,"Unix");
    var
     UnixLabels=
      [0,
       Unix_error,
       error_message,
       handle_unix_error,
       environment,
       getenv,
       unsafe_getenv,
       putenv,
       execv,
       execve,
       execvp,
       execvpe,
       fork,
       wait,
       waitpid,
       system,
       getpid,
       getppid,
       nice,
       stdin,
       stdout,
       stderr,
       openfile,
       close,
       read,
       write,
       single_write,
       write_substring,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       lseek,
       truncate,
       ftruncate,
       stat,
       lstat,
       fstat,
       isatty,
       LargeFile,
       map_file,
       unlink,
       rename,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       rmdir,
       chdir,
       getcwd,
       chroot,
       opendir,
       readdir,
       rewinddir,
       closedir,
       pipe,
       mkfifo,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       open_process_full,
       open_process_args_in,
       open_process_args_out,
       open_process_args,
       open_process_args_full,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       has_symlink,
       readlink,
       select,
       lockf,
       kill,
       sigprocmask,
       sigpending,
       sigsuspend,
       pause,
       time,
       gettimeofday,
       gmtime,
       localtime,
       mktime,
       alarm,
       sleep,
       times,
       utimes,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       getgroups,
       setgroups,
       initgroups,
       getlogin,
       getpwnam,
       getgrnam,
       getpwuid,
       getgrgid,
       inet_addr_of_string,
       string_of_inet_addr,
       inet_addr_any,
       inet_addr_loopback,
       inet_addr_any$0,
       inet6_addr_loopback,
       socket,
       domain_of_sockaddr,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       shutdown,
       getsockname,
       getpeername,
       recv,
       recvfrom,
       send,
       send_substring,
       sendto,
       sendto_substring,
       getsockopt,
       setsockopt,
       getsockopt_int,
       setsockopt_int,
       getsockopt_optint,
       setsockopt_optint,
       getsockopt_float,
       setsockopt_float,
       getsockopt_error,
       open_connection,
       shutdown_connection,
       establish_server,
       gethostname,
       gethostbyname,
       gethostbyaddr,
       getprotobyname,
       getprotobynumber,
       getservbyname,
       getservbyport,
       getaddrinfo,
       getnameinfo,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       tcflush,
       tcflow,
       setsid];
    caml_register_global(144,UnixLabels,"UnixLabels");
    return}
  (function(){return this}()));


//# 1 "../.js/str/str.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_bytes_get=runtime.caml_bytes_get,
     caml_bytes_set=runtime.caml_bytes_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_create_bytes=runtime.caml_create_bytes,
     caml_make_vect=runtime.caml_make_vect,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst=caml_string_of_jsbytes(""),
     cst$0=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_Str_matched_group=caml_string_of_jsbytes("Str.matched_group"),
     cst_Str_group_end=caml_string_of_jsbytes("Str.group_end"),
     cst_Str_group_beginning=caml_string_of_jsbytes("Str.group_beginning"),
     cst_group_not_closed_by=
      caml_string_of_jsbytes("\\( group not closed by \\)"),
     cst_class_not_closed_by=caml_string_of_jsbytes("[ class not closed by ]"),
     cst_spurious_in_regular_expres=
      caml_string_of_jsbytes("spurious \\) in regular expression"),
     cst_too_many_r_or_r_where_r_is=
      caml_string_of_jsbytes("too many r* or r+ where r is nullable"),
     cst$1=caml_string_of_jsbytes(""),
     cst$2=caml_string_of_jsbytes(""),
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib=global_data.Stdlib,
     Stdlib_bytes=global_data.Stdlib__bytes,
     Assert_failure=global_data.Assert_failure,
     Stdlib_buffer=global_data.Stdlib__buffer,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_map=global_data.Stdlib__map,
     _b_=[0,92],
     _c_=[0,caml_string_of_jsbytes("str.ml"),520,10],
     _a_=[0,caml_string_of_jsbytes("str.ml"),213,11];
    function string_before(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function string_after(s,n)
     {return caml_call3(Stdlib_string[4],s,n,caml_ml_string_length(s) - n | 0)}
    function first_chars(s,n){return caml_call3(Stdlib_string[4],s,0,n)}
    function last_chars(s,n)
     {return caml_call3(Stdlib_string[4],s,caml_ml_string_length(s) - n | 0,n)}
    var full=caml_call2(Stdlib_bytes[1],32,255);
    function make_empty(param){return caml_call2(Stdlib_bytes[1],32,0)}
    function add(s,i)
     {var _ao_=caml_bytes_get(s,i >>> 3 | 0) | 1 << (i & 7);
      return caml_bytes_set(s,i >>> 3 | 0,caml_call1(Stdlib_char[1],_ao_))}
    function singleton(c){var s=make_empty(0);add(s,c);return s}
    function complement(s)
     {var r=caml_create_bytes(32),i=0;
      for(;;)
       {var _am_=caml_bytes_get(s,i) ^ 255;
        caml_bytes_set(r,i,caml_call1(Stdlib_char[1],_am_));
        var _an_=i + 1 | 0;
        if(31 !== i){var i=_an_;continue}
        return r}}
    function union(s1,s2)
     {var r=caml_create_bytes(32),i=0;
      for(;;)
       {var _aj_=caml_bytes_get(s2,i),_ak_=caml_bytes_get(s1,i) | _aj_;
        caml_bytes_set(r,i,caml_call1(Stdlib_char[1],_ak_));
        var _al_=i + 1 | 0;
        if(31 !== i){var i=_al_;continue}
        return r}}
    function disjoint(s1,s2)
     {try
       {var i=0;
        for(;;)
         {var _ag_=caml_bytes_get(s2,i);
          if(0 !== (caml_bytes_get(s1,i) & _ag_))throw Stdlib[3];
          var _ah_=i + 1 | 0;
          if(31 !== i){var i=_ah_;continue}
          var _af_=1;
          return _af_}}
      catch(_ai_)
       {_ai_ = caml_wrap_exception(_ai_);
        if(_ai_ === Stdlib[3])return 0;
        throw _ai_}}
    function iter(fn,s)
     {var i=0;
      for(;;)
       {var c=caml_bytes_get(s,i);
        if(0 !== c)
         {var j=0;
          for(;;)
           {if(0 !== (c & 1 << j))
             caml_call1(fn,caml_call1(Stdlib_char[1],(i << 3) + j | 0));
            var _ae_=j + 1 | 0;
            if(7 !== j){var j=_ae_;continue}
            break}}
        var _ad_=i + 1 | 0;
        if(31 !== i){var i=_ad_;continue}
        return 0}}
    function fold_case(s)
     {var r=make_empty(0);
      iter
       (function(c)
         {add(r,caml_call1(Stdlib_char[3],c));
          return add(r,caml_call1(Stdlib_char[4],c))},
        s);
      return r}
    var
     op_CHAR=0,
     op_CHARNORM=1,
     op_STRING=2,
     op_STRINGNORM=3,
     op_CHARCLASS=4,
     op_BOL=5,
     op_EOL=6,
     op_WORDBOUNDARY=7,
     op_BEGGROUP=8,
     op_ENDGROUP=9,
     op_REFGROUP=10,
     op_ACCEPT=11,
     op_SIMPLEOPT=12,
     op_SIMPLESTAR=13,
     op_SIMPLEPLUS=14,
     op_GOTO=15,
     op_PUSHBACK=16,
     op_SETMARK=17,
     op_CHECKPROGRESS=18;
    function instr(opc,arg){return opc | arg << 8}
    function displ(dest,from){return (dest - from | 0) - 1 | 0}
    function is_nullable(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0){case 0:return 1;case 1:return 1;default:return 1}
       else
        switch(param$0[0])
         {case 0:return 0;
          case 1:var s=param$0[1];return caml_string_equal(s,cst);
          case 2:return 0;
          case 3:
           var rl=param$0[1];
           return caml_call2(Stdlib_list[29],is_nullable,rl);
          case 4:
           var r2=param$0[2],r1=param$0[1],_ac_=is_nullable(r1);
           if(_ac_)return _ac_;
           var param$0=r2;
           continue;
          case 5:return 1;
          case 6:var param$1=param$0[1],param$0=param$1;continue;
          case 7:return 1;
          case 8:var param$2=param$0[2],param$0=param$2;continue;
          default:return 1}}
    function first$0(counter,param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        switch(param$0)
         {case 0:return full;case 1:return full;default:return full}
       else
        switch(param$0[0])
         {case 0:var c=param$0[1];return singleton(c);
          case 1:
           var s=param$0[1];
           return caml_string_equal(s,cst$0)
                   ?full
                   :singleton(caml_string_get(s,0));
          case 2:
           var cmpl=param$0[2],cl=param$0[1];return cmpl?complement(cl):cl;
          case 3:
           var rl=param$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;return first_seq$0(counter$0,rl)}
           return caml_trampoline_return(first_seq$0,[0,rl]);
          case 4:
           var r2=param$0[2],r1=param$0[1],_ab_=first(r2);
           return union(first(r1),_ab_);
          case 5:return full;
          case 6:var param$1=param$0[1],param$0=param$1;continue;
          case 7:return full;
          case 8:var param$2=param$0[2],param$0=param$2;continue;
          default:return full}}
    function first_seq$0(counter,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var ___=param$0[1];
          if(typeof ___ === "number")
           {var param$1=param$0[2],param$0=param$1;continue}
          else
           switch(___[0])
            {case 5:
              var rl=param$0[2],r=___[1],_$_=first_seq(rl);
              return union(first(r),_$_);
             case 7:
              var rl$0=param$0[2],r$0=___[1],_aa_=first_seq(rl$0);
              return union(first(r$0),_aa_);
             default:
              if(counter < 50)
               {var counter$0=counter + 1 | 0;return first$0(counter$0,___)}
              return caml_trampoline_return(first$0,[0,___])}}
        return full}}
    function first(param){return caml_trampoline(first$0(0,param))}
    function first_seq(param){return caml_trampoline(first_seq$0(0,param))}
    function charclass_of_regexp(fold_case$0,re)
     {var switch$0=0;
      if(typeof re !== "number")
       switch(re[0])
        {case 0:var c=re[1],match=[0,singleton(c),0];switch$0 = 1;break;
         case 2:
          var compl$0=re[2],cl=re[1],match=[0,cl,compl$0];switch$0 = 1;break
         }
      if(switch$0)
       {var
         compl=match[2],
         cl1=match[1],
         cl2=fold_case$0?fold_case(cl1):cl1,
         _Z_=compl?complement(cl2):cl2;
        return caml_call1(Stdlib_bytes[6],_Z_)}
      throw [0,Assert_failure,_a_]}
    var t=caml_create_bytes(256),i=0;
    for(;;)
     {var _d_=caml_call1(Stdlib_char[1],i);
      caml_bytes_set(t,i,caml_call1(Stdlib_char[3],_d_));
      var _e_=i + 1 | 0;
      if(255 !== i){var i=_e_;continue}
      var
       fold_case_table=caml_call1(Stdlib_bytes[6],t),
       compare=runtime.caml_string_compare,
       StringMap=caml_call1(Stdlib_map[1],[0,compare]),
       compile=
        function(fold_case$0,re)
         {var
           prog=[0,caml_make_vect(32,0)],
           progpos=[0,0],
           cpool=[0,StringMap[1]],
           cpoolpos=[0,0],
           numgroups=[0,1],
           numregs=[0,0];
          function emit_instr(opc,arg)
           {if(prog[1].length - 1 <= progpos[1])
             {var newlen=[0,prog[1].length - 1];
              for(;;)
               {if(newlen[1] <= progpos[1])
                 {newlen[1] = newlen[1] * 2 | 0;continue}
                var nprog=caml_make_vect(newlen[1],0);
                caml_call5
                 (Stdlib_array[10],prog[1],0,nprog,0,prog[1].length - 1);
                prog[1] = nprog;
                break}}
            var _X_=instr(opc,arg),_Y_=progpos[1];
            caml_check_bound(prog[1],_Y_)[1 + _Y_] = _X_;
            progpos[1]++;
            return 0}
          function emit_hole(param)
           {var p=progpos[1];emit_instr(op_CHAR,0);return p}
          function patch_instr(pos,opc,dest)
           {var _W_=instr(opc,displ(dest,pos));
            caml_check_bound(prog[1],pos)[1 + pos] = _W_;
            return 0}
          function cpool_index(s)
           {try
             {var _U_=caml_call2(StringMap[27],s,cpool[1]);return _U_}
            catch(_V_)
             {_V_ = caml_wrap_exception(_V_);
              if(_V_ === Stdlib[8])
               {var p=cpoolpos[1];
                cpool[1] = caml_call3(StringMap[4],s,p,cpool[1]);
                cpoolpos[1]++;
                return p}
              throw _V_}}
          function allocate_register_if_nullable(r)
           {if(is_nullable(r))
             {var n=numregs[1];
              if(64 <= n)caml_call1(Stdlib[2],cst_too_many_r_or_r_where_r_is);
              numregs[1]++;
              return n}
            return -1}
          function disjoint_modulo_case(c1,c2)
           {if(fold_case$0)
             {var _T_=fold_case(c2);return disjoint(fold_case(c1),_T_)}
            return disjoint(c1,c2)}
          function emit_code(param)
           {if(typeof param === "number")
             switch(param)
              {case 0:return emit_instr(op_BOL,0);
               case 1:return emit_instr(op_EOL,0);
               default:return emit_instr(op_WORDBOUNDARY,0)}
            else
             switch(param[0])
              {case 0:
                var c=param[1];
                return fold_case$0
                        ?emit_instr(op_CHARNORM,caml_call1(Stdlib_char[3],c))
                        :emit_instr(op_CHAR,c);
               case 1:
                var s=param[1],match=caml_ml_string_length(s);
                if(0 === match)return 0;
                if(1 === match)
                 {if(fold_case$0)
                   {var _Q_=caml_string_get(s,0);
                    return emit_instr
                            (op_CHARNORM,caml_call1(Stdlib_char[3],_Q_))}
                  return emit_instr(op_CHAR,caml_string_get(s,0))}
                try
                 {var i=caml_call2(Stdlib_string[14],s,0);
                  emit_code([1,string_before(s,i)]);
                  emit_instr(op_CHAR,0);
                  var _R_=emit_code([1,string_after(s,i + 1 | 0)]);
                  return _R_}
                catch(_S_)
                 {_S_ = caml_wrap_exception(_S_);
                  if(_S_ === Stdlib[8])
                   return fold_case$0
                           ?emit_instr
                             (op_STRINGNORM,cpool_index(caml_call1(Stdlib_string[26],s)))
                           :emit_instr(op_STRING,cpool_index(s));
                  throw _S_}
               case 2:
                var
                 compl=param[2],
                 cl=param[1],
                 cl1=fold_case$0?fold_case(cl):cl,
                 cl2=compl?complement(cl1):cl1;
                return emit_instr
                        (op_CHARCLASS,cpool_index(caml_call1(Stdlib_bytes[6],cl2)));
               case 3:var rl=param[1];return emit_seq_code(rl);
               case 4:
                var r2=param[2],r1=param[1],pos_pushback=emit_hole(0);
                emit_code(r1);
                var pos_goto_end=emit_hole(0),lbl1=progpos[1];
                emit_code(r2);
                var lbl2=progpos[1];
                patch_instr(pos_pushback,op_PUSHBACK,lbl1);
                return patch_instr(pos_goto_end,op_GOTO,lbl2);
               case 5:
                var
                 r=param[1],
                 regno=allocate_register_if_nullable(r),
                 lbl1$0=emit_hole(0);
                if(0 <= regno)emit_instr(op_SETMARK,regno);
                emit_code(r);
                if(0 <= regno)emit_instr(op_CHECKPROGRESS,regno);
                emit_instr(op_GOTO,displ(lbl1$0,progpos[1]));
                var lbl2$0=progpos[1];
                return patch_instr(lbl1$0,op_PUSHBACK,lbl2$0);
               case 6:
                var
                 r$0=param[1],
                 regno$0=allocate_register_if_nullable(r$0),
                 lbl1$1=progpos[1];
                emit_code(r$0);
                if(0 <= regno$0)emit_instr(op_CHECKPROGRESS,regno$0);
                var pos_pushback$0=emit_hole(0);
                if(0 <= regno$0)emit_instr(op_SETMARK,regno$0);
                emit_instr(op_GOTO,displ(lbl1$1,progpos[1]));
                var lbl2$1=progpos[1];
                return patch_instr(pos_pushback$0,op_PUSHBACK,lbl2$1);
               case 7:
                var r$1=param[1],pos_pushback$1=emit_hole(0);
                emit_code(r$1);
                var lbl=progpos[1];
                return patch_instr(pos_pushback$1,op_PUSHBACK,lbl);
               case 8:
                var r$2=param[2],n=param[1];
                emit_instr(op_BEGGROUP,n);
                emit_code(r$2);
                emit_instr(op_ENDGROUP,n);
                numgroups[1] = caml_call2(Stdlib[17],numgroups[1],n + 1 | 0);
                return 0;
               default:
                var n$0=param[1];
                emit_instr(op_REFGROUP,n$0);
                numgroups[1]
                =
                caml_call2(Stdlib[17],numgroups[1],n$0 + 1 | 0);
                return 0}}
          function emit_seq_code(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var _J_=param$0[1];
                if(typeof _J_ !== "number")
                 switch(_J_[0])
                  {case 5:
                    var _K_=_J_[1],switch$0=0;
                    if(typeof _K_ === "number")
                     switch$0 = 1;
                    else
                     switch(_K_[0])
                      {case 0:
                       case 2:
                        var rl$0=param$0[2],_L_=first_seq(rl$0);
                        if(disjoint_modulo_case(first(_K_),_L_))
                         {emit_instr
                           (op_SIMPLESTAR,
                            cpool_index(charclass_of_regexp(fold_case$0,_K_)));
                          var param$0=rl$0;
                          continue}
                        break;
                       default:switch$0 = 1}
                    break;
                   case 6:
                    var _M_=_J_[1],switch$1=0;
                    if(typeof _M_ === "number")
                     switch$1 = 1;
                    else
                     switch(_M_[0])
                      {case 0:
                       case 2:
                        var rl$1=param$0[2],_N_=first_seq(rl$1);
                        if(disjoint_modulo_case(first(_M_),_N_))
                         {emit_instr
                           (op_SIMPLEPLUS,
                            cpool_index(charclass_of_regexp(fold_case$0,_M_)));
                          var param$0=rl$1;
                          continue}
                        break;
                       default:switch$1 = 1}
                    break;
                   case 7:
                    var _O_=_J_[1],switch$2=0;
                    if(typeof _O_ === "number")
                     switch$2 = 1;
                    else
                     switch(_O_[0])
                      {case 0:
                       case 2:
                        var rl$2=param$0[2],_P_=first_seq(rl$2);
                        if(disjoint_modulo_case(first(_O_),_P_))
                         {emit_instr
                           (op_SIMPLEOPT,
                            cpool_index(charclass_of_regexp(fold_case$0,_O_)));
                          var param$0=rl$2;
                          continue}
                        break;
                       default:switch$2 = 1}
                    break
                   }
                var rl=param$0[2];
                emit_code(_J_);
                var param$0=rl;
                continue}
              return 0}}
          emit_code(re);
          emit_instr(op_ACCEPT,0);
          var start=first(re),start$0=fold_case$0?fold_case(start):start;
          if(runtime.caml_bytes_equal(start,full))
           var start_pos=-1;
          else
           {var r=caml_call2(Stdlib_bytes[1],256,0);
            iter(function(c){return caml_bytes_set(r,c,1)},start$0);
            var start_pos=cpool_index(caml_call1(Stdlib_bytes[6],r))}
          var constantpool=caml_make_vect(cpoolpos[1],cst$1),_F_=cpool[1];
          function _G_(str,idx)
           {caml_check_bound(constantpool,idx)[1 + idx] = str;return 0}
          caml_call2(StringMap[12],_G_,_F_);
          var
           _H_=numregs[1],
           _I_=numgroups[1],
           fold_case_table$0=fold_case$0?fold_case_table:cst$2;
          return [0,
                  caml_call3(Stdlib_array[7],prog[1],0,progpos[1]),
                  constantpool,
                  fold_case_table$0,
                  _I_,
                  _H_,
                  start_pos]},
       flush=
        function(buf)
         {var s=caml_call1(Stdlib_buffer[2],buf[1]);
          caml_call1(Stdlib_buffer[8],buf[1]);
          var match=caml_ml_string_length(s);
          if(0 === match)return 0;
          if(1 === match)
           {var _E_=buf[2];buf[2] = [0,[0,caml_string_get(s,0)],_E_];return 0}
          buf[2] = [0,[1,s],buf[2]];
          return 0},
       dotclass=complement(singleton(10)),
       parse=
        function(s)
         {var len=caml_ml_string_length(s),group_counter=[0,1];
          function regexpclass1(start)
           {var c=make_empty(0),i$0=start;
            for(;;)
             {if(len <= i$0)caml_call1(Stdlib[2],cst_class_not_closed_by);
              if(93 === caml_string_get(s,i$0) && start < i$0)
               {var j=i$0 + 1 | 0;return [0,c,j]}
              var c1=caml_string_get(s,i$0);
              if
               ((i$0 + 2 | 0)
                <
                len
                &&
                45
                ===
                caml_string_get(s,i$0 + 1 | 0)
                &&
                93
                !==
                caml_string_get(s,i$0 + 2 | 0))
               {var c2=caml_string_get(s,i$0 + 2 | 0);
                if(! (c2 < c1))
                 {var i=c1;
                  for(;;)
                   {add(c,caml_call1(Stdlib_char[1],i));
                    var _D_=i + 1 | 0;
                    if(c2 !== i){var i=_D_;continue}
                    break}}
                var i$2=i$0 + 3 | 0,i$0=i$2;
                continue}
              add(c,c1);
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}}
          function regexp1(i)
           {var sb=[0,caml_call1(Stdlib_buffer[1],16),0],i$0=i;
            a:
            for(;;)
             {if(! (len <= i$0))
               {var switch$0=0;
                if((i$0 + 2 | 0) <= len && 92 === caml_string_get(s,i$0))
                 {var
                   c$0=caml_string_get(s,i$0 + 1 | 0),
                   _A_=124 === c$0?1:0,
                   _B_=_A_ || (41 === c$0?1:0);
                  if(_B_)switch$0 = 1}
                if(! switch$0)
                 {var c$1=caml_string_get(s,i$0);
                  if(36 === c$1)
                   var match=[0,1,i$0 + 1 | 0];
                  else
                   {var switch$1=0;
                    if(91 <= c$1)
                     if(95 <= c$1)
                      switch$1 = 1;
                     else
                      {var switcher$0=c$1 - 91 | 0;
                       switch(switcher$0)
                        {case 0:
                          var i$4=i$0 + 1 | 0,switch$2=0;
                          if(i$4 < len && 94 === caml_string_get(s,i$4))
                           {var
                             match$3=regexpclass1(i$4 + 1 | 0),
                             j$3=match$3[2],
                             c$4=match$3[1],
                             match$1=[0,c$4,1,j$3];
                            switch$2 = 1}
                          if(! switch$2)
                           var
                            match$4=regexpclass1(i$4),
                            j$4=match$4[2],
                            c$5=match$4[1],
                            match$1=[0,c$5,0,j$4];
                          var
                           j$1=match$1[3],
                           compl=match$1[2],
                           c$2=match$1[1],
                           match=[0,[2,c$2,compl],j$1];
                          break;
                         case 1:
                          var i$5=i$0 + 1 | 0;
                          if(len <= i$5)
                           var _C_=[0,_b_,i$5];
                          else
                           {var c$3=caml_string_get(s,i$5),switch$3=0;
                            if(58 <= c$3)
                             if(98 === c$3)
                              var _C_=[0,2,i$5 + 1 | 0];
                             else
                              if(124 === c$3)switch$3 = 2;else switch$3 = 1;
                            else
                             {var switcher$1=c$3 - 40 | 0;
                              if(1 < switcher$1 >>> 0)
                               if(9 <= switcher$1)
                                var _C_=[0,[9,c$3 - 48 | 0],i$5 + 1 | 0];
                               else
                                switch$3 = 1;
                              else
                               if(switcher$1)
                                switch$3 = 2;
                               else
                                {var group_no=group_counter[1];
                                 group_counter[1]++;
                                 var
                                  match$2=regexp0(i$5 + 1 | 0),
                                  j$2=match$2[2],
                                  r$4=match$2[1],
                                  switch$4=0;
                                 if
                                  ((j$2 + 1 | 0)
                                   <
                                   len
                                   &&
                                   92
                                   ===
                                   caml_string_get(s,j$2)
                                   &&
                                   41
                                   ===
                                   caml_string_get(s,j$2 + 1 | 0))
                                  {var _C_=[0,[8,group_no,r$4],j$2 + 2 | 0];switch$4 = 1}
                                 if(! switch$4)
                                  var _C_=caml_call1(Stdlib[2],cst_group_not_closed_by)}}
                            switch(switch$3)
                             {case 1:var _C_=[0,[0,c$3],i$5 + 1 | 0];break;
                              case 2:throw [0,Assert_failure,_c_]
                              }}
                          var match=_C_;
                          break;
                         case 2:switch$1 = 1;break;
                         default:var match=[0,0,i$0 + 1 | 0]}}
                    else
                     if(46 === c$1)
                      var match=[0,[2,dotclass,0],i$0 + 1 | 0];
                     else
                      switch$1 = 1;
                    if(switch$1)var match=[0,[0,c$1],i$0 + 1 | 0]}
                  var j=match[2],r=match[1],r$0=r,j$0=j;
                  for(;;)
                   {if(! (len <= j$0))
                     {var
                       match$0=caml_string_get(s,j$0),
                       switcher=match$0 - 42 | 0;
                      if(! (1 < switcher >>> 0))
                       {if(switcher)
                         {var i$2=j$0 + 1 | 0,r$2=[6,r$0],r$0=r$2,j$0=i$2;continue}
                        var i$3=j$0 + 1 | 0,r$3=[5,r$0],r$0=r$3,j$0=i$3;
                        continue}
                      if(21 === switcher)
                       {var i$1=j$0 + 1 | 0,r$1=[7,r$0],r$0=r$1,j$0=i$1;continue}}
                    var switch$5=0;
                    if(typeof r$0 !== "number" && 0 === r$0[0])
                     {var c=r$0[1];
                      caml_call2(Stdlib_buffer[10],sb[1],c);
                      switch$5 = 1}
                    if(! switch$5){flush(sb);sb[2] = [0,r$0,sb[2]]}
                    var i$0=j$0;
                    continue a}}}
              flush(sb);
              return [0,[3,caml_call1(Stdlib_list[9],sb[2])],i$0]}}
          function regexp0(i)
           {var match=regexp1(i),j=match[2],r=match[1],r1=r,i$0=j;
            for(;;)
             {if
               ((i$0 + 2 | 0)
                <=
                len
                &&
                92
                ===
                caml_string_get(s,i$0)
                &&
                124
                ===
                caml_string_get(s,i$0 + 1 | 0))
               {var
                 match$0=regexp1(i$0 + 2 | 0),
                 i$1=match$0[2],
                 r2=match$0[1],
                 r1$0=[4,r1,r2],
                 r1=r1$0,
                 i$0=i$1;
                continue}
              return [0,r1,i$0]}}
          var match=regexp0(0),j=match[2],r=match[1];
          return j === len
                  ?r
                  :caml_call1(Stdlib[2],cst_spurious_in_regular_expres)},
       regexp=function(e){return compile(0,parse(e))},
       regexp_case_fold=function(e){return compile(1,parse(e))},
       quote=
        function(s)
         {var
           len=caml_ml_string_length(s),
           buf=caml_create_bytes(2 * len | 0),
           pos=[0,0],
           _w_=len - 1 | 0,
           _v_=0;
          if(! (_w_ < 0))
           {var i=_v_;
            for(;;)
             {var c=caml_string_get(s,i),_x_=c - 63 | 0,switch$0=0;
              if(31 < _x_ >>> 0)
               {var _y_=_x_ + 27 | 0;
                if(! (10 < _y_ >>> 0))
                 switch(_y_){case 0:case 6:case 7:case 10:switch$0 = 1;break}}
              else
               if(26 < (_x_ - 1 | 0) >>> 0)switch$0 = 1;
              if(switch$0)
               {caml_bytes_set(buf,pos[1],92);
                caml_bytes_set(buf,pos[1] + 1 | 0,c);
                pos[1] = pos[1] + 2 | 0}
              else
               {caml_bytes_set(buf,pos[1],c);pos[1] = pos[1] + 1 | 0}
              var _z_=i + 1 | 0;
              if(_w_ !== i){var i=_z_;continue}
              break}}
          return caml_call3(Stdlib_bytes[8],buf,0,pos[1])},
       regexp_string=function(s){return compile(0,[1,s])},
       regexp_string_case_fold=function(s){return compile(1,[1,s])},
       last_search_result=[0,[0]],
       string_match=
        function(re,s,pos)
         {var res=runtime.re_string_match(re,s,pos);
          last_search_result[1] = res;
          return 0 < res.length - 1?1:0},
       string_partial_match=
        function(re,s,pos)
         {var res=runtime.re_partial_match(re,s,pos);
          last_search_result[1] = res;
          return 0 < res.length - 1?1:0},
       search_forward=
        function(re,s,pos)
         {var res=runtime.re_search_forward(re,s,pos);
          last_search_result[1] = res;
          if(0 === res.length - 1)throw Stdlib[8];
          return caml_check_bound(res,0)[1]},
       search_backward=
        function(re,s,pos)
         {var res=runtime.re_search_backward(re,s,pos);
          last_search_result[1] = res;
          if(0 === res.length - 1)throw Stdlib[8];
          return caml_check_bound(res,0)[1]},
       group_beginning=
        function(n)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var pos=caml_check_bound(last_search_result[1],n2)[1 + n2];
            if(-1 === pos)throw Stdlib[8];
            return pos}
          return caml_call1(Stdlib[1],cst_Str_group_beginning)},
       group_end=
        function(n)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var
             _u_=n2 + 1 | 0,
             pos=caml_check_bound(last_search_result[1],_u_)[1 + _u_];
            if(-1 === pos)throw Stdlib[8];
            return pos}
          return caml_call1(Stdlib[1],cst_Str_group_end)},
       matched_group=
        function(n,txt)
         {var n2=n + n | 0;
          if(0 <= n && ! (last_search_result[1].length - 1 <= n2))
           {var
             b=caml_check_bound(last_search_result[1],n2)[1 + n2],
             _t_=n2 + 1 | 0,
             e=caml_check_bound(last_search_result[1],_t_)[1 + _t_];
            if(-1 === b)throw Stdlib[8];
            return caml_call3(Stdlib_string[4],txt,b,e - b | 0)}
          return caml_call1(Stdlib[1],cst_Str_matched_group)},
       match_beginning=function(param){return group_beginning(0)},
       match_end=function(param){return group_end(0)},
       matched_string=function(txt){return matched_group(0,txt)},
       replace_matched=
        function(repl,matched)
         {return runtime.re_replacement_text
                  (repl,last_search_result[1],matched)},
       substitute_first=
        function(expr,repl_fun,text)
         {try
           {var
             pos=search_forward(expr,text,0),
             _o_=[0,string_after(text,match_end(0)),0],
             _p_=[0,caml_call1(repl_fun,text),_o_],
             _q_=[0,string_before(text,pos),_p_],
             _r_=caml_call2(Stdlib_string[7],cst$3,_q_);
            return _r_}
          catch(_s_)
           {_s_ = caml_wrap_exception(_s_);
            if(_s_ === Stdlib[8])return text;
            throw _s_}},
       opt_search_forward=
        function(re,s,pos)
         {try
           {var _m_=[0,search_forward(re,s,pos)];return _m_}
          catch(_n_)
           {_n_ = caml_wrap_exception(_n_);
            if(_n_ === Stdlib[8])return 0;
            throw _n_}},
       global_substitute=
        function(expr,repl_fun,text)
         {var accu=0,start=0,last_was_empty=0;
          for(;;)
           {var startpos=last_was_empty?start + 1 | 0:start;
            if(caml_ml_string_length(text) < startpos)
             var _k_=[0,string_after(text,start),accu];
            else
             {var match=opt_search_forward(expr,text,startpos);
              if(match)
               {var
                 pos=match[1],
                 start$0=match_end(0),
                 repl_text=caml_call1(repl_fun,text),
                 last_was_empty$0=start$0 === pos?1:0,
                 accu$0=
                  [0,
                   repl_text,
                   [0,
                    caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                    accu]],
                 accu=accu$0,
                 start=start$0,
                 last_was_empty=last_was_empty$0;
                continue}
              var _k_=[0,string_after(text,start),accu]}
            var _l_=caml_call1(Stdlib_list[9],_k_);
            return caml_call2(Stdlib_string[7],cst$4,_l_)}},
       global_replace=
        function(expr,repl,text)
         {return global_substitute
                  (expr,function(_j_){return replace_matched(repl,_j_)},text)},
       replace_first=
        function(expr,repl,text)
         {return substitute_first
                  (expr,function(_i_){return replace_matched(repl,_i_)},text)},
       opt_search_forward_progress=
        function(expr,text,start)
         {var match=opt_search_forward(expr,text,start);
          if(match)
           {var pos=match[1];
            return start < match_end(0)
                    ?[0,pos]
                    :start < caml_ml_string_length(text)
                      ?opt_search_forward(expr,text,start + 1 | 0)
                      :0}
          return 0},
       bounded_split=
        function(expr,text,num)
         {var
           start=string_match(expr,text,0)?match_end(0):0,
           accu=0,
           start$0=start,
           n=num;
          for(;;)
           {if(caml_ml_string_length(text) <= start$0)
             var _h_=accu;
            else
             if(1 === n)
              var _h_=[0,string_after(text,start$0),accu];
             else
              {var match=opt_search_forward_progress(expr,text,start$0);
               if(match)
                {var
                  pos=match[1],
                  n$0=n - 1 | 0,
                  start$1=match_end(0),
                  accu$0=
                   [0,
                    caml_call3(Stdlib_string[4],text,start$0,pos - start$0 | 0),
                    accu],
                  accu=accu$0,
                  start$0=start$1,
                  n=n$0;
                 continue}
               var _h_=[0,string_after(text,start$0),accu]}
            return caml_call1(Stdlib_list[9],_h_)}},
       split=function(expr,text){return bounded_split(expr,text,0)},
       bounded_split_delim=
        function(expr,text,num)
         {if(caml_string_equal(text,cst$5))return 0;
          var accu=0,start=0,n=num;
          for(;;)
           {if(caml_ml_string_length(text) < start)
             var _g_=accu;
            else
             if(1 === n)
              var _g_=[0,string_after(text,start),accu];
             else
              {var match=opt_search_forward_progress(expr,text,start);
               if(match)
                {var
                  pos=match[1],
                  n$0=n - 1 | 0,
                  start$0=match_end(0),
                  accu$0=
                   [0,
                    caml_call3(Stdlib_string[4],text,start,pos - start | 0),
                    accu],
                  accu=accu$0,
                  start=start$0,
                  n=n$0;
                 continue}
               var _g_=[0,string_after(text,start),accu]}
            return caml_call1(Stdlib_list[9],_g_)}},
       split_delim=
        function(expr,text){return bounded_split_delim(expr,text,0)},
       bounded_full_split=
        function(expr,text,num)
         {var accu=0,start=0,n=num;
          for(;;)
           {if(caml_ml_string_length(text) <= start)
             var _f_=accu;
            else
             if(1 === n)
              var _f_=[0,[0,string_after(text,start)],accu];
             else
              {var match=opt_search_forward_progress(expr,text,start);
               if(match)
                {var pos=match[1],s=matched_string(text);
                 if(start < pos)
                  {var
                    n$0=n - 1 | 0,
                    start$0=match_end(0),
                    accu$0=
                     [0,
                      [1,s],
                      [0,
                       [0,caml_call3(Stdlib_string[4],text,start,pos - start | 0)],
                       accu]],
                    accu=accu$0,
                    start=start$0,
                    n=n$0;
                   continue}
                 var
                  n$1=n - 1 | 0,
                  start$1=match_end(0),
                  accu$1=[0,[1,s],accu],
                  accu=accu$1,
                  start=start$1,
                  n=n$1;
                 continue}
               var _f_=[0,[0,string_after(text,start)],accu]}
            return caml_call1(Stdlib_list[9],_f_)}},
       full_split=function(expr,text){return bounded_full_split(expr,text,0)},
       Str=
        [0,
         regexp,
         regexp_case_fold,
         quote,
         regexp_string,
         regexp_string_case_fold,
         string_match,
         search_forward,
         search_backward,
         string_partial_match,
         matched_string,
         match_beginning,
         match_end,
         matched_group,
         group_beginning,
         group_end,
         global_replace,
         replace_first,
         global_substitute,
         substitute_first,
         replace_matched,
         split,
         bounded_split,
         split_delim,
         bounded_split_delim,
         full_split,
         bounded_full_split,
         string_before,
         string_after,
         first_chars,
         last_chars];
      runtime.caml_register_global(26,Str,"Str");
      return}}
  (function(){return this}()));


//# 1 "../.js/bark/bark.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$4=caml_string_of_jsbytes(""),
     cst$5=caml_string_of_jsbytes("."),
     cst$3=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes("."),
     cst$2=caml_string_of_jsbytes(""),
     cst$1=caml_string_of_jsbytes("\n"),
     cst$0=caml_string_of_jsbytes(""),
     cst=caml_string_of_jsbytes(""),
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Str=global_data.Str,
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_set=global_data.Stdlib__set;
    function slice(lo,hi,s)
     {return caml_call3(Stdlib_string[4],s,lo,hi - lo | 0)}
    function uncons(s)
     {var len=caml_ml_string_length(s);
      if(0 === len)return 0;
      var _a$_=caml_call3(Stdlib_string[4],s,1,len - 1 | 0);
      return [0,[0,caml_string_get(s,0),_a$_]]}
    function is_alpha(param)
     {var switch$0=0;
      if(91 <= param)
       {if(! (25 < (param - 97 | 0) >>> 0))switch$0 = 1}
      else
       if(65 <= param)switch$0 = 1;
      return switch$0?1:0}
    function is_num(param)
     {var switcher=param - 48 | 0;return 9 < switcher >>> 0?0:1}
    function is_sub_string(small_string,offset,row,col,big_string)
     {var
       small_length=caml_ml_string_length(small_string),
       col$0=[0,col],
       row$0=[0,row],
       offset$0=[0,offset],
       is_good=
        [0,
         (offset + small_length | 0) <= caml_ml_string_length(big_string)?1:0],
       i=[0,0];
      for(;;)
       {if(is_good[1] && i[1] < small_length)
         {var big_letter=caml_string_get(big_string,offset$0[1]);
          is_good[1] = caml_string_get(small_string,i[1]) === big_letter?1:0;
          i[1] = i[1] + 1 | 0;
          offset$0[1] = offset$0[1] + 1 | 0;
          if(10 === big_letter)
           {row$0[1] = row$0[1] + 1 | 0;col$0[1] = 1}
          else
           col$0[1] = col$0[1] + 1 | 0;
          continue}
        var _a8_=col$0[1],_a9_=row$0[1],_a__=is_good[1]?offset$0[1]:-1;
        return [0,_a__,_a9_,_a8_]}}
    function is_sub_char(predicate,offset,string)
     {return caml_ml_string_length(string) <= offset
              ?-1
              :caml_call1(predicate,caml_string_get(string,offset))
                ?10 === caml_string_get(string,offset)?-2:offset + 1 | 0
                :-1}
    function find_sub_string(small_string,offset,row,col,big_string)
     {var small_re=caml_call1(Str[4],small_string);
      try
       {var _a6_=caml_call3(Str[7],small_re,big_string,offset),new_offset=_a6_}
      catch(_a7_)
       {_a7_ = caml_wrap_exception(_a7_);
        if(_a7_ !== Stdlib[8])throw _a7_;
        var new_offset=-1}
      var
       target=
        0 <= new_offset
         ?new_offset + caml_ml_string_length(small_string) | 0
         :caml_ml_string_length(big_string),
       col$0=[0,col],
       row$0=[0,row],
       offset$0=[0,offset];
      for(;;)
       {if(offset$0[1] < target)
         {offset$0[1] = offset$0[1] + 1 | 0;
          if(10 === caml_string_get(big_string,offset$0[1]))
           {row$0[1] = row$0[1] + 1 | 0;col$0[1] = 1;continue}
          col$0[1] = col$0[1] + 1 | 0;
          continue}
        return [0,new_offset,row$0[1],col$0[1]]}}
    function from_state(s,x){return [0,0,[0,s[5],s[6],x,s[4]]]}
    function bag_to_list(bag,ls)
     {var bag$0=bag,ls$0=ls;
      for(;;)
       if(typeof bag$0 === "number")
        return ls$0;
       else
        {if(0 === bag$0[0])
          {var
            x=bag$0[2],
            bag$1=bag$0[1],
            ls$1=[0,x,ls$0],
            bag$0=bag$1,
            ls$0=ls$1;
           continue}
         var
          bag2=bag$0[2],
          bag1=bag$0[1],
          ls$2=bag_to_list(bag2,ls$0),
          bag$0=bag1,
          ls$0=ls$2;
         continue}}
    function run(parse,src)
     {var match=caml_call1(parse,[0,src,0,1,0,1,1]);
      if(0 === match[0]){var value=match[2];return [0,value]}
      var bag=match[2];
      return [1,bag_to_list(bag,0)]}
    function succeed(a,s){return [0,0,a,s]}
    function problem(x,s){return [1,0,from_state(s,x)]}
    function map(func,parse,s0)
     {var match=caml_call1(parse,s0);
      if(0 === match[0])
       {var s1=match[3],a=match[2],p=match[1];
        return [0,p,caml_call1(func,a),s1]}
      var x=match[2],p$0=match[1];
      return [1,p$0,x]}
    function map2(func,parse_a,parse_b,s0)
     {var match=caml_call1(parse_a,s0);
      if(0 === match[0])
       {var s1=match[3],a=match[2],p1=match[1],match$0=caml_call1(parse_b,s1);
        if(0 === match$0[0])
         {var
           s2=match$0[3],
           b=match$0[2],
           p2=match$0[1],
           _a5_=caml_call2(func,a,b),
           p1$0=p1 || p2;
          return [0,p1$0,_a5_,s2]}
        var x=match$0[2],p2$0=match$0[1],p1$1=p1 || p2$0;
        return [1,p1$1,x]}
      var x$0=match[2],p=match[1];
      return [1,p,x$0]}
    function keeper(parse_func,parse_arg)
     {function _a1_(_a4_,_a3_){return caml_call1(_a4_,_a3_)}
      return function(_a2_){return map2(_a1_,parse_func,parse_arg,_a2_)}}
    function ignorer(keep_parser,ignore_parser)
     {function _aZ_(k,param){return k}
      return function(_a0_){return map2(_aZ_,keep_parser,ignore_parser,_a0_)}}
    function and_then(callback,parse_a,s0)
     {var match=caml_call1(parse_a,s0);
      if(0 === match[0])
       {var
         s1=match[3],
         a=match[2],
         p1=match[1],
         parse_b=caml_call1(callback,a),
         match$0=caml_call1(parse_b,s1);
        if(0 === match$0[0])
         {var s2=match$0[3],b=match$0[2],p2=match$0[1],p1$0=p1 || p2;
          return [0,p1$0,b,s2]}
        var x=match$0[2],p2$0=match$0[1],p1$1=p1 || p2$0;
        return [1,p1$1,x]}
      var x$0=match[2],p=match[1];
      return [1,p,x$0]}
    function lazily(thunk,s)
     {var parse=caml_call1(thunk,0);return caml_call1(parse,s)}
    function one_of(parsers$0,s)
     {var bag=0,parsers=parsers$0;
      for(;;)
       {if(parsers)
         {var
           remaining_parsers=parsers[2],
           parse=parsers[1],
           step=caml_call1(parse,s);
          if(0 === step[0])return step;
          var x=step[2],p=step[1];
          if(p)return step;
          var bag$0=[1,bag,x],bag=bag$0,parsers=remaining_parsers;
          continue}
        return [1,0,bag]}}
    function loop(state$0,callback,s)
     {var p=0,state=state$0,s0=s;
      for(;;)
       {var parse=caml_call1(callback,state),match=caml_call1(parse,s0);
        if(0 === match[0])
         {var s1=match[3],step=match[2],p1=match[1];
          if(0 === step[0])
           {var new_state=step[1],p$0=p || p1,p=p$0,state=new_state,s0=s1;
            continue}
          var result=step[1],p$1=p || p1;
          return [0,p$1,result,s1]}
        var x=match[2],p1$0=match[1],p$2=p || p1$0;
        return [1,p$2,x]}}
    function backtrackable(parse,s0)
     {var match=caml_call1(parse,s0);
      if(0 === match[0]){var s1=match[3],a=match[2];return [0,0,a,s1]}
      var x=match[2];
      return [1,0,x]}
    function commit(a,s){return [0,1,a,s]}
    function token(param)
     {var
       expecting=param[2],
       str=param[1],
       progress=caml_string_notequal(str,cst);
      return function(s)
       {var
         match=is_sub_string(str,s[2],s[5],s[6],s[1]),
         new_col=match[3],
         new_row=match[2],
         new_offset=match[1];
        return -1 === new_offset
                ?[1,0,from_state(s,expecting)]
                :[0,progress,0,[0,s[1],new_offset,s[3],s[4],new_row,new_col]]}}
    function keyword(param)
     {var
       expecting=param[2],
       kwd=param[1],
       progress=caml_string_notequal(kwd,cst$0);
      return function(s)
       {var
         match=is_sub_string(kwd,s[2],s[5],s[6],s[1]),
         new_col=match[3],
         new_row=match[2],
         new_offset=match[1];
        if(-1 !== new_offset)
         {var _aV_=s[1];
          if
           (!
            (0
             <=
             is_sub_char
              (function(c)
                {var _aW_=is_alpha(c);
                 if(_aW_)
                  var _aX_=_aW_;
                 else
                  var _aY_=is_num(c),_aX_=_aY_ || (95 === c?1:0);
                 return _aX_},
               new_offset,
               _aV_)))
           return [0,progress,0,[0,s[1],new_offset,s[3],s[4],new_row,new_col]]}
        return [1,0,from_state(s,expecting)]}}
    function endd(x,s)
     {return caml_ml_string_length(s[1]) === s[2]
              ?[0,0,0,s]
              :[1,0,from_state(s,x)]}
    function map_chomped_string(func,parse,s0)
     {var match=caml_call1(parse,s0);
      if(0 === match[0])
       {var s1=match[3],a=match[2],p=match[1];
        return [0,p,caml_call2(func,slice(s0[2],s1[2],s0[1]),a),s1]}
      var x=match[2],p$0=match[1];
      return [1,p$0,x]}
    function get_chomped_string(parse)
     {function _aT_(s,param){return s}
      return function(_aU_){return map_chomped_string(_aT_,parse,_aU_)}}
    function chomp_if(is_good,expecting,s)
     {var new_offset=is_sub_char(is_good,s[2],s[1]);
      return -1 === new_offset
              ?[1,0,from_state(s,expecting)]
              :-2 === new_offset
                ?[0,1,0,[0,s[1],s[2] + 1 | 0,s[3],s[4],s[5] + 1 | 0,1]]
                :[0,1,0,[0,s[1],new_offset,s[3],s[4],s[5],s[6] + 1 | 0]]}
    function chomp_while(is_good,s)
     {var offset=s[2],row=s[5],col=s[6];
      for(;;)
       {var new_offset=is_sub_char(is_good,offset,s[1]);
        if(-1 === new_offset)
         return [0,s[2] < offset?1:0,0,[0,s[1],offset,s[3],s[4],row,col]];
        if(-2 === new_offset)
         {var
           row$0=row + 1 | 0,
           offset$0=offset + 1 | 0,
           offset=offset$0,
           row=row$0,
           col=1;
          continue}
        var col$0=col + 1 | 0,offset=new_offset,col=col$0;
        continue}}
    function chomp_until(param,s)
     {var
       expecting=param[2],
       str=param[1],
       match=find_sub_string(str,s[2],s[5],s[6],s[1]),
       new_col=match[3],
       new_row=match[2],
       new_offset=match[1];
      return -1 === new_offset
              ?[1,0,[0,0,[0,new_row,new_col,expecting,s[4]]]]
              :[0,
                s[2] < new_offset?1:0,
                0,
                [0,s[1],new_offset,s[3],s[4],new_row,new_col]]}
    function chomp_until_end_or(str,s)
     {var
       match=find_sub_string(str,s[2],s[5],s[6],s[1]),
       new_col=match[3],
       new_row=match[2],
       new_offset=match[1],
       adjusted_offset=0 <= new_offset?new_offset:caml_ml_string_length(s[1]);
      return [0,
              s[2] < adjusted_offset?1:0,
              0,
              [0,s[1],adjusted_offset,s[3],s[4],new_row,new_col]]}
    function change_context(new_context,s)
     {return [0,s[1],s[2],s[3],new_context,s[5],s[6]]}
    function in_context(context,parse,s0)
     {var
       step=
        caml_call1(parse,change_context([0,[0,s0[5],s0[6],context],s0[4]],s0));
      if(0 === step[0])
       {var s1=step[3],a=step[2],p=step[1];
        return [0,p,a,change_context(s0[4],s1)]}
      return step}
    function get_indent(s){return [0,0,s[3],s]}
    function change_indent(new_indent,s)
     {return [0,s[1],s[2],new_indent,s[4],s[5],s[6]]}
    function with_indent(new_indent,parse,s0)
     {var match=caml_call1(parse,change_indent(new_indent,s0));
      if(0 === match[0])
       {var s1=match[3],a=match[2],p=match[1];
        return [0,p,a,change_indent(s0[3],s1)]}
      var x=match[2],p$0=match[1];
      return [1,p$0,x]}
    function get_position(s){return [0,0,[0,s[5],s[6]],s]}
    function get_row(s){return [0,0,s[5],s]}
    function get_col(s){return [0,0,s[6],s]}
    function get_offset(s){return [0,0,s[2],s]}
    function get_source(s){return [0,0,s[1],s]}
    function var_help(is_good,offset,row,col,src,indent,context)
     {var offset$0=offset,row$0=row,col$0=col;
      for(;;)
       {var new_offset=is_sub_char(is_good,offset$0,src);
        if(-1 === new_offset)
         return [0,src,offset$0,indent,context,row$0,col$0];
        if(-2 === new_offset)
         {var
           row$1=row$0 + 1 | 0,
           offset$1=offset$0 + 1 | 0,
           offset$0=offset$1,
           row$0=row$1,
           col$0=1;
          continue}
        var col$1=col$0 + 1 | 0,offset$0=new_offset,col$0=col$1;
        continue}}
    var String_set=caml_call1(Stdlib_set[1],[0,Stdlib_string[33]]);
    function variable(start,inner,reserved,expecting,s)
     {var first_offset=is_sub_char(start,s[2],s[1]);
      if(-1 === first_offset)return [1,0,from_state(s,expecting)];
      var
       s1=
        -2 === first_offset
         ?var_help(inner,s[2] + 1 | 0,s[5] + 1 | 0,1,s[1],s[3],s[4])
         :var_help(inner,first_offset,s[5],s[6] + 1 | 0,s[1],s[3],s[4]),
       name=slice(s[2],s1[2],s[1]);
      return caml_call2(String_set[3],name,reserved)
              ?[1,0,from_state(s,expecting)]
              :[0,1,name,s1]}
    function skip(ignore_parser,keep_parser)
     {function _aR_(param,k){return k}
      return function(_aS_){return map2(_aR_,ignore_parser,keep_parser,_aS_)}}
    function sequence(start,separator,endd,spaces,item,trailing)
     {var sep=token(separator),ender=token(endd);
      function chomp_rest(item$0)
       {switch(trailing)
         {case 0:
           var
            _ae_=
             function(rev_items)
              {var _aw_=0;
               function _ax_(param)
                {return [1,caml_call1(Stdlib_list[9],rev_items)]}
               var _ay_=[0,function(_aD_){return map(_ax_,ender,_aD_)},_aw_];
               function _az_(item){return [0,[0,item,rev_items]]}
               var
                _aA_=
                 [0,
                  skip
                   (sep,
                    skip(spaces,function(_aC_){return map(_az_,item,_aC_)})),
                  _ay_];
               return skip(spaces,function(_aB_){return one_of(_aA_,_aB_)})},
            _af_=[0,item$0,0];
           return function(_av_){return loop(_af_,_ae_,_av_)};
          case 1:
           var
            _ag_=
             function(rev_items)
              {function _al_(param)
                {return [1,caml_call1(Stdlib_list[9],rev_items)]}
               function parse_end(_au_){return map(_al_,ender,_au_)}
               var _am_=[0,parse_end,0],_an_=[0,parse_end,0];
               function _ao_(item){return [0,[0,item,rev_items]]}
               var
                _ap_=[0,function(_at_){return map(_ao_,item,_at_)},_an_],
                _aq_=
                 [0,
                  skip
                   (sep,skip(spaces,function(_as_){return one_of(_ap_,_as_)})),
                  _am_];
               return skip(spaces,function(_ar_){return one_of(_aq_,_ar_)})},
            _ah_=[0,item$0,0];
           return function(_ak_){return loop(_ah_,_ag_,_ak_)};
          default:
           var
            _ai_=
             function(rev_items)
              {var _aF_=0,_aG_=0;
               function _aH_(_aQ_){return succeed(_aG_,_aQ_)}
               function _aI_(param)
                {return [1,caml_call1(Stdlib_list[9],rev_items)]}
               var
                _aJ_=[0,function(_aP_){return map(_aI_,_aH_,_aP_)},_aF_],
                _aK_=ignorer(item,ignorer(spaces,ignorer(sep,spaces)));
               function _aL_(item){return [0,[0,item,rev_items]]}
               var _aM_=[0,function(_aO_){return map(_aL_,_aK_,_aO_)},_aJ_];
               return function(_aN_){return one_of(_aM_,_aN_)}},
            _aj_=[0,item$0,0];
           return ignorer
                   (skip
                     (spaces,
                      skip
                       (sep,
                        skip(spaces,function(_aE_){return loop(_aj_,_ai_,_aE_)}))),
                    ender)}}
      var _Y_=0;
      function _Z_(param){return 0}
      var
       ___=[0,function(_ad_){return map(_Z_,ender,_ad_)},_Y_],
       _$_=[0,function(_ac_){return and_then(chomp_rest,item,_ac_)},___],
       _aa_=skip(spaces,function(_ab_){return one_of(_$_,_ab_)});
      return skip(token(start),_aa_)}
    function spaces(s)
     {return chomp_while
              (function(c)
                {var _V_=32 === c?1:0;
                 if(_V_)
                  var _W_=_V_;
                 else
                  var _X_=10 === c?1:0,_W_=_X_ || (13 === c?1:0);
                 return _W_},
               s)}
    function line_comment(start)
     {function _T_(_U_){return chomp_until_end_or(cst$1,_U_)}
      return ignorer(token(start),_T_)}
    function nestable_help
     (is_not_relevant,openn,close,expecting_close,nest_level)
     {var _D_=0;
      function _E_(param){return 1}
      function _F_(_S_){return chomp_if(_E_,expecting_close,_S_)}
      function _G_(param)
       {return nestable_help
                (is_not_relevant,openn,close,expecting_close,nest_level)}
      var _H_=[0,function(_R_){return and_then(_G_,_F_,_R_)},_D_];
      function _I_(param)
       {return nestable_help
                (is_not_relevant,
                 openn,
                 close,
                 expecting_close,
                 nest_level + 1 | 0)}
      var _J_=[0,function(_Q_){return and_then(_I_,openn,_Q_)},_H_];
      if(1 === nest_level)
       var close$0=close;
      else
       var
        _M_=
         function(param)
          {return nestable_help
                   (is_not_relevant,
                    openn,
                    close,
                    expecting_close,
                    nest_level - 1 | 0)},
        close$0=function(_P_){return and_then(_M_,close,_P_)};
      var _K_=[0,close$0,_J_];
      function _L_(_O_){return one_of(_K_,_O_)}
      return skip(function(_N_){return chomp_while(is_not_relevant,_N_)},_L_)}
    function multi_comment(openn,close,nestable)
     {if(nestable)
       {var
         c_x=close[2],
         c_str=close[1],
         o_x=openn[2],
         o_str=openn[1],
         match=uncons(o_str);
        if(match)
         {var match$0=match[1],open_char=match$0[1],match$1=uncons(c_str);
          if(match$1)
           {var
             match$2=match$1[1],
             close_char=match$2[1],
             is_not_relevant=
              function(c)
               {var _B_=c !== open_char?1:0,_C_=_B_?c !== close_char?1:0:_B_;
                return _C_},
             chomp_open=token(openn);
            return ignorer
                    (chomp_open,
                     nestable_help(is_not_relevant,chomp_open,token(close),c_x,1))}
          return function(_A_){return problem(c_x,_A_)}}
        return function(_z_){return problem(o_x,_z_)}}
      function _x_(_y_){return chomp_until(close,_y_)}
      return ignorer(token(openn),_x_)}
    function let$0(p,f){return function(_w_){return map(f,p,_w_)}}
    function and(pa,pb)
     {function _u_(x,y){return [0,x,y]}
      return function(_v_){return map2(_u_,pa,pb,_v_)}}
    function and$0(pa,pb){return and(pa,pb)}
    function let$1(p,f){return function(_t_){return and_then(f,p,_t_)}}
    var Syntax=[0,let$0,and,and$0,let$1];
    function int$0(expecting)
     {function _n_(s)
       {if(caml_string_equal(s,cst$2))
         return function(_s_){return problem(expecting,_s_)};
        var _q_=runtime.caml_int_of_string(s);
        return function(_r_){return succeed(_q_,_r_)}}
      var
       _o_=
        get_chomped_string(function(_p_){return chomp_while(is_num,_p_)});
      return caml_call2(Syntax[4],_o_,_n_)}
    function float$0(expecting,invalid)
     {function _a_(s1)
       {if(caml_string_equal(s1,cst$3))
         return function(_m_){return problem(expecting,_m_)};
        function _d_(param)
         {function _f_(s2)
           {if(caml_string_equal(s2,cst$4))
             return function(_l_){return problem(invalid,_l_)};
            var
             _i_=caml_call2(Stdlib[28],cst$5,s2),
             _j_=runtime.caml_float_of_string(caml_call2(Stdlib[28],s1,_i_));
            return function(_k_){return succeed(_j_,_k_)}}
          var
           _g_=
            get_chomped_string(function(_h_){return chomp_while(is_num,_h_)});
          return caml_call2(Syntax[4],_g_,_f_)}
        var _e_=token([0,cst$6,invalid]);
        return caml_call2(Syntax[4],_e_,_d_)}
      var
       _b_=
        get_chomped_string(function(_c_){return chomp_while(is_num,_c_)});
      return caml_call2(Syntax[4],_b_,_a_)}
    var
     Bark=
      [0,
       run,
       in_context,
       is_alpha,
       is_num,
       int$0,
       float$0,
       token,
       keyword,
       String_set,
       variable,
       endd,
       succeed,
       keeper,
       ignorer,
       lazily,
       and_then,
       problem,
       one_of,
       map,
       backtrackable,
       commit,
       token,
       sequence,
       loop,
       spaces,
       line_comment,
       multi_comment,
       get_chomped_string,
       chomp_if,
       chomp_while,
       chomp_until,
       chomp_until_end_or,
       map_chomped_string,
       with_indent,
       get_indent,
       get_position,
       get_row,
       get_col,
       get_offset,
       get_source,
       Syntax];
    runtime.caml_register_global(13,Bark,"Bark");
    return}
  (function(){return this}()));


//# 1 "../lib/smyth/.smyth.objs/smyth.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    var
     global_data=runtime.caml_get_global_data(),
     empty=[0,0,0],
     version=caml_string_of_jsbytes("0.1.0"),
     empty$0=[0,0,0],
     cst_Smyth_Timer_Timeout=caml_string_of_jsbytes("Smyth.Timer.Timeout"),
     cst_Pattern_match_failed$0=caml_string_of_jsbytes("Pattern match failed"),
     cst=caml_string_of_jsbytes("'"),
     cst_could_not_find_constructor=
      caml_string_of_jsbytes("could not find constructor '"),
     cst_Non_exhaustive_pattern_mat=
      caml_string_of_jsbytes("Non-exhaustive pattern match, "),
     cst_Pattern_match_failed=caml_string_of_jsbytes("Pattern match failed"),
     cst_Variable_not_found=caml_string_of_jsbytes("Variable not found: "),
     cst_Ran_out_of_fuel=caml_string_of_jsbytes("Ran out of fuel"),
     cst_Evaluation_time_exceeded=
      caml_string_of_jsbytes("Evaluation time exceeded"),
     cst$0=caml_string_of_jsbytes("'"),
     cst_could_not_find_constructor$0=
      caml_string_of_jsbytes("could not find constructor '"),
     cst_Non_exhaustive_pattern_mat$0=
      caml_string_of_jsbytes("Non-exhaustive pattern match, "),
     cst_Pattern_match_failed$1=caml_string_of_jsbytes("Pattern match failed"),
     wildcard=[4,caml_string_of_jsbytes("*")],
     cst_Merge_failure=caml_string_of_jsbytes("Merge_failure"),
     cst_WARN=caml_string_of_jsbytes("[WARN] "),
     cst_INFO=caml_string_of_jsbytes("[INFO] "),
     cst$1=caml_string_of_jsbytes("_"),
     cst_Cons=caml_string_of_jsbytes("Cons"),
     cst_Nil=caml_string_of_jsbytes("Nil"),
     cst_S=caml_string_of_jsbytes("S"),
     acc$0=[5,caml_string_of_jsbytes("Z"),0,[3,0]],
     cst$26=caml_string_of_jsbytes(")"),
     cst_should_be_2_called_with_n=
      caml_string_of_jsbytes(", should be 2, called with n = "),
     cst_integer_partition_is_incor=
      caml_string_of_jsbytes("integer partition is incorrect size (is "),
     cst$6=caml_string_of_jsbytes(")"),
     cst$7=caml_string_of_jsbytes("("),
     cst$2=caml_string_of_jsbytes("]"),
     cst$3=caml_string_of_jsbytes(">"),
     cst$4=caml_string_of_jsbytes("["),
     cst$5=caml_string_of_jsbytes(","),
     cst$8=caml_string_of_jsbytes(","),
     cst$9=caml_string_of_jsbytes("<"),
     cst$10=caml_string_of_jsbytes("."),
     cst_f=caml_string_of_jsbytes("f:"),
     cst$14=caml_string_of_jsbytes("`"),
     cst$15=caml_string_of_jsbytes("`"),
     cst$11=caml_string_of_jsbytes("."),
     cst_r=caml_string_of_jsbytes("r:"),
     cst_a=caml_string_of_jsbytes("a:"),
     cst_d=caml_string_of_jsbytes("d:"),
     cst_I=caml_string_of_jsbytes("I"),
     cst_E=caml_string_of_jsbytes("E"),
     cst$12=caml_string_of_jsbytes(";"),
     cst$13=caml_string_of_jsbytes(";"),
     cst$25=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("&"),
     cst$17=caml_string_of_jsbytes("&"),
     cst$18=caml_string_of_jsbytes("."),
     cst$19=caml_string_of_jsbytes("!"),
     cst$20=caml_string_of_jsbytes("!"),
     cst$21=caml_string_of_jsbytes("!"),
     cst$22=caml_string_of_jsbytes("#"),
     cst$23=caml_string_of_jsbytes("@"),
     cst$24=caml_string_of_jsbytes("!"),
     cst_Mistyped_uneval=caml_string_of_jsbytes("Mistyped uneval"),
     cst_S$0=caml_string_of_jsbytes("S"),
     cst_Z=caml_string_of_jsbytes("Z"),
     cst_Cons$0=caml_string_of_jsbytes("Cons"),
     cst_Nil$0=caml_string_of_jsbytes("Nil"),
     cst$43=caml_string_of_jsbytes("_"),
     cst$44=caml_string_of_jsbytes(" -> "),
     cst$45=caml_string_of_jsbytes(")"),
     cst$46=caml_string_of_jsbytes("("),
     cst$47=caml_string_of_jsbytes(""),
     cst$48=caml_string_of_jsbytes(" "),
     cst$49=caml_string_of_jsbytes(" "),
     cst$50=caml_string_of_jsbytes(". "),
     cst_forall=caml_string_of_jsbytes("forall "),
     cst$59=caml_string_of_jsbytes(" -> \n"),
     cst$60=caml_string_of_jsbytes(" "),
     cst$56=caml_string_of_jsbytes("."),
     cst$57=caml_string_of_jsbytes("#"),
     cst$51=caml_string_of_jsbytes(" -> "),
     cst$52=caml_string_of_jsbytes("\\"),
     cst_in=caml_string_of_jsbytes(" in "),
     cst$53=caml_string_of_jsbytes(" = "),
     cst_let=caml_string_of_jsbytes("let "),
     cst$54=caml_string_of_jsbytes(")"),
     cst$55=caml_string_of_jsbytes("("),
     cst$58=caml_string_of_jsbytes(""),
     cst$61=caml_string_of_jsbytes("\n\n"),
     cst_of=caml_string_of_jsbytes(" of\n"),
     cst_case=caml_string_of_jsbytes("case "),
     cst$62=caml_string_of_jsbytes(")"),
     cst$63=caml_string_of_jsbytes("("),
     cst$64=caml_string_of_jsbytes("??"),
     cst_ASSERTION=caml_string_of_jsbytes("{ASSERTION}"),
     cst$65=caml_string_of_jsbytes(" : "),
     cst$66=caml_string_of_jsbytes(")"),
     cst$67=caml_string_of_jsbytes("("),
     cst$39=caml_string_of_jsbytes("\n"),
     cst$42=caml_string_of_jsbytes(" "),
     cst$40=caml_string_of_jsbytes(")"),
     cst$41=caml_string_of_jsbytes("("),
     cst$37=caml_string_of_jsbytes(">"),
     cst$38=caml_string_of_jsbytes("<"),
     cst$33=caml_string_of_jsbytes("\n"),
     cst$34=caml_string_of_jsbytes(", "),
     cst$35=caml_string_of_jsbytes("\n"),
     cst$36=caml_string_of_jsbytes(" "),
     sep=caml_string_of_jsbytes(", "),
     cst$30=caml_string_of_jsbytes(")"),
     cst$31=caml_string_of_jsbytes("]"),
     cst$32=caml_string_of_jsbytes(">"),
     cst$27=caml_string_of_jsbytes("("),
     cst$28=caml_string_of_jsbytes("["),
     cst$29=caml_string_of_jsbytes("<"),
     cst_Non_datatype_scrutinee_fro=
      caml_string_of_jsbytes("Non-datatype scrutinee from term generation: "),
     cst_result=caml_string_of_jsbytes("result"),
     cst_Scrutinee_did_not_evaluate=
      caml_string_of_jsbytes
       ("Scrutinee did not evaluate to a constructor or indeterminate "),
     all_stages=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,[0,8,0]]]]]]]]],
     left_paren$0=[0,caml_string_of_jsbytes("("),0],
     right_paren$0=[0,caml_string_of_jsbytes(")"),1],
     left_bracket=[0,caml_string_of_jsbytes("["),2],
     right_bracket=[0,caml_string_of_jsbytes("]"),3],
     comma=[0,caml_string_of_jsbytes(","),4],
     right_arrow=[0,caml_string_of_jsbytes("->"),5],
     langle=[0,caml_string_of_jsbytes("<"),6],
     rangle=[0,caml_string_of_jsbytes(">"),7],
     pound=[0,caml_string_of_jsbytes("#"),9],
     dot=[0,caml_string_of_jsbytes("."),10],
     equals=[0,caml_string_of_jsbytes("="),11],
     double_equals=[0,caml_string_of_jsbytes("=="),12],
     hole=[0,caml_string_of_jsbytes("??"),13],
     lambda=[0,caml_string_of_jsbytes("\\"),14],
     pipe=[0,caml_string_of_jsbytes("|"),15],
     colon=[0,caml_string_of_jsbytes(":"),16],
     wildcard$0=[0,caml_string_of_jsbytes("_"),18],
     line_comment_start=[0,caml_string_of_jsbytes("--"),19],
     multi_comment_start=[0,caml_string_of_jsbytes("{-"),20],
     multi_comment_end=[0,caml_string_of_jsbytes("-}"),21],
     forall_keyword=[0,caml_string_of_jsbytes("forall"),23],
     let_keyword=[0,caml_string_of_jsbytes("let"),23],
     in_keyword=[0,caml_string_of_jsbytes("in"),24],
     case_keyword=[0,caml_string_of_jsbytes("case"),25],
     of_keyword=[0,caml_string_of_jsbytes("of"),26],
     type_keyword=[0,caml_string_of_jsbytes("type"),27],
     assert_keyword=[0,caml_string_of_jsbytes("assert"),28],
     specify_function_token=[0,caml_string_of_jsbytes("specifyFunction"),17],
     cst_minimal_synthesis_result=
      caml_string_of_jsbytes("minimal_synthesis_result"),
     cst_synthesis_result=caml_string_of_jsbytes("synthesis_result"),
     cst$68=
      caml_string_of_jsbytes
       ("--------------------------------------------------------------------------------"),
     Stdlib_int=global_data.Stdlib__int,
     Stdlib_map=global_data.Stdlib__map,
     Stdlib=global_data.Stdlib,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_string=global_data.Stdlib__string,
     Option2=global_data.Option2,
     Compilation2=global_data.Compilation2,
     Stdlib_sys=global_data.Stdlib__sys,
     Unix=global_data.Unix,
     Result2=global_data.Result2,
     Pair2=global_data.Pair2,
     Stdlib_option=global_data.Stdlib__option,
     Stdlib_result=global_data.Stdlib__result,
     List2=global_data.List2,
     Stdlib_bool=global_data.Stdlib__bool,
     Pervasives2=global_data.Pervasives2,
     Stdlib_set=global_data.Stdlib__set,
     Char2=global_data.Char2,
     Int2=global_data.Int2,
     Stdlib_hashtbl=global_data.Stdlib__hashtbl,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib_stringLabels=global_data.Stdlib__stringLabels,
     Bark=global_data.Bark,
     Float2=global_data.Float2,
     Smyth=[0];
    caml_register_global(199,Smyth,"Smyth");
    var
     compare=Stdlib_int[9],
     Hole_map=caml_call1(Stdlib_map[1],[0,compare]),
     Smyth_Lang=[0,Hole_map];
    caml_register_global(202,Smyth_Lang,"Smyth__Lang");
    var
     _a_=[0,30],
     _b_=[0,0],
     _h_=[1,0],
     _i_=[1,caml_string_of_jsbytes("Result consistency failure")],
     _f_=
      [1,
       caml_string_of_jsbytes("Projection length does not match tuple size")],
     _g_=[1,caml_string_of_jsbytes("Non-positive projection index")],
     _e_=
      [1,
       caml_string_of_jsbytes
        ("Projection index greater than projection length")],
     _k_=
      [1,
       caml_string_of_jsbytes("Projection length does not match tuple size")],
     _l_=[1,caml_string_of_jsbytes("Non-positive projection index")],
     _j_=
      [1,
       caml_string_of_jsbytes
        ("Projection index greater than projection length")],
     _m_=[1,0],
     _n_=[0,0,0,0],
     _o_=[0,0,0,0],
     _p_=[3,0],
     _q_=[3,0],
     _v_=[1,0],
     _u_=[3,0],
     _t_=[3,0],
     _w_=[0,0,0],
     _x_=[0,0],
     _B_=[3,0],
     _z_=[0,0,0,0],
     _A_=[0,0,0,0],
     _C_=[0,0,0,0],
     _D_=[0,0],
     _E_=[1,0],
     _F_=[0,1,0,13],
     _G_=[0,1,1,8],
     _H_=[0,1,1,13],
     _I_=[0,1,2,8],
     _J_=[0,1,2,13],
     _K_=[0,6,2,8],
     _L_=[0,6,2,13],
     _M_=[0,6,3,8],
     _N_=[0,6,3,13],
     _W_=[1,0],
     _au_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("forall"),
         caml_string_of_jsbytes("if"),
         caml_string_of_jsbytes("then"),
         caml_string_of_jsbytes("else"),
         caml_string_of_jsbytes("case"),
         caml_string_of_jsbytes("of"),
         caml_string_of_jsbytes("let"),
         caml_string_of_jsbytes("in"),
         caml_string_of_jsbytes("type"),
         caml_string_of_jsbytes("module"),
         caml_string_of_jsbytes("where"),
         caml_string_of_jsbytes("import"),
         caml_string_of_jsbytes("exposing"),
         caml_string_of_jsbytes("as"),
         caml_string_of_jsbytes("port"),
         caml_string_of_jsbytes("infix"),
         caml_string_of_jsbytes("infixl"),
         caml_string_of_jsbytes("infixr")]),
     _bj_=[1,0],
     _bQ_=[0,0],
     _bO_=[1,0],
     _bP_=[0,0],
     _bN_=[1,0];
    function all_res(param){var rs=param[1];return rs}
    function all_type(param){var ts=param[2];return ts}
    function concat(envs)
     {var
       match=caml_call1(Stdlib_list[49],envs),
       tss=match[2],
       rss=match[1],
       _uE_=caml_call1(Stdlib_list[13],tss);
      return [0,caml_call1(Stdlib_list[13],rss),_uE_]}
    function add_res(b,param)
     {var ts=param[2],rs=param[1];return [0,[0,b,rs],ts]}
    function concat_res(b,param)
     {var ts=param[2],rs=param[1];return [0,caml_call2(Stdlib[37],b,rs),ts]}
    function add_type(b,param)
     {var ts=param[2],rs=param[1];return [0,rs,[0,b,ts]]}
    function concat_type(b,param)
     {var ts=param[2],rs=param[1];return [0,rs,caml_call2(Stdlib[37],b,ts)]}
    var
     Smyth_Env=
      [0,
       empty,
       all_res,
       all_type,
       concat,
       add_res,
       concat_res,
       add_type,
       concat_type];
    caml_register_global(205,Smyth_Env,"Smyth__Env");
    var
     debug_mode=[0,0],
     ranking_method=[0,0],
     max_solution_count=[0,_a_],
     uneval_case_budget=[0,10],
     uneval_limiter=[0,10],
     max_total_time=[0,20.],
     max_eval_time=[0,0.1],
     max_guess_time=[0,0.25],
     initial_fuel=[0,100],
     log_info=[0,1],
     log_warn=[0,1],
     Smyth_Params=
      [0,
       version,
       debug_mode,
       ranking_method,
       max_solution_count,
       uneval_case_budget,
       uneval_limiter,
       max_total_time,
       max_eval_time,
       max_guess_time,
       initial_fuel,
       log_info,
       log_warn];
    caml_register_global(206,Smyth_Params,"Smyth__Params");
    function all_type$0(param){var ts=param[1];return ts}
    function all_poly(param){var ps=param[2];return ps}
    function concat$0(gammas)
     {var
       match=caml_call1(Stdlib_list[49],gammas),
       pss=match[2],
       tss=match[1],
       _uD_=caml_call1(Stdlib_list[13],pss);
      return [0,caml_call1(Stdlib_list[13],tss),_uD_]}
    function add_type$0(b,param)
     {var ps=param[2],ts=param[1];return [0,[0,b,ts],ps]}
    function concat_type$0(bs,param)
     {var ps=param[2],ts=param[1];return [0,caml_call2(Stdlib[37],bs,ts),ps]}
    function add_poly(b,param)
     {var ps=param[2],ts=param[1];return [0,ts,[0,b,ps]]}
    function concat_poly(bs,param)
     {var ps=param[2],ts=param[1];return [0,ts,caml_call2(Stdlib[37],bs,ps)]}
    function peel_type(param)
     {var ps=param[2],ts=param[1];
      if(ts){var tail=ts[2],head=ts[1];return [0,[0,head,[0,tail,ps]]]}
      return 0}
    function names(param)
     {var ps=param[2],ts=param[1];
      function _uA_(_uC_){return _uC_[1]}
      var _uB_=caml_call2(Stdlib_list[17],_uA_,ts);
      return caml_call2(Stdlib[37],_uB_,ps)}
    var
     Smyth_Type_ctx=
      [0,
       empty$0,
       all_type$0,
       all_poly,
       concat$0,
       add_type$0,
       concat_type$0,
       add_poly,
       concat_poly,
       peel_type,
       names];
    caml_register_global(207,Smyth_Type_ctx,"Smyth__Type_ctx");
    function syntactically_equal(p1,match)
     {if(typeof p1 === "number")
       {if(typeof match === "number")return 1}
      else
       if(0 === p1[0])
        {var _uv_=p1[1];
         if(typeof match !== "number" && 1 !== match[0])
          {var x2=match[1];return caml_call2(Stdlib_string[34],_uv_,x2)}}
       else
        {var _uw_=p1[1];
         if(typeof match !== "number" && 0 !== match[0])
          {var
            ps2=match[1],
            _ux_=caml_call1(Stdlib_list[1],ps2),
            _uy_=caml_call1(Stdlib_list[1],_uw_),
            _uz_=caml_call2(Stdlib_int[8],_uy_,_ux_);
           return _uz_
                   ?caml_call3(Stdlib_list[31],syntactically_equal,_uw_,ps2)
                   :_uz_}}
      return 0}
    function bind_res(p,r)
     {if(typeof p === "number")
       return [0,empty];
      else
       {if(0 === p[0]){var x=p[1];return [0,add_res([0,x,r],empty)]}
        var ps=p[1];
        if(1 === r[0])
         {var
           rs=r[1],
           _ur_=caml_call1(Stdlib_list[1],rs),
           _us_=caml_call1(Stdlib_list[1],ps);
          if(caml_call2(Stdlib_int[8],_us_,_ur_))
           {var
             _ut_=caml_call3(Stdlib_list[25],bind_res,ps,rs),
             _uu_=caml_call1(Option2[6],_ut_);
            return caml_call2(Option2[1],concat,_uu_)}
          return 0}
        var
         len=caml_call1(Stdlib_list[1],ps),
         _uo_=function(i,p){return bind_res(p,[5,len,i + 1 | 0,r])},
         _up_=caml_call2(Stdlib_list[18],_uo_,ps),
         _uq_=caml_call1(Option2[6],_up_);
        return caml_call2(Option2[1],concat,_uq_)}}
    function bind_rec_name_res(rec_name_opt,r)
     {if(rec_name_opt)
       {var rec_name=rec_name_opt[1];return add_res([0,rec_name,r],empty)}
      return empty}
    function bind_typ(bind_spec,p,tau)
     {if(typeof p === "number")
       return [0,empty$0];
      else
       {if(0 === p[0])
         {var x=p[1];return [0,add_type$0([0,x,[0,tau,bind_spec]],empty$0)]}
        var ps=p[1];
        if(1 === tau[0])
         {var
           taus=tau[1],
           _uh_=caml_call1(Stdlib_list[1],taus),
           _ui_=caml_call1(Stdlib_list[1],ps);
          if(caml_call2(Stdlib_int[8],_ui_,_uh_))
           {var
             _uj_=function(_um_,_un_){return bind_typ(bind_spec,_um_,_un_)},
             _uk_=caml_call3(Stdlib_list[25],_uj_,ps,taus),
             _ul_=caml_call1(Option2[6],_uk_);
            return caml_call2(Option2[1],concat$0,_ul_)}
          return 0}
        return 0}}
    function bind_rec_name_typ(rec_name_opt,tau)
     {if(rec_name_opt)
       {var rec_name=rec_name_opt[1];
        return add_type$0([0,rec_name,[0,tau,[0,rec_name]]],empty$0)}
      return empty$0}
    var
     Smyth_Pat=
      [0,
       syntactically_equal,
       bind_res,
       bind_rec_name_res,
       bind_typ,
       bind_rec_name_typ];
    caml_register_global(210,Smyth_Pat,"Smyth__Pat");
    function final$1(counter,r)
     {var _ug_=determinate(r);
      if(_ug_)return _ug_;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;return indeterminate$0(counter$0,r)}
      return caml_trampoline_return(indeterminate$0,[0,r])}
    function indeterminate$0(counter,r)
     {var r$0=r;
      for(;;)
       switch(r$0[0])
        {case 3:var env=r$0[1];return final_env(env);
         case 4:
          var _uc_=r$0[2],_ud_=r$0[1];
          if(0 === _uc_[0])
           {var r2=_uc_[1],_ue_=indeterminate(_ud_);
            if(_ue_)
             {if(counter < 50)
               {var counter$0=counter + 1 | 0;return final$1(counter$0,r2)}
              return caml_trampoline_return(final$1,[0,r2])}
            return _ue_}
          var r$0=_ud_;
          continue;
         case 5:var r$1=r$0[3],r$0=r$1;continue;
         case 6:
          var scrutinee=r$0[2],env$0=r$0[1],_uf_=final_env(env$0);
          if(_uf_){var r$0=scrutinee;continue}
          return _uf_;
         default:return 0}}
    function determinate(r)
     {switch(r[0])
       {case 0:var env=r[1];return final_env(env);
        case 1:
         var comps=r[1];return caml_call2(Stdlib_list[29],final$0,comps);
        case 2:var arg=r[2];return final$0(arg);
        default:return 0}}
    function final$0(r){return caml_trampoline(final$1(0,r))}
    function indeterminate(r){return caml_trampoline(indeterminate$0(0,r))}
    function final_env(env)
     {var _ua_=env[1];
      function _ub_(param){var e=param[2];return final$0(e)}
      return caml_call2(Stdlib_list[29],_ub_,_ua_)}
    function to_value(r)
     {switch(r[0])
       {case 1:
         var
          comps=r[1],
          _t7_=caml_call2(Stdlib_list[17],to_value,comps),
          _t8_=caml_call1(Option2[6],_t7_),
          _t9_=function(vcomps){return [0,vcomps]};
         return caml_call2(Option2[1],_t9_,_t8_);
        case 2:
         var
          arg=r[2],
          name=r[1],
          _t__=to_value(arg),
          _t$_=function(v){return [1,name,v]};
         return caml_call2(Option2[1],_t$_,_t__);
        default:return 0}}
    function from_value(v)
     {if(0 === v[0])
       {var comps=v[1];
        return [1,caml_call2(Stdlib_list[17],from_value,comps)]}
      var v_arg=v[2],name=v[1];
      return [2,name,from_value(v_arg)]}
    function consistent(r1,r2)
     {var r1$0=r1,r2$0=r2;
      for(;;)
       {if(caml_equal(r1$0,r2$0))return _b_;
        switch(r1$0[0])
         {case 1:
           if(1 === r2$0[0])
            {var
              comps2=r2$0[1],
              comps1=r1$0[1],
              _t4_=caml_call1(Stdlib_list[1],comps2);
             if(caml_call1(Stdlib_list[1],comps1) !== _t4_)return 0;
             var
              _t5_=caml_call3(Stdlib_list[25],consistent,comps1,comps2),
              _t6_=caml_call1(Option2[6],_t5_);
             return caml_call2(Option2[1],Stdlib_list[13],_t6_)}
           break;
          case 2:
           if(2 === r2$0[0])
            {var arg2=r2$0[2],name2=r2$0[1],arg1=r1$0[2],name1=r1$0[1];
             if(caml_call2(Stdlib_string[34],name1,name2))
              {var r1$0=arg1,r2$0=arg2;continue}
             return 0}
           break
          }
        var match=to_value(r1$0);
        if(match){var v1=match[1];return [0,[0,[0,r2$0,v1],0]]}
        var match$0=to_value(r2$0);
        if(match$0){var v2=match$0[1];return [0,[0,[0,r1$0,v2],0]]}
        return 0}}
    var
     Smyth_Res=
      [0,final$0,determinate,indeterminate,to_value,from_value,consistent];
    caml_register_global(211,Smyth_Res,"Smyth__Res");
    function now(param){return caml_call1(Unix[99],0)}
    var eval$0=[0,0.],total=[0,0.];
    function info(timer)
     {return timer?[0,eval$0,max_eval_time[1]]:[0,total,max_total_time[1]]}
    function start(timer)
     {var match=info(timer),initial=match[1];initial[1] = now(0);return 0}
    function elapsed(timer)
     {var match=info(timer),initial=match[1],_t3_=initial[1];
      return now(0) - _t3_}
    function check(timer)
     {var match=info(timer),cutoff=match[2];
      return elapsed(timer) < cutoff?1:0}
    var guess=[0,0.];
    function info$0(timer){return [0,guess,max_guess_time[1]]}
    function reset(timer)
     {var match=info$0(timer),time_taken=match[1];time_taken[1] = 0.;return 0}
    function accumulate(timer,computation)
     {var
       initial_time=now(0),
       output=caml_call1(computation,0),
       final_time=now(0),
       match=info$0(timer),
       time_taken=match[1];
      time_taken[1] = time_taken[1] + (final_time - initial_time);
      return output}
    function check$0(timer)
     {var match=info$0(timer),max_time=match[2],time_taken=match[1];
      return time_taken[1] < max_time?1:0}
    var Timeout=[248,cst_Smyth_Timer_Timeout,caml_fresh_oo_id(0)];
    function itimer_timeout(unique_id,cutoff,f,arg,default_value)
     {if(Compilation2[1])return [0,caml_call1(f,arg),0.,0];
      if(cutoff <= 0.)return [0,default_value,0.,1];
      var _t1_=[0,function(param){throw [0,Timeout,unique_id]}];
      caml_call2(Stdlib_sys[15],Stdlib_sys[17],_t1_);
      caml_call2(Unix[109],0,[254,0.,cutoff]);
      try
       {var
         res=caml_call1(f,arg),
         time_elapsed$0=cutoff - caml_call1(Unix[108],0)[2],
         _t2_=[0,res,time_elapsed$0,0];
        return _t2_}
      catch(exc)
       {exc = caml_wrap_exception(exc);
        if(caml_equal(exc,[0,Timeout,unique_id]))
         {var time_elapsed=cutoff - caml_call1(Unix[108],0)[2];
          return [0,default_value,time_elapsed,1]}
        throw exc}}
    var
     _c_=[0,reset,accumulate,check$0],
     _d_=[0,start,elapsed,check],
     Smyth_Timer=[0,_d_,_c_,itimer_timeout];
    caml_register_global(215,Smyth_Timer,"Smyth__Timer");
    function eval$1(fuel,env,exp)
     {function _s9_(param)
       {function _ta_(param)
         {switch(exp[0])
           {case 0:
             var body=exp[3],x=exp[2],f=exp[1];
             return [0,[0,[0,env,f,x,body],0]];
            case 1:
             var _tc_=exp[3],_td_=exp[2];
             if(0 === _tc_[0])
              {var
                e2=_tc_[1],
                _te_=
                 function(param)
                  {var ks1=param[2],r1=param[1];
                   function _tP_(param)
                    {var ks2=param[2],r2=param[1];
                     if(0 === r1[0])
                      {var _tR_=r1[3],_tS_=r1[2],_tT_=r1[1];
                       if(0 === _tR_[0])
                        {var
                          body=r1[4],
                          x=_tR_[1],
                          f_env_extension=bind_rec_name_res(_tS_,r1),
                          _tU_=
                           function(x_env_extension)
                            {var
                              new_env=
                               concat([0,x_env_extension,[0,f_env_extension,[0,_tT_,0]]]),
                              _tX_=eval$1(fuel - 1 | 0,new_env,body);
                             function _tY_(ks3)
                              {var _t0_=caml_call2(Stdlib[37],ks2,ks3);
                               return caml_call2(Stdlib[37],ks1,_t0_)}
                             var _tZ_=caml_call1(Pair2[3],_tY_);
                             return caml_call2(Result2[1],_tZ_,_tX_)},
                          _tV_=bind_res(x,r2),
                          _tW_=
                           caml_call2(Stdlib_option[14],cst_Pattern_match_failed,_tV_);
                         return caml_call2(Result2[10][2],_tW_,_tU_)}}
                     return [0,[0,[4,r1,[0,r2]],caml_call2(Stdlib[37],ks1,ks2)]]}
                   var _tQ_=eval$1(fuel,env,e2);
                   return caml_call2(Result2[10][2],_tQ_,_tP_)},
                _tf_=eval$1(fuel,env,_td_);
               return caml_call2(Result2[10][2],_tf_,_te_)}
             var
              type_arg=_tc_[1],
              _tg_=
               function(param)
                {var ks1=param[2],r_head=param[1];
                 if(0 === r_head[0])
                  {var _tJ_=r_head[3],_tK_=r_head[2],_tL_=r_head[1];
                   if(0 !== _tJ_[0])
                    {var
                      body=r_head[4],
                      type_param=_tJ_[1],
                      f_env_extension=bind_rec_name_res(_tK_,r_head),
                      param_env_extension=add_type([0,type_param,type_arg],empty),
                      new_env=
                       concat
                        ([0,param_env_extension,[0,f_env_extension,[0,_tL_,0]]]),
                      _tM_=eval$1(fuel,new_env,body),
                      _tN_=function(ks2){return caml_call2(Stdlib[37],ks1,ks2)},
                      _tO_=caml_call1(Pair2[3],_tN_);
                     return caml_call2(Result2[1],_tO_,_tM_)}}
                 return [0,[0,[4,r_head,[1,type_arg]],ks1]]},
              _th_=eval$1(fuel,env,_td_);
             return caml_call2(Result2[10][2],_th_,_tg_);
            case 2:
             var x$0=exp[1],match=caml_call2(Stdlib_list[42],x$0,env[1]);
             if(match){var r=match[1];return [0,[0,r,0]]}
             return [1,caml_call2(Stdlib[28],cst_Variable_not_found,x$0)];
            case 3:
             var
              comps=exp[1],
              _ti_=function(_tI_){return eval$1(fuel,env,_tI_)},
              _tj_=caml_call2(Stdlib_list[17],_ti_,comps),
              _tk_=caml_call1(Result2[6],_tj_),
              _tl_=
               function(evals)
                {var _tF_=caml_call1(Stdlib_list[49],evals);
                 function _tG_(rs){return [1,rs]}
                 var _tH_=caml_call2(Pair2[2],_tG_,_tF_);
                 return caml_call2(Pair2[3],Stdlib_list[13],_tH_)};
             return caml_call2(Result2[1],_tl_,_tk_);
            case 4:
             var arg=exp[3],i=exp[2],n=exp[1];
             if(0 < i)
              {if(n < i)return _e_;
               var
                _tm_=
                 function(param)
                  {var ks_arg=param[2],r_arg=param[1];
                   if(1 === r_arg[0])
                    {var comps=r_arg[1];
                     return n !== caml_call1(Stdlib_list[1],comps)
                             ?_f_
                             :[0,[0,caml_call2(Stdlib_list[7],comps,i - 1 | 0),ks_arg]]}
                   return [0,[0,[5,n,i,r_arg],ks_arg]]},
                _tn_=eval$1(fuel,env,arg);
               return caml_call2(Result2[10][2],_tn_,_tm_)}
             return _g_;
            case 5:
             var
              arg$0=exp[3],
              name=exp[1],
              _to_=
               function(param)
                {var ks=param[2],r=param[1];return [0,[2,name,r],ks]},
              _tp_=eval$1(fuel,env,arg$0);
             return caml_call2(Result2[10][1],_tp_,_to_);
            case 6:
             var
              branches=exp[2],
              scrutinee=exp[1],
              _tq_=
               function(param)
                {var ks0=param[2],r0=param[1];
                 if(2 === r0[0])
                  {var
                    r_arg=r0[2],
                    ctor_name=r0[1],
                    match=caml_call2(Stdlib_list[42],ctor_name,branches);
                   if(match)
                    {var
                      match$0=match[1],
                      body=match$0[2],
                      arg_pattern=match$0[1],
                      _tx_=
                       function(arg_env_extension)
                        {var
                          _tC_=
                           eval$1(fuel,concat([0,arg_env_extension,[0,env,0]]),body);
                         function _tD_(ks_body)
                          {return caml_call2(Stdlib[37],ks0,ks_body)}
                         var _tE_=caml_call1(Pair2[3],_tD_);
                         return caml_call2(Result2[1],_tE_,_tC_)},
                      _ty_=bind_res(arg_pattern,r_arg),
                      _tz_=
                       caml_call2
                        (Stdlib_option[14],cst_Pattern_match_failed$0,_ty_);
                     return caml_call2(Result2[10][2],_tz_,_tx_)}
                   var
                    _tA_=caml_call2(Stdlib[28],ctor_name,cst),
                    _tB_=
                     caml_call2(Stdlib[28],cst_could_not_find_constructor,_tA_);
                   return [1,
                           caml_call2(Stdlib[28],cst_Non_exhaustive_pattern_mat,_tB_)]}
                 return [0,[0,[6,env,r0,branches],ks0]]},
              _tr_=eval$1(fuel,env,scrutinee);
             return caml_call2(Result2[10][2],_tr_,_tq_);
            case 7:var name$0=exp[1];return [0,[0,[3,env,name$0],0]];
            case 8:
             var
              e2$0=exp[2],
              e1=exp[1],
              _ts_=
               function(param)
                {var ks1=param[2],r1=param[1];
                 function _tu_(param)
                  {var ks2=param[2],r2=param[1],match=consistent(r1,r2);
                   if(match)
                    {var ks3=match[1],_tw_=caml_call2(Stdlib[37],ks2,ks3);
                     return [0,[0,_h_,caml_call2(Stdlib[37],ks1,_tw_)]]}
                   return _i_}
                 var _tv_=eval$1(fuel,env,e2$0);
                 return caml_call2(Result2[10][2],_tv_,_tu_)},
              _tt_=eval$1(fuel,env,e1);
             return caml_call2(Result2[10][2],_tt_,_ts_);
            default:var e=exp[1];return eval$1(fuel,env,e)}}
        var _tb_=caml_call2(Result2[5],cst_Ran_out_of_fuel,0 < fuel?1:0);
        return caml_call2(Result2[10][2],_tb_,_ta_)}
      var
       _s__=caml_call1(_d_[3],1),
       _s$_=caml_call2(Result2[5],cst_Evaluation_time_exceeded,_s__);
      return caml_call2(Result2[10][2],_s$_,_s9_)}
    function resume_env(fuel,hf,env)
     {function _sW_(param)
       {var ks=param[2],new_res_env=param[1];
        return [0,[0,new_res_env,env[2]],ks]}
      var _sX_=env[1];
      function _sY_(binding)
       {function _s6_(_s8_){return resume(fuel,hf,_s8_)}
        var _s7_=caml_call2(Pair2[3],_s6_,binding);
        return caml_call1(Pair2[4],_s7_)}
      var
       _sZ_=caml_call2(Stdlib_list[17],_sY_,_sX_),
       _s0_=caml_call1(Result2[6],_sZ_);
      function _s1_(binding)
       {function _s3_(param)
         {var match=param[2],ks=match[2],r=match[1],x=param[1];
          return [0,[0,x,r],ks]}
        var
         _s4_=caml_call2(Stdlib_list[17],_s3_,binding),
         _s5_=caml_call1(Stdlib_list[49],_s4_);
        return caml_call2(Pair2[3],Stdlib_list[13],_s5_)}
      var _s2_=caml_call2(Result2[1],_s1_,_s0_);
      return caml_call2(Result2[10][1],_s2_,_sW_)}
    function resume(fuel,hf,res)
     {switch(res[0])
       {case 0:
         var
          body=res[4],
          x=res[3],
          f=res[2],
          env=res[1],
          _r1_=
           function(param)
            {var ks=param[2],env=param[1];return [0,[0,env,f,x,body],ks]},
          _r2_=resume_env(fuel,hf,env);
         return caml_call2(Result2[10][1],_r2_,_r1_);
        case 1:
         var
          comps=res[1],
          _r3_=function(_sV_){return resume(fuel,hf,_sV_)},
          _r4_=caml_call2(Stdlib_list[17],_r3_,comps),
          _r5_=caml_call1(Result2[6],_r4_),
          _r6_=
           function(rs)
            {var _sS_=caml_call1(Stdlib_list[49],rs);
             function _sT_(rs){return [1,rs]}
             var _sU_=caml_call2(Pair2[2],_sT_,_sS_);
             return caml_call2(Pair2[3],Stdlib_list[13],_sU_)};
         return caml_call2(Result2[1],_r6_,_r5_);
        case 2:
         var
          arg=res[2],
          name=res[1],
          _r7_=
           function(param)
            {var ks=param[2],arg=param[1];return [0,[2,name,arg],ks]},
          _r8_=resume(fuel,hf,arg);
         return caml_call2(Result2[10][1],_r8_,_r7_);
        case 3:
         var
          name$0=res[2],
          env$0=res[1],
          match=caml_call2(Hole_map[28],name$0,hf);
         if(match)
          {var binding=match[1];
           if(caml_equal(binding,[7,name$0]))return [0,[0,res,0]];
           var
            _r9_=
             function(param)
              {var ks=param[2],r=param[1];
               function _sQ_(param)
                {var ks$0=param[2],r=param[1];
                 return [0,r,caml_call2(Stdlib[37],ks,ks$0)]}
               var _sR_=resume(fuel,hf,r);
               return caml_call2(Result2[10][1],_sR_,_sQ_)},
            _r__=eval$1(fuel,env$0,binding);
           return caml_call2(Result2[10][2],_r__,_r9_)}
         var
          _r$_=
           function(param)
            {var ks=param[2],env=param[1];return [0,[3,env,name$0],ks]},
          _sa_=resume_env(fuel,hf,env$0);
         return caml_call2(Result2[10][1],_sa_,_r$_);
        case 4:
         var _sb_=res[2],_sc_=res[1];
         if(0 === _sb_[0])
          {var
            r2=_sb_[1],
            _sd_=
             function(param)
              {var ks1=param[2],r1=param[1];
               function _sC_(param)
                {var ks2=param[2],r2=param[1];
                 if(0 === r1[0])
                  {var _sE_=r1[3],_sF_=r1[2],_sG_=r1[1];
                   if(0 === _sE_[0])
                    {var
                      body=r1[4],
                      x=_sE_[1],
                      f_env_extension=bind_rec_name_res(_sF_,r1),
                      _sH_=
                       function(x_env_extension)
                        {var
                          new_env=
                           concat([0,x_env_extension,[0,f_env_extension,[0,_sG_,0]]]);
                         function _sK_(param)
                          {var ks=param[2],r=param[1];
                           function _sM_(param)
                            {var
                              ks$0=param[2],
                              r=param[1],
                              _sO_=caml_call2(Stdlib[37],ks,ks$0),
                              _sP_=caml_call2(Stdlib[37],ks2,_sO_);
                             return [0,r,caml_call2(Stdlib[37],ks1,_sP_)]}
                           var _sN_=resume(fuel - 1 | 0,hf,r);
                           return caml_call2(Result2[10][1],_sN_,_sM_)}
                         var _sL_=eval$1(fuel - 1 | 0,new_env,body);
                         return caml_call2(Result2[10][2],_sL_,_sK_)},
                      _sI_=bind_res(x,r2),
                      _sJ_=
                       caml_call2
                        (Stdlib_option[14],cst_Pattern_match_failed$1,_sI_);
                     return caml_call2(Result2[10][2],_sJ_,_sH_)}}
                 return [0,[0,[4,r1,[0,r2]],caml_call2(Stdlib[37],ks1,ks2)]]}
               var _sD_=resume(fuel,hf,r2);
               return caml_call2(Result2[10][2],_sD_,_sC_)},
            _se_=resume(fuel,hf,_sc_);
           return caml_call2(Result2[10][2],_se_,_sd_)}
         var
          type_arg=_sb_[1],
          _sf_=
           function(param)
            {var ks_head=param[2],r_head=param[1];
             if(0 === r_head[0])
              {var _su_=r_head[3],_sv_=r_head[2],_sw_=r_head[1];
               if(0 !== _su_[0])
                {var
                  body=r_head[4],
                  type_param=_su_[1],
                  f_env_extension=bind_rec_name_res(_sv_,r_head),
                  param_env_extension=add_type([0,type_param,type_arg],empty),
                  new_env=
                   concat
                    ([0,param_env_extension,[0,f_env_extension,[0,_sw_,0]]]),
                  _sx_=
                   function(param)
                    {var ks=param[2],r=param[1];
                     function _sz_(param)
                      {var
                        ks$0=param[2],
                        r=param[1],
                        _sB_=caml_call2(Stdlib[37],ks,ks$0);
                       return [0,r,caml_call2(Stdlib[37],ks_head,_sB_)]}
                     var _sA_=resume(fuel - 1 | 0,hf,r);
                     return caml_call2(Result2[10][1],_sA_,_sz_)},
                  _sy_=eval$1(fuel - 1 | 0,new_env,body);
                 return caml_call2(Result2[10][2],_sy_,_sx_)}}
             return [0,[0,[4,r_head,[1,type_arg]],ks_head]]},
          _sg_=resume(fuel,hf,_sc_);
         return caml_call2(Result2[10][2],_sg_,_sf_);
        case 5:
         var arg$0=res[3],i=res[2],n=res[1];
         if(0 < i)
          {if(n < i)return _j_;
           var
            _sh_=
             function(param)
              {var ks_arg=param[2],arg=param[1];
               if(1 === arg[0])
                {var comps=arg[1];
                 return n !== caml_call1(Stdlib_list[1],comps)
                         ?_k_
                         :[0,[0,caml_call2(Stdlib_list[7],comps,i - 1 | 0),ks_arg]]}
               return [0,[0,[5,n,i,arg],ks_arg]]},
            _si_=resume(fuel,hf,arg$0);
           return caml_call2(Result2[10][2],_si_,_sh_)}
         return _l_;
        case 6:
         var
          branches=res[3],
          scrutinee=res[2],
          env$1=res[1],
          _sj_=
           function(param)
            {var ks0=param[2],r0=param[1];
             if(2 === r0[0])
              {var
                r_arg=r0[2],
                ctor_name=r0[1],
                match=caml_call2(Stdlib_list[42],ctor_name,branches);
               if(match)
                {var
                  match$0=match[1],
                  body=match$0[2],
                  arg_pattern=match$0[1],
                  _sp_=
                   resume
                    (fuel,hf,[4,[0,env$1,0,[0,arg_pattern],body],[0,r_arg]]),
                  _sq_=
                   function(ks_body){return caml_call2(Stdlib[37],ks0,ks_body)},
                  _sr_=caml_call1(Pair2[3],_sq_);
                 return caml_call2(Result2[1],_sr_,_sp_)}
               var
                _ss_=caml_call2(Stdlib[28],ctor_name,cst$0),
                _st_=
                 caml_call2(Stdlib[28],cst_could_not_find_constructor$0,_ss_);
               return [1,
                       caml_call2(Stdlib[28],cst_Non_exhaustive_pattern_mat$0,_st_)]}
             function _sn_(param)
              {var ks_env=param[2],env=param[1];
               return [0,
                       [6,env,r0,branches],
                       caml_call2(Stdlib[37],ks0,ks_env)]}
             var _so_=resume_env(fuel,hf,env$1);
             return caml_call2(Result2[10][1],_so_,_sn_)},
          _sk_=resume(fuel,hf,scrutinee);
         return caml_call2(Result2[10][2],_sk_,_sj_);
        default:
         var
          arg$1=res[2],
          name$1=res[1],
          _sl_=
           function(param)
            {var ks=param[2],arg=param[1];return [0,[7,name$1,arg],ks]},
          _sm_=resume(fuel,hf,arg$1);
         return caml_call2(Result2[10][1],_sm_,_sl_)}}
    function eval$2(env,exp)
     {caml_call1(_d_[1],1);return eval$1(initial_fuel[1],env,exp)}
    function resume$0(hf,res)
     {caml_call1(_d_[1],1);return resume(initial_fuel[1],hf,res)}
    var Smyth_Eval=[0,eval$2,resume$0];
    caml_register_global(219,Smyth_Eval,"Smyth__Eval");
    function from_value$0(v)
     {if(0 === v[0])
       {var comps=v[1];
        return [0,caml_call2(Stdlib_list[17],from_value$0,comps)]}
      var v_arg=v[2],name=v[1];
      return [1,name,from_value$0(v_arg)]}
    function res_satisfies(hf,res,ex)
     {var res$0=res,ex$0=ex;
      for(;;)
       if(typeof ex$0 === "number")
        return 1;
       else
        {if(2 === ex$0[0])
          {var
            output=ex$0[2],
            input=ex$0[1],
            match=resume$0(hf,[4,res$0,[0,from_value(input)]]);
           if(0 === match[0])
            {var _rY_=match[1];
             if(! _rY_[2]){var res$1=_rY_[1],res$0=res$1,ex$0=output;continue}}
           return 0}
         switch(res$0[0])
          {case 1:
            var _rR_=res$0[1],switch$0=0;
            if(typeof ex$0 === "number" || 1 !== ex$0[0])switch$0 = 1;
            if(switch$0)
             {var
               ex_components=ex$0[1],
               _rS_=caml_call1(Stdlib_list[1],ex_components),
               _rT_=caml_call1(Stdlib_list[1],_rR_) === _rS_?1:0;
              if(_rT_)
               {var
                 _rU_=
                  function(_rZ_,_r0_){return res_satisfies(hf,_rZ_,_r0_)};
                return caml_call3(Stdlib_list[31],_rU_,_rR_,ex_components)}
              return _rT_}
            break;
           case 2:
            var _rV_=res$0[2],_rW_=res$0[1];
            if(typeof ex$0 !== "number" && 1 === ex$0[0])
             {var
               ex_arg=ex$0[2],
               ex_name=ex$0[1],
               _rX_=caml_call2(Stdlib_string[34],_rW_,ex_name);
              if(_rX_){var res$0=_rV_,ex$0=ex_arg;continue}
              return _rX_}
            break
           }
         return 0}}
    function exp_satisfies(hf,exp,worlds)
     {function _rO_(param)
       {var ex=param[2],env=param[1],match=eval$2(env,exp);
        if(0 === match[0])
         {var _rP_=match[1];
          if(! _rP_[2])
           {var r=_rP_[1],match$0=resume$0(hf,r);
            if(0 === match$0[0])
             {var _rQ_=match$0[1];
              if(! _rQ_[2]){var r$0=_rQ_[1];return res_satisfies(hf,r$0,ex)}}
            return 0}}
        return 0}
      return caml_call2(Stdlib_list[29],_rO_,worlds)}
    var Smyth_Example=[0,from_value$0,res_satisfies,exp_satisfies];
    caml_register_global(220,Smyth_Example,"Smyth__Example");
    var hole_counter=[0,-1],unused=-1;
    function set_largest_hole(h){hole_counter[1] = h;return 0}
    function gen_hole(param)
     {hole_counter[1] = hole_counter[1] + 1 | 0;return hole_counter[1]}
    var Smyth_Fresh=[0,unused,set_largest_hole,gen_hole];
    caml_register_global(221,Smyth_Fresh,"Smyth__Fresh");
    function equal(tau1,tau2)
     {var tau1$0=tau1,tau2$0=tau2;
      for(;;)
       {switch(tau1$0[0])
         {case 0:
           if(0 === tau2$0[0])
            {var
              tau22=tau2$0[2],
              tau21=tau2$0[1],
              tau12=tau1$0[2],
              tau11=tau1$0[1],
              _rG_=equal(tau11,tau21);
             if(_rG_){var tau1$0=tau12,tau2$0=tau22;continue}
             return _rG_}
           break;
          case 1:
           if(1 === tau2$0[0])
            {var
              taus2=tau2$0[1],
              taus1=tau1$0[1],
              _rH_=caml_call1(Stdlib_list[1],taus2),
              _rI_=caml_call1(Stdlib_list[1],taus1) === _rH_?1:0;
             return _rI_?caml_call3(Stdlib_list[31],equal,taus1,taus2):_rI_}
           break;
          case 2:
           if(2 === tau2$0[0])
            {var
              params2=tau2$0[2],
              d2=tau2$0[1],
              params1=tau1$0[2],
              d1=tau1$0[1],
              _rJ_=caml_call2(Stdlib_string[34],d1,d2);
             if(_rJ_)
              {var
                _rK_=caml_call1(Stdlib_list[1],params2),
                _rL_=caml_call1(Stdlib_list[1],params1) === _rK_?1:0;
               if(_rL_)
                return caml_call3(Stdlib_list[31],equal,params1,params2);
               var _rM_=_rL_}
             else
              var _rM_=_rJ_;
             return _rM_}
           break;
          case 3:
           if(3 === tau2$0[0])
            {var
              bound_type2=tau2$0[2],
              a2=tau2$0[1],
              bound_type1=tau1$0[2],
              a1=tau1$0[1],
              _rN_=caml_call2(Stdlib_string[34],a1,a2);
             if(_rN_){var tau1$0=bound_type1,tau2$0=bound_type2;continue}
             return _rN_}
           break;
          default:
           if(4 === tau2$0[0])
            {var x2=tau2$0[1],x1=tau1$0[1];
             return caml_call2(Stdlib_string[34],x1,x2)}}
        return 0}}
    function matches(tau1,tau2)
     {var tau1$0=tau1,tau2$0=tau2;
      for(;;)
       {if(equal(tau1$0,wildcard))return 1;
        if(equal(tau2$0,wildcard))return 1;
        switch(tau1$0[0])
         {case 0:
           if(0 === tau2$0[0])
            {var
              tau22=tau2$0[2],
              tau21=tau2$0[1],
              tau12=tau1$0[2],
              tau11=tau1$0[1],
              _ry_=matches(tau11,tau21);
             if(_ry_){var tau1$0=tau12,tau2$0=tau22;continue}
             return _ry_}
           break;
          case 1:
           if(1 === tau2$0[0])
            {var
              taus2=tau2$0[1],
              taus1=tau1$0[1],
              _rz_=caml_call1(Stdlib_list[1],taus2),
              _rA_=caml_call1(Stdlib_list[1],taus1) === _rz_?1:0;
             return _rA_?caml_call3(Stdlib_list[31],matches,taus1,taus2):_rA_}
           break;
          case 2:
           if(2 === tau2$0[0])
            {var
              params2=tau2$0[2],
              d2=tau2$0[1],
              params1=tau1$0[2],
              d1=tau1$0[1],
              _rB_=caml_call2(Stdlib_string[34],d1,d2);
             if(_rB_)
              {var
                _rC_=caml_call1(Stdlib_list[1],params2),
                _rD_=caml_call1(Stdlib_list[1],params1) === _rC_?1:0;
               if(_rD_)
                return caml_call3(Stdlib_list[31],matches,params1,params2);
               var _rE_=_rD_}
             else
              var _rE_=_rB_;
             return _rE_}
           break;
          case 3:
           if(3 === tau2$0[0])
            {var
              bound_type2=tau2$0[2],
              a2=tau2$0[1],
              bound_type1=tau1$0[2],
              a1=tau1$0[1],
              _rF_=caml_call2(Stdlib_string[34],a1,a2);
             if(_rF_){var tau1$0=bound_type1,tau2$0=bound_type2;continue}
             return _rF_}
           break;
          default:
           if(4 === tau2$0[0])
            {var x2=tau2$0[1],x1=tau1$0[1];
             return caml_call2(Stdlib_string[34],x1,x2)}}
        return 0}}
    function is_base(tau)
     {switch(tau[0])
       {case 0:return 0;
        case 1:return 0;
        case 2:return 1;
        case 3:return 0;
        default:return 1}}
    function domain_of_codomain(codomain,tau)
     {var tau$0=tau;
      for(;;)
       switch(tau$0[0])
        {case 0:
          var tau2=tau$0[2],tau1=tau$0[1];
          if(equal(codomain,tau2))return [0,tau1];
          var tau$0=tau2;
          continue;
         case 3:var tau$1=tau$0[2],tau$0=tau$1;continue;
         default:return 0}}
    function sub_bind_spec(bind_spec)
     {if(typeof bind_spec !== "number" && 0 !== bind_spec[0])
       {var name=bind_spec[1];return [2,name]}
      return 0}
    function bind_spec(gamma,exp)
     {var exp$0=exp;
      for(;;)
       {switch(exp$0[0])
         {case 1:
           var _rt_=exp$0[2];
           if(0 !== exp$0[3][0]){var exp$0=_rt_;continue}
           break;
          case 2:
           var
            x=exp$0[1],
            _ru_=caml_call2(Stdlib_list[42],x,gamma[1]),
            _rv_=function(_rx_){return _rx_[2]},
            _rw_=caml_call2(Option2[1],_rv_,_ru_);
           return caml_call2(Option2[7],0,_rw_);
          case 4:var arg=exp$0[3];return sub_bind_spec(bind_spec(gamma,arg))
          }
        return 0}}
    function structurally_decreasing_bind_s(head_spec,match)
     {if(typeof head_spec !== "number" && 0 === head_spec[0])
       {var _rs_=head_spec[1];
        if(typeof match !== "number" && 2 === match[0])
         {var dec_name=match[1];
          return caml_call2(Stdlib_string[34],_rs_,dec_name)}
        return 0}
      return 1}
    function structurally_decreasing(gamma,head,arg)
     {var _rr_=bind_spec(gamma,arg);
      return structurally_decreasing_bind_s(bind_spec(gamma,head),_rr_)}
    function matches_dec(annot,bind_spec)
     {if(annot)
       {var f=annot[1];return structurally_decreasing_bind_s([0,f],bind_spec)}
      return 1}
    var acc=0;
    function peel_forall(tau$1)
     {var acc$0=acc,tau=tau$1;
      for(;;)
       {if(3 === tau[0])
         {var tau$0=tau[2],a=tau[1],acc$1=[0,a,acc$0],acc$0=acc$1,tau=tau$0;
          continue}
        return [0,caml_call1(Stdlib_list[9],acc$0),tau]}}
    function substitute(before,after,tau)
     {switch(tau[0])
       {case 0:
         var ret=tau[2],arg=tau[1],_rm_=substitute(before,after,ret);
         return [0,substitute(before,after,arg),_rm_];
        case 1:
         var
          components=tau[1],
          _rn_=function(_rq_){return substitute(before,after,_rq_)};
         return [1,caml_call2(Stdlib_list[17],_rn_,components)];
        case 2:
         var
          args=tau[2],
          name=tau[1],
          _ro_=function(_rp_){return substitute(before,after,_rp_)};
         return [2,name,caml_call2(Stdlib_list[17],_ro_,args)];
        case 3:
         var bound_type=tau[2],a=tau[1];
         return caml_call2(Stdlib_string[34],before,a)
                 ?tau
                 :[3,a,substitute(before,after,bound_type)];
        default:
         var x=tau[1];return caml_call2(Stdlib_string[34],before,x)?after:tau}}
    function substitute_many(bindings,tau)
     {function _rl_(acc,param)
       {var after=param[2],before=param[1];
        return substitute(before,after,acc)}
      return caml_call3(Stdlib_list[22],_rl_,tau,bindings)}
    function ctor_info(exp_context,sigma,ctor_name)
     {function _ri_(param)
       {var
         match=param[2],
         ctors=match[2],
         type_params=match[1],
         type_name=param[1];
        function _rk_(param)
         {var arg_type=param[2],ctor_name$0=param[1];
          return caml_call2(Stdlib_string[34],ctor_name,ctor_name$0)
                  ?[0,[0,type_params,arg_type,type_name]]
                  :0}
        return caml_call2(List2[22],_rk_,ctors)}
      var _rj_=caml_call2(List2[22],_ri_,sigma);
      return caml_call2(Stdlib_option[14],[0,exp_context,[1,ctor_name]],_rj_)}
    function infer(state,sigma,gamma,exp)
     {switch(exp[0])
       {case 0:return [1,[0,exp,0]];
        case 1:
         var _qT_=exp[3],_qU_=exp[2];
         if(0 === _qT_[0])
          {var
            arg=_qT_[1],
            _qV_=
             function(param)
              {var head_delta=param[2],head_type=param[1];
               if(0 === head_type[0])
                {var
                  return_type=head_type[2],
                  arg_type=head_type[1],
                  _rg_=
                   function(arg_delta)
                    {return [0,
                             return_type,
                             caml_call2(Stdlib[37],head_delta,arg_delta)]},
                  _rh_=check$1(state,sigma,gamma,arg,arg_type);
                 return caml_call2(Result2[10][1],_rh_,_rg_)}
               return [1,[0,exp,[9,head_type]]]},
            _qW_=infer(state,sigma,gamma,_qU_);
           return caml_call2(Result2[10][2],_qW_,_qV_)}
         var
          type_arg=_qT_[1],
          _qX_=
           function(param)
            {var head_delta=param[2],head_type=param[1];
             if(3 === head_type[0])
              {var bound_type=head_type[2],a=head_type[1];
               return [0,[0,substitute(a,type_arg,bound_type),head_delta]]}
             return [1,[0,exp,[11,head_type]]]},
          _qY_=infer(state,sigma,gamma,_qU_);
         return caml_call2(Result2[10][2],_qY_,_qX_);
        case 2:
         var name=exp[1],match=caml_call2(Stdlib_list[42],name,gamma[1]);
         if(match){var match$0=match[1],tau=match$0[1];return [0,[0,tau,0]]}
         return [1,[0,exp,[0,name]]];
        case 3:
         var
          exps=exp[1],
          _qZ_=function(_rf_){return infer(state,sigma,gamma,_rf_)},
          _q0_=caml_call2(Stdlib_list[17],_qZ_,exps),
          _q1_=caml_call1(Result2[6],_q0_),
          _q2_=caml_call2(Stdlib_result[8],Stdlib_list[49],_q1_),
          _q3_=
           function(param)
            {var deltas=param[2],taus=param[1];
             return [0,[1,taus],caml_call1(Stdlib_list[13],deltas)]};
         return caml_call2(Stdlib_result[8],_q3_,_q2_);
        case 4:
         var
          arg$0=exp[3],
          i=exp[2],
          n=exp[1],
          _q4_=
           function(param)
            {var arg_delta=param[2],arg_type=param[1];
             if(1 === arg_type[0])
              {var
                components=arg_type[1],
                _re_=caml_call1(Stdlib_list[1],components);
               return caml_call2(Stdlib_int[8],n,_re_)
                       ?i <= n
                         ?[0,
                           [0,
                            caml_call2(Stdlib_list[7],components,i - 1 | 0),
                            arg_delta]]
                         :[1,[0,exp,[15,n,i]]]
                       :[1,[0,exp,[14,arg_type]]]}
             return [1,[0,exp,[10,arg_type]]]},
          _q5_=infer(state,sigma,gamma,arg$0);
         return caml_call2(Result2[10][2],_q5_,_q4_);
        case 5:
         var
          arg$1=exp[3],
          type_args=exp[2],
          ctor_name=exp[1],
          _q6_=
           function(param)
            {var
              data_name=param[3],
              arg_type=param[2],
              type_params=param[1],
              args_len=caml_call1(Stdlib_list[1],type_args),
              params_len=caml_call1(Stdlib_list[1],type_params);
             if(caml_call2(Stdlib_int[8],args_len,params_len))
              {var
                _rc_=
                 function(arg_delta)
                  {return [0,[2,data_name,type_args],arg_delta]},
                _rd_=
                 check$1
                  (state,
                   sigma,
                   gamma,
                   arg$1,
                   substitute_many
                    (caml_call2(Stdlib_list[50],type_params,type_args),arg_type));
               return caml_call2(Result2[10][1],_rd_,_rc_)}
             return [1,[0,exp,[3,args_len,params_len]]]},
          _q7_=ctor_info(exp,sigma,ctor_name);
         return caml_call2(Result2[10][2],_q7_,_q6_);
        case 6:return [1,[0,exp,1]];
        case 7:return [1,[0,exp,2]];
        case 8:
         var
          right=exp[2],
          left=exp[1],
          _q8_=
           function(param)
            {var left_delta=param[2],left_type=param[1];
             function _ra_(param)
              {var right_delta=param[2],right_type=param[1];
               return equal(left_type,right_type)
                       ?[0,[0,_m_,caml_call2(Stdlib[37],left_delta,right_delta)]]
                       :[1,[0,exp,[17,left_type,right_type]]]}
             var _rb_=infer(state,sigma,gamma,right);
             return caml_call2(Result2[10][2],_rb_,_ra_)},
          _q9_=infer(state,sigma,gamma,left);
         return caml_call2(Result2[10][2],_q9_,_q8_);
        default:
         var
          tau$0=exp[2],
          exp$0=exp[1],
          _q__=function(delta){return [0,tau$0,delta]},
          _q$_=check$1(state,sigma,gamma,exp$0,tau$0);
         return caml_call2(Result2[10][1],_q$_,_q__)}}
    function check$1(state,sigma,gamma,exp,tau)
     {var state$0=state,gamma$0=gamma,exp$0=exp,tau$0=tau;
      for(;;)
       {var state$1=0 === exp$0[0]?state$0:[0,state$0[1],state$0[2],0];
        switch(exp$0[0])
         {case 0:
           var _qe_=exp$0[2],_qf_=exp$0[1];
           if(0 === _qe_[0])
            {var body=exp$0[3],param_pat=_qe_[1];
             if(0 === tau$0[0])
              {var
                return_type=tau$0[2],
                arg_type=tau$0[1],
                func_name_gamma=bind_rec_name_typ(_qf_,tau$0),
                _qg_=function(name){return [1,name]},
                _qh_=caml_call2(Stdlib_option[7],_qg_,_qf_),
                _qi_=state$1[3];
               if(_qi_)var name=_qi_[1],_qj_=[1,name];else var _qj_=0;
               var
                arg_bind_spec=caml_call2(Option2[7],_qj_,_qh_),
                _qk_=
                 function(param_gamma)
                  {var
                    _qS_=
                     concat$0([0,param_gamma,[0,func_name_gamma,[0,gamma$0,0]]]);
                   return check$1
                           ([0,state$1[1],state$1[2],0],sigma,_qS_,body,return_type)},
                _ql_=bind_typ(arg_bind_spec,param_pat,arg_type),
                _qm_=
                 caml_call2
                  (Stdlib_option[14],[0,exp$0,[2,arg_type,param_pat]],_ql_);
               return caml_call2(Result2[10][2],_qm_,_qk_)}
             return [1,[0,exp$0,[4,tau$0]]]}
           var body$0=exp$0[3],a=_qe_[1];
           if(3 === tau$0[0])
            {var bound_type=tau$0[2],a$0=tau$0[1];
             if(caml_call2(Stdlib_string[34],a,a$0))
              {var
                func_name_gamma$0=bind_rec_name_typ(_qf_,tau$0),
                param_gamma=add_poly(a,empty$0),
                gamma$1=
                 concat$0([0,param_gamma,[0,func_name_gamma$0,[0,gamma$0,0]]]),
                _qn_=state$1[3];
               if(_qn_)var name$0=_qn_[1],_qo_=[0,name$0];else var _qo_=_qf_;
               var
                state$2=[0,state$1[1],state$1[2],_qo_],
                state$0=state$2,
                gamma$0=gamma$1,
                exp$0=body$0,
                tau$0=bound_type;
               continue}
             return [1,[0,exp$0,[16,a,a$0]]]}
           return [1,[0,exp$0,[6,tau$0]]];
          case 1:
           var _qp_=exp$0[3],_qq_=exp$0[2];
           if(0 === _qp_[0])
            {var _qr_=_qp_[1];
             if(9 === _qr_[0])
              {var
                arg_type$0=_qr_[2],
                arg=_qr_[1],
                _qu_=
                 function(arg_delta)
                  {function _qQ_(head_delta)
                    {return caml_call2(Stdlib[37],head_delta,arg_delta)}
                   var
                    _qR_=
                     check$1(state$1,sigma,gamma$0,_qq_,[0,arg_type$0,tau$0]);
                   return caml_call2(Result2[10][1],_qR_,_qQ_)},
                _qv_=check$1(state$1,sigma,gamma$0,arg,arg_type$0);
               return caml_call2(Result2[10][2],_qv_,_qu_)}}
           break;
          case 3:
           var exps=exp$0[1];
           if(1 === tau$0[0])
            {var
              taus=tau$0[1],
              _qw_=caml_call1(Stdlib_list[1],taus),
              _qx_=caml_call1(Stdlib_list[1],exps);
             if(caml_call2(Stdlib_int[8],_qx_,_qw_))
              {var
                _qy_=
                 function(_qO_,_qP_)
                  {return check$1(state$1,sigma,gamma$0,_qO_,_qP_)},
                _qz_=caml_call3(Stdlib_list[25],_qy_,exps,taus),
                _qA_=caml_call1(Result2[6],_qz_);
               return caml_call2(Stdlib_result[8],Stdlib_list[13],_qA_)}
             return [1,[0,exp$0,[13,tau$0]]]}
           return [1,[0,exp$0,[5,tau$0]]];
          case 6:
           var
            branches=exp$0[2],
            scrutinee=exp$0[1],
            _qB_=
             function(param)
              {var scrutinee_delta=param[2],scrutinee_type=param[1];
               if(2 === scrutinee_type[0])
                {var
                  scrutinee_data_args=scrutinee_type[2],
                  scrutinee_data_name=scrutinee_type[1],
                  scrutinee_data_args_len=
                   caml_call1(Stdlib_list[1],scrutinee_data_args),
                  dec_bind_spec=sub_bind_spec(bind_spec(gamma$0,scrutinee)),
                  _qD_=
                   function(branch_deltas)
                    {return caml_call2(Stdlib[37],scrutinee_delta,branch_deltas)},
                  _qE_=
                   function(param)
                    {var
                      match=param[2],
                      body=match[2],
                      param_pat=match[1],
                      ctor_name=param[1];
                     function _qI_(param)
                      {var
                        data_name=param[3],
                        arg_type=param[2],
                        type_params=param[1];
                       if
                        (caml_call2(Stdlib_string[34],scrutinee_data_name,data_name))
                        {var type_params_len=caml_call1(Stdlib_list[1],type_params);
                         if
                          (caml_call2
                            (Stdlib_int[8],type_params_len,scrutinee_data_args_len))
                          {var
                            substituted_arg_type=
                             substitute_many
                              (caml_call2(Stdlib_list[50],type_params,scrutinee_data_args),
                               arg_type),
                            _qK_=
                             function(param_gamma)
                              {var _qN_=concat$0([0,param_gamma,[0,gamma$0,0]]);
                               return check$1
                                       ([0,state$1[1],state$1[2] + 1 | 0,state$1[3]],
                                        sigma,
                                        _qN_,
                                        body,
                                        tau$0)},
                            _qL_=bind_typ(dec_bind_spec,param_pat,substituted_arg_type),
                            _qM_=
                             caml_call2
                              (Stdlib_option[14],[0,exp$0,[2,arg_type,param_pat]],_qL_);
                           return caml_call2(Result2[10][2],_qM_,_qK_)}
                         return [1,
                                 [0,exp$0,[3,type_params_len,scrutinee_data_args_len]]]}
                       return [1,[0,exp$0,[8,ctor_name,scrutinee_data_name]]]}
                     var _qJ_=ctor_info(exp$0,sigma,ctor_name);
                     return caml_call2(Result2[10][2],_qJ_,_qI_)},
                  _qF_=caml_call2(Stdlib_list[17],_qE_,branches),
                  _qG_=caml_call1(Result2[6],_qF_),
                  _qH_=caml_call2(Stdlib_result[8],Stdlib_list[13],_qG_);
                 return caml_call2(Result2[10][1],_qH_,_qD_)}
               return [1,[0,exp$0,[12,scrutinee_type]]]},
            _qC_=infer(state$1,sigma,gamma$0,scrutinee);
           return caml_call2(Result2[10][2],_qC_,_qB_);
          case 7:
           var name$1=exp$0[1];
           return [0,[0,[0,name$1,[0,gamma$0,tau$0,state$1[1],state$1[2]]],0]]
          }
        var
         _qs_=
          function(param)
           {var delta=param[2],tau=param[1];
            return equal(tau$0,tau)?[0,delta]:[1,[0,exp$0,[7,tau,tau$0]]]},
         _qt_=infer(state$1,sigma,gamma$0,exp$0);
        return caml_call2(Result2[10][2],_qt_,_qs_)}}
    function check$2(_qa_,_qb_,_qc_,_qd_)
     {return check$1(_n_,_qa_,_qb_,_qc_,_qd_)}
    function infer$0(_p9_,_p__,_p$_){return infer(_o_,_p9_,_p__,_p$_)}
    var
     Smyth_Type=
      [0,
       equal,
       wildcard,
       matches,
       is_base,
       domain_of_codomain,
       bind_spec,
       sub_bind_spec,
       structurally_decreasing_bind_s,
       structurally_decreasing,
       matches_dec,
       peel_forall,
       substitute,
       substitute_many,
       check$2,
       infer$0];
    caml_register_global(224,Smyth_Type,"Smyth__Type");
    function syntactically_equal$0(e1,e2)
     {var e1$0=e1,e2$0=e2;
      for(;;)
       {switch(e1$0[0])
         {case 0:
           if(0 === e2$0[0])
            {var
              body2=e2$0[3],
              x2=e2$0[2],
              mf2=e2$0[1],
              body1=e1$0[3],
              x1=e1$0[2],
              mf1=e1$0[1],
              switch$0=0;
             if(mf1)
              if(mf2)
               var
                f2=mf2[1],
                f1=mf1[1],
                mf_equal=caml_call2(Stdlib_string[34],f1,f2);
              else
               switch$0 = 1;
             else
              if(mf2)switch$0 = 1;else var mf_equal=1;
             if(switch$0)var mf_equal=0;
             var switch$1=0;
             if(0 === x1[0])
              {var _pr_=x1[1];
               if(0 === x2[0])
                var p2=x2[1],x_equal=syntactically_equal(_pr_,p2);
               else
                switch$1 = 1}
             else
              {var _ps_=x1[1];
               if(0 === x2[0])
                switch$1 = 1;
               else
                var t2=x2[1],x_equal=caml_call2(Stdlib_string[34],_ps_,t2)}
             if(switch$1)var x_equal=0;
             if(mf_equal)
              {if(x_equal){var e1$0=body1,e2$0=body2;continue}
               var x_equal$0=x_equal}
             else
              var x_equal$0=mf_equal;
             return x_equal$0}
           break;
          case 1:
           var _pt_=e1$0[3],_pu_=e1$0[2],_pv_=e1$0[1];
           if(0 === _pt_[0])
            {if(1 === e2$0[0])
              {var _pw_=e2$0[3],_px_=e2$0[2],_py_=e2$0[1],_pz_=_pt_[1];
               if(0 === _pw_[0])
                {var arg2=_pw_[1],_pA_=caml_call2(Stdlib_bool[2],_pv_,_py_);
                 if(_pA_)
                  {var _pB_=syntactically_equal$0(_pu_,_px_);
                   if(_pB_){var e1$0=_pz_,e2$0=arg2;continue}
                   var _pC_=_pB_}
                 else
                  var _pC_=_pA_;
                 return _pC_}}}
           else
            if(1 === e2$0[0])
             {var _pD_=e2$0[3],_pE_=e2$0[2],_pF_=e2$0[1],_pG_=_pt_[1];
              if(0 !== _pD_[0])
               {var t2$0=_pD_[1],_pH_=caml_call2(Stdlib_bool[2],_pv_,_pF_);
                if(_pH_)
                 {var _pI_=syntactically_equal$0(_pu_,_pE_);
                  if(_pI_)return equal(_pG_,t2$0);
                  var _pJ_=_pI_}
                else
                 var _pJ_=_pH_;
                return _pJ_}}
           break;
          case 2:
           if(2 === e2$0[0])
            {var x2$0=e2$0[1],x1$0=e1$0[1];
             return caml_call2(Stdlib_string[34],x1$0,x2$0)}
           break;
          case 3:
           if(3 === e2$0[0])
            {var
              es2=e2$0[1],
              es1=e1$0[1],
              _pK_=caml_call1(Stdlib_list[1],es2),
              _pL_=caml_call1(Stdlib_list[1],es1),
              _pM_=caml_call2(Stdlib_int[8],_pL_,_pK_);
             return _pM_
                     ?caml_call3(Stdlib_list[31],syntactically_equal$0,es1,es2)
                     :_pM_}
           break;
          case 4:
           if(4 === e2$0[0])
            {var
              arg2$0=e2$0[3],
              i2=e2$0[2],
              n2=e2$0[1],
              arg1=e1$0[3],
              i1=e1$0[2],
              n1=e1$0[1],
              _pN_=caml_call2(Stdlib_int[8],n1,n2);
             if(_pN_)
              {var _pO_=caml_call2(Stdlib_int[8],i1,i2);
               if(_pO_){var e1$0=arg1,e2$0=arg2$0;continue}
               var _pP_=_pO_}
             else
              var _pP_=_pN_;
             return _pP_}
           break;
          case 5:
           if(5 === e2$0[0])
            {var
              arg2$1=e2$0[3],
              taus2=e2$0[2],
              name2=e2$0[1],
              arg1$0=e1$0[3],
              taus1=e1$0[2],
              name1=e1$0[1],
              _pQ_=caml_call2(Stdlib_string[34],name1,name2);
             if(_pQ_)
              {var
                _pR_=caml_call1(Stdlib_list[1],taus2),
                _pS_=caml_call1(Stdlib_list[1],taus1),
                _pT_=caml_call2(Stdlib_int[8],_pS_,_pR_);
               if(_pT_)
                {var _pU_=caml_call3(Stdlib_list[31],equal,taus1,taus2);
                 if(_pU_){var e1$0=arg1$0,e2$0=arg2$1;continue}
                 var _pV_=_pU_}
               else
                var _pV_=_pT_}
             else
              var _pV_=_pQ_;
             return _pV_}
           break;
          case 6:
           if(6 === e2$0[0])
            {var
              branches2=e2$0[2],
              s2=e2$0[1],
              branches1=e1$0[2],
              s1=e1$0[1],
              _pW_=syntactically_equal$0(s1,s2);
             if(_pW_)
              {var
                _pX_=caml_call1(Stdlib_list[1],branches2),
                _pY_=caml_call1(Stdlib_list[1],branches1),
                _pZ_=caml_call2(Stdlib_int[8],_pY_,_pX_);
               if(_pZ_)
                {var
                  _p0_=
                   function(param,_p4_)
                    {var
                      _p5_=_p4_[2],
                      body2=_p5_[2],
                      arg2=_p5_[1],
                      ctor2=_p4_[1],
                      match=param[2],
                      body1=match[2],
                      arg1=match[1],
                      ctor1=param[1],
                      _p6_=caml_call2(Stdlib_string[34],ctor1,ctor2);
                     if(_p6_)
                      {var _p7_=syntactically_equal(arg1,arg2);
                       if(_p7_)return syntactically_equal$0(body1,body2);
                       var _p8_=_p7_}
                     else
                      var _p8_=_p6_;
                     return _p8_};
                 return caml_call3(Stdlib_list[31],_p0_,branches1,branches2)}
               var _p1_=_pZ_}
             else
              var _p1_=_pW_;
             return _p1_}
           break;
          case 7:
           if(7 === e2$0[0])
            {var name2$0=e2$0[1],name1$0=e1$0[1];
             return caml_call2(Stdlib_int[8],name1$0,name2$0)}
           break;
          case 8:
           if(8 === e2$0[0])
            {var
              right2=e2$0[2],
              left2=e2$0[1],
              right1=e1$0[2],
              left1=e1$0[1],
              _p2_=syntactically_equal$0(left1,left2);
             if(_p2_){var e1$0=right1,e2$0=right2;continue}
             return _p2_}
           break;
          default:
           if(9 === e2$0[0])
            {var
              tau2=e2$0[2],
              e2$1=e2$0[1],
              tau1=e1$0[2],
              e1$1=e1$0[1],
              _p3_=equal(tau1,tau2);
             if(_p3_){var e1$0=e1$1,e2$0=e2$1;continue}
             return _p3_}}
        return 0}}
    function largest_hole(exp)
     {var exp$0=exp;
      for(;;)
       {var switch$0=0;
        switch(exp$0[0])
         {case 1:
           var _pc_=exp$0[3],_pd_=exp$0[2];
           if(0 === _pc_[0])
            {var e2=_pc_[1],e1=_pd_;switch$0 = 1}
           else
            var exp$1=_pd_;
           break;
          case 2:return unused;
          case 3:
           var
            components=exp$0[1],
            _pg_=caml_call2(Stdlib_list[17],largest_hole,components),
            _ph_=caml_call1(List2[5],_pg_);
           return caml_call2(Option2[7],unused,_ph_);
          case 6:
           var
            branches=exp$0[2],
            scrutinee=exp$0[1],
            _pi_=function(_pq_){return _pq_[2]},
            _pj_=function(_pp_){return _pp_[2]},
            _pk_=caml_call2(Pervasives2[3],_pj_,_pi_),
            _pl_=caml_call2(Pervasives2[3],_pk_,largest_hole),
            _pm_=caml_call2(Stdlib_list[17],_pl_,branches),
            _pn_=caml_call1(List2[5],_pm_),
            branch_max=caml_call2(Option2[7],unused,_pn_),
            _po_=largest_hole(scrutinee);
           return caml_call2(Stdlib[17],_po_,branch_max);
          case 7:var hole_name=exp$0[1];return hole_name;
          case 8:var e2=exp$0[2],e1=exp$0[1];switch$0 = 1;break;
          case 9:var exp$1=exp$0[1];break;
          default:var exp$1=exp$0[3]}
        if(switch$0)
         {var _pe_=largest_hole(e2),_pf_=largest_hole(e1);
          return caml_call2(Stdlib[17],_pf_,_pe_)}
        var exp$0=exp$1;
        continue}}
    function has_special_recursion(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var param$1=param$0[3],param$0=param$1;continue;
         case 1:
          var _o7_=param$0[3],_o8_=param$0[2],_o9_=param$0[1];
          if(0 === _o7_[0])
           {var e2=_o7_[1];
            if(_o9_)
             var special=_o9_;
            else
             {var _o__=has_special_recursion(_o8_);
              if(! _o__){var param$0=e2;continue}
              var special=_o__}
            return special}
          if(_o9_)return _o9_;
          var param$0=_o8_;
          continue;
         case 2:return 0;
         case 3:
          var components=param$0[1];
          return caml_call2(Stdlib_list[30],has_special_recursion,components);
         case 4:var param$2=param$0[3],param$0=param$2;continue;
         case 5:var param$3=param$0[3],param$0=param$3;continue;
         case 6:
          var
           branches=param$0[2],
           scrutinee=param$0[1],
           _o$_=has_special_recursion(scrutinee);
          if(_o$_)return _o$_;
          var
           _pa_=
            function(param)
             {var match=param[2],e=match[2];return has_special_recursion(e)};
          return caml_call2(Stdlib_list[30],_pa_,branches);
         case 7:return 0;
         case 8:
          var e2$0=param$0[2],e1=param$0[1],_pb_=has_special_recursion(e1);
          if(_pb_)return _pb_;
          var param$0=e2$0;
          continue;
         default:var param$4=param$0[1],param$0=param$4;continue}}
    function fill_hole(param)
     {var hole_exp=param[2],hole_name=param[1];
      function helper(param)
       {switch(param[0])
         {case 0:
           var body=param[3],x=param[2],f=param[1];
           return [0,f,x,helper(body)];
          case 1:
           var _oZ_=param[3],_o0_=param[2],_o1_=param[1];
           if(0 === _oZ_[0])
            {var e2=_oZ_[1],_o2_=[0,helper(e2)];
             return [1,_o1_,helper(_o0_),_o2_]}
           var type_arg=_oZ_[1];
           return [1,_o1_,helper(_o0_),[1,type_arg]];
          case 2:var x$0=param[1];return [2,x$0];
          case 3:
           var components=param[1];
           return [3,caml_call2(Stdlib_list[17],helper,components)];
          case 4:
           var arg=param[3],i=param[2],n=param[1];return [4,n,i,helper(arg)];
          case 5:
           var arg$0=param[3],type_args=param[2],ctor_name=param[1];
           return [5,ctor_name,type_args,helper(arg$0)];
          case 6:
           var
            branches=param[2],
            scrutinee=param[1],
            _o3_=caml_call1(Pair2[3],helper),
            _o4_=caml_call1(Pair2[3],_o3_),
            _o5_=caml_call2(Stdlib_list[17],_o4_,branches);
           return [6,helper(scrutinee),_o5_];
          case 7:
           var hole_name$0=param[1];
           return caml_call2(Stdlib_int[8],hole_name,hole_name$0)
                   ?hole_exp
                   :[7,hole_name$0];
          case 8:
           var e2$0=param[2],e1=param[1],_o6_=helper(e2$0);
           return [8,helper(e1),_o6_];
          default:var tau=param[2],e=param[1];return [9,helper(e),tau]}}
      return helper}
    var
     Smyth_Exp=
      [0,syntactically_equal$0,largest_hole,has_special_recursion,fill_hole];
    caml_register_global(227,Smyth_Exp,"Smyth__Exp");
    var
     compare$0=caml_compare,
     Hole_set=caml_call1(Stdlib_set[1],[0,compare$0]);
    function domain(m)
     {var _oV_=caml_call1(Hole_map[19],m);
      function _oW_(_oY_){return _oY_[1]}
      var _oX_=caml_call2(Stdlib_list[17],_oW_,_oV_);
      return caml_call1(Hole_set[36],_oX_)}
    function delete_min(map)
     {function _oT_(param)
       {var v=param[2],k=param[1];
        return [0,[0,k,v],caml_call2(Hole_map[7],k,map)]}
      var _oU_=caml_call1(Hole_map[21],map);
      return caml_call2(Option2[11][1],_oU_,_oT_)}
    var empty$1=[0,Hole_map[1],Hole_map[1]];
    function from_hole_filling(hf){return [0,hf,Hole_map[1]]}
    function from_unsolved_constraints(us){return [0,Hole_map[1],us]}
    function solved_singleton(h,e)
     {var _oS_=Hole_map[1];return [0,caml_call2(Hole_map[6],h,e),_oS_]}
    function unsolved_singleton(h,w)
     {var _oR_=caml_call2(Hole_map[6],h,w);return [0,Hole_map[1],_oR_]}
    function merge_solved(fs)
     {var Merge_failure=[248,cst_Merge_failure,caml_fresh_oo_id(0)];
      function _oO_(param,e1,e2)
       {if(syntactically_equal$0(e1,e2))return [0,e1];throw Merge_failure}
      var merge_map=caml_call1(Hole_map[9],_oO_);
      try
       {var _oP_=[0,caml_call3(Stdlib_list[22],merge_map,Hole_map[1],fs)];
        return _oP_}
      catch(_oQ_)
       {_oQ_ = caml_wrap_exception(_oQ_);
        if(_oQ_ === Merge_failure)return 0;
        throw _oQ_}}
    function merge_unsolved(us)
     {function _oN_(param,v1,v2){return [0,caml_call2(Stdlib[37],v1,v2)]}
      var merge_map=caml_call1(Hole_map[9],_oN_);
      return caml_call3(Stdlib_list[22],merge_map,Hole_map[1],us)}
    function merge(ks)
     {var match=caml_call1(Stdlib_list[49],ks),us=match[2],fs=match[1];
      function _oL_(f){var u=merge_unsolved(us);return [0,f,u]}
      var _oM_=merge_solved(fs);
      return caml_call2(Option2[11][1],_oM_,_oL_)}
    function satisfies(hf,param)
     {var us=param[2],f0=param[1];
      function _oC_(param)
       {function _oI_(hf_merged)
         {function _oK_(hole_name,worlds)
           {return exp_satisfies(hf_merged,[7,hole_name],worlds)}
          return caml_call2(Hole_map[14],_oK_,us)}
        var _oJ_=merge_solved([0,f0,[0,hf,0]]);
        return caml_call2(Option2[11][1],_oJ_,_oI_)}
      var
       _oD_=domain(hf),
       _oE_=domain(f0),
       _oF_=caml_call2(Hole_set[13],_oE_,_oD_),
       _oG_=caml_call1(Option2[5],_oF_),
       _oH_=caml_call2(Option2[11][2],_oG_,_oC_);
      return caml_call2(Option2[7],0,_oH_)}
    var
     Smyth_Constraints=
      [0,
       delete_min,
       empty$1,
       from_hole_filling,
       from_unsolved_constraints,
       solved_singleton,
       unsolved_singleton,
       merge_solved,
       merge_unsolved,
       merge,
       satisfies];
    caml_register_global(229,Smyth_Constraints,"Smyth__Constraints");
    function info$1(s)
     {if(log_info[1])
       {var _oB_=caml_call2(Stdlib[28],cst_INFO,s);
        return caml_call1(Stdlib[53],_oB_)}
      return 0}
    function warn(s)
     {if(log_warn[1])
       {var _oA_=caml_call2(Stdlib[28],cst_WARN,s);
        return caml_call1(Stdlib[53],_oA_)}
      return 0}
    var Smyth_Log=[0,info$1,warn];
    caml_register_global(230,Smyth_Log,"Smyth__Log");
    var none=0;
    function from_list(xs){return xs}
    function to_list(xs){return xs}
    var map=Stdlib_list[17],pure=List2[2],join=Stdlib_list[13];
    function pure_bind(xs,f){return caml_call2(map,f,xs)}
    function bind(xs,f){return caml_call1(join,caml_call2(map,f,xs))}
    function and_then(f,xs){return bind(xs,f)}
    function guard(b){return b?caml_call1(pure,0):none}
    var union=Stdlib_list[13],one_of_each=List2[7];
    function is_empty(xs){return caml_equal(xs,none)}
    var filter=Stdlib_list[38];
    function dedup(xs){return caml_call2(Stdlib_list[54],caml_compare,xs)}
    var collapse_option=List2[8],take=List2[26];
    function curb_overflow(n,xs)
     {return 0 < caml_call2(Stdlib_list[3],xs,n)?none:xs}
    function lift_option(op){return caml_call1(collapse_option,[0,op,0])}
    function lift_result(r){return lift_option(caml_call1(Result2[7],r))}
    var
     Syntax=[0,pure_bind,bind],
     Smyth_Nondet=
      [0,
       none,
       from_list,
       to_list,
       map,
       pure,
       join,
       pure_bind,
       bind,
       and_then,
       guard,
       union,
       one_of_each,
       is_empty,
       filter,
       dedup,
       collapse_option,
       take,
       curb_overflow,
       lift_option,
       lift_result,
       Syntax];
    caml_register_global(231,Smyth_Nondet,"Smyth__Nondet");
    var type_args=0;
    function salvage_constructor(exp$0)
     {var type_args$0=type_args,exp=exp$0;
      for(;;)
       {switch(exp[0])
         {case 1:
           var _ox_=exp[3],_oy_=exp[2];
           if(0 !== _ox_[0])
            {var
              type_arg=_ox_[1],
              type_args$1=[0,type_arg,type_args$0],
              type_args$0=type_args$1,
              exp=_oy_;
             continue}
           break;
          case 2:
           var name=exp[1],_oz_=caml_string_get(name,0);
           return caml_call1(Char2[1],_oz_)?[0,[0,name,type_args$0]]:0
          }
        return 0}}
    function exp(root)
     {set_largest_hole(largest_hole(root));
      function helper(exp)
       {switch(exp[0])
         {case 0:
           var body=exp[3],x=exp[2],f=exp[1];return [0,f,x,helper(body)];
          case 1:
           var _oo_=exp[3],_op_=exp[2],_oq_=exp[1];
           if(0 === _oo_[0])
            {var e2=_oo_[1],match=salvage_constructor(_op_);
             if(match)
              {var match$0=match[1],type_args=match$0[2],ctor_name=match$0[1];
               return [5,ctor_name,type_args,helper(e2)]}
             var _or_=[0,helper(e2)];
             return [1,_oq_,helper(_op_),_or_]}
           var type_arg=_oo_[1],match$1=salvage_constructor(exp);
           if(match$1)
            {var
              match$2=match$1[1],
              type_args$0=match$2[2],
              ctor_name$0=match$2[1];
             return [5,ctor_name$0,type_args$0,_p_]}
           return [1,_oq_,helper(_op_),[1,type_arg]];
          case 2:
           var name=exp[1],_os_=caml_string_get(name,0);
           return caml_call1(Char2[1],_os_)?[5,name,0,_q_]:[2,name];
          case 3:
           var components=exp[1];
           return [3,caml_call2(Stdlib_list[17],helper,components)];
          case 4:var arg=exp[3],i=exp[2],n=exp[1];return [4,n,i,helper(arg)];
          case 5:
           var arg$0=exp[3],type_args$1=exp[2],ctor_name$1=exp[1];
           return [5,ctor_name$1,type_args$1,helper(arg$0)];
          case 6:
           var
            branches=exp[2],
            scrutinee=exp[1],
            _ot_=caml_call1(Pair2[3],helper),
            _ou_=caml_call1(Pair2[3],_ot_),
            _ov_=caml_call2(Stdlib_list[17],_ou_,branches);
           return [6,helper(scrutinee),_ov_];
          case 7:
           var hole_name=exp[1];
           return caml_call2(Stdlib_int[8],hole_name,unused)
                   ?[7,gen_hole(0)]
                   :[7,hole_name];
          case 8:
           var e2$0=exp[2],e1=exp[1],_ow_=helper(e2$0);
           return [8,helper(e1),_ow_];
          default:var tau=exp[2],e=exp[1];return [9,helper(e),tau]}}
      return helper(root)}
    var Smyth_Post_parse=[0,exp];
    caml_register_global(233,Smyth_Post_parse,"Smyth__Post_parse");
    function lett(the_typ,name,binding,body$0)
     {if(0 === binding[0])
       var body=binding[3],param=binding[2],_on_=[0,[0,name],param,body];
      else
       var _on_=binding;
      return [1,0,[0,0,[0,[0,name]],body$0],[0,[9,_on_,the_typ]]]}
    function _r_(param,body){return [0,0,param,body]}
    var func_params=caml_call1(Stdlib_list[23],_r_);
    function _s_(acc,arg){return [1,0,acc,arg]}
    var app=caml_call1(Stdlib_list[22],_s_);
    function nat(n$1)
     {var acc=acc$0,n=n$1;
      for(;;)
       {if(0 === n)return acc;
        var n$0=n - 1 | 0,acc$1=[5,cst_S,0,acc],acc=acc$1,n=n$0;
        continue}}
    function listt(es,ts)
     {var _ol_=[5,cst_Nil,ts,_t_];
      function _om_(e,acc){return [5,cst_Cons,ts,[3,[0,e,[0,acc,0]]]]}
      return caml_call3(Stdlib_list[23],_om_,es,_ol_)}
    function program(param)
     {var
       main_opt=param[4],
       assertions=param[3],
       definitions=param[2],
       datatypes=param[1],
       _od_=caml_call1(Stdlib_list[9],datatypes),
       _oe_=caml_call2(Option2[7],_u_,main_opt);
      function _of_(param)
       {var e2=param[2],e1=param[1],_oj_=[8,e1,e2];
        return function(_ok_){return lett(_v_,cst$1,_oj_,_ok_)}}
      var _og_=caml_call3(Stdlib_list[23],_of_,assertions,_oe_);
      function _oh_(param)
       {var match=param[2],the_exp=match[2],the_typ=match[1],name=param[1];
        return function(_oi_){return lett(the_typ,name,the_exp,_oi_)}}
      return [0,exp(caml_call3(Stdlib_list[23],_oh_,definitions,_og_)),_od_]}
    var Smyth_Desugar=[0,lett,func_params,app,nat,listt,program];
    caml_register_global(234,Smyth_Desugar,"Smyth__Desugar");
    function fresh_ident(gamma,first_char)
     {function extract_number(ident)
       {var ident_len=caml_ml_string_length(ident);
        if(0 < ident_len)
         {var _ob_=caml_string_get(ident,0);
          if(caml_call2(Stdlib_char[8],_ob_,first_char))
           {var
             _oc_=
              caml_call3(Stdlib_stringLabels[4],ident,1,ident_len - 1 | 0);
            return caml_call1(Stdlib[34],_oc_)}}
        return 0}
      var
       _n5_=names(gamma),
       _n6_=caml_call2(Stdlib_list[20],extract_number,_n5_),
       _n7_=caml_call1(List2[5],_n6_);
      function _n8_(_oa_){return 1 + _oa_ | 0}
      var
       _n9_=caml_call2(Option2[1],_n8_,_n7_),
       fresh_number=caml_call2(Option2[7],1,_n9_),
       _n__=caml_call1(Stdlib[33],fresh_number),
       _n$_=caml_call2(Stdlib_string[1],1,first_char);
      return caml_call2(Stdlib[28],_n$_,_n__)}
    var function_char=102,variable_char=120,match_char=121;
    function instantiations(sigma,gamma,name,tau)
     {var match=peel_forall(tau),_nY_=match[1];
      if(_nY_)
       {var
         bound_type=match[2],
         _nT_=gamma[2],
         _nU_=function(x){return [4,x]},
         rank_zero_nd=caml_call2(Stdlib_list[17],_nU_,_nT_),
         _nV_=
          function(param)
           {var datatype_params=param[2],datatype_name=param[1];
            function _n3_(param){return rank_zero_nd}
            var
             _n4_=
              caml_call1
               (one_of_each,caml_call2(Stdlib_list[17],_n3_,datatype_params));
            return caml_call2
                    (map,function(args){return [2,datatype_name,args]},_n4_)},
         _nW_=
          function(param)
           {var match=param[2],type_params=match[1],name=param[1];
            return [0,name,type_params]},
         _nX_=caml_call2(Stdlib_list[17],_nW_,sigma),
         datatypes_nd=caml_call2(Syntax[2],_nX_,_nV_),
         simple_types_nd=caml_call1(union,[0,rank_zero_nd,[0,datatypes_nd,0]]),
         _nZ_=function(param){return simple_types_nd},
         _n0_=caml_call1(one_of_each,caml_call2(Stdlib_list[17],_nZ_,_nY_));
        return caml_call2
                (map,
                 function(args)
                  {function _n1_(a){return [1,a]}
                   var
                    _n2_=
                     caml_call2
                      (app,[2,name],caml_call2(Stdlib_list[17],_n1_,args));
                   return [0,
                           substitute_many
                            (caml_call2(Stdlib_list[50],_nY_,args),bound_type),
                           _n2_]},
                 _n0_)}
      return caml_call1(pure,[0,tau,[2,name]])}
    function hash(param)
     {var
       goal=param[5],
       rel_binding=param[4],
       term_size=param[3],
       term_kind=param[2];
      function hash_type(tau)
       {switch(tau[0])
         {case 0:
           var
            tau2=tau[2],
            tau1=tau[1],
            _nG_=hash_type(tau2),
            _nH_=caml_call2(Stdlib[28],_nG_,cst$2),
            _nI_=caml_call2(Stdlib[28],cst$3,_nH_),
            _nJ_=hash_type(tau1),
            _nK_=caml_call2(Stdlib[28],_nJ_,_nI_);
           return caml_call2(Stdlib[28],cst$4,_nK_);
          case 1:
           var
            taus=tau[1],
            _nL_=caml_call2(Stdlib_list[17],hash_type,taus),
            s=caml_call2(Stdlib_string[7],cst$5,_nL_),
            _nM_=caml_call2(Stdlib[28],s,cst$6);
           return caml_call2(Stdlib[28],cst$7,_nM_);
          case 2:
           var
            type_args=tau[2],
            d=tau[1],
            _nN_=caml_call2(Stdlib_list[17],hash_type,type_args),
            _nO_=caml_call2(Stdlib_string[7],cst$8,_nN_),
            _nP_=caml_call2(Stdlib[28],cst$9,_nO_);
           return caml_call2(Stdlib[28],d,_nP_);
          case 3:
           var
            bound_type=tau[2],
            a=tau[1],
            _nQ_=hash_type(bound_type),
            _nR_=caml_call2(Stdlib[28],cst$10,_nQ_),
            _nS_=caml_call2(Stdlib[28],a,_nR_);
           return caml_call2(Stdlib[28],cst_f,_nS_);
          default:var x=tau[1];return x}}
      function hash_bind_spec(bind_spec)
       {if(typeof bind_spec === "number")
         return cst$11;
        else
         switch(bind_spec[0])
          {case 0:
            var name=bind_spec[1];return caml_call2(Stdlib[28],cst_r,name);
           case 1:
            var name$0=bind_spec[1];
            return caml_call2(Stdlib[28],cst_a,name$0);
           default:
            var name$1=bind_spec[1];return caml_call2(Stdlib[28],cst_d,name$1)}}
      var
       tk_string=term_kind?cst_I:cst_E,
       ts_string=caml_call1(Stdlib[33],term_size);
      if(rel_binding)
       var
        _nf_=rel_binding[1],
        match=_nf_[2],
        bind_spec=match[2],
        tau=match[1],
        name=_nf_[1],
        _ng_=hash_bind_spec(bind_spec),
        _nh_=caml_call2(Stdlib[28],cst$12,_ng_),
        _ni_=hash_type(tau),
        _nj_=caml_call2(Stdlib[28],_ni_,_nh_),
        _nk_=caml_call2(Stdlib[28],cst$13,_nj_),
        rb_string=caml_call2(Stdlib[28],name,_nk_);
      else
       var rb_string=cst$25;
      var goal_dec=goal[3],goal_type=goal[2],gamma=goal[1],_nl_=gamma[1];
      function _nm_(param)
       {var
         match=param[2],
         bind_spec=match[2],
         tau=match[1],
         name=param[1],
         _nB_=hash_bind_spec(bind_spec),
         _nC_=caml_call2(Stdlib[28],cst$14,_nB_),
         _nD_=hash_type(tau),
         _nE_=caml_call2(Stdlib[28],_nD_,_nC_),
         _nF_=caml_call2(Stdlib[28],cst$15,_nE_);
        return caml_call2(Stdlib[28],name,_nF_)}
      var
       _nn_=caml_call2(Stdlib_list[17],_nm_,_nl_),
       gamma_type_string=caml_call2(Stdlib_string[7],cst$16,_nn_),
       _no_=gamma[2];
      function _np_(name){return name}
      var
       _nq_=caml_call2(Stdlib_list[17],_np_,_no_),
       gamma_poly_string=caml_call2(Stdlib_string[7],cst$17,_nq_),
       gt_string=hash_type(goal_type),
       gd_string=caml_call2(Option2[7],cst$18,goal_dec),
       _nr_=caml_call2(Stdlib[28],cst$19,gd_string),
       _ns_=caml_call2(Stdlib[28],gt_string,_nr_),
       _nt_=caml_call2(Stdlib[28],cst$20,_ns_),
       _nu_=caml_call2(Stdlib[28],gamma_poly_string,_nt_),
       _nv_=caml_call2(Stdlib[28],cst$21,_nu_),
       goal_string=caml_call2(Stdlib[28],gamma_type_string,_nv_),
       _nw_=caml_call2(Stdlib[28],cst$22,goal_string),
       _nx_=caml_call2(Stdlib[28],rb_string,_nw_),
       _ny_=caml_call2(Stdlib[28],cst$23,_nx_),
       _nz_=caml_call2(Stdlib[28],ts_string,_ny_),
       _nA_=caml_call2(Stdlib[28],cst$24,_nz_);
      return caml_call2(Stdlib[28],tk_string,_nA_)}
    var gen_cache=caml_call2(Stdlib_hashtbl[1],0,100);
    function gen(gen_input)
     {if(0 < gen_input[3])
       {var
         _lV_=hash(gen_input),
         match=caml_call2(Stdlib_hashtbl[7],gen_cache,_lV_);
        if(match){var solution=match[1];return solution}
        var
         goal=gen_input[5],
         term_size=gen_input[3],
         sigma=gen_input[1],
         _l6_=gen_input[4];
        if(gen_input[2])
         if(_l6_)
          var
           rb=_l6_[1],
           goal_dec$3=goal[3],
           goal_type$3=goal[2],
           gamma$3=goal[1],
           _l4_=
            function(param)
             {var e_option=gen([0,sigma,0,term_size,[0,rb],goal]);
              switch(goal_type$3[0])
               {case 0:
                 var
                  tau2=goal_type$3[2],
                  tau1=goal_type$3[1],
                  f_name=fresh_ident(gamma$3,function_char),
                  arg_name=fresh_ident(gamma$3,variable_char),
                  _l__=
                   function(body){return [0,[0,f_name],[0,[0,arg_name]],body]},
                  _l$_=
                   gen
                    ([0,
                      sigma,
                      1,
                      term_size - 1 | 0,
                      [0,rb],
                      [0,
                       concat_type$0
                        ([0,
                          [0,arg_name,[0,tau1,[2,f_name]]],
                          [0,[0,f_name,[0,goal_type$3,[0,f_name]]],0]],
                         gamma$3),
                       tau2,
                       0]]),
                  i_option=caml_call2(Syntax[1],_l$_,_l__);
                 break;
                case 1:
                 var
                  taus=goal_type$3[1],
                  k=caml_call1(Stdlib_list[1],taus),
                  _ma_=
                   function(partition)
                    {function _mq_(part)
                      {function _mu_(tau,n,tp)
                        {var goal_dec=0;
                         switch(tp)
                          {case 0:var match=[0,[0,rb],gamma$3];break;
                           case 1:var match=[0,0,add_type$0(rb,gamma$3)];break;
                           default:var match=[0,0,gamma$3]}
                         var gamma=match[2],rel_binding=match[1];
                         return gen([0,sigma,1,n,rel_binding,[0,gamma,tau,goal_dec]])}
                       var
                        _mv_=
                         caml_call1
                          (one_of_each,caml_call4(List2[13],_mu_,taus,partition,part));
                       return caml_call2(map,function(es){return [3,es]},_mv_)}
                     function _mn_(i)
                      {var
                        _mr_=caml_call2(List2[6],k - i | 0,1),
                        _ms_=caml_call2(Stdlib[37],_w_,_mr_),
                        _mt_=caml_call2(List2[6],i - 1 | 0,2);
                       return caml_call2(Stdlib[37],_mt_,_ms_)}
                     var
                      _mo_=caml_call2(List2[10],1,k),
                      _mp_=caml_call2(Syntax[1],_mo_,_mn_);
                     return caml_call2(Syntax[2],_mp_,_mq_)},
                  _mb_=caml_call2(Int2[2],term_size - 1 | 0,k),
                  i_option=caml_call2(Syntax[2],_mb_,_ma_);
                 break;
                case 2:
                 var
                  datatype_args=goal_type$3[2],
                  datatype_name=goal_type$3[1],
                  _mc_=
                   function(param)
                    {var arg_type=param[2],ctor_name=param[1];
                     function _ml_(arg){return [5,ctor_name,datatype_args,arg]}
                     var
                      _mm_=
                       gen
                        ([0,sigma,1,term_size - 1 | 0,[0,rb],[0,gamma$3,arg_type,0]]);
                     return caml_call2(Syntax[1],_mm_,_ml_)},
                  _md_=caml_call2(Stdlib_list[42],datatype_name,sigma),
                  _me_=function(_mk_){return _mk_[2]},
                  _mf_=caml_call2(Pervasives2[3],_me_,from_list),
                  _mg_=caml_call2(Option2[1],_mf_,_md_),
                  _mh_=caml_call2(Option2[7],none,_mg_),
                  i_option=caml_call2(Syntax[2],_mh_,_mc_);
                 break;
                case 3:
                 var
                  bound_type=goal_type$3[2],
                  a=goal_type$3[1],
                  _mi_=function(body){return [0,0,[1,a],body]},
                  _mj_=
                   gen
                    ([0,
                      sigma,
                      1,
                      term_size - 1 | 0,
                      [0,rb],
                      [0,add_poly(a,gamma$3),bound_type,0]]),
                  i_option=caml_call2(Syntax[1],_mj_,_mi_);
                 break;
                default:var i_option=none}
              return caml_call1(union,[0,e_option,[0,i_option,0]])},
           _l5_=guard(caml_call1(Stdlib_option[10],goal_dec$3)),
           _l7_=caml_call2(Syntax[2],_l5_,_l4_);
         else
          var
           goal_dec$2=goal[3],
           goal_type$2=goal[2],
           gamma$2=goal[1],
           _l2_=
            function(param)
             {var match=peel_type(gamma$2);
              if(match)
               {var
                 match$0=match[1],
                 gamma_rest=match$0[2],
                 binding=match$0[1],
                 _mw_=
                  [0,
                   gen
                    ([0,
                      sigma,
                      1,
                      term_size,
                      0,
                      [0,gamma_rest,goal_type$2,goal_dec$2]]),
                   0];
                return caml_call1
                        (union,
                         [0,
                          gen
                           ([0,
                             sigma,
                             1,
                             term_size,
                             [0,binding],
                             [0,gamma_rest,goal_type$2,goal_dec$2]]),
                          _mw_])}
              switch(goal_type$2[0])
               {case 0:
                 var
                  tau2=goal_type$2[2],
                  tau1=goal_type$2[1],
                  f_name=fresh_ident(empty$0,function_char),
                  arg_name=fresh_ident(empty$0,variable_char),
                  _mx_=
                   function(body){return [0,[0,f_name],[0,[0,arg_name]],body]},
                  _my_=
                   gen
                    ([0,
                      sigma,
                      1,
                      term_size - 1 | 0,
                      0,
                      [0,
                       concat_type$0
                        ([0,
                          [0,arg_name,[0,tau1,[2,f_name]]],
                          [0,[0,f_name,[0,goal_type$2,[0,f_name]]],0]],
                         empty$0),
                       tau2,
                       0]]);
                 return caml_call2(Syntax[1],_my_,_mx_);
                case 1:
                 var
                  taus=goal_type$2[1],
                  tuple_size=caml_call1(Stdlib_list[1],taus),
                  _mz_=
                   function(partition)
                    {function _mM_(tau,n)
                      {return gen([0,sigma,1,n,0,[0,empty$0,tau,0]])}
                     var
                      _mN_=
                       caml_call1
                        (one_of_each,
                         caml_call3(Stdlib_list[25],_mM_,taus,partition));
                     return caml_call2(map,function(es){return [3,es]},_mN_)},
                  _mA_=caml_call2(Int2[2],term_size - 1 | 0,tuple_size);
                 return caml_call2(Syntax[2],_mA_,_mz_);
                case 2:
                 var
                  datatype_args=goal_type$2[2],
                  datatype_name=goal_type$2[1],
                  _mB_=
                   function(param)
                    {var arg_type=param[2],ctor_name=param[1];
                     function _mK_(arg){return [5,ctor_name,datatype_args,arg]}
                     var
                      _mL_=
                       gen([0,sigma,1,term_size - 1 | 0,0,[0,empty$0,arg_type,0]]);
                     return caml_call2(Syntax[1],_mL_,_mK_)},
                  _mC_=caml_call2(Stdlib_list[42],datatype_name,sigma),
                  _mD_=function(_mJ_){return _mJ_[2]},
                  _mE_=caml_call2(Pervasives2[3],_mD_,from_list),
                  _mF_=caml_call2(Option2[1],_mE_,_mC_),
                  _mG_=caml_call2(Option2[7],none,_mF_);
                 return caml_call2(Syntax[2],_mG_,_mB_);
                case 3:
                 var
                  bound_type=goal_type$2[2],
                  a=goal_type$2[1],
                  _mH_=function(body){return [0,0,[1,a],body]},
                  _mI_=
                   gen
                    ([0,
                      sigma,
                      1,
                      term_size - 1 | 0,
                      0,
                      [0,add_poly(a,empty$0),bound_type,0]]);
                 return caml_call2(Syntax[1],_mI_,_mH_);
                default:return none}},
           _l3_=guard(caml_call1(Stdlib_option[10],goal_dec$2)),
           _l7_=caml_call2(Syntax[2],_l3_,_l2_);
        else
         if(_l6_)
          {var
            rb$0=_l6_[1],
            goal_dec$1=goal[3],
            goal_type$1=goal[2],
            gamma$1=goal[1],
            match$2=rb$0[2],
            rel_bind_spec=match$2[2],
            rel_type=match$2[1],
            rel_name=rb$0[1];
           if(1 === term_size)
            var
             _l0_=
              function(param)
               {var specialized_exp=param[2],specialized_type=param[1];
                if
                 (matches(goal_type$1,specialized_type)
                  &&
                  matches_dec(goal_dec$1,rel_bind_spec))
                 return caml_call1(pure,specialized_exp);
                if(matches_dec(goal_dec$1,sub_bind_spec(rel_bind_spec)))
                 {if(1 === rel_type[0])
                   {var
                     component_types=rel_type[1],
                     n=caml_call1(Stdlib_list[1],component_types),
                     _mO_=caml_call2(Stdlib_list[18],Pair2[1],component_types),
                     _mP_=function(_mV_){return matches(goal_type$1,_mV_)},
                     _mQ_=function(_mU_){return _mU_[2]},
                     _mR_=caml_call2(Pervasives2[3],_mQ_,_mP_),
                     _mS_=caml_call2(Stdlib_list[38],_mR_,_mO_),
                     _mT_=
                      function(param)
                       {var i=param[1];return [4,n,i + 1 | 0,[2,rel_name]]};
                    return caml_call2(Stdlib_list[17],_mT_,_mS_)}
                  return none}
                return none},
             _l1_=instantiations(sigma,gamma$1,rel_name,rel_type),
             _l8_=caml_call2(Syntax[2],_l1_,_l0_);
           else
            if(2 === term_size)
             var _l8_=none;
            else
             var
              goal_dec$0=goal[3],
              goal_type$0=goal[2],
              gamma$0=goal[1],
              _lY_=
               function(param)
                {var combined_gamma=add_type$0(rb$0,gamma$0);
                 function app_combine(head_nd,arg_nd)
                  {function _nb_(head)
                    {var match=bind_spec(combined_gamma,head),switch$0=0;
                     if(typeof match !== "number" && 0 === match[0])
                      {var special=1;switch$0 = 1}
                     if(! switch$0)var special=0;
                     function _nc_(arg)
                      {function _nd_(param){return [1,special,head,[0,arg]]}
                       var
                        _ne_=
                         guard(structurally_decreasing(combined_gamma,head,arg));
                       return caml_call2(Syntax[1],_ne_,_nd_)}
                     return caml_call2(Syntax[2],arg_nd,_nc_)}
                   return caml_call2(Syntax[2],head_nd,_nb_)}
                 function _mW_(arg_type)
                  {function _m2_(partition)
                    {if(partition)
                      {var _m4_=partition[2];
                       if(_m4_ && ! _m4_[2])
                        {var
                          k_arg=_m4_[1],
                          k_head=partition[1],
                          head_goal=[0,gamma$0,[0,arg_type,goal_type$0],0],
                          arg_goal=[0,gamma$0,arg_type,0],
                          head_solution_nd=gen([0,sigma,0,k_head,0,head_goal]),
                          rel_head_solution_nd=
                           gen([0,sigma,0,k_head,[0,rb$0],head_goal]),
                          arg_solution_nd=gen([0,sigma,1,k_arg,0,arg_goal]),
                          rel_arg_solution_nd=gen([0,sigma,1,k_arg,[0,rb$0],arg_goal]),
                          _m$_=
                           [0,app_combine(rel_head_solution_nd,rel_arg_solution_nd),0],
                          _na_=
                           [0,app_combine(head_solution_nd,rel_arg_solution_nd),_m$_];
                         return caml_call1
                                 (union,
                                  [0,app_combine(rel_head_solution_nd,arg_solution_nd),_na_])}}
                     var
                      _m5_=caml_call1(Stdlib[33],term_size - 1 | 0),
                      _m6_=caml_call2(Stdlib[28],_m5_,cst$26),
                      _m7_=
                       caml_call2(Stdlib[28],cst_should_be_2_called_with_n,_m6_),
                      _m8_=caml_call1(Stdlib_list[1],partition),
                      _m9_=caml_call1(Stdlib[33],_m8_),
                      _m__=caml_call2(Stdlib[28],_m9_,_m7_);
                     warn
                      (caml_call2(Stdlib[28],cst_integer_partition_is_incor,_m__));
                     return none}
                   var _m3_=caml_call2(Int2[2],term_size - 1 | 0,2);
                   return caml_call2(Syntax[2],_m3_,_m2_)}
                 var _mX_=gamma$0[1];
                 function _mY_(param)
                  {var match=param[2],tau=match[1],name=param[1];
                   function _m0_(param)
                    {var specialized_tau=param[1];
                     return lift_option
                             (domain_of_codomain(goal_type$0,specialized_tau))}
                   var _m1_=instantiations(sigma,gamma$0,name,tau);
                   return caml_call2(Syntax[2],_m1_,_m0_)}
                 var
                  _mZ_=
                   caml_call1(union,caml_call2(Stdlib_list[17],_mY_,_mX_));
                 return caml_call2(Syntax[2],_mZ_,_mW_)},
              _lZ_=guard(caml_call1(Stdlib_option[10],goal_dec$0)),
              _l8_=caml_call2(Syntax[2],_lZ_,_lY_);
           var _l7_=_l8_}
         else
          {var
            goal_dec=goal[3],
            goal_type=goal[2],
            gamma=goal[1],
            match$0=peel_type(gamma);
           if(match$0)
            var
             match$1=match$0[1],
             gamma_rest=match$1[2],
             binding=match$1[1],
             _lX_=
              [0,
               gen([0,sigma,0,term_size,0,[0,gamma_rest,goal_type,goal_dec]]),
               0],
             _l9_=
              caml_call1
               (union,
                [0,
                 gen
                  ([0,
                    sigma,
                    0,
                    term_size,
                    [0,binding],
                    [0,gamma_rest,goal_type,goal_dec]]),
                 _lX_]);
           else
            var _l9_=none;
           var _l7_=_l9_}
        var solution$0=dedup(_l7_),_lW_=hash(gen_input);
        caml_call3(Stdlib_hashtbl[5],gen_cache,_lW_,solution$0);
        return solution$0}
      return none}
    function clear_cache(param)
     {return caml_call1(Stdlib_hashtbl[3],gen_cache)}
    function up_to_e(sigma,max_size,goal)
     {var _lT_=caml_call2(List2[10],1,max_size);
      function _lU_(term_size){return gen([0,sigma,0,term_size,0,goal])}
      return caml_call1(union,caml_call2(Stdlib_list[17],_lU_,_lT_))}
    var
     Smyth_Term_gen=
      [0,
       fresh_ident,
       function_char,
       variable_char,
       match_char,
       clear_cache,
       up_to_e];
    caml_register_global(239,Smyth_Term_gen,"Smyth__Term_gen");
    var minimal_uneval=[0,1];
    function simplify_assertions(fuel,delta,sigma,rcs)
     {function simplify_one(param)
       {var value=param[2],res=param[1];
        if(final$0(res))
         {var _lS_=from_value$0(value);
          return uneval(fuel,delta,sigma,Hole_map[1],res,_lS_)}
        return none}
      return caml_call1
              (collapse_option,
               caml_call2
                (map,
                 merge,
                 caml_call1
                  (one_of_each,caml_call2(Stdlib_list[17],simplify_one,rcs))))}
    function uneval(fuel,delta,sigma,hf,res,ex)
     {function _k__(param)
       {if(typeof ex === "number")return caml_call1(pure,empty$1);
        switch(res[0])
         {case 0:
           var _le_=res[3],_lf_=res[2],_lg_=res[1];
           if(0 === _le_[0])
            {var _lh_=res[4],_li_=_le_[1];
             if(typeof ex !== "number" && 2 === ex[0])
              {var
                output=ex[2],
                input=ex[1],
                fix_env_extension=bind_rec_name_res(_lf_,res),
                _lj_=
                 function(x_env_extension)
                  {return check$3
                           (fuel,
                            delta,
                            sigma,
                            hf,
                            _lh_,
                            [0,
                             [0,
                              concat([0,x_env_extension,[0,fix_env_extension,[0,_lg_,0]]]),
                              output],
                             0])},
                _lk_=lift_option(bind_res(_li_,from_value(input)));
               return caml_call2(Syntax[2],_lk_,_lj_)}}
           break;
          case 1:
           var _ll_=res[1],switch$0=0;
           if(typeof ex === "number" || 0 === ex[0])switch$0 = 1;
           if(switch$0)
            {var comps2=ex[1],_lm_=caml_call1(Stdlib_list[1],comps2);
             if(caml_call1(Stdlib_list[1],_ll_) === _lm_)
              {var
                _ln_=
                 function(_lQ_,_lR_)
                  {return uneval(fuel,delta,sigma,hf,_lQ_,_lR_)};
               return caml_call1
                       (collapse_option,
                        caml_call2
                         (map,
                          merge,
                          caml_call1
                           (one_of_each,caml_call3(Stdlib_list[25],_ln_,_ll_,comps2))))}
             return none}
           break;
          case 2:
           var _lo_=res[2],_lp_=res[1];
           if(typeof ex !== "number" && 1 === ex[0])
            {var arg2=ex[2],name2=ex[1];
             return caml_call2(Stdlib_string[34],_lp_,name2)
                     ?uneval(fuel,delta,sigma,hf,_lo_,arg2)
                     :none}
           break;
          case 3:
           var hole_name$0=res[2],env=res[1];
           return caml_call1
                   (pure,unsolved_singleton(hole_name$0,[0,[0,env,ex],0]));
          case 4:
           var _lq_=res[2],_lr_=res[1];
           if(0 === _lq_[0])
            {var r2=_lq_[1],match=to_value(r2);
             if(match)
              {var v2=match[1];
               return uneval(fuel,delta,sigma,hf,_lr_,[2,v2,ex])}
             return none}
           break;
          case 5:
           var
            arg=res[3],
            i=res[2],
            n=res[1],
            _ls_=caml_call2(List2[6],n - i | 0,0),
            _lt_=caml_call2(Stdlib[37],[0,ex,0],_ls_),
            _lu_=caml_call2(List2[6],i - 1 | 0,0);
           return uneval
                   (fuel,
                    delta,
                    sigma,
                    hf,
                    arg,
                    [0,caml_call2(Stdlib[37],_lu_,_lt_)]);
          case 6:
           var branches=res[3],scrutinee=res[2],env$0=res[1];
           if(minimal_uneval[1])
            {var
              _lv_=
               function(hf_guesses)
                {function _lF_(hf)
                  {var ks_guesses=[0,hf_guesses,Hole_map[1]];
                   function _lH_(param)
                    {var rcs_scrutinee=param[2],r_scrutinee=param[1];
                     function _lJ_(ks_scrutinee)
                      {function _lL_(ks_branch)
                        {return lift_option
                                 (merge([0,ks_guesses,[0,ks_scrutinee,[0,ks_branch,0]]]))}
                       if(2 === r_scrutinee[0])
                        {var
                          r_arg=r_scrutinee[2],
                          ctor_name=r_scrutinee[1],
                          match=caml_call2(Stdlib_list[42],ctor_name,branches);
                         if(match)
                          var
                           match$0=match[1],
                           body=match$0[2],
                           arg_pattern=match$0[1],
                           _lN_=
                            function(arg_env_extension)
                             {return check$3
                                      (fuel,
                                       delta,
                                       sigma,
                                       hf,
                                       body,
                                       [0,[0,concat([0,arg_env_extension,[0,env$0,0]]),ex],0])},
                           _lO_=lift_option(bind_res(arg_pattern,r_arg)),
                           _lP_=caml_call2(Syntax[2],_lO_,_lN_);
                         else
                          var _lP_=none;
                         var _lM_=_lP_}
                       else
                        var _lM_=none;
                       return caml_call2(Syntax[2],_lM_,_lL_)}
                     var
                      _lK_=
                       simplify_assertions(fuel,delta,sigma,rcs_scrutinee);
                     return caml_call2(Syntax[2],_lK_,_lJ_)}
                   var _lI_=lift_result(resume$0(hf,scrutinee));
                   return caml_call2(Syntax[2],_lI_,_lH_)}
                 var _lG_=lift_option(merge_solved([0,hf,[0,hf_guesses,0]]));
                 return caml_call2(Syntax[2],_lG_,_lF_)},
              r=scrutinee,
              _la_=
               function(hole_name)
                {function _lC_(param)
                  {var
                    dec=param[3],
                    tau=param[2],
                    gamma=param[1],
                    _lE_=up_to_e(sigma,1,[0,gamma,tau,dec]);
                   return caml_call2
                           (map,caml_call1(Hole_map[6],hole_name),_lE_)}
                 var
                  _lD_=
                   lift_option(caml_call2(Stdlib_list[42],hole_name,delta));
                 return caml_call2(Syntax[2],_lD_,_lC_)};
             for(;;)
              {switch(r[0])
                {case 3:var hole_name=r[2],_lb_=[0,hole_name];break;
                 case 4:var r$0=r[1],r=r$0;continue;
                 case 5:var r$1=r[3],r=r$1;continue;
                 case 6:var r$2=r[2],r=r$2;continue;
                 case 7:var r$3=r[2],r=r$3;continue;
                 default:var _lb_=0}
               var
                _lc_=lift_option(_lb_),
                _ld_=caml_call2(Syntax[2],_lc_,_la_);
               return caml_call2(Syntax[2],_ld_,_lv_)}}
           var
            try_branch=
             function(param)
              {var
                match=param[2],
                body=match[2],
                arg_pattern=match[1],
                ctor_name=param[1];
               function _lw_(k1)
                {function _ly_(arg_env_extension)
                  {function _lA_(k2)
                    {return lift_option(merge([0,k1,[0,k2,0]]))}
                   var
                    _lB_=
                     check$3
                      (fuel - 1 | 0,
                       delta,
                       sigma,
                       hf,
                       body,
                       [0,[0,concat([0,arg_env_extension,[0,env$0,0]]),ex],0]);
                   return caml_call2(Syntax[2],_lB_,_lA_)}
                 var
                  _lz_=
                   lift_option(bind_res(arg_pattern,[7,ctor_name,scrutinee]));
                 return caml_call2(Syntax[2],_lz_,_ly_)}
               var
                _lx_=
                 uneval(fuel - 1 | 0,delta,sigma,hf,scrutinee,[1,ctor_name,0]);
               return caml_call2(Syntax[2],_lx_,_lw_)};
           return and_then(try_branch,branches);
          default:
           var arg$0=res[2],name=res[1];
           return uneval(fuel,delta,sigma,hf,arg$0,[1,name,ex])}
        warn(cst_Mistyped_uneval);
        return none}
      var _k$_=guard(0 < fuel?1:0);
      return caml_call2(Syntax[2],_k$_,_k__)}
    function check$3(fuel,delta,sigma,hf,exp,worlds)
     {function check_one(param)
       {var ex=param[2],env=param[1],match=eval$2(env,exp);
        if(0 === match[0])
         {var _k8_=match[1];
          if(! _k8_[2])
           {var r=_k8_[1],match$0=resume$0(hf,r);
            if(0 === match$0[0])
             {var _k9_=match$0[1];
              if(! _k9_[2])
               {var r$0=_k9_[1];return uneval(fuel,delta,sigma,hf,r$0,ex)}}
            return none}}
        return none}
      var
       _k7_=
        caml_call1(one_of_each,caml_call2(Stdlib_list[17],check_one,worlds));
      return caml_call1
              (collapse_option,
               caml_call2(map,merge,curb_overflow(uneval_limiter[1],_k7_)))}
    function check$4(delta,sigma,hf,exp,worlds)
     {return check$3(uneval_case_budget[1],delta,sigma,hf,exp,worlds)}
    function uneval$0(delta,sigma,hf,res,ex)
     {return uneval(uneval_case_budget[1],delta,sigma,hf,res,ex)}
    function simplify_assertions$0(delta,sigma,rcs)
     {return simplify_assertions(uneval_case_budget[1],delta,sigma,rcs)}
    var
     Smyth_Uneval=
      [0,minimal_uneval,check$4,uneval$0,simplify_assertions$0];
    caml_register_global(240,Smyth_Uneval,"Smyth__Uneval");
    function nat$0(param)
     {if(5 === param[0])
       {var _k2_=param[1];
        if(caml_string_notequal(_k2_,cst_S$0))
         {if(! caml_string_notequal(_k2_,cst_Z) && ! param[2])
           {var _k3_=param[3];if(3 === _k3_[0] && ! _k3_[1])return _x_}}
        else
         if(! param[2])
          {var
            arg=param[3],
            _k4_=nat$0(arg),
            _k5_=function(_k6_){return 1 + _k6_ | 0};
           return caml_call2(Stdlib_option[7],_k5_,_k4_)}}
      return 0}
    function helper(expected_opt,param)
     {if(5 === param[0])
       {var _kV_=param[1];
        if(caml_string_notequal(_kV_,cst_Cons$0))
         {if(! caml_string_notequal(_kV_,cst_Nil$0))
           {var _kW_=param[3];
            if(3 === _kW_[0] && ! _kW_[1])
             {var
               type_args=param[2],
               good=function(param){return [0,[0,0,type_args]]};
              if(expected_opt)
               {var expected=expected_opt[1];
                return equal([1,expected],[1,type_args])?good(0):0}
              return good(0)}}}
        else
         {var _kX_=param[3];
          if(3 === _kX_[0])
           {var _kY_=_kX_[1];
            if(_kY_)
             {var _kZ_=_kY_[2];
              if(_kZ_ && ! _kZ_[2])
               {var
                 tail=_kZ_[1],
                 head=_kY_[1],
                 type_args$0=param[2],
                 good$0=
                  function(param)
                   {var _k0_=helper(expected_opt,tail);
                    function _k1_(param)
                     {var taus=param[2],es=param[1];return [0,[0,head,es],taus]}
                    return caml_call2(Stdlib_option[7],_k1_,_k0_)};
                if(expected_opt)
                 {var expected$0=expected_opt[1];
                  return equal([1,expected$0],[1,type_args$0])?good$0(0):0}
                return good$0(0)}}}}}
      return 0}
    var _y_=0;
    function listt$0(_kU_){return helper(_y_,_kU_)}
    var Smyth_Sugar=[0,nat$0,listt$0];
    caml_register_global(241,Smyth_Sugar,"Smyth__Sugar");
    function make_indent(n){return caml_call2(Stdlib_string[1],2 * n | 0,32)}
    function left_paren(param)
     {switch(param)
       {case 0:return cst$27;case 1:return cst$28;default:return cst$29}}
    function right_paren(param)
     {switch(param)
       {case 0:return cst$30;case 1:return cst$31;default:return cst$32}}
    function collection(paren_type,state,print,comps)
     {var
       _kL_=caml_call1(print,[0,state[1] + 1 | 0,0,0]),
       comp_strings=caml_call2(Stdlib_list[17],_kL_,comps),
       _kM_=caml_call2(Stdlib_list[17],caml_ml_string_length,comp_strings),
       inside_len=caml_call1(List2[23],_kM_);
      function _kN_(s){return caml_call2(Stdlib_string[22],s,10)}
      var
       contains_newline=caml_call2(Stdlib_list[30],_kN_,comp_strings),
       switch$0=0;
      if(! contains_newline && ! (30 < inside_len))
       {var
         right$1=right_paren(paren_type),
         left$0=left_paren(paren_type),
         right$0=right$1,
         sep$1=sep,
         left=left$0;
        switch$0 = 1}
      if(! switch$0)
       var
        indent=make_indent(state[1]),
        _kO_=right_paren(paren_type),
        _kP_=caml_call2(Stdlib[28],indent,_kO_),
        right=caml_call2(Stdlib[28],cst$33,_kP_),
        _kQ_=caml_call2(Stdlib[28],indent,cst$34),
        sep$0=caml_call2(Stdlib[28],cst$35,_kQ_),
        _kR_=left_paren(paren_type),
        right$0=right,
        sep$1=sep$0,
        left=caml_call2(Stdlib[28],_kR_,cst$36);
      var
       _kS_=caml_call2(Stdlib_string[7],sep$1,comp_strings),
       _kT_=caml_call2(Stdlib[28],_kS_,right$0);
      return caml_call2(Stdlib[28],left,_kT_)}
    function wrapped_poly(s)
     {var _kK_=caml_call2(Stdlib[28],s,cst$37);
      return caml_call2(Stdlib[28],cst$38,_kK_)}
    function application(state,print_head,head,print_arg,arg)
     {var
       head_string=caml_call2(print_head,[0,state[1],0,1],head),
       arg_string=caml_call2(print_arg,[0,state[1] + 1 | 0,1,1],arg);
      if(caml_call2(Stdlib_string[22],arg_string,10))
       var
        _kH_=make_indent(state[1] + 1 | 0),
        sep=caml_call2(Stdlib[28],cst$39,_kH_);
      else
       var sep=cst$42;
      var
       _kI_=caml_call2(Stdlib[28],sep,arg_string),
       inner=caml_call2(Stdlib[28],head_string,_kI_);
      if(state[2])
       {var _kJ_=caml_call2(Stdlib[28],inner,cst$40);
        return caml_call2(Stdlib[28],cst$41,_kJ_)}
      return inner}
    function pat(state,param)
     {if(typeof param === "number")
       return cst$43;
      else
       {if(0 === param[0]){var name=param[1];return name}
        var comps=param[1];
        return collection(0,state,pat,comps)}}
    function pat$0(_kG_){return pat(_z_,_kG_)}
    function typ(state,param)
     {switch(param[0])
       {case 0:
         var
          output=param[2],
          input=param[1],
          _kv_=typ([0,state[1],0,0],output),
          _kw_=caml_call2(Stdlib[28],cst$44,_kv_),
          _kx_=typ([0,state[1],0,1],input),
          inner=caml_call2(Stdlib[28],_kx_,_kw_);
         if(state[3])
          {var _ky_=caml_call2(Stdlib[28],inner,cst$45);
           return caml_call2(Stdlib[28],cst$46,_ky_)}
         return inner;
        case 1:var comps=param[1];return collection(0,state,typ,comps);
        case 2:
         var type_args=param[2],name=param[1];
         if(0 === type_args)
          var type_args_string=cst$47;
         else
          var
           _kz_=function(_kF_){return typ(state,_kF_)},
           _kA_=caml_call2(Stdlib_list[17],_kz_,type_args),
           _kB_=caml_call2(Stdlib_string[7],cst$48,_kA_),
           type_args_string=caml_call2(Stdlib[28],cst$49,_kB_);
         return caml_call2(Stdlib[28],name,type_args_string);
        case 3:
         var
          t=param[2],
          x=param[1],
          _kC_=typ(state,t),
          _kD_=caml_call2(Stdlib[28],cst$50,_kC_),
          _kE_=caml_call2(Stdlib[28],x,_kD_);
         return caml_call2(Stdlib[28],cst_forall,_kE_);
        default:var x$0=param[1];return x$0}}
    function typ$0(_ku_){return typ(_A_,_ku_)}
    function exp$0(state,exp)
     {var exp$1=exp;
      for(;;)
       {var match=nat$0(exp$1);
        if(match)
         var n=match[1],match$1=[0,caml_call1(Stdlib[33],n)];
        else
         {var match$0=listt$0(exp$1);
          if(match$0)
           {var _jP_=match$0[1],_jQ_=_jP_[1];
            if(_jP_[2])
             var
              type_args=_jP_[2],
              _jR_=collection(2,state,typ,type_args),
              _jS_=collection(1,state,exp$0,_jQ_),
              match$1=[0,caml_call2(Stdlib[28],_jS_,_jR_)];
            else
             var match$1=[0,collection(1,state,exp$0,_jQ_)]}
          else
           var match$1=0}
        if(match$1){var sugar=match$1[1];return sugar}
        switch(exp$1[0])
         {case 0:
           var _jT_=exp$1[2],_jU_=exp$1[1];
           if(0 === _jT_[0])
            {var
              body=exp$1[3],
              param_pat=_jT_[1],
              _jV_=exp$0([0,state[1],0,0],body),
              _jW_=caml_call2(Stdlib[28],cst$51,_jV_),
              _jX_=pat([0,state[1],1,1],param_pat),
              _jY_=caml_call2(Stdlib[28],_jX_,_jW_),
              lambda=caml_call2(Stdlib[28],cst$52,_jY_);
             if(_jU_)
              var
               rec_name=_jU_[1],
               _jZ_=caml_call2(Stdlib[28],cst_in,rec_name),
               _j0_=caml_call2(Stdlib[28],lambda,_jZ_),
               _j1_=caml_call2(Stdlib[28],cst$53,_j0_),
               _j2_=caml_call2(Stdlib[28],rec_name,_j1_),
               inner=caml_call2(Stdlib[28],cst_let,_j2_);
             else
              var inner=lambda;
             if(state[3])
              {var _j3_=caml_call2(Stdlib[28],inner,cst$54);
               return caml_call2(Stdlib[28],cst$55,_j3_)}
             return inner}
           var
            body$0=exp$1[3],
            x=_jT_[1],
            exp$2=[0,_jU_,[0,[0,wrapped_poly(x)]],body$0],
            exp$1=exp$2;
           continue;
          case 1:
           var _j4_=exp$1[3],_j5_=exp$1[2];
           if(0 === _j4_[0])
            {var arg=_j4_[1];return application(state,exp$0,_j5_,exp$0,arg)}
           var arg$0=_j4_[1];
           return application
                   (state,
                    exp$0,
                    _j5_,
                    function(state,s){return wrapped_poly(typ(state,s))},
                    arg$0);
          case 2:var name=exp$1[1];return name;
          case 3:var comps=exp$1[1];return collection(0,state,exp$0,comps);
          case 4:
           var arg$1=exp$1[3],i=exp$1[2],n$0=exp$1[1],_j6_=0;
           return application
                   (state,
                    function(param,_kp_)
                     {var
                       _kq_=caml_call1(Stdlib[33],i),
                       _kr_=caml_call2(Stdlib[28],cst$56,_kq_),
                       _ks_=caml_call1(Stdlib[33],n$0),
                       _kt_=caml_call2(Stdlib[28],_ks_,_kr_);
                      return caml_call2(Stdlib[28],cst$57,_kt_)},
                    _j6_,
                    exp$0,
                    arg$1);
          case 5:
           var
            arg$2=exp$1[3],
            type_args$0=exp$1[2],
            ctor_name=exp$1[1],
            type_args_string=
             0 === type_args$0?cst$58:collection(2,state,typ,type_args$0),
            head_string=caml_call2(Stdlib[28],ctor_name,type_args_string);
           if(syntactically_equal$0(arg$2,_B_))return head_string;
           var _j7_=0;
           return application
                   (state,
                    function(param,_ko_){return head_string},
                    _j7_,
                    exp$0,
                    arg$2);
          case 6:
           var
            branches=exp$1[2],
            scrutinee=exp$1[1],
            indent1=make_indent(state[1] + 1 | 0),
            _j8_=make_indent(1),
            indent2=caml_call2(Stdlib[28],_j8_,indent1),
            print_branch=
             function(param)
              {var
                match=param[2],
                body=match[2],
                param_pat=match[1],
                ctor_name=param[1],
                _kh_=exp$0([0,state[1] + 2 | 0,0,0],body),
                _ki_=caml_call2(Stdlib[28],indent2,_kh_),
                _kj_=caml_call2(Stdlib[28],cst$59,_ki_),
                _kk_=pat([0,state[1] + 1 | 0,1,1],param_pat),
                _kl_=caml_call2(Stdlib[28],_kk_,_kj_),
                _km_=caml_call2(Stdlib[28],cst$60,_kl_),
                _kn_=caml_call2(Stdlib[28],ctor_name,_km_);
               return caml_call2(Stdlib[28],indent1,_kn_)},
            _j9_=caml_call2(Stdlib_list[17],print_branch,branches),
            _j__=caml_call2(Stdlib_string[7],cst$61,_j9_),
            _j$_=caml_call2(Stdlib[28],cst_of,_j__),
            _ka_=exp$0([0,state[1],0,0],scrutinee),
            _kb_=caml_call2(Stdlib[28],_ka_,_j$_),
            inner$0=caml_call2(Stdlib[28],cst_case,_kb_);
           if(state[3])
            {var _kc_=caml_call2(Stdlib[28],inner$0,cst$62);
             return caml_call2(Stdlib[28],cst$63,_kc_)}
           return inner$0;
          case 7:return cst$64;
          case 8:return cst_ASSERTION;
          default:
           var
            the_typ=exp$1[2],
            the_exp=exp$1[1],
            _kd_=typ([0,state[1],0,0],the_typ),
            _ke_=caml_call2(Stdlib[28],cst$65,_kd_),
            _kf_=exp$0([0,state[1],1,1],the_exp),
            inner$1=caml_call2(Stdlib[28],_kf_,_ke_);
           if(state[3])
            {var _kg_=caml_call2(Stdlib[28],inner$1,cst$66);
             return caml_call2(Stdlib[28],cst$67,_kg_)}
           return inner$1}}}
    function exp$1(_jO_){return exp$0(_C_,_jO_)}
    var Smyth_Pretty=[0,pat$0,typ$0,exp$1];
    caml_register_global(242,Smyth_Pretty,"Smyth__Pretty");
    var
     compare$1=Stdlib_string[33],
     include=caml_call1(Stdlib_map[1],[0,compare$1]),
     empty$2=include[1],
     add=include[4],
     singleton=include[6],
     union$0=include[9],
     fold=include[13],
     cardinal=include[18],
     find_opt=include[28];
    function from_assoc_many(xs)
     {function _jM_(dict,param)
       {var
         x=param[2],
         ctor_name=param[1],
         _jN_=caml_call2(singleton,ctor_name,[0,x,0]);
        return caml_call3
                (union$0,
                 function(param,k,v){return [0,caml_call2(Stdlib[37],k,v)]},
                 _jN_,
                 dict)}
      return caml_call3(Stdlib_list[22],_jM_,empty$2,xs)}
    function branch(max_scrutinee_size,delta,sigma,hf,param)
     {var
       worlds=param[2],
       match=param[1],
       goal_dec=match[3],
       goal_type=match[2],
       gamma=match[1];
      function _i0_(param)
       {function _i2_(param){var ex=param[2];return 0 !== ex?1:0}
        var
         filtered_worlds=caml_call2(Stdlib_list[38],_i2_,worlds),
         arg_name=fresh_ident(gamma,match_char);
        function _i3_(param)
         {var
           match=param[2],
           data_ctors=match[2],
           datatype_params=match[1],
           data_name=param[1];
          function _i5_(_jL_){return _jL_[1]}
          var ctor_names=caml_call2(Stdlib_list[17],_i5_,data_ctors);
          function _i6_(typ){return [0,arg_name,typ]}
          var
           _i7_=caml_call1(Pair2[3],_i6_),
           xs=caml_call2(Stdlib_list[17],_i7_,data_ctors);
          function _i4_(dict,param)
           {var x=param[2],ctor_name=param[1];
            return caml_call3(add,ctor_name,x,dict)}
          var ctor_info=caml_call3(Stdlib_list[22],_i4_,empty$2,xs);
          function _i8_(scrutinee)
           {function _ja_(datatype_args)
             {function _jj_(param){return [0,empty,0]}
              var
               _jk_=caml_call1(Pair2[3],_jj_),
               top_worlds=
                from_assoc_many(caml_call2(Stdlib_list[17],_jk_,data_ctors));
              function _jl_(param)
               {var ks=param[2],distributed_worldss=param[1];
                function _jE_(branches_goals)
                 {var _jJ_=caml_call1(Stdlib_list[49],branches_goals);
                  function _jK_(branches){return [6,scrutinee,branches]}
                  return [0,caml_call2(Pair2[2],_jK_,_jJ_),ks]}
                var
                 _jF_=
                  lift_option
                   (caml_call3
                     (fold,
                      function(ctor_name,distributed_worlds,acc_opt)
                       {function _jG_(acc)
                         {function _jH_(param)
                           {var
                             raw_arg_type=param[2],
                             arg_name=param[1],
                             arg_type=
                              substitute_many
                               (caml_call2(Stdlib_list[50],datatype_params,datatype_args),
                                raw_arg_type),
                             arg_bind_spec=sub_bind_spec(bind_spec(gamma,scrutinee)),
                             hole_name=gen_hole(0),
                             goal=
                              [0,
                               hole_name,
                               [0,
                                [0,
                                 add_type$0([0,arg_name,[0,arg_type,arg_bind_spec]],gamma),
                                 goal_type,
                                 0],
                                distributed_worlds]],
                             branch=[0,ctor_name,[0,[0,arg_name],[7,hole_name]]];
                            return [0,[0,branch,goal],acc]}
                          var _jI_=caml_call2(find_opt,ctor_name,ctor_info);
                          return caml_call2(Option2[11][1],_jI_,_jH_)}
                        return caml_call2(Option2[11][2],acc_opt,_jG_)},
                      distributed_worldss,
                      _D_));
                return caml_call2(Syntax[1],_jF_,_jE_)}
              function _jm_(param)
               {var ex=param[2],env=param[1],match=eval$2(env,scrutinee);
                if(0 === match[0])
                 {var _jz_=match[1],_jA_=_jz_[1];
                  if(2 === _jA_[0])
                   {if(! _jz_[2])
                     {var arg=_jA_[2],ctor_name=_jA_[1];
                      return caml_call1
                              (pure,
                               [0,
                                [0,ctor_name,[0,add_res([0,arg_name,arg],env),ex]],
                                empty$1])}}
                  else
                   if(! _jz_[2])
                    {var
                      _jB_=
                       function(ctor_name)
                        {function _jC_(ks)
                          {return [0,
                                   [0,
                                    ctor_name,
                                    [0,add_res([0,arg_name,[7,ctor_name,_jA_]],env),ex]],
                                   ks]}
                         var _jD_=uneval$0(delta,sigma,hf,_jA_,[1,ctor_name,0]);
                         return caml_call2(Syntax[1],_jD_,_jC_)};
                     return caml_call2(Syntax[2],ctor_names,_jB_)}}
                warn
                 (caml_call2
                   (Stdlib[28],cst_Scrutinee_did_not_evaluate,cst_result));
                return none}
              var
               _jn_=
                caml_call1
                 (one_of_each,
                  caml_call2(Stdlib_list[17],_jm_,filtered_worlds)),
               _jo_=caml_call2(map,Stdlib_list[49],_jn_),
               _jp_=caml_call2(map,caml_call1(Pair2[2],from_assoc_many),_jo_),
               _jq_=
                caml_call2
                 (filter,
                  function(param)
                   {var
                     ctor_map=param[1],
                     _jx_=1 === caml_call1(Stdlib_list[1],data_ctors)?1:0,
                     _jy_=_jx_ || (2 <= caml_call1(cardinal,ctor_map)?1:0);
                    return _jy_},
                  _jp_),
               _jr_=
                caml_call2
                 (union$0,function(param,_jw_,w){return [0,w]},top_worlds),
               _js_=caml_call2(map,caml_call1(Pair2[2],_jr_),_jq_),
               _jt_=
                and_then
                 (function(param)
                   {var kss=param[2],dw=param[1],_ju_=merge(kss);
                    function _jv_(ks){return [0,dw,ks]}
                    return lift_option(caml_call2(Option2[1],_jv_,_ju_))},
                  _js_);
              return caml_call2(Syntax[2],_jt_,_jl_)}
            var
             _jb_=infer$0(sigma,gamma,scrutinee),
             _jc_=caml_call1(Result2[7],_jb_);
            function _jd_(_ji_){return _ji_[1]}
            var _je_=caml_call2(Stdlib_option[7],_jd_,_jc_);
            function _jf_(param)
             {if(2 === param[0])
               {var datatype_args=param[2];return [0,datatype_args]}
              var _jh_=exp$1(scrutinee);
              warn(caml_call2(Stdlib[28],cst_Non_datatype_scrutinee_fro,_jh_));
              return 0}
            var _jg_=lift_option(caml_call2(Option2[4],_jf_,_je_));
            return caml_call2(Syntax[2],_jg_,_ja_)}
          var _i9_=0;
          function _i__(param){return wildcard}
          var
           _i$_=
            up_to_e
             (sigma,
              max_scrutinee_size,
              [0,
               gamma,
               [2,data_name,caml_call2(Stdlib_list[17],_i__,datatype_params)],
               _i9_]);
          return caml_call2(Syntax[2],_i$_,_i8_)}
        return caml_call2(Syntax[2],sigma,_i3_)}
      var _i1_=guard(caml_call1(Stdlib_option[10],goal_dec));
      return caml_call2(Syntax[2],_i1_,_i0_)}
    var Smyth_Branch=[0,branch];
    caml_register_global(243,Smyth_Branch,"Smyth__Branch");
    function refine(delta,sigma,param)
     {var
       worlds=param[2],
       match=param[1],
       goal_dec=match[3],
       goal_type=match[2],
       gamma=match[1];
      function _is_(param)
       {function _iv_(param){var ex=param[2];return 0 !== ex?1:0}
        var filtered_worlds=caml_call2(Stdlib_list[38],_iv_,worlds);
        switch(goal_type[0])
         {case 0:
           var
            tau2=goal_type[2],
            tau1=goal_type[1],
            hole_name=gen_hole(0),
            f_name=fresh_ident(gamma,function_char),
            x_name=fresh_ident(gamma,variable_char),
            _iw_=
             function(refined_worlds)
              {var
                new_goal=
                 [0,
                  hole_name,
                  [0,
                   [0,
                    concat_type$0
                     ([0,
                       [0,f_name,[0,[0,tau1,tau2],[0,f_name]]],
                       [0,[0,x_name,[0,tau1,[1,f_name]]],0]],
                      gamma),
                    tau2,
                    0],
                   refined_worlds]],
                exp=[0,[0,f_name],[0,[0,x_name]],[7,hole_name]];
               return [0,exp,[0,new_goal,0]]},
            _ix_=
             function(param)
              {var io_ex=param[2],env=param[1];
               if(typeof io_ex !== "number" && 2 === io_ex[0])
                {var ex=io_ex[2],v=io_ex[1];
                 return [0,
                         [0,
                          concat_res
                           ([0,
                             [0,x_name,from_value(v)],
                             [0,
                              [0,f_name,[0,env,[0,f_name],[0,[0,x_name]],[7,hole_name]]],
                              0]],
                            env),
                          ex]]}
               return 0},
            _iy_=caml_call2(Stdlib_list[17],_ix_,filtered_worlds),
            _iz_=caml_call1(Option2[6],_iy_);
           return caml_call2(Option2[11][1],_iz_,_iw_);
          case 1:
           var
            taus=goal_type[1],
            _iA_=
             function(refined_worldss)
              {var _iX_=caml_call1(Stdlib_list[1],taus);
               if(caml_call1(Stdlib_list[1],refined_worldss) !== _iX_)
                return 0;
               function _iY_(tau,refined_worlds)
                {return [0,gen_hole(0),[0,[0,gamma,tau,0],refined_worlds]]}
               var
                new_goals=
                 caml_call3(Stdlib_list[25],_iY_,taus,refined_worldss);
               function _iZ_(param)
                {var hole_name=param[1];return [7,hole_name]}
               var exp=[3,caml_call2(Stdlib_list[17],_iZ_,new_goals)];
               return [0,[0,exp,new_goals]]},
            _iB_=
             function(param)
              {var tuple_ex=param[2],env=param[1];
               if(typeof tuple_ex !== "number" && 0 === tuple_ex[0])
                {var exs=tuple_ex[1],_iW_=function(ex){return [0,env,ex]};
                 return [0,caml_call2(Stdlib_list[17],_iW_,exs)]}
               return 0},
            _iC_=caml_call2(Stdlib_list[17],_iB_,filtered_worlds),
            _iD_=caml_call1(Option2[6],_iC_),
            _iE_=caml_call2(Option2[1],List2[18],_iD_);
           return caml_call2(Option2[11][2],_iE_,_iA_);
          case 2:
           var
            datatype_args=goal_type[2],
            datatype_name=goal_type[1],
            _iF_=
             function(param)
              {var datatype_ctors=param[2],datatype_params=param[1];
               function _iH_(param)
                {var refined_worlds=param[2],ctor_name=param[1];
                 function _iQ_(arg_type)
                  {var
                    hole_name=gen_hole(0),
                    new_goal=
                     [0,hole_name,[0,[0,gamma,arg_type,0],refined_worlds]],
                    exp=[5,ctor_name,datatype_args,[7,hole_name]];
                   return [0,exp,[0,new_goal,0]]}
                 var
                  _iR_=caml_call2(Stdlib_list[42],ctor_name,datatype_ctors),
                  _iS_=
                   caml_call2(Stdlib_list[50],datatype_params,datatype_args);
                 function _iT_(_iV_){return substitute_many(_iS_,_iV_)}
                 var _iU_=caml_call2(Stdlib_option[7],_iT_,_iR_);
                 return caml_call2(Option2[11][1],_iU_,_iQ_)}
               function _iI_(param)
                {var ctor_ex=param[2],env=param[1];
                 if(typeof ctor_ex !== "number" && 1 === ctor_ex[0])
                  {var arg_ex=ctor_ex[2],ctor_name=ctor_ex[1];
                   return [0,[0,ctor_name,[0,env,arg_ex]]]}
                 return 0}
               var
                _iJ_=caml_call2(Stdlib_list[17],_iI_,filtered_worlds),
                _iK_=caml_call1(Option2[6],_iJ_),
                _iL_=Option2[8],
                _iM_=caml_call1(Pair2[2],List2[19]),
                _iN_=caml_call2(Pervasives2[3],Stdlib_list[49],_iM_),
                _iO_=caml_call2(Pervasives2[3],_iN_,_iL_),
                _iP_=caml_call2(Option2[4],_iO_,_iK_);
               return caml_call2(Option2[11][2],_iP_,_iH_)},
            _iG_=caml_call2(Stdlib_list[42],datatype_name,sigma);
           return caml_call2(Option2[11][2],_iG_,_iF_);
          case 3:return 0;
          default:return 0}}
      var
       _it_=caml_call1(Stdlib_option[10],goal_dec),
       _iu_=caml_call1(Option2[5],_it_);
      return caml_call2(Option2[11][2],_iu_,_is_)}
    var Smyth_Refine=[0,refine];
    caml_register_global(244,Smyth_Refine,"Smyth__Refine");
    function refine_or_branch(params,delta,sigma,hf,param)
     {var synthesis_goal=param[2],hole_name=param[1];
      function _id_(param)
       {var
         _ik_=param[2],
         choice_constraints=_ik_[2],
         match=_ik_[1],
         subgoals=match[2],
         exp=match[1],
         additional_depth=param[1];
        function _il_(param)
         {var
           parent_depth=param[4],
           match_depth=parent_depth + additional_depth | 0;
          function _in_(param)
           {var
             match=param[1],
             goal_dec=match[3],
             goal_type=match[2],
             gamma=match[1];
            return [0,gamma,goal_type,goal_dec,match_depth]}
          var
           _io_=caml_call1(Pair2[3],_in_),
           delta=caml_call2(Stdlib_list[17],_io_,subgoals),
           solved_constraints=caml_call2(Hole_map[6],hole_name,exp);
          function _ip_(param)
           {var match=param[2],worlds=match[2],hole_name=param[1];
            return caml_call2(Hole_map[6],hole_name,worlds)}
          var
           unsolved_constraints=
            merge_unsolved(caml_call2(Stdlib_list[17],_ip_,subgoals));
          function _iq_(final_constraints){return [0,final_constraints,delta]}
          var
           _ir_=
            lift_option
             (merge
               ([0,
                 [0,solved_constraints,unsolved_constraints],
                 [0,choice_constraints,0]]));
          return caml_call2(Syntax[1],_ir_,_iq_)}
        var _im_=lift_option(caml_call2(Stdlib_list[42],hole_name,delta));
        return caml_call2(Syntax[2],_im_,_il_)}
      var
       _ie_=0,
       _if_=lift_option(refine(delta,sigma,synthesis_goal)),
       _ig_=
        [0,caml_call2(map,function(x){return [0,0,[0,x,empty$1]]},_if_),_ie_];
      if(0 < params[2])
       var
        _ih_=branch(params[1],delta,sigma,hf,synthesis_goal),
        _ii_=caml_call2(map,caml_call1(Pair2[1],1),_ih_);
      else
       var _ii_=none;
      var _ij_=caml_call1(union,[0,_ii_,_ig_]);
      return caml_call2(Syntax[2],_ij_,_id_)}
    function guess_and_check(params,delta,sigma,hf,param)
     {var
       match=param[2],
       worlds=match[2],
       gen_goal=match[1],
       goal_type=gen_goal[2],
       hole_name=param[1];
      function _h2_(param)
       {function _h4_(param)
         {function _h6_(exp)
           {var binding=caml_call2(Hole_map[6],hole_name,exp);
            function _h9_(extended_hf)
             {function _h$_(uneval_constraints)
               {function _ib_(merged_constraints)
                 {return [0,merged_constraints,0]}
                var
                 _ic_=
                  lift_option
                   (merge
                     ([0,from_hole_filling(binding),[0,uneval_constraints,0]]));
                return caml_call2(Syntax[1],_ic_,_ib_)}
              var _ia_=check$4(delta,sigma,extended_hf,exp,worlds);
              return caml_call2(Syntax[2],_ia_,_h$_)}
            var _h__=lift_option(merge_solved([0,binding,[0,hf,0]]));
            return caml_call2(Syntax[2],_h__,_h9_)}
          function _h7_(param){return up_to_e(sigma,params[3],gen_goal)}
          var _h8_=caml_call2(_c_[2],0,_h7_);
          return caml_call2(Syntax[2],_h8_,_h6_)}
        var _h5_=guard(is_base(goal_type));
        return caml_call2(Syntax[2],_h5_,_h4_)}
      var _h3_=guard(caml_call1(_c_[3],0));
      return caml_call2(Syntax[2],_h3_,_h2_)}
    function defer(params,delta,sigma,hf,param)
     {var
       _h0_=param[2],
       worlds=_h0_[2],
       match=_h0_[1],
       goal_type=match[2],
       hole_name=param[1];
      if(! equal(goal_type,_E_) && 0 < caml_call1(Stdlib_list[1],worlds))
       {var _h1_=function(param){var ex=param[2];return 0 === ex?1:0};
        if(caml_call2(Stdlib_list[29],_h1_,worlds))
         return caml_call1
                 (pure,[0,solved_singleton(hole_name,[7,hole_name]),0])}
      return none}
    function fill(params,delta,sigma,hf,fill_goal)
     {var _hY_=[0,refine_or_branch,[0,guess_and_check,[0,defer,0]]];
      function _hZ_(rule)
       {return caml_call5(rule,params,delta,sigma,hf,fill_goal)}
      return caml_call1(union,caml_call2(Stdlib_list[17],_hZ_,_hY_))}
    var Smyth_Fill=[0,fill];
    caml_register_global(245,Smyth_Fill,"Smyth__Fill");
    function simplify_constraints(delta,sigma,k_prev)
     {var u_prev=k_prev[2],f_prev=k_prev[1];
      function _hP_(k_new)
       {function _hW_(k_merged)
         {return caml_equal(k_merged,k_prev)
                  ?caml_call1(pure,k_merged)
                  :simplify_constraints(delta,sigma,k_merged)}
        var
         _hX_=
          lift_option(merge([0,from_hole_filling(f_prev),[0,k_new,0]]));
        return caml_call2(Syntax[2],_hX_,_hW_)}
      var _hQ_=caml_call1(Hole_map[19],u_prev);
      function _hR_(param)
       {var
         worlds=param[2],
         hole_name=param[1],
         match=caml_call2(Hole_map[28],hole_name,f_prev);
        if(match)
         {var exp=match[1];return check$4(delta,sigma,f_prev,exp,worlds)}
        return caml_call1(pure,unsolved_singleton(hole_name,worlds))}
      var
       _hS_=
        caml_call1
         (collapse_option,
          caml_call2
           (map,
            merge,
            caml_call1(one_of_each,caml_call2(Stdlib_list[17],_hR_,_hQ_)))),
       _hT_=caml_call1(Stdlib_list[54],caml_compare),
       _hU_=caml_call1(Hole_map[33],_hT_),
       _hV_=caml_call2(map,caml_call1(Pair2[3],_hU_),_hS_);
      return caml_call2(Syntax[2],_hV_,_hP_)}
    var current_solution_count=[0,0];
    function iter_solve(params,delta,sigma,param)
     {var us_all=param[2],hf=param[1];
      function _hD_(param)
       {var match=delete_min(us_all);
        if(match)
         {var
           _hG_=match[1],
           us=_hG_[2],
           match$0=_hG_[1],
           worlds=match$0[2],
           hole_name=match$0[1],
           _hH_=
            function(param)
             {var
               match_depth=param[4],
               dec=param[3],
               typ=param[2],
               gamma=param[1];
              function _hJ_(param)
               {var
                 delta_new=param[2],
                 k_new=param[1],
                 delta_merged=caml_call2(Stdlib[37],delta_new,delta);
                function _hL_(k_merged)
                 {return iter_solve(params,delta_merged,sigma,k_merged)}
                var
                 _hM_=lift_option(merge([0,[0,hf,us],[0,k_new,0]])),
                 _hN_=
                  and_then
                   (function(_hO_)
                     {return simplify_constraints(delta_merged,sigma,_hO_)},
                    _hM_);
                return caml_call2(Syntax[2],_hN_,_hL_)}
              var
               _hK_=
                fill
                 ([0,params[1],params[2] - match_depth | 0,params[3]],
                  delta,
                  sigma,
                  hf,
                  [0,hole_name,[0,[0,gamma,typ,dec],worlds]]);
              return caml_call2(Syntax[2],_hK_,_hJ_)},
           _hI_=lift_option(caml_call2(Stdlib_list[42],hole_name,delta));
          return caml_call2(Syntax[2],_hI_,_hH_)}
        current_solution_count[1] = current_solution_count[1] + 1 | 0;
        return caml_call1(pure,[0,hf,delta])}
      var _hC_=max_solution_count[1];
      if(_hC_)
       var n=_hC_[1],_hE_=current_solution_count[1] < n?1:0;
      else
       var _hE_=1;
      var _hF_=guard(_hE_);
      return caml_call2(Syntax[2],_hF_,_hD_)}
    function solve_any(delta,sigma,constraints_nd)
     {function _hA_(s)
       {function _hB_(x){return [0,s,x]}
        return caml_call2(Stdlib_list[17],_hB_,constraints_nd)}
      var problems=caml_call2(List2[4],_hA_,all_stages),problems$0=problems;
      for(;;)
       {if(problems$0)
         {var
           rest_problems=problems$0[2],
           match=problems$0[1],
           constraints=match[2],
           stage=match[1];
          switch(stage)
           {case 0:var match$0=_F_;break;
            case 1:var match$0=_G_;break;
            case 2:var match$0=_H_;break;
            case 3:var match$0=_I_;break;
            case 4:var match$0=_J_;break;
            case 5:var match$0=_K_;break;
            case 6:var match$0=_L_;break;
            case 7:var match$0=_M_;break;
            default:var match$0=_N_}
          var
           max_term_size=match$0[3],
           max_match_depth=match$0[2],
           max_scrutinee_size=match$0[1],
           params=[0,max_scrutinee_size,max_match_depth,max_term_size];
          current_solution_count[1] = 0;
          caml_call1(_c_[1],0);
          var solution_nd=iter_solve(params,delta,sigma,constraints);
          if(is_empty(solution_nd)){var problems$0=rest_problems;continue}
          return solution_nd}
        return none}}
    var Smyth_Solve=[0,solve_any];
    caml_register_global(246,Smyth_Solve,"Smyth__Solve");
    function exp_rank(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var body=param$0[3];return 1 + exp_rank(body) | 0;
         case 1:
          var _hs_=param$0[3],_ht_=param$0[2];
          if(0 === _hs_[0])
           {var e2=_hs_[1],_hu_=exp_rank(e2);
            return (1 + exp_rank(_ht_) | 0) + _hu_ | 0}
          return 1 + exp_rank(_ht_) | 0;
         case 2:return 1;
         case 3:
          var components=param$0[1];
          if(0 === components)return 0;
          var _hv_=caml_call2(Stdlib_list[17],exp_rank,components);
          return 1 + caml_call1(List2[23],_hv_) | 0;
         case 4:var param$1=param$0[3],param$0=param$1;continue;
         case 5:var arg=param$0[3];return 1 + exp_rank(arg) | 0;
         case 6:
          var
           branches=param$0[2],
           scrutinee=param$0[1],
           _hw_=
            function(param){var match=param[2],e=match[2];return exp_rank(e)},
           _hx_=caml_call2(Stdlib_list[17],_hw_,branches),
           _hy_=caml_call1(List2[23],_hx_);
          return (1 + exp_rank(scrutinee) | 0) + _hy_ | 0;
         case 7:return 1;
         case 8:
          var e2$0=param$0[2],e1=param$0[1],_hz_=exp_rank(e2$0);
          return (1 + exp_rank(e1) | 0) + _hz_ | 0;
         default:var param$2=param$0[1],param$0=param$2;continue}}
    var _O_=List2[23];
    function _P_(param){var e=param[2];return exp_rank(e)}
    var
     _Q_=caml_call1(Stdlib_list[17],_P_),
     rank=caml_call2(Pervasives2[3],_Q_,_O_);
    function _R_(hf1,hf2)
     {var _hq_=caml_call1(rank,hf2),_hr_=caml_call1(rank,hf1);
      return caml_call2(Stdlib_int[9],_hr_,_hq_)}
    var
     sort=caml_call1(Stdlib_list[51],_R_),
     _S_=caml_call1(Stdlib_list[30],has_special_recursion);
    function _T_(_hp_){return _hp_[2]}
    var
     _U_=caml_call1(Stdlib_list[17],_T_),
     _V_=caml_call2(Pervasives2[3],_U_,_S_),
     first_recursive=caml_call1(Stdlib_list[36],_V_),
     Smyth_Rank=[0,rank,sort,first_recursive];
    caml_register_global(247,Smyth_Rank,"Smyth__Rank");
    function check_indent(indent_strictness)
     {function check_ok(col,indent)
       {return indent_strictness
                ?runtime.caml_greaterequal(col,indent)
                :runtime.caml_greaterthan(col,indent)}
      function _hj_(ok)
       {return ok?caml_call1(Bark[12],0):caml_call1(Bark[17],22)}
      var
       _hk_=Bark[35],
       _hl_=Bark[38],
       _hm_=caml_call1(Bark[12],check_ok),
       _hn_=caml_call2(Bark[13],_hm_,_hl_),
       _ho_=caml_call2(Bark[13],_hn_,_hk_);
      return caml_call2(Bark[41][4],_ho_,_hj_)}
    function with_current_indent(p)
     {function _hi_(col){return caml_call2(Bark[34],col,p)}
      return caml_call2(Bark[41][4],Bark[38],_hi_)}
    function if_progress(p,offset)
     {function _hc_(new_offset)
       {return caml_call2(Stdlib_int[8],offset,new_offset)?_W_:[0,new_offset]}
      var _hd_=Bark[39];
      function _he_(n){return n}
      var
       _hf_=caml_call1(Bark[12],_he_),
       _hg_=caml_call2(Bark[14],_hf_,p),
       _hh_=caml_call2(Bark[13],_hg_,_hd_);
      return caml_call2(Bark[41][1],_hh_,_hc_)}
    var
     _X_=[0,Bark[25],0],
     _Y_=[0,caml_call3(Bark[27],multi_comment_start,multi_comment_end,1),_X_],
     _Z_=[0,caml_call1(Bark[26],line_comment_start),_Y_],
     ___=caml_call1(Bark[18],_Z_);
    function _$_(_hb_){return if_progress(___,_hb_)}
    var
     any_spaces=caml_call2(Bark[24],0,_$_),
     _aa_=caml_call1(Stdlib_char[8],32),
     _ab_=[0,caml_call1(Bark[30],_aa_),0],
     _ac_=[0,caml_call1(Bark[26],line_comment_start),_ab_],
     _ad_=caml_call1(Bark[18],_ac_);
    function _ae_(_ha_){return if_progress(_ad_,_ha_)}
    var
     single_line_spaces=caml_call2(Bark[24],0,_ae_),
     _af_=check_indent(0),
     _ag_=caml_call1(Bark[12],0),
     _ah_=caml_call2(Bark[14],_ag_,any_spaces),
     sspaces=caml_call2(Bark[14],_ah_,_af_),
     _ai_=check_indent(1),
     _aj_=caml_call1(Bark[12],0),
     _ak_=caml_call2(Bark[14],_aj_,any_spaces),
     lspaces=caml_call2(Bark[14],_ak_,_ai_);
    function tuple(single,multiple,item)
     {var
       _g__=
        caml_call6(Bark[23],left_paren$0,comma,right_paren$0,lspaces,item,0);
      function _g$_(inners)
       {if(inners && ! inners[2])
         {var inner=inners[1];return caml_call1(single,inner)}
        return caml_call1(multiple,inners)}
      return caml_call2(Bark[19],_g$_,_g__)}
    function listt$1(item)
     {return caml_call6
              (Bark[23],left_bracket,comma,right_bracket,lspaces,item,0)}
    function wrapped_poly$0(item)
     {return caml_call6(Bark[23],langle,comma,rangle,lspaces,item,0)}
    function chainr1(chain_context,p,op)
     {function rest(acc)
       {var _g4_=[0,caml_call1(Bark[12],acc),0];
        function _g5_(combiner)
         {var _g8_=caml_call2(Bark[16],rest,p),_g9_=caml_call1(combiner,acc);
          return caml_call2(Bark[19],_g9_,_g8_)}
        var
         _g6_=caml_call2(Bark[41][4],op,_g5_),
         _g7_=[0,caml_call2(Bark[2],chain_context,_g6_),_g4_];
        return caml_call1(Bark[18],_g7_)}
      return caml_call2(Bark[16],rest,p)}
    function ignore_with(x,p)
     {function _g3_(param){return x}return caml_call2(Bark[19],_g3_,p)}
    function inner_char(c)
     {var _gZ_=caml_call1(Char2[2],c);
      if(_gZ_)
       var _g0_=_gZ_;
      else
       {var _g1_=caml_call1(Char2[1],c);
        if(_g1_)
         var _g0_=_g1_;
        else
         {var _g2_=caml_call1(Char2[3],c);
          if(! _g2_)return caml_call2(Stdlib_char[8],c,95);
          var _g0_=_g2_}}
      return _g0_}
    var
     reserved_words=caml_call1(Bark[9][36],_au_),
     constructor_name=caml_call4(Bark[10],Char2[1],inner_char,Bark[9][1],30),
     variable_name=caml_call4(Bark[10],Char2[2],inner_char,reserved_words,31);
    function typ$1(param)
     {function monotype(param)
       {function ground_typ(param)
         {var _gA_=0;
          function _gB_(name){return [4,name]}
          var
           _gC_=caml_call2(Bark[19],_gB_,variable_name),
           _gD_=[0,caml_call2(Bark[2],5,_gC_),_gA_];
          function _gE_(rev_args)
           {var
             _gU_=[1,caml_call1(Stdlib_list[9],rev_args)],
             _gV_=[0,caml_call1(Bark[12],_gU_),0],
             _gW_=caml_call1(Bark[15],ground_typ);
            function _gX_(a){return [0,[0,a,rev_args]]}
            var _gY_=[0,caml_call2(Bark[19],_gX_,_gW_),_gV_];
            return caml_call1(Bark[18],_gY_)}
          var _gF_=caml_call2(Bark[24],0,_gE_);
          function _gG_(name,args){return [2,name,args]}
          var
           _gH_=caml_call1(Bark[12],_gG_),
           _gI_=caml_call2(Bark[13],_gH_,constructor_name),
           _gJ_=caml_call2(Bark[14],_gI_,single_line_spaces),
           _gK_=caml_call2(Bark[13],_gJ_,_gF_),
           _gL_=[0,caml_call2(Bark[2],2,_gK_),_gD_],
           _gM_=caml_call1(Bark[15],typ$1);
          function _gN_(ts){return [1,ts]}
          var
           _gO_=tuple(function(t){return t},_gN_,_gM_),
           _gP_=[0,caml_call2(Bark[2],1,_gO_),_gL_],
           _gQ_=caml_call1(Bark[18],_gP_);
          function _gR_(t){return t}
          var
           _gS_=caml_call1(Bark[12],_gR_),
           _gT_=caml_call2(Bark[13],_gS_,_gQ_);
          return caml_call2(Bark[14],_gT_,single_line_spaces)}
        var
         _gv_=caml_call1(Bark[7],right_arrow),
         _gw_=caml_call1(Bark[12],0),
         _gx_=caml_call2(Bark[14],_gw_,_gv_),
         _gy_=caml_call2(Bark[14],_gx_,any_spaces),
         _gz_=
          ignore_with
           (function(domain,codomain){return [0,domain,codomain]},_gy_);
        return chainr1(3,caml_call1(Bark[15],ground_typ),_gz_)}
      function polytype(param)
       {var
         _gj_=caml_call1(Bark[15],typ$1),
         _gk_=caml_call1(Bark[7],dot),
         _gl_=caml_call1(Bark[8],forall_keyword);
        function _gm_(a,bound_type){return [3,a,bound_type]}
        var
         _gn_=caml_call1(Bark[12],_gm_),
         _go_=caml_call2(Bark[14],_gn_,_gl_),
         _gp_=caml_call2(Bark[14],_go_,sspaces),
         _gq_=caml_call2(Bark[13],_gp_,variable_name),
         _gr_=caml_call2(Bark[14],_gq_,sspaces),
         _gs_=caml_call2(Bark[14],_gr_,_gk_),
         _gt_=caml_call2(Bark[14],_gs_,sspaces),
         _gu_=caml_call2(Bark[13],_gt_,_gj_);
        return caml_call2(Bark[2],4,_gu_)}
      var
       _gh_=[0,caml_call1(Bark[15],monotype),0],
       _gi_=[0,caml_call1(Bark[15],polytype),_gh_];
      return caml_call1(Bark[18],_gi_)}
    var _av_=caml_call1(Bark[15],typ$1),item=caml_call2(Bark[2],0,_av_);
    function pat$1(param)
     {var _f9_=0;
      function _f__(name){return [0,name]}
      var
       _f$_=caml_call2(Bark[19],_f__,variable_name),
       _ga_=[0,caml_call2(Bark[2],10,_f$_),_f9_],
       _gb_=ignore_with(0,caml_call1(Bark[7],wildcard$0)),
       _gc_=[0,caml_call2(Bark[2],11,_gb_),_ga_],
       _gd_=caml_call1(Bark[15],pat$1);
      function _ge_(ps){return [1,ps]}
      var
       _gf_=tuple(function(p){return p},_ge_,_gd_),
       _gg_=[0,caml_call2(Bark[2],9,_gf_),_gc_];
      return caml_call1(Bark[18],_gg_)}
    var _aw_=caml_call1(Bark[15],pat$1),pat$2=caml_call2(Bark[2],8,_aw_);
    function _ax_(rev_params)
     {var
       _fT_=[1,caml_call1(Stdlib_list[9],rev_params)],
       _fU_=[0,caml_call1(Bark[12],_fT_),0],
       _fV_=0;
      function _fW_(p){return [0,[0,p],0]}
      var
       _fX_=[0,caml_call2(Bark[19],_fW_,pat$2),_fV_],
       _fY_=wrapped_poly$0(variable_name);
      function _fZ_(taus)
       {var _f7_=caml_call1(Stdlib_list[9],taus);
        function _f8_(tau){return [1,tau]}
        return caml_call2(Stdlib_list[17],_f8_,_f7_)}
      var
       _f0_=caml_call2(Bark[19],_fZ_,_fY_),
       _f1_=[0,caml_call2(Bark[2],6,_f0_),_fX_],
       _f2_=caml_call1(Bark[18],_f1_);
      function _f3_(p){return [0,caml_call2(Stdlib[37],p,rev_params)]}
      var
       _f4_=caml_call1(Bark[12],_f3_),
       _f5_=caml_call2(Bark[13],_f4_,_f2_),
       _f6_=[0,caml_call2(Bark[14],_f5_,sspaces),_fU_];
      return caml_call1(Bark[18],_f6_)}
    var params=caml_call2(Bark[24],0,_ax_);
    function binding(param)
     {var _fK_=caml_call1(Bark[15],exp$2),_fL_=caml_call1(Bark[7],equals);
      function _fM_(name,ps,body){return [0,name,ps,body]}
      var
       _fN_=caml_call1(Bark[12],_fM_),
       _fO_=caml_call2(Bark[13],_fN_,variable_name),
       _fP_=caml_call2(Bark[14],_fO_,sspaces),
       _fQ_=caml_call2(Bark[13],_fP_,params),
       _fR_=caml_call2(Bark[14],_fQ_,_fL_),
       _fS_=caml_call2(Bark[14],_fR_,sspaces);
      return caml_call2(Bark[13],_fS_,_fK_)}
    function definition(param)
     {function _fx_(param)
       {var the_typ=param[2],name=param[1];
        function _fI_(param)
         {var body=param[3],pats=param[2],name$0=param[1];
          return caml_call2(Stdlib_string[34],name,name$0)
                  ?caml_call1(Bark[12],[0,the_typ,name,pats,body])
                  :caml_call1(Bark[17],[1,name,name$0])}
        var _fJ_=caml_call1(Bark[15],binding);
        return caml_call2(Bark[41][4],_fJ_,_fI_)}
      var
       _fy_=caml_call1(Bark[7],colon),
       _fz_=caml_call1(Bark[20],any_spaces),
       _fA_=caml_call1(Bark[20],variable_name),
       _fB_=caml_call1(Bark[12],Pair2[1]),
       _fC_=caml_call2(Bark[13],_fB_,_fA_),
       _fD_=caml_call2(Bark[14],_fC_,_fz_),
       _fE_=caml_call2(Bark[14],_fD_,_fy_),
       _fF_=caml_call2(Bark[14],_fE_,any_spaces),
       _fG_=caml_call2(Bark[13],_fF_,item),
       _fH_=caml_call2(Bark[14],_fG_,any_spaces);
      return caml_call2(Bark[41][4],_fH_,_fx_)}
    function ground_exp(param)
     {function _d2_(rev_branches)
       {var
         _fh_=[1,caml_call1(Stdlib_list[9],rev_branches)],
         _fi_=[0,caml_call1(Bark[12],_fh_),0],
         _fj_=caml_call1(Bark[15],exp$2),
         _fk_=caml_call1(Bark[7],right_arrow),
         _fl_=check_indent(0);
        function _fm_(c,x,body){return [0,[0,[0,c,[0,x,body]],rev_branches]]}
        var
         _fn_=caml_call1(Bark[12],_fm_),
         _fo_=caml_call2(Bark[14],_fn_,_fl_),
         _fp_=caml_call2(Bark[13],_fo_,constructor_name),
         _fq_=caml_call2(Bark[14],_fp_,sspaces),
         _fr_=caml_call2(Bark[13],_fq_,pat$2),
         _fs_=caml_call2(Bark[14],_fr_,sspaces),
         _ft_=caml_call2(Bark[14],_fs_,_fk_),
         _fu_=caml_call2(Bark[14],_ft_,sspaces),
         _fv_=caml_call2(Bark[13],_fu_,_fj_),
         _fw_=[0,caml_call2(Bark[14],_fv_,any_spaces),_fi_];
        return caml_call1(Bark[18],_fw_)}
      var
       branches=caml_call2(Bark[24],0,_d2_),
       _d3_=caml_call1(Bark[5],29),
       _d4_=caml_call2(Bark[19],nat,_d3_),
       _d5_=[0,caml_call2(Bark[2],23,_d4_),0],
       _d6_=[0,caml_call1(Bark[12],0),0],
       _d7_=[0,wrapped_poly$0(item),_d6_],
       _d8_=caml_call1(Bark[18],_d7_),
       _d9_=listt$1(caml_call1(Bark[15],exp$2)),
       _d__=caml_call1(Bark[12],listt),
       _d$_=caml_call2(Bark[13],_d__,_d9_),
       _ea_=caml_call2(Bark[13],_d$_,_d8_),
       _eb_=[0,caml_call2(Bark[2],22,_ea_),_d5_],
       _ec_=caml_call1(Bark[15],exp$2),
       _ed_=caml_call1(Bark[7],right_arrow),
       _ee_=caml_call1(Bark[7],lambda),
       _ef_=caml_call1(Bark[12],func_params),
       _eg_=caml_call2(Bark[14],_ef_,_ee_),
       _eh_=caml_call2(Bark[14],_eg_,sspaces),
       _ei_=caml_call2(Bark[13],_eh_,params),
       _ej_=caml_call2(Bark[14],_ei_,_ed_),
       _ek_=caml_call2(Bark[14],_ej_,sspaces),
       _el_=caml_call2(Bark[13],_ek_,_ec_),
       _em_=[0,caml_call2(Bark[2],20,_el_),_eb_],
       _en_=[0,caml_call1(Bark[12],unused),0],
       _eo_=caml_call1(Bark[18],_en_),
       _ep_=caml_call1(Bark[7],hole);
      function _eq_(name){return [7,name]}
      var
       _er_=caml_call1(Bark[12],_eq_),
       _es_=caml_call2(Bark[14],_er_,_ep_),
       _et_=caml_call2(Bark[13],_es_,_eo_),
       _eu_=[0,caml_call2(Bark[2],19,_et_),_em_],
       _ev_=caml_call1(Bark[15],ground_exp),
       _ew_=caml_call1(Bark[5],35),
       _ex_=caml_call1(Bark[7],dot),
       _ey_=caml_call1(Bark[5],34),
       _ez_=caml_call1(Bark[7],pound);
      function _eA_(n,i,arg){return [4,n,i,arg]}
      var
       _eB_=caml_call1(Bark[12],_eA_),
       _eC_=caml_call2(Bark[14],_eB_,_ez_),
       _eD_=caml_call2(Bark[13],_eC_,_ey_),
       _eE_=caml_call2(Bark[14],_eD_,_ex_),
       _eF_=caml_call2(Bark[13],_eE_,_ew_),
       _eG_=caml_call2(Bark[14],_eF_,sspaces),
       _eH_=caml_call2(Bark[13],_eG_,_ev_),
       _eI_=[0,caml_call2(Bark[2],17,_eH_),_eu_],
       _eJ_=caml_call1(Bark[15],exp$2);
      function _eK_(es){return [3,es]}
      var
       _eL_=tuple(function(e){return e},_eK_,_eJ_),
       _eM_=[0,caml_call2(Bark[2],16,_eL_),_eI_],
       _eN_=[0,caml_call2(Bark[2],15,constructor_name),0],
       _eO_=[0,caml_call2(Bark[2],14,variable_name),_eN_],
       _eP_=caml_call1(Bark[18],_eO_);
      function _eQ_(name){return [2,name]}
      var
       _eR_=[0,caml_call2(Bark[19],_eQ_,_eP_),_eM_],
       _eS_=caml_call1(Bark[8],of_keyword),
       _eT_=caml_call1(Bark[15],exp$2),
       _eU_=caml_call1(Bark[8],case_keyword);
      function _eV_(scrutinee,branches){return [6,scrutinee,branches]}
      var
       _eW_=caml_call1(Bark[12],_eV_),
       _eX_=caml_call2(Bark[14],_eW_,_eU_),
       _eY_=caml_call2(Bark[14],_eX_,sspaces),
       _eZ_=caml_call2(Bark[13],_eY_,_eT_),
       _e0_=caml_call2(Bark[14],_eZ_,lspaces),
       _e1_=caml_call2(Bark[14],_e0_,_eS_),
       _e2_=caml_call2(Bark[14],_e1_,sspaces),
       _e3_=caml_call2(Bark[13],_e2_,branches),
       _e4_=[0,caml_call2(Bark[2],21,_e3_),_eR_],
       _e5_=caml_call1(Bark[15],exp$2),
       _e6_=caml_call1(Bark[8],in_keyword),
       _e7_=caml_call1(Bark[15],definition),
       _e8_=caml_call1(Bark[8],let_keyword);
      function _e9_(param,rest)
       {var body=param[4],ps=param[3],name=param[2],typ=param[1];
        return lett(typ,name,caml_call2(func_params,ps,body),rest)}
      var
       _e__=caml_call1(Bark[12],_e9_),
       _e$_=caml_call2(Bark[14],_e__,_e8_),
       _fa_=caml_call2(Bark[14],_e$_,sspaces),
       _fb_=caml_call2(Bark[13],_fa_,_e7_),
       _fc_=caml_call2(Bark[14],_fb_,lspaces),
       _fd_=caml_call2(Bark[14],_fc_,_e6_),
       _fe_=caml_call2(Bark[14],_fd_,lspaces),
       _ff_=caml_call2(Bark[13],_fe_,_e5_),
       _fg_=[0,caml_call2(Bark[2],13,_ff_),_e4_];
      return caml_call1(Bark[18],_fg_)}
    function ground_args(param)
     {var _dT_=0,_dU_=caml_call1(Bark[15],ground_exp);
      function _dV_(e){return [0,[0,e],0]}
      var
       _dW_=[0,caml_call2(Bark[19],_dV_,_dU_),_dT_],
       _dX_=wrapped_poly$0(item);
      function _dY_(tau){return [1,tau]}
      var
       _dZ_=caml_call1(Stdlib_list[17],_dY_),
       _d0_=caml_call2(Bark[19],_dZ_,_dX_),
       _d1_=[0,caml_call2(Bark[2],7,_d0_),_dW_];
      return caml_call1(Bark[18],_d1_)}
    function exp$2(param)
     {var
       op=ignore_with(app,caml_call1(Bark[20],sspaces)),
       p_arg=with_current_indent(caml_call1(Bark[15],ground_args)),
       p_head=with_current_indent(caml_call1(Bark[15],ground_exp)),
       chain_context=18;
      function next(acc)
       {var _dN_=[0,caml_call1(Bark[12],acc),0];
        function _dO_(combiner)
         {var
           _dR_=caml_call1(combiner,acc),
           _dS_=caml_call2(Pervasives2[3],_dR_,next);
          return caml_call2(Bark[16],_dS_,p_arg)}
        var
         _dP_=caml_call2(Bark[41][4],op,_dO_),
         _dQ_=[0,caml_call2(Bark[2],chain_context,_dP_),_dN_];
        return caml_call1(Bark[18],_dQ_)}
      return with_current_indent(caml_call2(Bark[16],next,p_head))}
    var
     _ay_=caml_call1(Bark[15],ground_exp),
     ground_exp$0=caml_call2(Bark[2],12,_ay_),
     _az_=caml_call1(Bark[15],exp$2),
     p=caml_call2(Bark[2],12,_az_),
     definition$0=caml_call1(Bark[15],definition),
     _aA_=0;
    function _aB_(e){return [0,e]}
    var
     _aC_=[0,caml_call2(Bark[19],_aB_,p),_aA_],
     _al_=caml_call1(Bark[7],rangle),
     _am_=caml_call1(Bark[7],langle);
    function _an_(x){return x}
    var
     _ao_=caml_call1(Bark[12],_an_),
     _ap_=caml_call2(Bark[14],_ao_,_am_),
     _aq_=caml_call2(Bark[14],_ap_,sspaces),
     _ar_=caml_call2(Bark[13],_aq_,item),
     _as_=caml_call2(Bark[14],_ar_,sspaces),
     _at_=caml_call2(Bark[14],_as_,_al_);
    function _aD_(tau){return [1,tau]}
    var
     _aE_=caml_call2(Bark[19],_aD_,_at_),
     _aF_=[0,caml_call2(Bark[2],7,_aE_),_aC_],
     arg=caml_call1(Bark[18],_aF_);
    function _aG_(arity)
     {return 0 <= arity
              ?0 === arity?caml_call1(Bark[17],36):caml_call1(Bark[12],arity)
              :caml_call1(Bark[17],[2,arity])}
    var
     _aH_=[0,caml_call1(Bark[12],1),0],
     _aI_=[0,caml_call1(Bark[5],33),_aH_],
     _aJ_=caml_call1(Bark[18],_aI_),
     _aK_=caml_call1(Bark[22],specify_function_token);
    function _aL_(n){return n}
    var
     _aM_=caml_call1(Bark[12],_aL_),
     _aN_=caml_call2(Bark[14],_aM_,_aK_),
     _aO_=caml_call2(Bark[13],_aN_,_aJ_),
     specify_function_name=caml_call2(Bark[41][4],_aO_,_aG_),
     _aP_=0;
    function _aQ_(param)
     {var body=param[4],ps=param[3],name=param[2],typ=param[1];
      return [0,[1,[0,name,[0,typ,caml_call2(func_params,ps,body)]]],0]}
    var
     _aR_=caml_call2(Bark[41][1],definition$0,_aQ_),
     _aS_=[0,caml_call2(Bark[2],27,_aR_),_aP_];
    function _aT_(param)
     {var func=param[2],arity=param[1];
      function _dp_(io_examples)
       {function _dM_(param)
         {var output=param[2],inputs=param[1];
          return [2,[0,caml_call2(app,func,inputs),output]]}
        return caml_call2(Stdlib_list[17],_dM_,io_examples)}
      var
       _dq_=caml_call1(Bark[7],right_paren$0),
       _dr_=caml_call2(Bark[2],31,p),
       _ds_=caml_call1(Bark[7],comma);
      function _dt_(e){return e}
      var
       _du_=caml_call1(Bark[12],_dt_),
       _dv_=caml_call2(Bark[14],_du_,lspaces),
       _dw_=caml_call2(Bark[13],_dv_,arg),
       _dx_=caml_call2(Bark[14],_dw_,lspaces),
       _dy_=caml_call2(Bark[14],_dx_,_ds_),
       p$0=caml_call2(Bark[2],30,_dy_);
      function _dn_(param)
       {var rev_xs=param[2],k=param[1];
        if(0 < k)
         {var
           _dI_=[0,caml_call1(Bark[17],[0,arity,arity - k | 0]),0],
           _dJ_=function(x){return [0,[0,k - 1 | 0,[0,x,rev_xs]]]},
           _dK_=[0,caml_call2(Bark[19],_dJ_,p$0),_dI_];
          return caml_call1(Bark[18],_dK_)}
        var _dL_=[1,caml_call1(Stdlib_list[9],rev_xs)];
        return caml_call1(Bark[12],_dL_)}
      var
       _do_=caml_call2(Bark[24],[0,arity,0],_dn_),
       _dz_=caml_call1(Bark[7],left_paren$0);
      function _dA_(inputs,output){return [0,inputs,output]}
      var
       _dB_=caml_call1(Bark[12],_dA_),
       _dC_=caml_call2(Bark[14],_dB_,_dz_),
       _dD_=caml_call2(Bark[13],_dC_,_do_),
       _dE_=caml_call2(Bark[14],_dD_,lspaces),
       _dF_=caml_call2(Bark[13],_dE_,_dr_),
       _dG_=caml_call2(Bark[14],_dF_,lspaces),
       _dH_=listt$1(caml_call2(Bark[14],_dG_,_dq_));
      return caml_call2(Bark[41][1],_dH_,_dp_)}
    function _aU_(n,f){return [0,n,f]}
    var
     _aV_=caml_call1(Bark[12],_aU_),
     _aW_=caml_call2(Bark[13],_aV_,specify_function_name),
     _aX_=caml_call2(Bark[14],_aW_,sspaces),
     _aY_=caml_call2(Bark[13],_aX_,ground_exp$0),
     _aZ_=caml_call2(Bark[14],_aY_,sspaces),
     _a0_=caml_call2(Bark[41][4],_aZ_,_aT_),
     _a1_=[0,caml_call2(Bark[2],29,_a0_),_aS_],
     _a2_=caml_call1(Bark[7],double_equals),
     _a3_=caml_call1(Bark[8],assert_keyword);
    function _a4_(e1,e2){return [0,[2,[0,e1,e2]],0]}
    var
     _a5_=caml_call1(Bark[12],_a4_),
     _a6_=caml_call2(Bark[14],_a5_,_a3_),
     _a7_=caml_call2(Bark[14],_a6_,sspaces),
     _a8_=caml_call2(Bark[13],_a7_,p),
     _a9_=caml_call2(Bark[14],_a8_,sspaces),
     _a__=caml_call2(Bark[14],_a9_,_a2_),
     _a$_=caml_call2(Bark[14],_a__,sspaces),
     _ba_=caml_call2(Bark[13],_a$_,ground_exp$0),
     _bb_=[0,caml_call2(Bark[2],28,_ba_),_a1_],
     _bc_=caml_call1(Bark[7],pipe),
     _bd_=caml_call1(Bark[20],sspaces),
     _be_=caml_call1(Bark[12],0),
     _bf_=caml_call2(Bark[14],_be_,_bd_),
     _bg_=caml_call2(Bark[14],_bf_,_bc_),
     _bh_=caml_call2(Bark[14],_bg_,sspaces),
     _bi_=ignore_with(Stdlib_list[11],_bh_),
     _bk_=[0,item,[0,caml_call1(Bark[12],_bj_),0]],
     _bl_=caml_call1(Bark[18],_bk_);
    function _bm_(ctor_name,arg){return [0,[0,ctor_name,arg],0]}
    var
     _bn_=caml_call1(Bark[12],_bm_),
     _bo_=caml_call2(Bark[13],_bn_,constructor_name),
     _bp_=caml_call2(Bark[14],_bo_,sspaces),
     _bq_=chainr1(26,caml_call2(Bark[13],_bp_,_bl_),_bi_),
     _br_=caml_call1(Bark[7],equals);
    function _bs_(rev_params)
     {var
       _dh_=[1,caml_call1(Stdlib_list[9],rev_params)],
       _di_=[0,caml_call1(Bark[12],_dh_),0];
      function _dj_(p){return [0,[0,p,rev_params]]}
      var
       _dk_=caml_call1(Bark[12],_dj_),
       _dl_=caml_call2(Bark[13],_dk_,variable_name),
       _dm_=[0,caml_call2(Bark[14],_dl_,sspaces),_di_];
      return caml_call1(Bark[18],_dm_)}
    var
     _bt_=caml_call2(Bark[24],0,_bs_),
     _bu_=caml_call1(Bark[8],type_keyword);
    function _bv_(data_name,type_params,ctors)
     {return [0,[0,[0,data_name,[0,type_params,ctors]]],0]}
    var
     _bw_=caml_call1(Bark[12],_bv_),
     _bx_=caml_call2(Bark[14],_bw_,_bu_),
     _by_=caml_call2(Bark[14],_bx_,sspaces),
     _bz_=caml_call2(Bark[13],_by_,constructor_name),
     _bA_=caml_call2(Bark[14],_bz_,sspaces),
     _bB_=caml_call2(Bark[13],_bA_,_bt_),
     _bC_=caml_call2(Bark[14],_bB_,sspaces),
     _bD_=caml_call2(Bark[14],_bC_,_br_),
     _bE_=caml_call2(Bark[14],_bD_,sspaces),
     _bF_=caml_call2(Bark[13],_bE_,_bq_),
     _bG_=[0,caml_call2(Bark[2],25,_bF_),_bb_],
     _bH_=caml_call1(Bark[18],_bG_),
     statement_group=caml_call2(Bark[2],24,_bH_);
    function _bI_(rev_statements)
     {var
       _c7_=caml_call1(Bark[11],37),
       _c6_=0,
       _c2_=[0,caml_call1(Bark[12],0),0];
      function _c3_(x){return [0,x]}
      var
       _c4_=[0,caml_call2(Bark[19],_c3_,p),_c2_],
       _c5_=caml_call1(Bark[18],_c4_);
      function _c8_(main_opt)
       {var _df_=[0,0,0,0,main_opt];
        function _dg_(prog,stmt)
         {switch(stmt[0])
           {case 0:
             var d=stmt[1];return [0,[0,d,prog[1]],prog[2],prog[3],prog[4]];
            case 1:
             var d$0=stmt[1];
             return [0,prog[1],[0,d$0,prog[2]],prog[3],prog[4]];
            default:
             var a=stmt[1];return [0,prog[1],prog[2],[0,a,prog[3]],prog[4]]}}
        return [1,caml_call3(Stdlib_list[22],_dg_,_df_,rev_statements)]}
      var
       _c9_=caml_call1(Bark[12],_c8_),
       _c__=caml_call2(Bark[13],_c9_,_c5_),
       _c$_=caml_call2(Bark[14],_c__,any_spaces),
       _da_=[0,caml_call2(Bark[14],_c$_,_c7_),_c6_];
      function _db_(stmts)
       {return [0,caml_call2(Stdlib_list[12],stmts,rev_statements)]}
      var
       _dc_=caml_call1(Bark[12],_db_),
       _dd_=caml_call2(Bark[13],_dc_,statement_group),
       _de_=[0,caml_call2(Bark[14],_dd_,any_spaces),_da_];
      return caml_call1(Bark[18],_de_)}
    var
     _bJ_=caml_call2(Bark[24],0,_bI_),
     program$0=caml_call2(Bark[2],32,_bJ_),
     Smyth_Parse=[0,p,item,program$0];
    caml_register_global(249,Smyth_Parse,"Smyth__Parse");
    function propagate(hf)
     {function propagate_exp(exp)
       {var exp$0=exp;
        for(;;)
         switch(exp$0[0])
          {case 0:
            var body=exp$0[3],x=exp$0[2],f=exp$0[1];
            return [0,f,x,propagate_exp(body)];
           case 1:
            var _cU_=exp$0[3],_cV_=exp$0[2],_cW_=exp$0[1];
            if(0 === _cU_[0])
             {var e2=_cU_[1],_cX_=[0,propagate_exp(e2)];
              return [1,_cW_,propagate_exp(_cV_),_cX_]}
            var type_arg=_cU_[1];
            return [1,_cW_,propagate_exp(_cV_),[1,type_arg]];
           case 2:var x$0=exp$0[1];return [2,x$0];
           case 3:
            var components=exp$0[1];
            return [3,caml_call2(Stdlib_list[17],propagate_exp,components)];
           case 4:
            var arg=exp$0[3],i=exp$0[2],n=exp$0[1];
            return [4,n,i,propagate_exp(arg)];
           case 5:
            var arg$0=exp$0[3],type_args=exp$0[2],ctor_name=exp$0[1];
            return [5,ctor_name,type_args,propagate_exp(arg$0)];
           case 6:
            var
             branches=exp$0[2],
             scrutinee=exp$0[1],
             _cY_=caml_call1(Pair2[3],propagate_exp),
             _cZ_=caml_call1(Pair2[3],_cY_),
             _c0_=caml_call2(Stdlib_list[17],_cZ_,branches);
            return [6,propagate_exp(scrutinee),_c0_];
           case 7:
            var
             hole_name=exp$0[1],
             match=caml_call2(Hole_map[28],hole_name,hf);
            if(match)
             {var hole_exp=match[1];
              if(syntactically_equal$0(exp$0,hole_exp))return [7,hole_name];
              var exp$0=hole_exp;
              continue}
            return [7,hole_name];
           case 8:
            var e2$0=exp$0[2],e1=exp$0[1],_c1_=propagate_exp(e2$0);
            return [8,propagate_exp(e1),_c1_];
           default:var tau=exp$0[2],e=exp$0[1];return [9,propagate_exp(e),tau]}}
      return caml_call2(Hole_map[33],propagate_exp,hf)}
    function clean(delta)
     {function _cQ_(hf)
       {function _cR_(param)
         {var
           hole_name=param[1],
           _cT_=[0,hole_name,caml_call2(Hole_map[28],hole_name,hf)];
          return caml_call1(Option2[9],_cT_)}
        var _cS_=caml_call2(Stdlib_list[17],_cR_,delta);
        return caml_call1(Option2[6],_cS_)}
      return caml_call2(Pervasives2[3],propagate,_cQ_)}
    var Smyth_Clean=[0,clean];
    caml_register_global(250,Smyth_Clean,"Smyth__Clean");
    function _bK_(e){return [0,e]}
    var
     _bL_=caml_call1(Stdlib_result[9],_bK_),
     _bM_=caml_call1(Bark[1],program$0),
     parse_program=caml_call2(Pervasives2[3],_bM_,_bL_);
    function synthesis_pipeline(delta,sigma,assertions)
     {return solve_any
              (delta,sigma,simplify_assertions$0(delta,sigma,assertions))}
    function solve_program(program$0)
     {var
       match=program(program$0),
       sigma=match[2],
       exp=match[1],
       match$0=check$2(sigma,empty$0,exp,_bN_);
      if(0 === match$0[0])
       {var delta=match$0[1],match$1=eval$2(empty,exp);
        if(0 === match$1[0])
         {var match$2=match$1[1],assertions=match$2[2];
          clear_cache(0);
          var
           _cF_=function(_cP_){return _cP_[1]},
           _cG_=caml_call2(Stdlib_list[17],_cF_,delta),
           _cH_=caml_call1(List2[5],_cG_);
          set_largest_hole(caml_call2(Option2[7],0,_cH_));
          minimal_uneval[1] = 1;
          var
           _cI_=function(_cO_){return synthesis_pipeline(delta,sigma,_cO_)},
           match$3=
            itimer_timeout
             (cst_minimal_synthesis_result,
              max_total_time[1],
              _cI_,
              assertions,
              none),
           minimal_timed_out=match$3[3],
           minimal_time_taken=match$3[2],
           minimal_synthesis_result=match$3[1],
           switch$0=0;
          if(! minimal_timed_out && is_empty(minimal_synthesis_result))
           {minimal_uneval[1] = 0;
            var
             _cL_=function(_cN_){return synthesis_pipeline(delta,sigma,_cN_)},
             match$4=
              itimer_timeout
               (cst_synthesis_result,
                max_total_time[1] - minimal_time_taken,
                _cL_,
                assertions,
                none),
             non_minimal_timed_out=match$4[3],
             non_minimal_time_taken=match$4[2],
             non_minimal_synthesis_result=match$4[1],
             time_taken$0=minimal_time_taken + non_minimal_time_taken,
             timed_out=non_minimal_timed_out,
             time_taken=time_taken$0,
             synthesis_result=non_minimal_synthesis_result;
            switch$0 = 1}
          if(! switch$0)
           var
            timed_out=minimal_timed_out,
            time_taken=minimal_time_taken,
            synthesis_result=minimal_synthesis_result;
          if(timed_out)return [1,[3,time_taken]];
          var _cJ_=clean(delta),_cK_=function(_cM_){return _cM_[1]};
          return [0,
                  [0,
                   caml_call1
                    (collapse_option,
                     caml_call2
                      (map,caml_call2(Pervasives2[3],_cK_,_cJ_),synthesis_result)),
                   time_taken]]}
        var e=match$1[1];
        return [1,[2,e]]}
      var e$0=match$0[1];
      return [1,[1,e$0]]}
    function solve(sketch)
     {var _cE_=caml_call1(parse_program,sketch);
      return caml_call2(Result2[4],solve_program,_cE_)}
    function check$5(program$0,hole_filling)
     {var match=program(program$0),sigma=match[2],exp_with_holes=match[1];
      function _cD_(acc,binding){return caml_call1(fill_hole(binding),acc)}
      var
       exp=caml_call3(Stdlib_list[22],_cD_,exp_with_holes,hole_filling),
       match$0=check$2(sigma,empty$0,exp,_bO_);
      if(0 === match$0[0])
       {var match$1=eval$2(empty,exp);
        if(0 === match$1[0])
         {var match$2=match$1[1],assertions=match$2[2];
          return [0,caml_call1(List2[17],assertions)]}
        return _bP_}
      var e=match$0[1];
      return [1,[1,e]]}
    function test_assertions(specification,sketch,assertions)
     {function _cg_(full_assertions)
       {function _ck_(sketch_program)
         {function _cm_(param)
           {var
             time_taken=param[2],
             hole_fillings=param[1],
             ranked_hole_fillings=caml_call1(sort,hole_fillings);
            function _co_(top_success)
             {function _cv_(top_recursive_success)
               {var _cC_=caml_call1(Stdlib_list[1],assertions);
                return [0,
                        caml_call1(Stdlib_list[1],full_assertions),
                        _cC_,
                        top_success,
                        top_recursive_success,
                        time_taken]}
              var
               _cw_=caml_call1(first_recursive,ranked_hole_fillings),
               _cx_=
                [0,
                 sketch_program[1],
                 sketch_program[2],
                 full_assertions,
                 sketch_program[4]];
              function _cy_(_cB_){return check$5(_cx_,_cB_)}
              var
               _cz_=caml_call2(Stdlib_option[7],_cy_,_cw_),
               _cA_=caml_call2(Option2[7],_bQ_,_cz_);
              return caml_call2(Result2[10][1],_cA_,_cv_)}
            var
             _cp_=caml_call1(List2[14],ranked_hole_fillings),
             _cq_=caml_call2(Stdlib_option[14],0,_cp_),
             _cr_=
              [0,
               sketch_program[1],
               sketch_program[2],
               full_assertions,
               sketch_program[4]];
            function _cs_(_cu_){return check$5(_cr_,_cu_)}
            var _ct_=caml_call2(Result2[4],_cs_,_cq_);
            return caml_call2(Result2[10][2],_ct_,_co_)}
          var
           _cn_=
            solve_program
             ([0,
               sketch_program[1],
               sketch_program[2],
               assertions,
               sketch_program[4]]);
          return caml_call2(Result2[10][2],_cn_,_cm_)}
        var _cl_=caml_call1(parse_program,sketch);
        return caml_call2(Result2[10][2],_cl_,_ck_)}
      var _ch_=caml_call1(parse_program,specification);
      function _ci_(prog){return prog[3]}
      var _cj_=caml_call2(Stdlib_result[8],_ci_,_ch_);
      return caml_call2(Result2[10][2],_cj_,_cg_)}
    function test(specification,sketch,examples)
     {var _cc_=caml_call1(parse_program,examples);
      function _cd_(prog){return prog[3]}
      var _ce_=caml_call2(Stdlib_result[8],_cd_,_cc_);
      function _cf_(a){return test_assertions(specification,sketch,a)}
      return caml_call2(Result2[4],_cf_,_ce_)}
    var acc$1=0;
    function assertion_info(specification,assertions)
     {function _bT_(full_assertions)
       {function _bX_(partial_assertions)
         {function _b1_(param)
           {function _b7_(param$0)
             {var
               output=param$0[2],
               input=param$0[1],
               _b__=exp(output),
               param$1=exp(input),
               acc=acc$1,
               param=param$1;
              for(;;)
               {if(1 === param[0])
                 {var _b8_=param[3],_b9_=param[2];
                  if(0 === _b8_[0])
                   {var arg=_b8_[1],acc$0=[0,arg,acc],acc=acc$0,param=_b9_;
                    continue}}
                var
                 _b$_=[0,input,output],
                 _ca_=function(_cb_){return caml_equal(_b$_,_cb_)};
                return [0,
                        0 !== caml_call2(Stdlib_list[36],_ca_,partial_assertions)
                         ?1
                         :0,
                        acc,
                        _b__]}}
            return caml_call2(Stdlib_list[17],_b7_,full_assertions)}
          function _b2_(io)
           {function _b5_(_b6_){return caml_equal(io,_b6_)}
            return 0 !== caml_call2(Stdlib_list[36],_b5_,full_assertions)?1:0}
          var
           _b3_=caml_call2(Stdlib_list[29],_b2_,partial_assertions),
           _b4_=caml_call2(Result2[5],1,_b3_);
          return caml_call2(Result2[10][1],_b4_,_b1_)}
        var _bY_=caml_call1(parse_program,assertions);
        function _bZ_(prog){return prog[3]}
        var _b0_=caml_call2(Stdlib_result[8],_bZ_,_bY_);
        return caml_call2(Result2[10][2],_b0_,_bX_)}
      var _bU_=caml_call1(parse_program,specification);
      function _bV_(prog){return prog[3]}
      var _bW_=caml_call2(Stdlib_result[8],_bV_,_bU_);
      return caml_call2(Result2[10][2],_bW_,_bT_)}
    var Smyth_Endpoint=[0,solve,test,test_assertions,assertion_info];
    caml_register_global(251,Smyth_Endpoint,"Smyth__Endpoint");
    function debug(func){return debug_mode[1]?caml_call1(func,0):0}
    function println(s)
     {return debug(function(param){return caml_call1(Stdlib[53],s)})}
    function print_sep(param)
     {return debug(function(param){return println(cst$68)})}
    function pause(param)
     {return debug(function(param){caml_call1(Stdlib[55],0);return 0})}
    function print_int(n)
     {return debug(function(param){return println(caml_call1(Stdlib[33],n))})}
    function print_float(f)
     {return debug(function(param){return println(caml_call1(Float2[1],f))})}
    function print_nondet_len(nd)
     {return debug
              (function(param)
                {var _bS_=caml_call1(Stdlib_list[1],nd);
                 return println(caml_call1(Stdlib[33],_bS_))})}
    function print_len(xs)
     {return debug
              (function(param)
                {var _bR_=caml_call1(Stdlib_list[1],xs);
                 return println(caml_call1(Stdlib[33],_bR_))})}
    var
     Smyth_Debug=
      [0,
       debug,
       println,
       print_sep,
       pause,
       print_int,
       print_float,
       print_nondet_len,
       print_len];
    caml_register_global(253,Smyth_Debug,"Smyth__Debug");
    return}
  (function(){return this}()));


//# 1 "../.js/js_of_ocaml/js_of_ocaml.cma.js"
(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_int_of_string=runtime.caml_int_of_string,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_get=runtime.caml_js_get,
     caml_js_html_escape=runtime.caml_js_html_escape,
     caml_js_set=runtime.caml_js_set,
     caml_js_wrap_callback=runtime.caml_js_wrap_callback,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsbytes_of_string=runtime.caml_jsbytes_of_string,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_array=runtime.caml_string_of_array,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_parseFloat=caml_string_of_jsbytes("parseFloat"),
     cst_parseInt=caml_string_of_jsbytes("parseInt"),
     cst_Js_of_ocaml_Js_Error=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     cst_jsError=caml_string_of_jsbytes("jsError"),
     cst_can_t_retrieve_file_name_n=
      caml_string_of_jsbytes("can't retrieve file name: not implemented"),
     cst_endings=caml_string_of_jsbytes("endings"),
     cst_type=caml_string_of_jsbytes("type"),
     cst_loadstart=caml_string_of_jsbytes("loadstart"),
     cst_progress=caml_string_of_jsbytes("progress"),
     cst_abort=caml_string_of_jsbytes("abort"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_load=caml_string_of_jsbytes("load"),
     cst_loadend=caml_string_of_jsbytes("loadend"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_area$1=caml_string_of_jsbytes("area"),
     cst_audio$1=caml_string_of_jsbytes("audio"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_blockquote$1=caml_string_of_jsbytes("blockquote"),
     cst_body$1=caml_string_of_jsbytes("body"),
     cst_br$1=caml_string_of_jsbytes("br"),
     cst_button$1=caml_string_of_jsbytes("button"),
     cst_canvas$1=caml_string_of_jsbytes("canvas"),
     cst_caption$1=caml_string_of_jsbytes("caption"),
     cst_col$1=caml_string_of_jsbytes("col"),
     cst_colgroup$1=caml_string_of_jsbytes("colgroup"),
     cst_del$1=caml_string_of_jsbytes("del"),
     cst_div$1=caml_string_of_jsbytes("div"),
     cst_dl$1=caml_string_of_jsbytes("dl"),
     cst_embed$1=caml_string_of_jsbytes("embed"),
     cst_fieldset$1=caml_string_of_jsbytes("fieldset"),
     cst_form$1=caml_string_of_jsbytes("form"),
     cst_frame$1=caml_string_of_jsbytes("frame"),
     cst_frameset$1=caml_string_of_jsbytes("frameset"),
     cst_h1$1=caml_string_of_jsbytes("h1"),
     cst_h2$1=caml_string_of_jsbytes("h2"),
     cst_h3$1=caml_string_of_jsbytes("h3"),
     cst_h4$1=caml_string_of_jsbytes("h4"),
     cst_h5$1=caml_string_of_jsbytes("h5"),
     cst_h6$1=caml_string_of_jsbytes("h6"),
     cst_head$1=caml_string_of_jsbytes("head"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_html$1=caml_string_of_jsbytes("html"),
     cst_iframe$1=caml_string_of_jsbytes("iframe"),
     cst_img$1=caml_string_of_jsbytes("img"),
     cst_input$2=caml_string_of_jsbytes("input"),
     cst_ins$1=caml_string_of_jsbytes("ins"),
     cst_label$1=caml_string_of_jsbytes("label"),
     cst_legend$1=caml_string_of_jsbytes("legend"),
     cst_li$1=caml_string_of_jsbytes("li"),
     cst_link$1=caml_string_of_jsbytes("link"),
     cst_map$1=caml_string_of_jsbytes("map"),
     cst_meta$1=caml_string_of_jsbytes("meta"),
     cst_object$1=caml_string_of_jsbytes("object"),
     cst_ol$1=caml_string_of_jsbytes("ol"),
     cst_optgroup$1=caml_string_of_jsbytes("optgroup"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_p$1=caml_string_of_jsbytes("p"),
     cst_param$1=caml_string_of_jsbytes("param"),
     cst_pre$1=caml_string_of_jsbytes("pre"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_script$1=caml_string_of_jsbytes("script"),
     cst_select$2=caml_string_of_jsbytes("select"),
     cst_style$1=caml_string_of_jsbytes("style"),
     cst_table$1=caml_string_of_jsbytes("table"),
     cst_tbody$1=caml_string_of_jsbytes("tbody"),
     cst_td$1=caml_string_of_jsbytes("td"),
     cst_textarea$1=caml_string_of_jsbytes("textarea"),
     cst_tfoot$1=caml_string_of_jsbytes("tfoot"),
     cst_th$1=caml_string_of_jsbytes("th"),
     cst_thead$1=caml_string_of_jsbytes("thead"),
     cst_title$1=caml_string_of_jsbytes("title"),
     cst_tr$1=caml_string_of_jsbytes("tr"),
     cst_ul$1=caml_string_of_jsbytes("ul"),
     cst_video$1=caml_string_of_jsbytes("video"),
     cst_KeyH=caml_string_of_jsbytes("KeyH"),
     cst_Digit6=caml_string_of_jsbytes("Digit6"),
     cst_BrowserRefresh=caml_string_of_jsbytes("BrowserRefresh"),
     cst_Backslash=caml_string_of_jsbytes("Backslash"),
     cst_AltLeft=caml_string_of_jsbytes("AltLeft"),
     cst_AltRight=caml_string_of_jsbytes("AltRight"),
     cst_ArrowDown=caml_string_of_jsbytes("ArrowDown"),
     cst_ArrowLeft=caml_string_of_jsbytes("ArrowLeft"),
     cst_ArrowRight=caml_string_of_jsbytes("ArrowRight"),
     cst_ArrowUp=caml_string_of_jsbytes("ArrowUp"),
     cst_Backquote=caml_string_of_jsbytes("Backquote"),
     cst_Backspace=caml_string_of_jsbytes("Backspace"),
     cst_BracketLeft=caml_string_of_jsbytes("BracketLeft"),
     cst_BracketRight=caml_string_of_jsbytes("BracketRight"),
     cst_BrowserBack=caml_string_of_jsbytes("BrowserBack"),
     cst_BrowserFavorites=caml_string_of_jsbytes("BrowserFavorites"),
     cst_BrowserForward=caml_string_of_jsbytes("BrowserForward"),
     cst_BrowserHome=caml_string_of_jsbytes("BrowserHome"),
     cst_Delete=caml_string_of_jsbytes("Delete"),
     cst_BrowserSearch=caml_string_of_jsbytes("BrowserSearch"),
     cst_BrowserStop=caml_string_of_jsbytes("BrowserStop"),
     cst_CapsLock=caml_string_of_jsbytes("CapsLock"),
     cst_Comma=caml_string_of_jsbytes("Comma"),
     cst_ContextMenu=caml_string_of_jsbytes("ContextMenu"),
     cst_ControlLeft=caml_string_of_jsbytes("ControlLeft"),
     cst_ControlRight=caml_string_of_jsbytes("ControlRight"),
     cst_Digit0=caml_string_of_jsbytes("Digit0"),
     cst_Digit1=caml_string_of_jsbytes("Digit1"),
     cst_Digit2=caml_string_of_jsbytes("Digit2"),
     cst_Digit3=caml_string_of_jsbytes("Digit3"),
     cst_Digit4=caml_string_of_jsbytes("Digit4"),
     cst_Digit5=caml_string_of_jsbytes("Digit5"),
     cst_F6=caml_string_of_jsbytes("F6"),
     cst_F1=caml_string_of_jsbytes("F1"),
     cst_Digit7=caml_string_of_jsbytes("Digit7"),
     cst_Digit8=caml_string_of_jsbytes("Digit8"),
     cst_Digit9=caml_string_of_jsbytes("Digit9"),
     cst_End=caml_string_of_jsbytes("End"),
     cst_Enter=caml_string_of_jsbytes("Enter"),
     cst_Equal=caml_string_of_jsbytes("Equal"),
     cst_Escape=caml_string_of_jsbytes("Escape"),
     cst_F10=caml_string_of_jsbytes("F10"),
     cst_F11=caml_string_of_jsbytes("F11"),
     cst_F12=caml_string_of_jsbytes("F12"),
     cst_F2=caml_string_of_jsbytes("F2"),
     cst_F3=caml_string_of_jsbytes("F3"),
     cst_F4=caml_string_of_jsbytes("F4"),
     cst_F5=caml_string_of_jsbytes("F5"),
     cst_KeyA=caml_string_of_jsbytes("KeyA"),
     cst_F7=caml_string_of_jsbytes("F7"),
     cst_F8=caml_string_of_jsbytes("F8"),
     cst_F9=caml_string_of_jsbytes("F9"),
     cst_Home=caml_string_of_jsbytes("Home"),
     cst_Insert=caml_string_of_jsbytes("Insert"),
     cst_IntlBackslash=caml_string_of_jsbytes("IntlBackslash"),
     cst_IntlYen=caml_string_of_jsbytes("IntlYen"),
     cst_KeyB=caml_string_of_jsbytes("KeyB"),
     cst_KeyC=caml_string_of_jsbytes("KeyC"),
     cst_KeyD=caml_string_of_jsbytes("KeyD"),
     cst_KeyE=caml_string_of_jsbytes("KeyE"),
     cst_KeyF=caml_string_of_jsbytes("KeyF"),
     cst_KeyG=caml_string_of_jsbytes("KeyG"),
     cst_Numpad4=caml_string_of_jsbytes("Numpad4"),
     cst_KeyX=caml_string_of_jsbytes("KeyX"),
     cst_KeyP=caml_string_of_jsbytes("KeyP"),
     cst_KeyI=caml_string_of_jsbytes("KeyI"),
     cst_KeyJ=caml_string_of_jsbytes("KeyJ"),
     cst_KeyK=caml_string_of_jsbytes("KeyK"),
     cst_KeyL=caml_string_of_jsbytes("KeyL"),
     cst_KeyM=caml_string_of_jsbytes("KeyM"),
     cst_KeyN=caml_string_of_jsbytes("KeyN"),
     cst_KeyO=caml_string_of_jsbytes("KeyO"),
     cst_KeyQ=caml_string_of_jsbytes("KeyQ"),
     cst_KeyR=caml_string_of_jsbytes("KeyR"),
     cst_KeyS=caml_string_of_jsbytes("KeyS"),
     cst_KeyT=caml_string_of_jsbytes("KeyT"),
     cst_KeyU=caml_string_of_jsbytes("KeyU"),
     cst_KeyV=caml_string_of_jsbytes("KeyV"),
     cst_KeyW=caml_string_of_jsbytes("KeyW"),
     cst_MetaRight=caml_string_of_jsbytes("MetaRight"),
     cst_KeyY=caml_string_of_jsbytes("KeyY"),
     cst_KeyZ=caml_string_of_jsbytes("KeyZ"),
     cst_MediaPlayPause=caml_string_of_jsbytes("MediaPlayPause"),
     cst_MediaStop=caml_string_of_jsbytes("MediaStop"),
     cst_MediaTrackNext=caml_string_of_jsbytes("MediaTrackNext"),
     cst_MediaTrackPrevious=caml_string_of_jsbytes("MediaTrackPrevious"),
     cst_MetaLeft=caml_string_of_jsbytes("MetaLeft"),
     cst_Minus=caml_string_of_jsbytes("Minus"),
     cst_NumLock=caml_string_of_jsbytes("NumLock"),
     cst_Numpad0=caml_string_of_jsbytes("Numpad0"),
     cst_Numpad1=caml_string_of_jsbytes("Numpad1"),
     cst_Numpad2=caml_string_of_jsbytes("Numpad2"),
     cst_Numpad3=caml_string_of_jsbytes("Numpad3"),
     cst_PageUp=caml_string_of_jsbytes("PageUp"),
     cst_NumpadDivide=caml_string_of_jsbytes("NumpadDivide"),
     cst_Numpad5=caml_string_of_jsbytes("Numpad5"),
     cst_Numpad6=caml_string_of_jsbytes("Numpad6"),
     cst_Numpad7=caml_string_of_jsbytes("Numpad7"),
     cst_Numpad8=caml_string_of_jsbytes("Numpad8"),
     cst_Numpad9=caml_string_of_jsbytes("Numpad9"),
     cst_NumpadAdd=caml_string_of_jsbytes("NumpadAdd"),
     cst_NumpadDecimal=caml_string_of_jsbytes("NumpadDecimal"),
     cst_NumpadEnter=caml_string_of_jsbytes("NumpadEnter"),
     cst_NumpadEqual=caml_string_of_jsbytes("NumpadEqual"),
     cst_NumpadMultiply=caml_string_of_jsbytes("NumpadMultiply"),
     cst_NumpadSubtract=caml_string_of_jsbytes("NumpadSubtract"),
     cst_OSLeft=caml_string_of_jsbytes("OSLeft"),
     cst_OSRight=caml_string_of_jsbytes("OSRight"),
     cst_PageDown=caml_string_of_jsbytes("PageDown"),
     cst_ShiftRight=caml_string_of_jsbytes("ShiftRight"),
     cst_Pause=caml_string_of_jsbytes("Pause"),
     cst_Period=caml_string_of_jsbytes("Period"),
     cst_PrintScreen=caml_string_of_jsbytes("PrintScreen"),
     cst_Quote=caml_string_of_jsbytes("Quote"),
     cst_ScrollLock=caml_string_of_jsbytes("ScrollLock"),
     cst_Semicolon=caml_string_of_jsbytes("Semicolon"),
     cst_ShiftLeft=caml_string_of_jsbytes("ShiftLeft"),
     cst_Slash=caml_string_of_jsbytes("Slash"),
     cst_Space=caml_string_of_jsbytes("Space"),
     cst_Tab=caml_string_of_jsbytes("Tab"),
     cst_VolumeDown=caml_string_of_jsbytes("VolumeDown"),
     cst_VolumeMute=caml_string_of_jsbytes("VolumeMute"),
     cst_VolumeUp=caml_string_of_jsbytes("VolumeUp"),
     cst_mouseout$0=caml_string_of_jsbytes("mouseout"),
     cst_mouseover$0=caml_string_of_jsbytes("mouseover"),
     cst_video$0=caml_string_of_jsbytes("video"),
     cst_audio$0=caml_string_of_jsbytes("audio"),
     cst_ul$0=caml_string_of_jsbytes("ul"),
     cst_tr$0=caml_string_of_jsbytes("tr"),
     cst_title$0=caml_string_of_jsbytes("title"),
     cst_thead$0=caml_string_of_jsbytes("thead"),
     cst_th$0=caml_string_of_jsbytes("th"),
     cst_tfoot$0=caml_string_of_jsbytes("tfoot"),
     cst_textarea$0=caml_string_of_jsbytes("textarea"),
     cst_td$0=caml_string_of_jsbytes("td"),
     cst_tbody$0=caml_string_of_jsbytes("tbody"),
     cst_table$0=caml_string_of_jsbytes("table"),
     cst_style$0=caml_string_of_jsbytes("style"),
     cst_select$1=caml_string_of_jsbytes("select"),
     cst_script$0=caml_string_of_jsbytes("script"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_pre$0=caml_string_of_jsbytes("pre"),
     cst_param$0=caml_string_of_jsbytes("param"),
     cst_p$0=caml_string_of_jsbytes("p"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_optgroup$0=caml_string_of_jsbytes("optgroup"),
     cst_ol$0=caml_string_of_jsbytes("ol"),
     cst_object$0=caml_string_of_jsbytes("object"),
     cst_meta$0=caml_string_of_jsbytes("meta"),
     cst_map$0=caml_string_of_jsbytes("map"),
     cst_link$0=caml_string_of_jsbytes("link"),
     cst_li$0=caml_string_of_jsbytes("li"),
     cst_legend$0=caml_string_of_jsbytes("legend"),
     cst_label$0=caml_string_of_jsbytes("label"),
     cst_ins$0=caml_string_of_jsbytes("ins"),
     cst_input$1=caml_string_of_jsbytes("input"),
     cst_img$0=caml_string_of_jsbytes("img"),
     cst_iframe$0=caml_string_of_jsbytes("iframe"),
     cst_html$0=caml_string_of_jsbytes("html"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_head$0=caml_string_of_jsbytes("head"),
     cst_h6$0=caml_string_of_jsbytes("h6"),
     cst_h5$0=caml_string_of_jsbytes("h5"),
     cst_h4$0=caml_string_of_jsbytes("h4"),
     cst_h3$0=caml_string_of_jsbytes("h3"),
     cst_h2$0=caml_string_of_jsbytes("h2"),
     cst_h1$0=caml_string_of_jsbytes("h1"),
     cst_frame$0=caml_string_of_jsbytes("frame"),
     cst_frameset$0=caml_string_of_jsbytes("frameset"),
     cst_form$0=caml_string_of_jsbytes("form"),
     cst_embed$0=caml_string_of_jsbytes("embed"),
     cst_fieldset$0=caml_string_of_jsbytes("fieldset"),
     cst_dl$0=caml_string_of_jsbytes("dl"),
     cst_div$0=caml_string_of_jsbytes("div"),
     cst_del$0=caml_string_of_jsbytes("del"),
     cst_colgroup$0=caml_string_of_jsbytes("colgroup"),
     cst_col$0=caml_string_of_jsbytes("col"),
     cst_caption$0=caml_string_of_jsbytes("caption"),
     cst_canvas$0=caml_string_of_jsbytes("canvas"),
     cst_button$0=caml_string_of_jsbytes("button"),
     cst_br$0=caml_string_of_jsbytes("br"),
     cst_body$0=caml_string_of_jsbytes("body"),
     cst_blockquote$0=caml_string_of_jsbytes("blockquote"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_area$0=caml_string_of_jsbytes("area"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_canvas=caml_string_of_jsbytes("canvas"),
     cst_video=caml_string_of_jsbytes("video"),
     cst_audio=caml_string_of_jsbytes("audio"),
     cst_iframe=caml_string_of_jsbytes("iframe"),
     cst_frame=caml_string_of_jsbytes("frame"),
     cst_frameset=caml_string_of_jsbytes("frameset"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_noscript=caml_string_of_jsbytes("noscript"),
     cst_dt=caml_string_of_jsbytes("dt"),
     cst_dd=caml_string_of_jsbytes("dd"),
     cst_abbr=caml_string_of_jsbytes("abbr"),
     cst_var=caml_string_of_jsbytes("var"),
     cst_kbd=caml_string_of_jsbytes("kbd"),
     cst_samp=caml_string_of_jsbytes("samp"),
     cst_code=caml_string_of_jsbytes("code"),
     cst_dfn=caml_string_of_jsbytes("dfn"),
     cst_cite=caml_string_of_jsbytes("cite"),
     cst_strong=caml_string_of_jsbytes("strong"),
     cst_em=caml_string_of_jsbytes("em"),
     cst_small=caml_string_of_jsbytes("small"),
     cst_big=caml_string_of_jsbytes("big"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_i=caml_string_of_jsbytes("i"),
     cst_tt=caml_string_of_jsbytes("tt"),
     cst_span=caml_string_of_jsbytes("span"),
     cst_sup=caml_string_of_jsbytes("sup"),
     cst_sub=caml_string_of_jsbytes("sub"),
     cst_td=caml_string_of_jsbytes("td"),
     cst_th=caml_string_of_jsbytes("th"),
     cst_tr=caml_string_of_jsbytes("tr"),
     cst_tbody=caml_string_of_jsbytes("tbody"),
     cst_tfoot=caml_string_of_jsbytes("tfoot"),
     cst_thead=caml_string_of_jsbytes("thead"),
     cst_colgroup=caml_string_of_jsbytes("colgroup"),
     cst_col=caml_string_of_jsbytes("col"),
     cst_caption=caml_string_of_jsbytes("caption"),
     cst_table=caml_string_of_jsbytes("table"),
     cst_script=caml_string_of_jsbytes("script"),
     cst_area=caml_string_of_jsbytes("area"),
     cst_map=caml_string_of_jsbytes("map"),
     cst_param=caml_string_of_jsbytes("param"),
     cst_object=caml_string_of_jsbytes("object"),
     cst_img=caml_string_of_jsbytes("img"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_del=caml_string_of_jsbytes("del"),
     cst_ins=caml_string_of_jsbytes("ins"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_br=caml_string_of_jsbytes("br"),
     cst_pre=caml_string_of_jsbytes("pre"),
     cst_blockquote=caml_string_of_jsbytes("blockquote"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_h6=caml_string_of_jsbytes("h6"),
     cst_h5=caml_string_of_jsbytes("h5"),
     cst_h4=caml_string_of_jsbytes("h4"),
     cst_h3=caml_string_of_jsbytes("h3"),
     cst_h2=caml_string_of_jsbytes("h2"),
     cst_h1=caml_string_of_jsbytes("h1"),
     cst_p=caml_string_of_jsbytes("p"),
     cst_embed=caml_string_of_jsbytes("embed"),
     cst_div=caml_string_of_jsbytes("div"),
     cst_li=caml_string_of_jsbytes("li"),
     cst_dl=caml_string_of_jsbytes("dl"),
     cst_ol=caml_string_of_jsbytes("ol"),
     cst_ul=caml_string_of_jsbytes("ul"),
     cst_legend=caml_string_of_jsbytes("legend"),
     cst_fieldset=caml_string_of_jsbytes("fieldset"),
     cst_label=caml_string_of_jsbytes("label"),
     cst_button=caml_string_of_jsbytes("button"),
     cst_textarea=caml_string_of_jsbytes("textarea"),
     cst_input$0=caml_string_of_jsbytes("input"),
     cst_select$0=caml_string_of_jsbytes("select"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_optgroup=caml_string_of_jsbytes("optgroup"),
     cst_form=caml_string_of_jsbytes("form"),
     cst_body=caml_string_of_jsbytes("body"),
     cst_style=caml_string_of_jsbytes("style"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_meta=caml_string_of_jsbytes("meta"),
     cst_title=caml_string_of_jsbytes("title"),
     cst_link=caml_string_of_jsbytes("link"),
     cst_head=caml_string_of_jsbytes("head"),
     cst_html=caml_string_of_jsbytes("html"),
     cst_click=caml_string_of_jsbytes("click"),
     cst_dblclick=caml_string_of_jsbytes("dblclick"),
     cst_mousedown=caml_string_of_jsbytes("mousedown"),
     cst_mouseup=caml_string_of_jsbytes("mouseup"),
     cst_mouseover=caml_string_of_jsbytes("mouseover"),
     cst_mousemove=caml_string_of_jsbytes("mousemove"),
     cst_mouseout=caml_string_of_jsbytes("mouseout"),
     cst_keypress=caml_string_of_jsbytes("keypress"),
     cst_keydown=caml_string_of_jsbytes("keydown"),
     cst_keyup=caml_string_of_jsbytes("keyup"),
     cst_mousewheel=caml_string_of_jsbytes("mousewheel"),
     cst_DOMMouseScroll=caml_string_of_jsbytes("DOMMouseScroll"),
     cst_touchstart=caml_string_of_jsbytes("touchstart"),
     cst_touchmove=caml_string_of_jsbytes("touchmove"),
     cst_touchend=caml_string_of_jsbytes("touchend"),
     cst_touchcancel=caml_string_of_jsbytes("touchcancel"),
     cst_dragstart=caml_string_of_jsbytes("dragstart"),
     cst_dragend=caml_string_of_jsbytes("dragend"),
     cst_dragenter=caml_string_of_jsbytes("dragenter"),
     cst_dragover=caml_string_of_jsbytes("dragover"),
     cst_dragleave=caml_string_of_jsbytes("dragleave"),
     cst_drag=caml_string_of_jsbytes("drag"),
     cst_drop=caml_string_of_jsbytes("drop"),
     cst_hashchange=caml_string_of_jsbytes("hashchange"),
     cst_change=caml_string_of_jsbytes("change"),
     cst_input=caml_string_of_jsbytes("input"),
     cst_timeupdate=caml_string_of_jsbytes("timeupdate"),
     cst_submit=caml_string_of_jsbytes("submit"),
     cst_scroll=caml_string_of_jsbytes("scroll"),
     cst_focus=caml_string_of_jsbytes("focus"),
     cst_blur=caml_string_of_jsbytes("blur"),
     cst_load$0=caml_string_of_jsbytes("load"),
     cst_unload=caml_string_of_jsbytes("unload"),
     cst_beforeunload=caml_string_of_jsbytes("beforeunload"),
     cst_resize=caml_string_of_jsbytes("resize"),
     cst_orientationchange=caml_string_of_jsbytes("orientationchange"),
     cst_popstate=caml_string_of_jsbytes("popstate"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_abort$0=caml_string_of_jsbytes("abort"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_online=caml_string_of_jsbytes("online"),
     cst_offline=caml_string_of_jsbytes("offline"),
     cst_checking=caml_string_of_jsbytes("checking"),
     cst_noupdate=caml_string_of_jsbytes("noupdate"),
     cst_downloading=caml_string_of_jsbytes("downloading"),
     cst_progress$0=caml_string_of_jsbytes("progress"),
     cst_updateready=caml_string_of_jsbytes("updateready"),
     cst_cached=caml_string_of_jsbytes("cached"),
     cst_obsolete=caml_string_of_jsbytes("obsolete"),
     cst_DOMContentLoaded=caml_string_of_jsbytes("DOMContentLoaded"),
     cst_animationstart=caml_string_of_jsbytes("animationstart"),
     cst_animationend=caml_string_of_jsbytes("animationend"),
     cst_animationiteration=caml_string_of_jsbytes("animationiteration"),
     cst_animationcancel=caml_string_of_jsbytes("animationcancel"),
     cst_canplay=caml_string_of_jsbytes("canplay"),
     cst_canplaythrough=caml_string_of_jsbytes("canplaythrough"),
     cst_durationchange=caml_string_of_jsbytes("durationchange"),
     cst_emptied=caml_string_of_jsbytes("emptied"),
     cst_ended=caml_string_of_jsbytes("ended"),
     cst_gotpointercapture=caml_string_of_jsbytes("gotpointercapture"),
     cst_loadeddata=caml_string_of_jsbytes("loadeddata"),
     cst_loadedmetadata=caml_string_of_jsbytes("loadedmetadata"),
     cst_loadstart$0=caml_string_of_jsbytes("loadstart"),
     cst_lostpointercapture=caml_string_of_jsbytes("lostpointercapture"),
     cst_pause=caml_string_of_jsbytes("pause"),
     cst_play=caml_string_of_jsbytes("play"),
     cst_playing=caml_string_of_jsbytes("playing"),
     cst_pointerenter=caml_string_of_jsbytes("pointerenter"),
     cst_pointercancel=caml_string_of_jsbytes("pointercancel"),
     cst_pointerdown=caml_string_of_jsbytes("pointerdown"),
     cst_pointerleave=caml_string_of_jsbytes("pointerleave"),
     cst_pointermove=caml_string_of_jsbytes("pointermove"),
     cst_pointerout=caml_string_of_jsbytes("pointerout"),
     cst_pointerover=caml_string_of_jsbytes("pointerover"),
     cst_pointerup=caml_string_of_jsbytes("pointerup"),
     cst_ratechange=caml_string_of_jsbytes("ratechange"),
     cst_seeked=caml_string_of_jsbytes("seeked"),
     cst_seeking=caml_string_of_jsbytes("seeking"),
     cst_stalled=caml_string_of_jsbytes("stalled"),
     cst_suspend=caml_string_of_jsbytes("suspend"),
     cst_volumechange=caml_string_of_jsbytes("volumechange"),
     cst_waiting=caml_string_of_jsbytes("waiting"),
     cst_Js_of_ocaml_Dom_html_Canva=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_html.Canvas_not_available"),
     cst_checkbox=caml_string_of_jsbytes("checkbox"),
     cst_file=caml_string_of_jsbytes("file"),
     cst_password=caml_string_of_jsbytes("password"),
     cst_radio=caml_string_of_jsbytes("radio"),
     cst_reset=caml_string_of_jsbytes("reset"),
     cst_submit$0=caml_string_of_jsbytes("submit"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_readystatechange=caml_string_of_jsbytes("readystatechange"),
     cst_loadstart$1=caml_string_of_jsbytes("loadstart"),
     cst_progress$1=caml_string_of_jsbytes("progress"),
     cst_abort$1=caml_string_of_jsbytes("abort"),
     cst_error$1=caml_string_of_jsbytes("error"),
     cst_load$1=caml_string_of_jsbytes("load"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_loadend$0=caml_string_of_jsbytes("loadend"),
     cst_Worker_onmessage_is_undefi$0=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_onmessage_is_undefi=
      caml_string_of_jsbytes("Worker.onmessage is undefined"),
     cst_Worker_import_scripts_is_u=
      caml_string_of_jsbytes("Worker.import_scripts is undefined"),
     cst_webglcontextlost=caml_string_of_jsbytes("webglcontextlost"),
     cst_webglcontextrestored=caml_string_of_jsbytes("webglcontextrestored"),
     cst_webglcontextcreationerror=
      caml_string_of_jsbytes("webglcontextcreationerror"),
     cst_g=caml_string_of_jsbytes("g"),
     cst=caml_string_of_jsbytes("[\\][()\\\\|+*.?{}^$]"),
     cst$37=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("#"),
     cst$15=caml_string_of_jsbytes("?"),
     cst$20=caml_string_of_jsbytes(""),
     cst$16=caml_string_of_jsbytes("/"),
     cst$17=caml_string_of_jsbytes("/"),
     cst$19=caml_string_of_jsbytes(":"),
     cst$18=caml_string_of_jsbytes(""),
     cst_http$1=caml_string_of_jsbytes("http://"),
     cst$22=caml_string_of_jsbytes(""),
     cst$30=caml_string_of_jsbytes(""),
     cst$23=caml_string_of_jsbytes("#"),
     cst$24=caml_string_of_jsbytes("?"),
     cst$29=caml_string_of_jsbytes(""),
     cst$25=caml_string_of_jsbytes("/"),
     cst$26=caml_string_of_jsbytes("/"),
     cst$28=caml_string_of_jsbytes(":"),
     cst$27=caml_string_of_jsbytes(""),
     cst_https$1=caml_string_of_jsbytes("https://"),
     cst$31=caml_string_of_jsbytes(""),
     cst$36=caml_string_of_jsbytes(""),
     cst$32=caml_string_of_jsbytes("#"),
     cst$33=caml_string_of_jsbytes("?"),
     cst$35=caml_string_of_jsbytes(""),
     cst$34=caml_string_of_jsbytes("/"),
     cst_file$2=caml_string_of_jsbytes("file://"),
     cst$12=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$9=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes(""),
     cst$7=caml_string_of_jsbytes(""),
     cst$6=caml_string_of_jsbytes(""),
     cst$4=caml_string_of_jsbytes("="),
     cst$5=caml_string_of_jsbytes("&"),
     cst$2=caml_string_of_jsbytes(""),
     cst$3=caml_string_of_jsbytes(""),
     cst_file$0=caml_string_of_jsbytes("file"),
     cst_file$1=caml_string_of_jsbytes("file:"),
     cst_http=caml_string_of_jsbytes("http"),
     cst_http$0=caml_string_of_jsbytes("http:"),
     cst_https=caml_string_of_jsbytes("https"),
     cst_https$0=caml_string_of_jsbytes("https:"),
     cst$1=caml_string_of_jsbytes(" "),
     cst_2B=caml_string_of_jsbytes("%2B"),
     cst_Js_of_ocaml_Url_Local_exn=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Local_exn"),
     cst$0=caml_string_of_jsbytes("+"),
     cst_Js_of_ocaml_Url_Not_an_htt=
      caml_string_of_jsbytes("Js_of_ocaml__Url.Not_an_http_protocol"),
     cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0=
      caml_string_of_jsbytes
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     cst_Ff_Ii_Ll_Ee=
      caml_string_of_jsbytes
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     s=caml_string_of_jsbytes("3.8.0"),
     git_version=caml_string_of_jsbytes(""),
     cst$38=caml_string_of_jsbytes(""),
     cst$41=caml_string_of_jsbytes("+"),
     cst_Jstable_keys=caml_string_of_jsbytes("Jstable.keys"),
     dummy_string=caml_string_of_jsbytes(""),
     dummy_int64=runtime.caml_int64_create_lo_mi_hi(1,0,0),
     cst_is_not_a_valid_length$0=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_d_d_deg_grad_rad_turns=
      caml_string_of_jsbytes("^(\\d*(?:\\.\\d*))(deg|grad|rad|turns)$"),
     cst_length_conversion_error$0=
      caml_string_of_jsbytes("length conversion error: "),
     cst_deg$0=caml_string_of_jsbytes("deg"),
     cst_grad$0=caml_string_of_jsbytes("grad"),
     cst_rad$0=caml_string_of_jsbytes("rad"),
     cst_turns$0=caml_string_of_jsbytes("turns"),
     cst_deg=caml_string_of_jsbytes("deg"),
     cst_grad=caml_string_of_jsbytes("grad"),
     cst_rad=caml_string_of_jsbytes("rad"),
     cst_turns=caml_string_of_jsbytes("turns"),
     cst_is_not_a_valid_length=
      caml_string_of_jsbytes(" is not a valid length"),
     cst_0$0=caml_string_of_jsbytes("0"),
     cst_d_d_s_S=caml_string_of_jsbytes("^(\\d*(?:\\.\\d*)?)\\s*(\\S*)$"),
     cst_length_conversion_error=
      caml_string_of_jsbytes("length conversion error: "),
     cst_pc$0=caml_string_of_jsbytes("pc"),
     cst_ch$0=caml_string_of_jsbytes("ch"),
     cst_cm$0=caml_string_of_jsbytes("cm"),
     cst_em$1=caml_string_of_jsbytes("em"),
     cst_ex$0=caml_string_of_jsbytes("ex"),
     cst_gd$0=caml_string_of_jsbytes("gd"),
     cst_in$0=caml_string_of_jsbytes("in"),
     cst_mm$0=caml_string_of_jsbytes("mm"),
     cst_pt$0=caml_string_of_jsbytes("pt"),
     cst_px$0=caml_string_of_jsbytes("px"),
     cst_rem$0=caml_string_of_jsbytes("rem"),
     cst_vh$0=caml_string_of_jsbytes("vh"),
     cst_vm$0=caml_string_of_jsbytes("vm"),
     cst_vw$0=caml_string_of_jsbytes("vw"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_em$0=caml_string_of_jsbytes("em"),
     cst_ex=caml_string_of_jsbytes("ex"),
     cst_px=caml_string_of_jsbytes("px"),
     cst_gd=caml_string_of_jsbytes("gd"),
     cst_rem=caml_string_of_jsbytes("rem"),
     cst_vw=caml_string_of_jsbytes("vw"),
     cst_vh=caml_string_of_jsbytes("vh"),
     cst_vm=caml_string_of_jsbytes("vm"),
     cst_ch=caml_string_of_jsbytes("ch"),
     cst_mm=caml_string_of_jsbytes("mm"),
     cst_cm=caml_string_of_jsbytes("cm"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_pt=caml_string_of_jsbytes("pt"),
     cst_pc=caml_string_of_jsbytes("pc"),
     cst$40=caml_string_of_jsbytes("): "),
     cst_color_conversion_error$0=
      caml_string_of_jsbytes("color conversion error ("),
     cst$39=caml_string_of_jsbytes("): "),
     cst_color_conversion_error=
      caml_string_of_jsbytes("color conversion error ("),
     cst_is_not_a_valid_color$0=
      caml_string_of_jsbytes(" is not a valid color"),
     cst_rgba_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*),(\\d*),(\\d*)(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgba_d_d_d_d_d$0=
      caml_string_of_jsbytes
       ("(rgba?)\\((?:(\\d*)%,(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_hsla_d_d_d_d_d=
      caml_string_of_jsbytes
       ("(hsla?)\\((?:(\\d*),(\\d*)%,(\\d*)%(?:,(\\d*(?:\\.\\d*)?))?)\\)"),
     cst_rgb=caml_string_of_jsbytes("rgb"),
     cst_rgba=caml_string_of_jsbytes("rgba"),
     cst_rgb$0=caml_string_of_jsbytes("rgb"),
     cst_rgba$0=caml_string_of_jsbytes("rgba"),
     cst_hsl=caml_string_of_jsbytes("hsl"),
     cst_hsla=caml_string_of_jsbytes("hsla"),
     cst_rgb_s_d_s_d_s_d=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*,\\s*\\d*,\\s*\\d*\\)$"),
     cst_rgb_s_d_s_d_s_d$0=
      caml_string_of_jsbytes("^rgb\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*,\\s*\\d*,\\s*\\d*,\\d*\\.?\\d*\\)$"),
     cst_rgba_s_d_s_d_s_d_d_d$0=
      caml_string_of_jsbytes
       ("^rgba\\(\\s*\\d*%,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_hsl_s_d_s_d_s_d=
      caml_string_of_jsbytes("^hsl\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%\\)$"),
     cst_hsla_s_d_s_d_s_d_d_d=
      caml_string_of_jsbytes
       ("^hsla\\(\\s*\\d*,\\s*\\d*%,\\s*\\d*%,\\d*\\.?\\d*\\)$"),
     cst_is_not_a_valid_color=caml_string_of_jsbytes(" is not a valid color"),
     cst_is_out_of_valid_range=
      caml_string_of_jsbytes(" is out of valid range"),
     partial=[8,[0,0,0],0,0,[12,41,0]],
     partial$0=[12,41,0],
     partial$1=[0,0,0],
     cst_lightgrey$0=caml_string_of_jsbytes("lightgrey"),
     cst_darkslategray$0=caml_string_of_jsbytes("darkslategray"),
     cst_cornsilk$0=caml_string_of_jsbytes("cornsilk"),
     cst_blue$0=caml_string_of_jsbytes("blue"),
     cst_aliceblue$0=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite$0=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua$0=caml_string_of_jsbytes("aqua"),
     cst_aquamarine$0=caml_string_of_jsbytes("aquamarine"),
     cst_azure$0=caml_string_of_jsbytes("azure"),
     cst_beige$0=caml_string_of_jsbytes("beige"),
     cst_bisque$0=caml_string_of_jsbytes("bisque"),
     cst_black$0=caml_string_of_jsbytes("black"),
     cst_blanchedalmond$0=caml_string_of_jsbytes("blanchedalmond"),
     cst_blueviolet$0=caml_string_of_jsbytes("blueviolet"),
     cst_brown$0=caml_string_of_jsbytes("brown"),
     cst_burlywood$0=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue$0=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse$0=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate$0=caml_string_of_jsbytes("chocolate"),
     cst_coral$0=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue$0=caml_string_of_jsbytes("cornflowerblue"),
     cst_darkkhaki$0=caml_string_of_jsbytes("darkkhaki"),
     cst_crimson$0=caml_string_of_jsbytes("crimson"),
     cst_cyan$0=caml_string_of_jsbytes("cyan"),
     cst_darkblue$0=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan$0=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod$0=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray$0=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen$0=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey$0=caml_string_of_jsbytes("darkgrey"),
     cst_darkmagenta$0=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen$0=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange$0=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid$0=caml_string_of_jsbytes("darkorchid"),
     cst_darkred$0=caml_string_of_jsbytes("darkred"),
     cst_darksalmon$0=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen$0=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue$0=caml_string_of_jsbytes("darkslateblue"),
     cst_greenyellow$0=caml_string_of_jsbytes("greenyellow"),
     cst_floralwhite$0=caml_string_of_jsbytes("floralwhite"),
     cst_darkslategrey$0=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise$0=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet$0=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink$0=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue$0=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray$0=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey$0=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue$0=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick$0=caml_string_of_jsbytes("firebrick"),
     cst_forestgreen$0=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia$0=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro$0=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite$0=caml_string_of_jsbytes("ghostwhite"),
     cst_gold$0=caml_string_of_jsbytes("gold"),
     cst_goldenrod$0=caml_string_of_jsbytes("goldenrod"),
     cst_gray$0=caml_string_of_jsbytes("gray"),
     cst_green$0=caml_string_of_jsbytes("green"),
     cst_lavenderblush$0=caml_string_of_jsbytes("lavenderblush"),
     cst_grey$0=caml_string_of_jsbytes("grey"),
     cst_honeydew$0=caml_string_of_jsbytes("honeydew"),
     cst_hotpink$0=caml_string_of_jsbytes("hotpink"),
     cst_indianred$0=caml_string_of_jsbytes("indianred"),
     cst_indigo$0=caml_string_of_jsbytes("indigo"),
     cst_ivory$0=caml_string_of_jsbytes("ivory"),
     cst_khaki$0=caml_string_of_jsbytes("khaki"),
     cst_lavender$0=caml_string_of_jsbytes("lavender"),
     cst_lawngreen$0=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon$0=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue$0=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral$0=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan$0=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow$0=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray$0=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen$0=caml_string_of_jsbytes("lightgreen"),
     cst_paleturquoise$0=caml_string_of_jsbytes("paleturquoise"),
     cst_mediumslateblue$0=caml_string_of_jsbytes("mediumslateblue"),
     cst_limegreen$0=caml_string_of_jsbytes("limegreen"),
     cst_lightpink$0=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon$0=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen$0=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue$0=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray$0=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey$0=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue$0=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow$0=caml_string_of_jsbytes("lightyellow"),
     cst_lime$0=caml_string_of_jsbytes("lime"),
     cst_linen$0=caml_string_of_jsbytes("linen"),
     cst_magenta$0=caml_string_of_jsbytes("magenta"),
     cst_maroon$0=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine$0=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue$0=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid$0=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple$0=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen$0=caml_string_of_jsbytes("mediumseagreen"),
     cst_navy$0=caml_string_of_jsbytes("navy"),
     cst_mediumspringgreen$0=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise$0=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred$0=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue$0=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream$0=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose$0=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin$0=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite$0=caml_string_of_jsbytes("navajowhite"),
     cst_oldlace$0=caml_string_of_jsbytes("oldlace"),
     cst_olive$0=caml_string_of_jsbytes("olive"),
     cst_olivedrab$0=caml_string_of_jsbytes("olivedrab"),
     cst_orange$0=caml_string_of_jsbytes("orange"),
     cst_orangered$0=caml_string_of_jsbytes("orangered"),
     cst_orchid$0=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod$0=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen$0=caml_string_of_jsbytes("palegreen"),
     cst_skyblue$0=caml_string_of_jsbytes("skyblue"),
     cst_rosybrown$0=caml_string_of_jsbytes("rosybrown"),
     cst_palevioletred$0=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip$0=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff$0=caml_string_of_jsbytes("peachpuff"),
     cst_peru$0=caml_string_of_jsbytes("peru"),
     cst_pink$0=caml_string_of_jsbytes("pink"),
     cst_plum$0=caml_string_of_jsbytes("plum"),
     cst_powderblue$0=caml_string_of_jsbytes("powderblue"),
     cst_purple$0=caml_string_of_jsbytes("purple"),
     cst_red$0=caml_string_of_jsbytes("red"),
     cst_royalblue$0=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown$0=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon$0=caml_string_of_jsbytes("salmon"),
     cst_sandybrown$0=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen$0=caml_string_of_jsbytes("seagreen"),
     cst_seashell$0=caml_string_of_jsbytes("seashell"),
     cst_sienna$0=caml_string_of_jsbytes("sienna"),
     cst_silver$0=caml_string_of_jsbytes("silver"),
     cst_thistle$0=caml_string_of_jsbytes("thistle"),
     cst_slateblue$0=caml_string_of_jsbytes("slateblue"),
     cst_slategray$0=caml_string_of_jsbytes("slategray"),
     cst_slategrey$0=caml_string_of_jsbytes("slategrey"),
     cst_snow$0=caml_string_of_jsbytes("snow"),
     cst_springgreen$0=caml_string_of_jsbytes("springgreen"),
     cst_steelblue$0=caml_string_of_jsbytes("steelblue"),
     cst_tan$0=caml_string_of_jsbytes("tan"),
     cst_teal$0=caml_string_of_jsbytes("teal"),
     cst_tomato$0=caml_string_of_jsbytes("tomato"),
     cst_turquoise$0=caml_string_of_jsbytes("turquoise"),
     cst_violet$0=caml_string_of_jsbytes("violet"),
     cst_wheat$0=caml_string_of_jsbytes("wheat"),
     cst_white$0=caml_string_of_jsbytes("white"),
     cst_whitesmoke$0=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow$0=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen$0=caml_string_of_jsbytes("yellowgreen"),
     cst_is_not_a_valid_color_name=
      caml_string_of_jsbytes(" is not a valid color name"),
     cst_aliceblue=caml_string_of_jsbytes("aliceblue"),
     cst_antiquewhite=caml_string_of_jsbytes("antiquewhite"),
     cst_aqua=caml_string_of_jsbytes("aqua"),
     cst_aquamarine=caml_string_of_jsbytes("aquamarine"),
     cst_azure=caml_string_of_jsbytes("azure"),
     cst_beige=caml_string_of_jsbytes("beige"),
     cst_bisque=caml_string_of_jsbytes("bisque"),
     cst_black=caml_string_of_jsbytes("black"),
     cst_blanchedalmond=caml_string_of_jsbytes("blanchedalmond"),
     cst_blue=caml_string_of_jsbytes("blue"),
     cst_blueviolet=caml_string_of_jsbytes("blueviolet"),
     cst_brown=caml_string_of_jsbytes("brown"),
     cst_burlywood=caml_string_of_jsbytes("burlywood"),
     cst_cadetblue=caml_string_of_jsbytes("cadetblue"),
     cst_chartreuse=caml_string_of_jsbytes("chartreuse"),
     cst_chocolate=caml_string_of_jsbytes("chocolate"),
     cst_coral=caml_string_of_jsbytes("coral"),
     cst_cornflowerblue=caml_string_of_jsbytes("cornflowerblue"),
     cst_cornsilk=caml_string_of_jsbytes("cornsilk"),
     cst_crimson=caml_string_of_jsbytes("crimson"),
     cst_cyan=caml_string_of_jsbytes("cyan"),
     cst_darkblue=caml_string_of_jsbytes("darkblue"),
     cst_darkcyan=caml_string_of_jsbytes("darkcyan"),
     cst_darkgoldenrod=caml_string_of_jsbytes("darkgoldenrod"),
     cst_darkgray=caml_string_of_jsbytes("darkgray"),
     cst_darkgreen=caml_string_of_jsbytes("darkgreen"),
     cst_darkgrey=caml_string_of_jsbytes("darkgrey"),
     cst_darkkhaki=caml_string_of_jsbytes("darkkhaki"),
     cst_darkmagenta=caml_string_of_jsbytes("darkmagenta"),
     cst_darkolivegreen=caml_string_of_jsbytes("darkolivegreen"),
     cst_darkorange=caml_string_of_jsbytes("darkorange"),
     cst_darkorchid=caml_string_of_jsbytes("darkorchid"),
     cst_darkred=caml_string_of_jsbytes("darkred"),
     cst_darksalmon=caml_string_of_jsbytes("darksalmon"),
     cst_darkseagreen=caml_string_of_jsbytes("darkseagreen"),
     cst_darkslateblue=caml_string_of_jsbytes("darkslateblue"),
     cst_darkslategray=caml_string_of_jsbytes("darkslategray"),
     cst_darkslategrey=caml_string_of_jsbytes("darkslategrey"),
     cst_darkturquoise=caml_string_of_jsbytes("darkturquoise"),
     cst_darkviolet=caml_string_of_jsbytes("darkviolet"),
     cst_deeppink=caml_string_of_jsbytes("deeppink"),
     cst_deepskyblue=caml_string_of_jsbytes("deepskyblue"),
     cst_dimgray=caml_string_of_jsbytes("dimgray"),
     cst_dimgrey=caml_string_of_jsbytes("dimgrey"),
     cst_dodgerblue=caml_string_of_jsbytes("dodgerblue"),
     cst_firebrick=caml_string_of_jsbytes("firebrick"),
     cst_floralwhite=caml_string_of_jsbytes("floralwhite"),
     cst_forestgreen=caml_string_of_jsbytes("forestgreen"),
     cst_fuchsia=caml_string_of_jsbytes("fuchsia"),
     cst_gainsboro=caml_string_of_jsbytes("gainsboro"),
     cst_ghostwhite=caml_string_of_jsbytes("ghostwhite"),
     cst_gold=caml_string_of_jsbytes("gold"),
     cst_goldenrod=caml_string_of_jsbytes("goldenrod"),
     cst_gray=caml_string_of_jsbytes("gray"),
     cst_grey=caml_string_of_jsbytes("grey"),
     cst_green=caml_string_of_jsbytes("green"),
     cst_greenyellow=caml_string_of_jsbytes("greenyellow"),
     cst_honeydew=caml_string_of_jsbytes("honeydew"),
     cst_hotpink=caml_string_of_jsbytes("hotpink"),
     cst_indianred=caml_string_of_jsbytes("indianred"),
     cst_indigo=caml_string_of_jsbytes("indigo"),
     cst_ivory=caml_string_of_jsbytes("ivory"),
     cst_khaki=caml_string_of_jsbytes("khaki"),
     cst_lavender=caml_string_of_jsbytes("lavender"),
     cst_lavenderblush=caml_string_of_jsbytes("lavenderblush"),
     cst_lawngreen=caml_string_of_jsbytes("lawngreen"),
     cst_lemonchiffon=caml_string_of_jsbytes("lemonchiffon"),
     cst_lightblue=caml_string_of_jsbytes("lightblue"),
     cst_lightcoral=caml_string_of_jsbytes("lightcoral"),
     cst_lightcyan=caml_string_of_jsbytes("lightcyan"),
     cst_lightgoldenrodyellow=caml_string_of_jsbytes("lightgoldenrodyellow"),
     cst_lightgray=caml_string_of_jsbytes("lightgray"),
     cst_lightgreen=caml_string_of_jsbytes("lightgreen"),
     cst_lightgrey=caml_string_of_jsbytes("lightgrey"),
     cst_lightpink=caml_string_of_jsbytes("lightpink"),
     cst_lightsalmon=caml_string_of_jsbytes("lightsalmon"),
     cst_lightseagreen=caml_string_of_jsbytes("lightseagreen"),
     cst_lightskyblue=caml_string_of_jsbytes("lightskyblue"),
     cst_lightslategray=caml_string_of_jsbytes("lightslategray"),
     cst_lightslategrey=caml_string_of_jsbytes("lightslategrey"),
     cst_lightsteelblue=caml_string_of_jsbytes("lightsteelblue"),
     cst_lightyellow=caml_string_of_jsbytes("lightyellow"),
     cst_lime=caml_string_of_jsbytes("lime"),
     cst_limegreen=caml_string_of_jsbytes("limegreen"),
     cst_linen=caml_string_of_jsbytes("linen"),
     cst_magenta=caml_string_of_jsbytes("magenta"),
     cst_maroon=caml_string_of_jsbytes("maroon"),
     cst_mediumaquamarine=caml_string_of_jsbytes("mediumaquamarine"),
     cst_mediumblue=caml_string_of_jsbytes("mediumblue"),
     cst_mediumorchid=caml_string_of_jsbytes("mediumorchid"),
     cst_mediumpurple=caml_string_of_jsbytes("mediumpurple"),
     cst_mediumseagreen=caml_string_of_jsbytes("mediumseagreen"),
     cst_mediumslateblue=caml_string_of_jsbytes("mediumslateblue"),
     cst_mediumspringgreen=caml_string_of_jsbytes("mediumspringgreen"),
     cst_mediumturquoise=caml_string_of_jsbytes("mediumturquoise"),
     cst_mediumvioletred=caml_string_of_jsbytes("mediumvioletred"),
     cst_midnightblue=caml_string_of_jsbytes("midnightblue"),
     cst_mintcream=caml_string_of_jsbytes("mintcream"),
     cst_mistyrose=caml_string_of_jsbytes("mistyrose"),
     cst_moccasin=caml_string_of_jsbytes("moccasin"),
     cst_navajowhite=caml_string_of_jsbytes("navajowhite"),
     cst_navy=caml_string_of_jsbytes("navy"),
     cst_oldlace=caml_string_of_jsbytes("oldlace"),
     cst_olive=caml_string_of_jsbytes("olive"),
     cst_olivedrab=caml_string_of_jsbytes("olivedrab"),
     cst_orange=caml_string_of_jsbytes("orange"),
     cst_orangered=caml_string_of_jsbytes("orangered"),
     cst_orchid=caml_string_of_jsbytes("orchid"),
     cst_palegoldenrod=caml_string_of_jsbytes("palegoldenrod"),
     cst_palegreen=caml_string_of_jsbytes("palegreen"),
     cst_paleturquoise=caml_string_of_jsbytes("paleturquoise"),
     cst_palevioletred=caml_string_of_jsbytes("palevioletred"),
     cst_papayawhip=caml_string_of_jsbytes("papayawhip"),
     cst_peachpuff=caml_string_of_jsbytes("peachpuff"),
     cst_peru=caml_string_of_jsbytes("peru"),
     cst_pink=caml_string_of_jsbytes("pink"),
     cst_plum=caml_string_of_jsbytes("plum"),
     cst_powderblue=caml_string_of_jsbytes("powderblue"),
     cst_purple=caml_string_of_jsbytes("purple"),
     cst_red=caml_string_of_jsbytes("red"),
     cst_rosybrown=caml_string_of_jsbytes("rosybrown"),
     cst_royalblue=caml_string_of_jsbytes("royalblue"),
     cst_saddlebrown=caml_string_of_jsbytes("saddlebrown"),
     cst_salmon=caml_string_of_jsbytes("salmon"),
     cst_sandybrown=caml_string_of_jsbytes("sandybrown"),
     cst_seagreen=caml_string_of_jsbytes("seagreen"),
     cst_seashell=caml_string_of_jsbytes("seashell"),
     cst_sienna=caml_string_of_jsbytes("sienna"),
     cst_silver=caml_string_of_jsbytes("silver"),
     cst_skyblue=caml_string_of_jsbytes("skyblue"),
     cst_slateblue=caml_string_of_jsbytes("slateblue"),
     cst_slategray=caml_string_of_jsbytes("slategray"),
     cst_slategrey=caml_string_of_jsbytes("slategrey"),
     cst_snow=caml_string_of_jsbytes("snow"),
     cst_springgreen=caml_string_of_jsbytes("springgreen"),
     cst_steelblue=caml_string_of_jsbytes("steelblue"),
     cst_tan=caml_string_of_jsbytes("tan"),
     cst_teal=caml_string_of_jsbytes("teal"),
     cst_thistle=caml_string_of_jsbytes("thistle"),
     cst_tomato=caml_string_of_jsbytes("tomato"),
     cst_turquoise=caml_string_of_jsbytes("turquoise"),
     cst_violet=caml_string_of_jsbytes("violet"),
     cst_wheat=caml_string_of_jsbytes("wheat"),
     cst_white=caml_string_of_jsbytes("white"),
     cst_whitesmoke=caml_string_of_jsbytes("whitesmoke"),
     cst_yellow=caml_string_of_jsbytes("yellow"),
     cst_yellowgreen=caml_string_of_jsbytes("yellowgreen"),
     cst_vkern$0=caml_string_of_jsbytes("vkern"),
     cst_view$0=caml_string_of_jsbytes("view"),
     cst_use$0=caml_string_of_jsbytes("use"),
     cst_tspan$0=caml_string_of_jsbytes("tspan"),
     cst_tref$0=caml_string_of_jsbytes("tref"),
     cst_title$3=caml_string_of_jsbytes("title"),
     cst_textpath$0=caml_string_of_jsbytes("textpath"),
     cst_text$1=caml_string_of_jsbytes("text"),
     cst_symbol$0=caml_string_of_jsbytes("symbol"),
     cst_switch$0=caml_string_of_jsbytes("switch"),
     cst_svg$0=caml_string_of_jsbytes("svg"),
     cst_style$3=caml_string_of_jsbytes("style"),
     cst_stop$0=caml_string_of_jsbytes("stop"),
     cst_set$0=caml_string_of_jsbytes("set"),
     cst_script$3=caml_string_of_jsbytes("script"),
     cst_rect$0=caml_string_of_jsbytes("rect"),
     cst_radialgradient$0=caml_string_of_jsbytes("radialgradient"),
     cst_polyline$0=caml_string_of_jsbytes("polyline"),
     cst_polygon$0=caml_string_of_jsbytes("polygon"),
     cst_pattern$0=caml_string_of_jsbytes("pattern"),
     cst_path$0=caml_string_of_jsbytes("path"),
     cst_mpath$0=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph$0=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata$0=caml_string_of_jsbytes("metadata"),
     cst_mask$0=caml_string_of_jsbytes("mask"),
     cst_lineargradient$0=caml_string_of_jsbytes("lineargradient"),
     cst_line$0=caml_string_of_jsbytes("line"),
     cst_image$0=caml_string_of_jsbytes("image"),
     cst_hkern$0=caml_string_of_jsbytes("hkern"),
     cst_glyphref$0=caml_string_of_jsbytes("glyphref"),
     cst_glyph$0=caml_string_of_jsbytes("glyph"),
     cst_g$1=caml_string_of_jsbytes("g"),
     cst_foreignobject=caml_string_of_jsbytes("foreignobject"),
     cst_font_face_uri$0=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src$0=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name$0=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format$0=caml_string_of_jsbytes("font-face-format"),
     cst_font_face$0=caml_string_of_jsbytes("font-face"),
     cst_font$0=caml_string_of_jsbytes("font"),
     cst_filter$0=caml_string_of_jsbytes("filter"),
     cst_ellipse$0=caml_string_of_jsbytes("ellipse"),
     cst_desc$0=caml_string_of_jsbytes("desc"),
     cst_defs$0=caml_string_of_jsbytes("defs"),
     cst_cursor$0=caml_string_of_jsbytes("cursor"),
     cst_clippath$0=caml_string_of_jsbytes("clippath"),
     cst_circle$0=caml_string_of_jsbytes("circle"),
     cst_animatetransform$0=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion$0=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor$0=caml_string_of_jsbytes("animatecolor"),
     cst_animate$0=caml_string_of_jsbytes("animate"),
     cst_altglyphitem$0=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef$0=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph$0=caml_string_of_jsbytes("altglyph"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_vkern=caml_string_of_jsbytes("vkern"),
     cst_view=caml_string_of_jsbytes("view"),
     cst_use=caml_string_of_jsbytes("use"),
     cst_tspan=caml_string_of_jsbytes("tspan"),
     cst_tref=caml_string_of_jsbytes("tref"),
     cst_title$2=caml_string_of_jsbytes("title"),
     cst_textpath=caml_string_of_jsbytes("textpath"),
     cst_text$0=caml_string_of_jsbytes("text"),
     cst_symbol=caml_string_of_jsbytes("symbol"),
     cst_switch=caml_string_of_jsbytes("switch"),
     cst_svg=caml_string_of_jsbytes("svg"),
     cst_style$2=caml_string_of_jsbytes("style"),
     cst_stop=caml_string_of_jsbytes("stop"),
     cst_set=caml_string_of_jsbytes("set"),
     cst_script$2=caml_string_of_jsbytes("script"),
     cst_rect=caml_string_of_jsbytes("rect"),
     cst_radialgradient=caml_string_of_jsbytes("radialgradient"),
     cst_polyline=caml_string_of_jsbytes("polyline"),
     cst_polygon=caml_string_of_jsbytes("polygon"),
     cst_pattern=caml_string_of_jsbytes("pattern"),
     cst_path=caml_string_of_jsbytes("path"),
     cst_mpath=caml_string_of_jsbytes("mpath"),
     cst_missing_glyph=caml_string_of_jsbytes("missing-glyph"),
     cst_metadata=caml_string_of_jsbytes("metadata"),
     cst_mask=caml_string_of_jsbytes("mask"),
     cst_lineargradient=caml_string_of_jsbytes("lineargradient"),
     cst_line=caml_string_of_jsbytes("line"),
     cst_image=caml_string_of_jsbytes("image"),
     cst_hkern=caml_string_of_jsbytes("hkern"),
     cst_glyphref=caml_string_of_jsbytes("glyphref"),
     cst_glyph=caml_string_of_jsbytes("glyph"),
     cst_g$0=caml_string_of_jsbytes("g"),
     cst_foreignObject=caml_string_of_jsbytes("foreignObject"),
     cst_font_face_uri=caml_string_of_jsbytes("font-face-uri"),
     cst_font_face_src=caml_string_of_jsbytes("font-face-src"),
     cst_font_face_name=caml_string_of_jsbytes("font-face-name"),
     cst_font_face_format=caml_string_of_jsbytes("font-face-format"),
     cst_font_face=caml_string_of_jsbytes("font-face"),
     cst_font=caml_string_of_jsbytes("font"),
     cst_filter=caml_string_of_jsbytes("filter"),
     cst_ellipse=caml_string_of_jsbytes("ellipse"),
     cst_desc=caml_string_of_jsbytes("desc"),
     cst_defs=caml_string_of_jsbytes("defs"),
     cst_cursor=caml_string_of_jsbytes("cursor"),
     cst_clippath=caml_string_of_jsbytes("clippath"),
     cst_circle=caml_string_of_jsbytes("circle"),
     cst_animatetransform=caml_string_of_jsbytes("animatetransform"),
     cst_animatemotion=caml_string_of_jsbytes("animatemotion"),
     cst_animatecolor=caml_string_of_jsbytes("animatecolor"),
     cst_animate=caml_string_of_jsbytes("animate"),
     cst_altglyphitem=caml_string_of_jsbytes("altglyphitem"),
     cst_altglyphdef=caml_string_of_jsbytes("altglyphdef"),
     cst_altglyph=caml_string_of_jsbytes("altglyph"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_Js_of_ocaml_Dom_svg_SVGErr=
      caml_string_of_jsbytes("Js_of_ocaml__Dom_svg.SVGError"),
     Stdlib_string=global_data.Stdlib__string,
     Stdlib_char=global_data.Stdlib__char,
     Stdlib=global_data.Stdlib,
     Stdlib_callback=global_data.Stdlib__callback,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Assert_failure=global_data.Assert_failure,
     Stdlib_list=global_data.Stdlib__list,
     Stdlib_array=global_data.Stdlib__array,
     Stdlib_uchar=global_data.Stdlib__uchar,
     Stdlib_printf=global_data.Stdlib__printf,
     Js_of_ocaml=[0];
    caml_register_global(1629,Js_of_ocaml,"Js_of_ocaml__");
    var
     Poly=[0],
     _d_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom.ml"),351,67],
     _e_=[0,caml_string_of_jsbytes("transparent")],
     _f_=[0,caml_string_of_jsbytes("native")],
     _j_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2796,58],
     _i_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/dom_html.ml"),2795,61],
     _h_=
      [0,
       [11,
        caml_string_of_jsbytes("getElementById_exn: "),
        [3,0,[11,caml_string_of_jsbytes(" not found"),0]]],
       caml_string_of_jsbytes("getElementById_exn: %S not found")],
     _l_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/form.ml"),177,13],
     _k_=[0,1],
     _m_=[0,caml_string_of_jsbytes("lib/js_of_ocaml/regexp.ml"),34,64],
     _n_=[0,caml_string_of_jsbytes(""),0],
     _ch_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ci_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cj_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ck_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b5_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b6_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b7_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b8_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b9_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b__=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b$_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ca_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cb_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cc_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cd_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _ce_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cf_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _cg_=[0,[8,[0,0,0],0,0,[2,0,0]],caml_string_of_jsbytes("%f%s")],
     _b4_=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("aliceblue"),
         caml_string_of_jsbytes("antiquewhite"),
         caml_string_of_jsbytes("aqua"),
         caml_string_of_jsbytes("aquamarine"),
         caml_string_of_jsbytes("azure"),
         caml_string_of_jsbytes("beige"),
         caml_string_of_jsbytes("bisque"),
         caml_string_of_jsbytes("black"),
         caml_string_of_jsbytes("blanchedalmond"),
         caml_string_of_jsbytes("blue"),
         caml_string_of_jsbytes("blueviolet"),
         caml_string_of_jsbytes("brown"),
         caml_string_of_jsbytes("burlywood"),
         caml_string_of_jsbytes("cadetblue"),
         caml_string_of_jsbytes("chartreuse"),
         caml_string_of_jsbytes("chocolate"),
         caml_string_of_jsbytes("coral"),
         caml_string_of_jsbytes("cornflowerblue"),
         caml_string_of_jsbytes("cornsilk"),
         caml_string_of_jsbytes("crimson"),
         caml_string_of_jsbytes("cyan"),
         caml_string_of_jsbytes("darkblue"),
         caml_string_of_jsbytes("darkcyan"),
         caml_string_of_jsbytes("darkgoldenrod"),
         caml_string_of_jsbytes("darkgray"),
         caml_string_of_jsbytes("darkgreen"),
         caml_string_of_jsbytes("darkgrey"),
         caml_string_of_jsbytes("darkkhaki"),
         caml_string_of_jsbytes("darkmagenta"),
         caml_string_of_jsbytes("darkolivegreen"),
         caml_string_of_jsbytes("darkorange"),
         caml_string_of_jsbytes("darkorchid"),
         caml_string_of_jsbytes("darkred"),
         caml_string_of_jsbytes("darksalmon"),
         caml_string_of_jsbytes("darkseagreen"),
         caml_string_of_jsbytes("darkslateblue"),
         caml_string_of_jsbytes("darkslategray"),
         caml_string_of_jsbytes("darkslategrey"),
         caml_string_of_jsbytes("darkturquoise"),
         caml_string_of_jsbytes("darkviolet"),
         caml_string_of_jsbytes("deeppink"),
         caml_string_of_jsbytes("deepskyblue"),
         caml_string_of_jsbytes("dimgray"),
         caml_string_of_jsbytes("dimgrey"),
         caml_string_of_jsbytes("dodgerblue"),
         caml_string_of_jsbytes("firebrick"),
         caml_string_of_jsbytes("floralwhite"),
         caml_string_of_jsbytes("forestgreen"),
         caml_string_of_jsbytes("fuchsia"),
         caml_string_of_jsbytes("gainsboro"),
         caml_string_of_jsbytes("ghostwhite"),
         caml_string_of_jsbytes("gold"),
         caml_string_of_jsbytes("goldenrod"),
         caml_string_of_jsbytes("gray"),
         caml_string_of_jsbytes("green"),
         caml_string_of_jsbytes("greenyellow"),
         caml_string_of_jsbytes("grey"),
         caml_string_of_jsbytes("honeydew"),
         caml_string_of_jsbytes("hotpink"),
         caml_string_of_jsbytes("indianred"),
         caml_string_of_jsbytes("indigo"),
         caml_string_of_jsbytes("ivory"),
         caml_string_of_jsbytes("khaki"),
         caml_string_of_jsbytes("lavender"),
         caml_string_of_jsbytes("lavenderblush"),
         caml_string_of_jsbytes("lawngreen"),
         caml_string_of_jsbytes("lemonchiffon"),
         caml_string_of_jsbytes("lightblue"),
         caml_string_of_jsbytes("lightcoral"),
         caml_string_of_jsbytes("lightcyan"),
         caml_string_of_jsbytes("lightgoldenrodyellow"),
         caml_string_of_jsbytes("lightgray"),
         caml_string_of_jsbytes("lightgreen"),
         caml_string_of_jsbytes("lightgrey"),
         caml_string_of_jsbytes("lightpink"),
         caml_string_of_jsbytes("lightsalmon"),
         caml_string_of_jsbytes("lightseagreen"),
         caml_string_of_jsbytes("lightskyblue"),
         caml_string_of_jsbytes("lightslategray"),
         caml_string_of_jsbytes("lightslategrey"),
         caml_string_of_jsbytes("lightsteelblue"),
         caml_string_of_jsbytes("lightyellow"),
         caml_string_of_jsbytes("lime"),
         caml_string_of_jsbytes("limegreen"),
         caml_string_of_jsbytes("linen"),
         caml_string_of_jsbytes("magenta"),
         caml_string_of_jsbytes("maroon"),
         caml_string_of_jsbytes("mediumaquamarine"),
         caml_string_of_jsbytes("mediumblue"),
         caml_string_of_jsbytes("mediumorchid"),
         caml_string_of_jsbytes("mediumpurple"),
         caml_string_of_jsbytes("mediumseagreen"),
         caml_string_of_jsbytes("mediumslateblue"),
         caml_string_of_jsbytes("mediumspringgreen"),
         caml_string_of_jsbytes("mediumturquoise"),
         caml_string_of_jsbytes("mediumvioletred"),
         caml_string_of_jsbytes("midnightblue"),
         caml_string_of_jsbytes("mintcream"),
         caml_string_of_jsbytes("mistyrose"),
         caml_string_of_jsbytes("moccasin"),
         caml_string_of_jsbytes("navajowhite"),
         caml_string_of_jsbytes("navy"),
         caml_string_of_jsbytes("oldlace"),
         caml_string_of_jsbytes("olive"),
         caml_string_of_jsbytes("olivedrab"),
         caml_string_of_jsbytes("orange"),
         caml_string_of_jsbytes("orangered"),
         caml_string_of_jsbytes("orchid"),
         caml_string_of_jsbytes("palegoldenrod"),
         caml_string_of_jsbytes("palegreen"),
         caml_string_of_jsbytes("paleturquoise"),
         caml_string_of_jsbytes("palevioletred"),
         caml_string_of_jsbytes("papayawhip"),
         caml_string_of_jsbytes("peachpuff"),
         caml_string_of_jsbytes("peru"),
         caml_string_of_jsbytes("pink"),
         caml_string_of_jsbytes("plum"),
         caml_string_of_jsbytes("powderblue"),
         caml_string_of_jsbytes("purple"),
         caml_string_of_jsbytes("red"),
         caml_string_of_jsbytes("rosybrown"),
         caml_string_of_jsbytes("royalblue"),
         caml_string_of_jsbytes("saddlebrown"),
         caml_string_of_jsbytes("salmon"),
         caml_string_of_jsbytes("sandybrown"),
         caml_string_of_jsbytes("seagreen"),
         caml_string_of_jsbytes("seashell"),
         caml_string_of_jsbytes("sienna"),
         caml_string_of_jsbytes("silver"),
         caml_string_of_jsbytes("skyblue"),
         caml_string_of_jsbytes("slateblue"),
         caml_string_of_jsbytes("slategray"),
         caml_string_of_jsbytes("slategrey"),
         caml_string_of_jsbytes("snow"),
         caml_string_of_jsbytes("springgreen"),
         caml_string_of_jsbytes("steelblue"),
         caml_string_of_jsbytes("tan"),
         caml_string_of_jsbytes("teal"),
         caml_string_of_jsbytes("thistle"),
         caml_string_of_jsbytes("tomato"),
         caml_string_of_jsbytes("turquoise"),
         caml_string_of_jsbytes("violet"),
         caml_string_of_jsbytes("wheat"),
         caml_string_of_jsbytes("white"),
         caml_string_of_jsbytes("whitesmoke"),
         caml_string_of_jsbytes("yellow"),
         caml_string_of_jsbytes("yellowgreen")]),
     _b3_=
      [0,
       [12,35,[4,8,[0,2,2],0,[4,8,[0,2,2],0,[4,8,[0,2,2],0,0]]]],
       caml_string_of_jsbytes("#%02X%02X%02X")],
     _bX_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,0,0,0,[12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("rgb(%d,%d,%d)")],
     _bY_=
      [0,
       [11,
        caml_string_of_jsbytes("rgb("),
        [4,
         0,
         0,
         0,
         [12,37,[12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]]],
       caml_string_of_jsbytes("rgb(%d%%,%d%%,%d%%)")],
     _bZ_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,44,[4,0,0,0,[12,44,[8,[0,0,0],0,0,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d,%d,%d,%f)")],
     _b0_=
      [0,
       [11,
        caml_string_of_jsbytes("rgba("),
        [4,
         0,
         0,
         0,
         [12,
          37,
          [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,44,partial]]]]]]]]]],
       caml_string_of_jsbytes("rgba(%d%%,%d%%,%d%%,%f)")],
     _b1_=
      [0,
       [11,
        caml_string_of_jsbytes("hsl("),
        [4,
         0,
         0,
         0,
         [12,44,[4,0,0,0,[12,37,[12,44,[4,0,0,0,[12,37,[12,41,0]]]]]]]]],
       caml_string_of_jsbytes("hsl(%d,%d%%,%d%%)")],
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("hsla("),
        [4,
         0,
         0,
         0,
         [12,
          44,
          [4,
           0,
           0,
           0,
           [12,
            37,
            [12,44,[4,0,0,0,[12,37,[12,44,[8,partial$1,0,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("hsla(%d,%d%%,%d%%,%f)")],
     _u_=[0,240,248,255],
     _v_=[0,250,235,215],
     _w_=[0,0,255,255],
     _x_=[0,127,255,212],
     _y_=[0,240,255,255],
     _z_=[0,245,245,220],
     _A_=[0,255,228,196],
     _B_=[0,0,0,0],
     _C_=[0,255,235,205],
     _D_=[0,0,0,255],
     _E_=[0,138,43,226],
     _F_=[0,165,42,42],
     _G_=[0,222,184,135],
     _H_=[0,95,158,160],
     _I_=[0,127,255,0],
     _J_=[0,210,105,30],
     _K_=[0,255,127,80],
     _L_=[0,100,149,237],
     _M_=[0,255,248,220],
     _N_=[0,220,20,60],
     _O_=[0,0,255,255],
     _P_=[0,0,0,139],
     _Q_=[0,0,139,139],
     _R_=[0,184,134,11],
     _S_=[0,169,169,169],
     _T_=[0,0,100,0],
     _U_=[0,169,169,169],
     _V_=[0,189,183,107],
     _W_=[0,139,0,139],
     _X_=[0,85,107,47],
     _Y_=[0,255,140,0],
     _Z_=[0,153,50,204],
     ___=[0,139,0,0],
     _$_=[0,233,150,122],
     _aa_=[0,143,188,143],
     _ab_=[0,72,61,139],
     _ac_=[0,47,79,79],
     _ad_=[0,47,79,79],
     _ae_=[0,0,206,209],
     _af_=[0,148,0,211],
     _ag_=[0,255,20,147],
     _ah_=[0,0,191,255],
     _ai_=[0,105,105,105],
     _aj_=[0,105,105,105],
     _ak_=[0,30,144,255],
     _al_=[0,178,34,34],
     _am_=[0,255,250,240],
     _an_=[0,34,139,34],
     _ao_=[0,255,0,255],
     _ap_=[0,220,220,220],
     _aq_=[0,248,248,255],
     _ar_=[0,255,215,0],
     _as_=[0,218,165,32],
     _at_=[0,128,128,128],
     _au_=[0,128,128,128],
     _av_=[0,0,128,0],
     _aw_=[0,173,255,47],
     _ax_=[0,240,255,240],
     _ay_=[0,255,105,180],
     _az_=[0,205,92,92],
     _aA_=[0,75,0,130],
     _aB_=[0,255,255,240],
     _aC_=[0,240,230,140],
     _aD_=[0,230,230,250],
     _aE_=[0,255,240,245],
     _aF_=[0,124,252,0],
     _aG_=[0,255,250,205],
     _aH_=[0,173,216,230],
     _aI_=[0,240,128,128],
     _aJ_=[0,224,255,255],
     _aK_=[0,250,250,210],
     _aL_=[0,211,211,211],
     _aM_=[0,144,238,144],
     _aN_=[0,211,211,211],
     _aO_=[0,255,182,193],
     _aP_=[0,255,160,122],
     _aQ_=[0,32,178,170],
     _aR_=[0,135,206,250],
     _aS_=[0,119,136,153],
     _aT_=[0,119,136,153],
     _aU_=[0,176,196,222],
     _aV_=[0,255,255,224],
     _aW_=[0,0,255,0],
     _aX_=[0,50,205,50],
     _aY_=[0,250,240,230],
     _aZ_=[0,255,0,255],
     _a0_=[0,128,0,0],
     _a1_=[0,102,205,170],
     _a2_=[0,0,0,205],
     _a3_=[0,186,85,211],
     _a4_=[0,147,112,219],
     _a5_=[0,60,179,113],
     _a6_=[0,123,104,238],
     _a7_=[0,0,250,154],
     _a8_=[0,72,209,204],
     _a9_=[0,199,21,133],
     _a__=[0,25,25,112],
     _a$_=[0,245,255,250],
     _ba_=[0,255,228,225],
     _bb_=[0,255,228,181],
     _bc_=[0,255,222,173],
     _bd_=[0,0,0,128],
     _be_=[0,253,245,230],
     _bf_=[0,128,128,0],
     _bg_=[0,107,142,35],
     _bh_=[0,255,165,0],
     _bi_=[0,255,69,0],
     _bj_=[0,218,112,214],
     _bk_=[0,238,232,170],
     _bl_=[0,152,251,152],
     _bm_=[0,175,238,238],
     _bn_=[0,219,112,147],
     _bo_=[0,255,239,213],
     _bp_=[0,255,218,185],
     _bq_=[0,205,133,63],
     _br_=[0,255,192,203],
     _bs_=[0,221,160,221],
     _bt_=[0,176,224,230],
     _bu_=[0,128,0,128],
     _bv_=[0,255,0,0],
     _bw_=[0,188,143,143],
     _bx_=[0,65,105,225],
     _by_=[0,139,69,19],
     _bz_=[0,250,128,114],
     _bA_=[0,244,164,96],
     _bB_=[0,46,139,87],
     _bC_=[0,255,245,238],
     _bD_=[0,160,82,45],
     _bE_=[0,192,192,192],
     _bF_=[0,135,206,235],
     _bG_=[0,106,90,205],
     _bH_=[0,112,128,144],
     _bI_=[0,112,128,144],
     _bJ_=[0,255,250,250],
     _bK_=[0,0,255,127],
     _bL_=[0,70,130,180],
     _bM_=[0,210,180,140],
     _bN_=[0,0,128,128],
     _bO_=[0,216,191,216],
     _bP_=[0,255,99,71],
     _bQ_=[0,64,224,208],
     _bR_=[0,238,130,238],
     _bS_=[0,245,222,179],
     _bT_=[0,255,255,255],
     _bU_=[0,245,245,245],
     _bV_=[0,255,255,0],
     _bW_=[0,154,205,50];
    function symbol(x,y){return x < y?1:0}
    function symbol$0(x,y){return x <= y?1:0}
    function symbol$1(x,y){return x !== y?1:0}
    function symbol$2(x,y){return x === y?1:0}
    function symbol$3(x,y){return y < x?1:0}
    function symbol$4(x,y){return y <= x?1:0}
    var compare=runtime.caml_int_compare;
    function equal(x,y){return x === y?1:0}
    function max(x,y){return y <= x?x:y}
    function min(x,y){return x <= y?x:y}
    var
     Int_replace_polymorphic_compar=
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
     make=Stdlib_string[1],
     init=Stdlib_string[2],
     copy=Stdlib_string[3],
     sub=Stdlib_string[4],
     fill=Stdlib_string[5],
     blit=Stdlib_string[6],
     concat=Stdlib_string[7],
     iter=Stdlib_string[8],
     iteri=Stdlib_string[9],
     map=Stdlib_string[10],
     mapi=Stdlib_string[11],
     trim=Stdlib_string[12],
     escaped=Stdlib_string[13],
     index=Stdlib_string[14],
     index_opt=Stdlib_string[15],
     rindex=Stdlib_string[16],
     rindex_opt=Stdlib_string[17],
     index_from=Stdlib_string[18],
     index_from_opt=Stdlib_string[19],
     rindex_from=Stdlib_string[20],
     rindex_from_opt=Stdlib_string[21],
     contains=Stdlib_string[22],
     contains_from=Stdlib_string[23],
     rcontains_from=Stdlib_string[24],
     uppercase=Stdlib_string[25],
     lowercase=Stdlib_string[26],
     capitalize=Stdlib_string[27],
     uncapitalize=Stdlib_string[28],
     uppercase_ascii=Stdlib_string[29],
     lowercase_ascii=Stdlib_string[30],
     capitalize_ascii=Stdlib_string[31],
     uncapitalize_ascii=Stdlib_string[32],
     compare$0=Stdlib_string[33],
     split_on_char=Stdlib_string[35],
     to_seq=Stdlib_string[36],
     to_seqi=Stdlib_string[37],
     of_seq=Stdlib_string[38],
     equal$0=runtime.caml_string_equal,
     String=
      [0,
       make,
       init,
       copy,
       sub,
       fill,
       blit,
       concat,
       iter,
       iteri,
       map,
       mapi,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare$0,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       equal$0],
     chr=Stdlib_char[1],
     escaped$0=Stdlib_char[2],
     lowercase$0=Stdlib_char[3],
     uppercase$0=Stdlib_char[4],
     lowercase_ascii$0=Stdlib_char[5],
     uppercase_ascii$0=Stdlib_char[6],
     compare$1=Stdlib_char[7];
    function equal$1(x,y){return x === y?1:0}
    var
     Char=
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
     symbol$5=Int_replace_polymorphic_compar[1],
     symbol$6=Int_replace_polymorphic_compar[2],
     symbol$7=Int_replace_polymorphic_compar[3],
     symbol$8=Int_replace_polymorphic_compar[4],
     symbol$9=Int_replace_polymorphic_compar[5],
     symbol$10=Int_replace_polymorphic_compar[6],
     compare$2=Int_replace_polymorphic_compar[7],
     equal$2=Int_replace_polymorphic_compar[8],
     max$0=Int_replace_polymorphic_compar[9],
     min$0=Int_replace_polymorphic_compar[10],
     Js_of_ocaml_Import=
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
    caml_register_global(1632,Js_of_ocaml_Import,"Js_of_ocaml__Import");
    var
     global=joo_global_object,
     Unsafe=[0,global],
     no_handler=null,
     t39=undefined;
    function return$0(_gF_){return _gF_}
    function map$0(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function bind(x,f){return x == no_handler?no_handler:caml_call1(f,x)}
    function test(x){return 1 - (x == no_handler?1:0)}
    function iter$0(x,f)
     {var _gE_=1 - (x == no_handler?1:0);return _gE_?caml_call1(f,x):_gE_}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x == no_handler?caml_call1(f,0):x}
    function option(x){if(x){var x$0=x[1];return x$0}return no_handler}
    function to_option(x)
     {function _gD_(x){return [0,x]}
      return case$0(x,function(param){return 0},_gD_)}
    var
     Opt=
      [0,
       no_handler,
       return$0,
       map$0,
       bind,
       test,
       iter$0,
       case$0,
       get,
       option,
       to_option];
    function return$1(_gC_){return _gC_}
    function map$1(x,f){return x === t39?t39:caml_call1(f,x)}
    function bind$0(x,f){return x === t39?t39:caml_call1(f,x)}
    function test$0(x){return x !== t39?1:0}
    function iter$1(x,f)
     {var _gB_=x !== t39?1:0;return _gB_?caml_call1(f,x):_gB_}
    function case$1(x,f,g){return x === t39?caml_call1(f,0):caml_call1(g,x)}
    function get$0(x,f){return x === t39?caml_call1(f,0):x}
    function option$0(x){if(x){var x$0=x[1];return x$0}return t39}
    function to_option$0(x)
     {function _gA_(x){return [0,x]}
      return case$1(x,function(param){return 0},_gA_)}
    var
     Optdef=
      [0,
       t39,
       return$1,
       map$1,
       bind$0,
       test$0,
       iter$1,
       case$1,
       get$0,
       option$0,
       to_option$0];
    function coerce(x,f,g)
     {function _gy_(param){return caml_call1(g,x)}
      var _gz_=caml_call1(f,x);
      return caml_call2(Opt[8],_gz_,_gy_)}
    function coerce_opt(x,f,g)
     {function _gw_(param){return caml_call1(g,x)}
      var _gx_=caml_call2(Opt[4],x,f);
      return caml_call2(Opt[8],_gx_,_gw_)}
    var
     true$0=true,
     false$0=false,
     string_constr=Unsafe[1].String,
     regExp_withFlags=Unsafe[1].RegExp,
     object_constructor=Unsafe[1].Object;
    function object_keys(o){return object_constructor.keys(o)}
    var
     array_length=Unsafe[1].Array,
     array_get=caml_js_get,
     array_set=caml_js_set;
    function array_map(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call1(f,x)}))}
    function array_mapi(f,a)
     {return a.map
              (caml_js_wrap_callback
                (function(x,idx,param){return caml_call2(f,idx,x)}))}
    function str_array(_gv_){return _gv_}
    function match_result(_gu_){return _gu_}
    var
     date_ms=Unsafe[1].Date,
     math=Unsafe[1].Math,
     Error=[248,cst_Js_of_ocaml_Js_Error,caml_fresh_oo_id(0)],
     error_constr=Unsafe[1].Error;
    caml_call2(Stdlib_callback[2],cst_jsError,[0,Error,{}]);
    function raise_js_error(exn){throw exn}
    var JSON=Unsafe[1].JSON;
    function decodeURI(s){return Unsafe[1].decodeURI(s)}
    function decodeURIComponent(s){return Unsafe[1].decodeURIComponent(s)}
    function encodeURI(s){return Unsafe[1].encodeURI(s)}
    function encodeURIComponent(s){return Unsafe[1].encodeURIComponent(s)}
    function escape(s){return Unsafe[1].escape(s)}
    function unescape(s){return Unsafe[1].unescape(s)}
    function isNaN(i){return Unsafe[1].isNaN(i) | 0}
    function parseInt(s)
     {var s$0=Unsafe[1].parseInt(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseInt):s$0}
    function parseFloat(s)
     {var s$0=Unsafe[1].parseFloat(s);
      return isNaN(s$0)?caml_call1(Stdlib[2],cst_parseFloat):s$0}
    function _a_(param)
     {if(param[1] === Error)
       {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
      return 0}
    caml_call1(Stdlib_printexc[9],_a_);
    function _b_(e)
     {return e instanceof array_length
              ?0
              :[0,caml_string_of_jsstring(e.toString())]}
    caml_call1(Stdlib_printexc[9],_b_);
    function string_of_error(e){return caml_string_of_jsstring(e.toString())}
    function export_js(field,x)
     {return runtime.caml_js_export_var(0)[field] = x}
    function export$0(field,x)
     {return export_js(caml_jsstring_of_string(field),x)}
    function export_all(obj)
     {var keys=object_keys(obj);
      return keys.forEach
              (caml_js_wrap_callback
                (function(key,param,_gt_){return export_js(key,obj[key])}))}
    function _c_(_gs_){return _gs_}
    var
     Js_of_ocaml_Js=
      [0,
       no_handler,
       function(_gr_){return _gr_},
       t39,
       _c_,
       Opt,
       Optdef,
       true$0,
       false$0,
       string_constr,
       regExp_withFlags,
       regExp_withFlags,
       regExp_withFlags,
       object_keys,
       array_length,
       array_length,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       date_ms,
       math,
       error_constr,
       string_of_error,
       raise_js_error,
       Error,
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$0,
       export_all,
       Unsafe];
    caml_register_global(1636,Js_of_ocaml_Js,"Js_of_ocaml__Js");
    function list_of_nodeList(nodeList)
     {var length=nodeList.length,acc=0,i=0;
      for(;;)
       {if(caml_call2(symbol$5,i,length))
         {var _gq_=nodeList.item(i),match=caml_call1(Opt[10],_gq_);
          if(match)
           {var e=match[1],i$0=i + 1 | 0,acc$0=[0,e,acc],acc=acc$0,i=i$0;
            continue}
          var i$1=i + 1 | 0,i=i$1;
          continue}
        return caml_call1(Stdlib_list[9],acc)}}
    var
     disconnected=1,
     preceding=2,
     following=4,
     contains$0=8,
     contained_by=16,
     implementation_specific=32;
    function has(t,mask){return caml_call2(symbol$8,t & mask,mask)}
    function add(x,y){return x | y}
    var
     DocumentPosition=
      [0,
       disconnected,
       preceding,
       following,
       contains$0,
       contained_by,
       implementation_specific,
       has,
       add,
       add];
    function appendChild(p,n){p.appendChild(n);return 0}
    function removeChild(p,n){p.removeChild(n);return 0}
    function replaceChild(p,n,o){p.replaceChild(n,o);return 0}
    function insertBefore(p,n,o){p.insertBefore(n,o);return 0}
    function nodeType(e)
     {var match=e.nodeType;
      if(match)
       {var switcher=match - 1 | 0;
        switch(switcher)
         {case 0:return [0,e];case 1:return [1,e];case 2:case 3:return [2,e]}}
      return [3,e]}
    function cast(e,t){return e.nodeType === t?e:no_handler}
    function element(e){return cast(e,1)}
    function text(e)
     {if(3 !== e.nodeType && 4 !== e.nodeType)return no_handler;return e}
    function attr(e){return cast(e,2)}
    function handler(f)
     {return function(e)
       {if(caml_call1(Opt[5],e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function full_handler(f)
     {return runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$0,e)
                {if(caml_call1(Opt[5],e))
                  {var res=caml_call2(f,this$0,e);
                   if(1 - (res | 0))e.preventDefault();
                   return res}
                 var e$0=event,res$0=caml_call2(f,this$0,e$0);
                 if(1 - (res$0 | 0))e$0.returnValue = res$0;
                 return res$0})}
    function invoke_handler(f,this$0,event){return f.call(this$0,event)}
    function eventTarget(e)
     {function _gn_(param)
       {function _gp_(param){throw Stdlib[8]}
        return caml_call2(Opt[8],e.srcElement,_gp_)}
      var target=caml_call2(Opt[8],e.target,_gn_);
      if(target instanceof Unsafe[1].Node)
       {if(3 === target.nodeType)
         {var _go_=function(param){throw [0,Assert_failure,_d_]};
          return caml_call2(Opt[8],target.parentNode,_go_)}
        return target}
      return target}
    var make$0=caml_jsstring_of_string,Event=[0,make$0];
    function addEventListenerWithOptions(e,typ,capture,once,passive,h)
     {if(e.addEventListener === t39)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _gk_=[0,h,e,[0]];
            return function(_gl_,_gm_)
             {return runtime.caml_js_call(_gk_,_gl_,_gm_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      var opts={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(b){return opts.capture = b});
      iter(once,function(b){return opts.once = b});
      iter(passive,function(b){return opts.passive = b});
      e.addEventListener(typ,h,opts);
      return function(param){return e.removeEventListener(typ,h,opts)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function removeEventListener(id){return caml_call1(id,0)}
    function preventDefault(ev)
     {return caml_call1(Optdef[5],ev.preventDefault)
              ?ev.preventDefault()
              :ev.returnValue = ! ! 0}
    function createCustomEvent(bubbles,cancelable,detail,typ)
     {function opt_iter(f,param)
       {if(param){var x=param[1];return caml_call1(f,x)}return 0}
      var opts={};
      opt_iter(function(x){return opts.bubbles = ! ! x},bubbles);
      opt_iter(function(x){return opts.cancelable = ! ! x},cancelable);
      opt_iter(function(x){return opts.detail = x},detail);
      var constr=Unsafe[1].CustomEvent;
      return new constr(typ,opts)}
    var
     Js_of_ocaml_Dom=
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0,element,text,attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
    caml_register_global(1639,Js_of_ocaml_Dom,"Js_of_ocaml__Dom");
    var
     arrayBuffer=Unsafe[1].ArrayBuffer,
     int8Array_inBuffer=Unsafe[1].Int8Array,
     uint8Array_fromBuffer=Unsafe[1].Uint8Array,
     int16Array_inBuffer=Unsafe[1].Int16Array,
     uint16Array_inBuffer=Unsafe[1].Uint16Array,
     int32Array_inBuffer=Unsafe[1].Int32Array,
     uint32Array_inBuffer=Unsafe[1].Uint32Array,
     float32Array_inBuffer=Unsafe[1].Float32Array,
     float64Array_inBuffer=Unsafe[1].Float64Array,
     set=caml_js_set,
     get$1=caml_js_get,
     unsafe_get=caml_js_get,
     dataView=Unsafe[1].DataView;
    function of_arrayBuffer(ab)
     {var uint8=new uint8Array_fromBuffer(ab);
      return caml_string_of_array(uint8)}
    var
     Js_of_ocaml_Typed_array=
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       runtime.caml_ba_to_typed_array,
       runtime.caml_ba_from_typed_array,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       int8Array_inBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       uint8Array_fromBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       int16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       uint16Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       int32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       uint32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float32Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       float64Array_inBuffer,
       set,
       get$1,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0,of_arrayBuffer,caml_string_of_array]];
    caml_register_global
     (1640,Js_of_ocaml_Typed_array,"Js_of_ocaml__Typed_array");
    var blob_constr=Unsafe[1].Blob;
    function filter_map(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function blob_raw(contentType,endings,a)
     {var _gg_=0;
      if(endings)
       var _gh_=116179762 <= endings[1]?_e_:_f_,_gi_=_gh_;
      else
       var _gi_=0;
      var
       _gj_=[0,[0,cst_type,contentType],[0,[0,cst_endings,_gi_],_gg_]],
       options=
        filter_map
         (function(param)
           {var v=param[2],name=param[1];
            if(v)
             {var v$0=v[1];return [0,[0,name,caml_jsstring_of_string(v$0)]]}
            return 0},
          _gj_),
       options$0=
        options
         ?runtime.caml_js_object(caml_call1(Stdlib_array[12],options))
         :t39;
      return new blob_constr(caml_js_from_array(a),options$0)}
    function blob_from_string(contentType,endings,s)
     {return blob_raw(contentType,endings,[0,caml_jsstring_of_string(s)])}
    function blob_from_any(contentType,endings,l)
     {function _ge_(param)
       {var _gf_=param[1];
        if(155580615 === _gf_){var s=param[2];return s}
        if(486041214 <= _gf_)
         {if(1037850489 <= _gf_){var a=param[2];return a}
          var a$0=param[2];
          return a$0}
        if(288368849 <= _gf_)
         {var s$0=param[2];return caml_jsstring_of_string(s$0)}
        var b=param[2];
        return b}
      var l$0=caml_call2(Stdlib_list[17],_ge_,l);
      return blob_raw(contentType,endings,caml_call1(Stdlib_array[12],l$0))}
    function filename(file)
     {var match=caml_call1(Optdef[10],file.name);
      if(match){var name=match[1];return name}
      var match$0=caml_call1(Optdef[10],file.fileName);
      if(match$0){var name$0=match$0[1];return name$0}
      return caml_call1(Stdlib[2],cst_can_t_retrieve_file_name_n)}
    var doc_constr=Unsafe[1].Document;
    function document(e){return e instanceof doc_constr?e:no_handler}
    function blob(e){return e instanceof blob_constr?e:no_handler}
    function string(e){return typeof e === "string"?e:no_handler}
    function arrayBuffer$0(e){return e instanceof arrayBuffer?e:no_handler}
    var
     loadstart=caml_call1(Event[1],cst_loadstart),
     progress=caml_call1(Event[1],cst_progress),
     abort=caml_call1(Event[1],cst_abort),
     error=caml_call1(Event[1],cst_error),
     load=caml_call1(Event[1],cst_load),
     loadend=caml_call1(Event[1],cst_loadend),
     ReaderEvent=[0,loadstart,progress,abort,error,load,loadend],
     fileReader=Unsafe[1].FileReader,
     Js_of_ocaml_File=
      [0,
       blob_from_string,
       blob_from_any,
       [0,document,blob,function(_gd_){return _gd_},string,arrayBuffer$0],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
    caml_register_global(1642,Js_of_ocaml_File,"Js_of_ocaml__File");
    var
     onIE=runtime.caml_js_on_ie(0) | 0,
     click=caml_call1(Event[1],cst_click),
     dblclick=caml_call1(Event[1],cst_dblclick),
     mousedown=caml_call1(Event[1],cst_mousedown),
     mouseup=caml_call1(Event[1],cst_mouseup),
     mouseover=caml_call1(Event[1],cst_mouseover),
     mousemove=caml_call1(Event[1],cst_mousemove),
     mouseout=caml_call1(Event[1],cst_mouseout),
     keypress=caml_call1(Event[1],cst_keypress),
     keydown=caml_call1(Event[1],cst_keydown),
     keyup=caml_call1(Event[1],cst_keyup),
     mousewheel=caml_call1(Event[1],cst_mousewheel),
     DOMMouseScroll=caml_call1(Event[1],cst_DOMMouseScroll),
     touchstart=caml_call1(Event[1],cst_touchstart),
     touchmove=caml_call1(Event[1],cst_touchmove),
     touchend=caml_call1(Event[1],cst_touchend),
     touchcancel=caml_call1(Event[1],cst_touchcancel),
     dragstart=caml_call1(Event[1],cst_dragstart),
     dragend=caml_call1(Event[1],cst_dragend),
     dragenter=caml_call1(Event[1],cst_dragenter),
     dragover=caml_call1(Event[1],cst_dragover),
     dragleave=caml_call1(Event[1],cst_dragleave),
     drag=caml_call1(Event[1],cst_drag),
     drop=caml_call1(Event[1],cst_drop),
     hashchange=caml_call1(Event[1],cst_hashchange),
     change=caml_call1(Event[1],cst_change),
     input=caml_call1(Event[1],cst_input),
     timeupdate=caml_call1(Event[1],cst_timeupdate),
     submit=caml_call1(Event[1],cst_submit),
     scroll=caml_call1(Event[1],cst_scroll),
     focus=caml_call1(Event[1],cst_focus),
     blur=caml_call1(Event[1],cst_blur),
     load$0=caml_call1(Event[1],cst_load$0),
     unload=caml_call1(Event[1],cst_unload),
     beforeunload=caml_call1(Event[1],cst_beforeunload),
     resize=caml_call1(Event[1],cst_resize),
     orientationchange=caml_call1(Event[1],cst_orientationchange),
     popstate=caml_call1(Event[1],cst_popstate),
     error$0=caml_call1(Event[1],cst_error$0),
     abort$0=caml_call1(Event[1],cst_abort$0),
     select=caml_call1(Event[1],cst_select),
     online=caml_call1(Event[1],cst_online),
     offline=caml_call1(Event[1],cst_offline),
     checking=caml_call1(Event[1],cst_checking),
     noupdate=caml_call1(Event[1],cst_noupdate),
     downloading=caml_call1(Event[1],cst_downloading),
     progress$0=caml_call1(Event[1],cst_progress$0),
     updateready=caml_call1(Event[1],cst_updateready),
     cached=caml_call1(Event[1],cst_cached),
     obsolete=caml_call1(Event[1],cst_obsolete),
     domContentLoaded=caml_call1(Event[1],cst_DOMContentLoaded),
     animationstart=caml_call1(Event[1],cst_animationstart),
     animationend=caml_call1(Event[1],cst_animationend),
     animationiteration=caml_call1(Event[1],cst_animationiteration),
     animationcancel=caml_call1(Event[1],cst_animationcancel),
     canplay=caml_call1(Event[1],cst_canplay),
     canplaythrough=caml_call1(Event[1],cst_canplaythrough),
     durationchange=caml_call1(Event[1],cst_durationchange),
     emptied=caml_call1(Event[1],cst_emptied),
     ended=caml_call1(Event[1],cst_ended),
     gotpointercapture=caml_call1(Event[1],cst_gotpointercapture),
     loadeddata=caml_call1(Event[1],cst_loadeddata),
     loadedmetadata=caml_call1(Event[1],cst_loadedmetadata),
     loadstart$0=caml_call1(Event[1],cst_loadstart$0),
     lostpointercapture=caml_call1(Event[1],cst_lostpointercapture),
     pause=caml_call1(Event[1],cst_pause),
     play=caml_call1(Event[1],cst_play),
     playing=caml_call1(Event[1],cst_playing),
     pointerenter=caml_call1(Event[1],cst_pointerenter),
     pointercancel=caml_call1(Event[1],cst_pointercancel),
     pointerdown=caml_call1(Event[1],cst_pointerdown),
     pointerleave=caml_call1(Event[1],cst_pointerleave),
     pointermove=caml_call1(Event[1],cst_pointermove),
     pointerout=caml_call1(Event[1],cst_pointerout),
     pointerover=caml_call1(Event[1],cst_pointerover),
     pointerup=caml_call1(Event[1],cst_pointerup),
     ratechange=caml_call1(Event[1],cst_ratechange),
     seeked=caml_call1(Event[1],cst_seeked),
     seeking=caml_call1(Event[1],cst_seeking),
     stalled=caml_call1(Event[1],cst_stalled),
     suspend=caml_call1(Event[1],cst_suspend),
     volumechange=caml_call1(Event[1],cst_volumechange),
     waiting=caml_call1(Event[1],cst_waiting),
     make$1=Event[1],
     Event$0=
      [0,
       click,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       mousewheel,
       DOMMouseScroll,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       hashchange,
       change,
       input,
       timeupdate,
       submit,
       scroll,
       focus,
       blur,
       load$0,
       unload,
       beforeunload,
       resize,
       orientationchange,
       popstate,
       error$0,
       abort$0,
       select,
       online,
       offline,
       checking,
       noupdate,
       downloading,
       progress$0,
       updateready,
       cached,
       obsolete,
       domContentLoaded,
       animationstart,
       animationend,
       animationiteration,
       animationcancel,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       gotpointercapture,
       loadeddata,
       loadedmetadata,
       loadstart$0,
       lostpointercapture,
       pause,
       play,
       playing,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       make$1],
     d="2d";
    function location_origin(loc)
     {function _gb_(o){return o}
      function _gc_(param)
       {var protocol=loc.protocol,hostname=loc.hostname,port=loc.port;
        if
         (caml_call2(symbol$8,protocol.length,0)
          &&
          caml_call2(symbol$8,hostname.length,0))
         return "";
        var origin=protocol.concat("//",hostname);
        return caml_call2(symbol$9,port.length,0)
                ?origin.concat(":",loc.port)
                :origin}
      return caml_call3(Optdef[7],loc.origin,_gc_,_gb_)}
    var _g_=Unsafe[1],document$0=_g_.document;
    function getElementById(id)
     {function _f__(pnode){return pnode}
      function _f$_(param){throw Stdlib[8]}
      var _ga_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_ga_,_f$_,_f__)}
    function getElementById_exn(id)
     {function _f6_(pnode){return pnode}
      function _f7_(param)
       {var _f9_=caml_call2(Stdlib_printf[4],_h_,id);
        return caml_call1(Stdlib[2],_f9_)}
      var _f8_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_f8_,_f7_,_f6_)}
    function getElementById_opt(id)
     {var _f5_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call1(Opt[10],_f5_)}
    function getElementById_coerce(id,coerce)
     {function _f1_(e)
       {var _f4_=caml_call1(coerce,e);return caml_call1(Opt[10],_f4_)}
      function _f2_(param){return 0}
      var _f3_=document$0.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_f3_,_f2_,_f1_)}
    function opt_iter(x,f){if(x){var v=x[1];return caml_call1(f,v)}return 0}
    function createElement(doc,name)
     {return doc.createElement(caml_jsstring_of_string(name))}
    function unsafeCreateElement(doc,name){return createElement(doc,name)}
    var createElementSyntax=[0,785140586];
    function unsafeCreateElementEx(type,name,doc,elt)
     {for(;;)
       {if(0 === type && 0 === name)return createElement(doc,elt);
        var _fV_=createElementSyntax[1];
        if(785140586 === _fV_)
         {try
           {var
             el=document$0.createElement('<input name="x">'),
             _fY_=el.tagName.toLowerCase() === "input"?1:0,
             _fZ_=_fY_?el.name === "x"?1:0:_fY_,
             _fW_=_fZ_}
          catch(_f0_){var _fW_=0}
          var _fX_=_fW_?982028505:-1003883683;
          createElementSyntax[1] = _fX_;
          continue}
        if(982028505 <= _fV_)
         {var a=new array_length();
          a.push("<",caml_jsstring_of_string(elt));
          opt_iter
           (type,
            function(t){a.push(' type="',caml_js_html_escape(t),'"');return 0});
          opt_iter
           (name,
            function(n){a.push(' name="',caml_js_html_escape(n),'"');return 0});
          a.push(">");
          return doc.createElement(a.join(""))}
        var res=createElement(doc,elt);
        opt_iter(type,function(t){return res.type = t});
        opt_iter(name,function(n){return res.name = n});
        return res}}
    function createHtml(doc){return unsafeCreateElement(doc,cst_html)}
    function createHead(doc){return unsafeCreateElement(doc,cst_head)}
    function createLink(doc){return unsafeCreateElement(doc,cst_link)}
    function createTitle(doc){return unsafeCreateElement(doc,cst_title)}
    function createMeta(doc){return unsafeCreateElement(doc,cst_meta)}
    function createBase(doc){return unsafeCreateElement(doc,cst_base)}
    function createStyle(doc){return unsafeCreateElement(doc,cst_style)}
    function createBody(doc){return unsafeCreateElement(doc,cst_body)}
    function createForm(doc){return unsafeCreateElement(doc,cst_form)}
    function createOptgroup(doc){return unsafeCreateElement(doc,cst_optgroup)}
    function createOption(doc){return unsafeCreateElement(doc,cst_option)}
    function createSelect(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_select$0)}
    function createInput(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_input$0)}
    function createTextarea(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_textarea)}
    function createButton(type,name,doc)
     {return unsafeCreateElementEx(type,name,doc,cst_button)}
    function createLabel(doc){return unsafeCreateElement(doc,cst_label)}
    function createFieldset(doc){return unsafeCreateElement(doc,cst_fieldset)}
    function createLegend(doc){return unsafeCreateElement(doc,cst_legend)}
    function createUl(doc){return unsafeCreateElement(doc,cst_ul)}
    function createOl(doc){return unsafeCreateElement(doc,cst_ol)}
    function createDl(doc){return unsafeCreateElement(doc,cst_dl)}
    function createLi(doc){return unsafeCreateElement(doc,cst_li)}
    function createDiv(doc){return unsafeCreateElement(doc,cst_div)}
    function createEmbed(doc){return unsafeCreateElement(doc,cst_embed)}
    function createP(doc){return unsafeCreateElement(doc,cst_p)}
    function createH1(doc){return unsafeCreateElement(doc,cst_h1)}
    function createH2(doc){return unsafeCreateElement(doc,cst_h2)}
    function createH3(doc){return unsafeCreateElement(doc,cst_h3)}
    function createH4(doc){return unsafeCreateElement(doc,cst_h4)}
    function createH5(doc){return unsafeCreateElement(doc,cst_h5)}
    function createH6(doc){return unsafeCreateElement(doc,cst_h6)}
    function createQ(doc){return unsafeCreateElement(doc,cst_q)}
    function createBlockquote(doc)
     {return unsafeCreateElement(doc,cst_blockquote)}
    function createPre(doc){return unsafeCreateElement(doc,cst_pre)}
    function createBr(doc){return unsafeCreateElement(doc,cst_br)}
    function createHr(doc){return unsafeCreateElement(doc,cst_hr)}
    function createIns(doc){return unsafeCreateElement(doc,cst_ins)}
    function createDel(doc){return unsafeCreateElement(doc,cst_del)}
    function createA(doc){return unsafeCreateElement(doc,cst_a)}
    function createImg(doc){return unsafeCreateElement(doc,cst_img)}
    function createObject(doc){return unsafeCreateElement(doc,cst_object)}
    function createParam(doc){return unsafeCreateElement(doc,cst_param)}
    function createMap(doc){return unsafeCreateElement(doc,cst_map)}
    function createArea(doc){return unsafeCreateElement(doc,cst_area)}
    function createScript(doc){return unsafeCreateElement(doc,cst_script)}
    function createTable(doc){return unsafeCreateElement(doc,cst_table)}
    function createCaption(doc){return unsafeCreateElement(doc,cst_caption)}
    function createCol(doc){return unsafeCreateElement(doc,cst_col)}
    function createColgroup(doc){return unsafeCreateElement(doc,cst_colgroup)}
    function createThead(doc){return unsafeCreateElement(doc,cst_thead)}
    function createTfoot(doc){return unsafeCreateElement(doc,cst_tfoot)}
    function createTbody(doc){return unsafeCreateElement(doc,cst_tbody)}
    function createTr(doc){return unsafeCreateElement(doc,cst_tr)}
    function createTh(doc){return unsafeCreateElement(doc,cst_th)}
    function createTd(doc){return unsafeCreateElement(doc,cst_td)}
    function createSub(doc){return createElement(doc,cst_sub)}
    function createSup(doc){return createElement(doc,cst_sup)}
    function createSpan(doc){return createElement(doc,cst_span)}
    function createTt(doc){return createElement(doc,cst_tt)}
    function createI(doc){return createElement(doc,cst_i)}
    function createB(doc){return createElement(doc,cst_b)}
    function createBig(doc){return createElement(doc,cst_big)}
    function createSmall(doc){return createElement(doc,cst_small)}
    function createEm(doc){return createElement(doc,cst_em)}
    function createStrong(doc){return createElement(doc,cst_strong)}
    function createCite(doc){return createElement(doc,cst_cite)}
    function createDfn(doc){return createElement(doc,cst_dfn)}
    function createCode(doc){return createElement(doc,cst_code)}
    function createSamp(doc){return createElement(doc,cst_samp)}
    function createKbd(doc){return createElement(doc,cst_kbd)}
    function createVar(doc){return createElement(doc,cst_var)}
    function createAbbr(doc){return createElement(doc,cst_abbr)}
    function createDd(doc){return createElement(doc,cst_dd)}
    function createDt(doc){return createElement(doc,cst_dt)}
    function createNoscript(doc){return createElement(doc,cst_noscript)}
    function createAddress(doc){return createElement(doc,cst_address)}
    function createFrameset(doc){return unsafeCreateElement(doc,cst_frameset)}
    function createFrame(doc){return unsafeCreateElement(doc,cst_frame)}
    function createIframe(doc){return unsafeCreateElement(doc,cst_iframe)}
    function createAudio(doc){return unsafeCreateElement(doc,cst_audio)}
    function createVideo(doc){return unsafeCreateElement(doc,cst_video)}
    var
     Canvas_not_available=
      [248,cst_Js_of_ocaml_Dom_html_Canva,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,cst_canvas);
      if(1 - caml_call1(Opt[5],c.getContext))throw Canvas_not_available;
      return c}
    var
     html_element=Unsafe[1].HTMLElement,
     element$0=
      html_element === t39
       ?function(e){return e.innerHTML === t39?no_handler:e}
       :function(e){return e instanceof html_element?e:no_handler};
    function unsafeCoerce(tag,e)
     {var _fU_=caml_jsstring_of_string(tag);
      return e.tagName.toLowerCase() === _fU_?e:no_handler}
    function a(e){return unsafeCoerce(cst_a$0,e)}
    function area(e){return unsafeCoerce(cst_area$0,e)}
    function base(e){return unsafeCoerce(cst_base$0,e)}
    function blockquote(e){return unsafeCoerce(cst_blockquote$0,e)}
    function body(e){return unsafeCoerce(cst_body$0,e)}
    function br(e){return unsafeCoerce(cst_br$0,e)}
    function button(e){return unsafeCoerce(cst_button$0,e)}
    function canvas(e){return unsafeCoerce(cst_canvas$0,e)}
    function caption(e){return unsafeCoerce(cst_caption$0,e)}
    function col(e){return unsafeCoerce(cst_col$0,e)}
    function colgroup(e){return unsafeCoerce(cst_colgroup$0,e)}
    function del(e){return unsafeCoerce(cst_del$0,e)}
    function div(e){return unsafeCoerce(cst_div$0,e)}
    function dl(e){return unsafeCoerce(cst_dl$0,e)}
    function fieldset(e){return unsafeCoerce(cst_fieldset$0,e)}
    function embed(e){return unsafeCoerce(cst_embed$0,e)}
    function form(e){return unsafeCoerce(cst_form$0,e)}
    function frameset(e){return unsafeCoerce(cst_frameset$0,e)}
    function frame(e){return unsafeCoerce(cst_frame$0,e)}
    function h1(e){return unsafeCoerce(cst_h1$0,e)}
    function h2(e){return unsafeCoerce(cst_h2$0,e)}
    function h3(e){return unsafeCoerce(cst_h3$0,e)}
    function h4(e){return unsafeCoerce(cst_h4$0,e)}
    function h5(e){return unsafeCoerce(cst_h5$0,e)}
    function h6(e){return unsafeCoerce(cst_h6$0,e)}
    function head(e){return unsafeCoerce(cst_head$0,e)}
    function hr(e){return unsafeCoerce(cst_hr$0,e)}
    function html(e){return unsafeCoerce(cst_html$0,e)}
    function iframe(e){return unsafeCoerce(cst_iframe$0,e)}
    function img(e){return unsafeCoerce(cst_img$0,e)}
    function input$0(e){return unsafeCoerce(cst_input$1,e)}
    function ins(e){return unsafeCoerce(cst_ins$0,e)}
    function label(e){return unsafeCoerce(cst_label$0,e)}
    function legend(e){return unsafeCoerce(cst_legend$0,e)}
    function li(e){return unsafeCoerce(cst_li$0,e)}
    function link(e){return unsafeCoerce(cst_link$0,e)}
    function map$2(e){return unsafeCoerce(cst_map$0,e)}
    function meta(e){return unsafeCoerce(cst_meta$0,e)}
    function object(e){return unsafeCoerce(cst_object$0,e)}
    function ol(e){return unsafeCoerce(cst_ol$0,e)}
    function optgroup(e){return unsafeCoerce(cst_optgroup$0,e)}
    function option$1(e){return unsafeCoerce(cst_option$0,e)}
    function p(e){return unsafeCoerce(cst_p$0,e)}
    function param(e){return unsafeCoerce(cst_param$0,e)}
    function pre(e){return unsafeCoerce(cst_pre$0,e)}
    function q(e){return unsafeCoerce(cst_q$0,e)}
    function script(e){return unsafeCoerce(cst_script$0,e)}
    function select$0(e){return unsafeCoerce(cst_select$1,e)}
    function style(e){return unsafeCoerce(cst_style$0,e)}
    function table(e){return unsafeCoerce(cst_table$0,e)}
    function tbody(e){return unsafeCoerce(cst_tbody$0,e)}
    function td(e){return unsafeCoerce(cst_td$0,e)}
    function textarea(e){return unsafeCoerce(cst_textarea$0,e)}
    function tfoot(e){return unsafeCoerce(cst_tfoot$0,e)}
    function th(e){return unsafeCoerce(cst_th$0,e)}
    function thead(e){return unsafeCoerce(cst_thead$0,e)}
    function title(e){return unsafeCoerce(cst_title$0,e)}
    function tr(e){return unsafeCoerce(cst_tr$0,e)}
    function ul(e){return unsafeCoerce(cst_ul$0,e)}
    function audio(e){return unsafeCoerce(cst_audio$0,e)}
    function video(e){return unsafeCoerce(cst_video$0,e)}
    function unsafeCoerceEvent(constr,ev)
     {if(constr !== t39 && ev instanceof constr)return ev;return no_handler}
    function mouseEvent(ev){return unsafeCoerceEvent(Unsafe[1].MouseEvent,ev)}
    function keyboardEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].KeyboardEvent,ev)}
    function wheelEvent(ev){return unsafeCoerceEvent(Unsafe[1].WheelEvent,ev)}
    function mouseScrollEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].MouseScrollEvent,ev)}
    function popStateEvent(ev)
     {return unsafeCoerceEvent(Unsafe[1].PopStateEvent,ev)}
    function eventRelatedTarget(e)
     {function _fR_(param)
       {var match=caml_string_of_jsstring(e.type);
        if(caml_string_notequal(match,cst_mouseout$0))
         {if(caml_string_notequal(match,cst_mouseover$0))return no_handler;
          var _fS_=function(param){throw [0,Assert_failure,_i_]};
          return caml_call2(Optdef[8],e.fromElement,_fS_)}
        function _fT_(param){throw [0,Assert_failure,_j_]}
        return caml_call2(Optdef[8],e.toElement,_fT_)}
      return caml_call2(Optdef[8],e.relatedTarget,_fR_)}
    function eventAbsolutePosition(e)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              (e.clientX + body.scrollLeft | 0) + html.scrollLeft | 0,
              (e.clientY + body.scrollTop | 0) + html.scrollTop | 0]}
    function eventAbsolutePosition$0(e)
     {function _fN_(x)
       {function _fP_(y){return [0,x,y]}
        function _fQ_(param){return eventAbsolutePosition(e)}
        return caml_call3(Optdef[7],e.pageY,_fQ_,_fP_)}
      function _fO_(param){return eventAbsolutePosition(e)}
      return caml_call3(Optdef[7],e.pageX,_fO_,_fN_)}
    function elementClientPosition(e)
     {var
       r=e.getBoundingClientRect(),
       body=document$0.body,
       html=document$0.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    function getDocumentScroll(param)
     {var body=document$0.body,html=document$0.documentElement;
      return [0,
              body.scrollLeft + html.scrollLeft | 0,
              body.scrollTop + html.scrollTop | 0]}
    function buttonPressed(ev)
     {function _fL_(x){return x}
      function _fM_(param)
       {var match=ev.button,switcher=match - 1 | 0;
        if(! (3 < switcher >>> 0))
         switch(switcher)
          {case 0:return 1;case 1:return 3;case 2:break;default:return 2}
        return 0}
      return caml_call3(Optdef[7],ev.which,_fM_,_fL_)}
    function addMousewheelEventListenerWith(e,capture,once,passive,h)
     {var d=createDiv(document$0);
      d.setAttribute("onmousewheel","return;");
      if(typeof d.onmousewheel === "function")
       {var
         _fH_=
          handler
           (function(e)
             {function _fJ_(param){return 0}
              var
               dx=
                (- caml_call2(Optdef[8],e.wheelDeltaX,_fJ_) | 0) / 40 | 0;
              function _fK_(param){return e.wheelDelta}
              var
               dy=
                (- caml_call2(Optdef[8],e.wheelDeltaY,_fK_) | 0) / 40 | 0;
              return caml_call3(h,e,dx,dy)});
        return addEventListenerWithOptions
                (e,Event$0[11],capture,once,passive,_fH_)}
      var
       _fI_=
        handler
         (function(e)
           {var d=e.detail;
            return e.axis === e.HORIZONTAL
                    ?caml_call3(h,e,d,0)
                    :caml_call3(h,e,0,d)});
      return addEventListenerWithOptions
              (e,Event$0[12],capture,once,passive,_fI_)}
    function addMousewheelEventListener(e,h,capt)
     {return addMousewheelEventListenerWith(e,[0,capt],0,0,h)}
    function f(v)
     {var
       match=caml_string_of_jsstring(v),
       switch$0=caml_string_compare(match,cst_KeyH);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 8;
        var switch$1=caml_string_compare(match,cst_Numpad4);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 72;
          var switch$2=caml_string_compare(match,cst_PageUp);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 98;
            var switch$3=caml_string_compare(match,cst_ShiftRight);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 91;
              if(! caml_string_notequal(match,cst_Slash))return 55;
              if(! caml_string_notequal(match,cst_Space))return 41;
              if(! caml_string_notequal(match,cst_Tab))return 39;
              if(! caml_string_notequal(match,cst_VolumeDown))return 103;
              if(! caml_string_notequal(match,cst_VolumeMute))return 102;
              if(! caml_string_notequal(match,cst_VolumeUp))return 104}
            else
             {if(! caml_string_notequal(match,cst_Pause))return 123;
              if(! caml_string_notequal(match,cst_Period))return 54;
              if(! caml_string_notequal(match,cst_PrintScreen))return 120;
              if(! caml_string_notequal(match,cst_Quote))return 50;
              if(! caml_string_notequal(match,cst_ScrollLock))return 119;
              if(! caml_string_notequal(match,cst_Semicolon))return 49;
              if(! caml_string_notequal(match,cst_ShiftLeft))return 90}}
          else
           {var switch$4=caml_string_compare(match,cst_NumpadDivide);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 84;
              if(! caml_string_notequal(match,cst_NumpadEnter))return 83;
              if(! caml_string_notequal(match,cst_NumpadEqual))return 82;
              if(! caml_string_notequal(match,cst_NumpadMultiply))return 78;
              if(! caml_string_notequal(match,cst_NumpadSubtract))return 79;
              if(! caml_string_notequal(match,cst_OSLeft))return 117;
              if(! caml_string_notequal(match,cst_OSRight))return 118;
              if(! caml_string_notequal(match,cst_PageDown))return 99}
            else
             {if(! caml_string_notequal(match,cst_Numpad5))return 73;
              if(! caml_string_notequal(match,cst_Numpad6))return 74;
              if(! caml_string_notequal(match,cst_Numpad7))return 75;
              if(! caml_string_notequal(match,cst_Numpad8))return 76;
              if(! caml_string_notequal(match,cst_Numpad9))return 77;
              if(! caml_string_notequal(match,cst_NumpadAdd))return 80;
              if(! caml_string_notequal(match,cst_NumpadDecimal))return 81}}}
        else
         {var switch$5=caml_string_compare(match,cst_KeyX);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 24;
            var switch$6=caml_string_compare(match,cst_MetaRight);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 89;
              if(! caml_string_notequal(match,cst_Minus))return 37;
              if(! caml_string_notequal(match,cst_NumLock))return 85;
              if(! caml_string_notequal(match,cst_Numpad0))return 68;
              if(! caml_string_notequal(match,cst_Numpad1))return 69;
              if(! caml_string_notequal(match,cst_Numpad2))return 70;
              if(! caml_string_notequal(match,cst_Numpad3))return 71}
            else
             {if(! caml_string_notequal(match,cst_KeyY))return 25;
              if(! caml_string_notequal(match,cst_KeyZ))return 26;
              if(! caml_string_notequal(match,cst_MediaPlayPause))return 107;
              if(! caml_string_notequal(match,cst_MediaStop))return 108;
              if(! caml_string_notequal(match,cst_MediaTrackNext))return 106;
              if(! caml_string_notequal(match,cst_MediaTrackPrevious))
               return 105;
              if(! caml_string_notequal(match,cst_MetaLeft))return 88}}
          else
           {var switch$7=caml_string_compare(match,cst_KeyP);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 16;
              if(! caml_string_notequal(match,cst_KeyQ))return 17;
              if(! caml_string_notequal(match,cst_KeyR))return 18;
              if(! caml_string_notequal(match,cst_KeyS))return 19;
              if(! caml_string_notequal(match,cst_KeyT))return 20;
              if(! caml_string_notequal(match,cst_KeyU))return 21;
              if(! caml_string_notequal(match,cst_KeyV))return 22;
              if(! caml_string_notequal(match,cst_KeyW))return 23}
            else
             {if(! caml_string_notequal(match,cst_KeyI))return 9;
              if(! caml_string_notequal(match,cst_KeyJ))return 10;
              if(! caml_string_notequal(match,cst_KeyK))return 11;
              if(! caml_string_notequal(match,cst_KeyL))return 12;
              if(! caml_string_notequal(match,cst_KeyM))return 13;
              if(! caml_string_notequal(match,cst_KeyN))return 14;
              if(! caml_string_notequal(match,cst_KeyO))return 15}}}}
      else
       {var switch$8=caml_string_compare(match,cst_Digit6);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 33;
          var switch$9=caml_string_compare(match,cst_F6);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 61;
            var switch$10=caml_string_compare(match,cst_KeyA);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 1;
              if(! caml_string_notequal(match,cst_KeyB))return 2;
              if(! caml_string_notequal(match,cst_KeyC))return 3;
              if(! caml_string_notequal(match,cst_KeyD))return 4;
              if(! caml_string_notequal(match,cst_KeyE))return 5;
              if(! caml_string_notequal(match,cst_KeyF))return 6;
              if(! caml_string_notequal(match,cst_KeyG))return 7}
            else
             {if(! caml_string_notequal(match,cst_F7))return 62;
              if(! caml_string_notequal(match,cst_F8))return 63;
              if(! caml_string_notequal(match,cst_F9))return 64;
              if(! caml_string_notequal(match,cst_Home))return 100;
              if(! caml_string_notequal(match,cst_Insert))return 44;
              if(! caml_string_notequal(match,cst_IntlBackslash))return 121;
              if(! caml_string_notequal(match,cst_IntlYen))return 122}}
          else
           {var switch$11=caml_string_compare(match,cst_F1);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 56;
              if(! caml_string_notequal(match,cst_F10))return 65;
              if(! caml_string_notequal(match,cst_F11))return 66;
              if(! caml_string_notequal(match,cst_F12))return 67;
              if(! caml_string_notequal(match,cst_F2))return 57;
              if(! caml_string_notequal(match,cst_F3))return 58;
              if(! caml_string_notequal(match,cst_F4))return 59;
              if(! caml_string_notequal(match,cst_F5))return 60}
            else
             {if(! caml_string_notequal(match,cst_Digit7))return 34;
              if(! caml_string_notequal(match,cst_Digit8))return 35;
              if(! caml_string_notequal(match,cst_Digit9))return 36;
              if(! caml_string_notequal(match,cst_End))return 101;
              if(! caml_string_notequal(match,cst_Enter))return 40;
              if(! caml_string_notequal(match,cst_Equal))return 38;
              if(! caml_string_notequal(match,cst_Escape))return 42}}}
        else
         {var switch$12=caml_string_compare(match,cst_BrowserRefresh);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 113;
            var switch$13=caml_string_compare(match,cst_Delete);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 45;
              if(! caml_string_notequal(match,cst_Digit0))return 27;
              if(! caml_string_notequal(match,cst_Digit1))return 28;
              if(! caml_string_notequal(match,cst_Digit2))return 29;
              if(! caml_string_notequal(match,cst_Digit3))return 30;
              if(! caml_string_notequal(match,cst_Digit4))return 31;
              if(! caml_string_notequal(match,cst_Digit5))return 32}
            else
             {if(! caml_string_notequal(match,cst_BrowserSearch))return 110;
              if(! caml_string_notequal(match,cst_BrowserStop))return 114;
              if(! caml_string_notequal(match,cst_CapsLock))return 46;
              if(! caml_string_notequal(match,cst_Comma))return 53;
              if(! caml_string_notequal(match,cst_ContextMenu))return 109;
              if(! caml_string_notequal(match,cst_ControlLeft))return 86;
              if(! caml_string_notequal(match,cst_ControlRight))return 87}}
          else
           {var switch$14=caml_string_compare(match,cst_Backslash);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 52;
              if(! caml_string_notequal(match,cst_Backspace))return 43;
              if(! caml_string_notequal(match,cst_BracketLeft))return 47;
              if(! caml_string_notequal(match,cst_BracketRight))return 48;
              if(! caml_string_notequal(match,cst_BrowserBack))return 116;
              if(! caml_string_notequal(match,cst_BrowserFavorites))
               return 112;
              if(! caml_string_notequal(match,cst_BrowserForward))return 115;
              if(! caml_string_notequal(match,cst_BrowserHome))return 111}
            else
             {if(! caml_string_notequal(match,cst_AltLeft))return 92;
              if(! caml_string_notequal(match,cst_AltRight))return 93;
              if(! caml_string_notequal(match,cst_ArrowDown))return 97;
              if(! caml_string_notequal(match,cst_ArrowLeft))return 94;
              if(! caml_string_notequal(match,cst_ArrowRight))return 95;
              if(! caml_string_notequal(match,cst_ArrowUp))return 96;
              if(! caml_string_notequal(match,cst_Backquote))return 51}}}}
      return 0}
    function try_key_code_left(param)
     {if(19 <= param)
       {if(91 === param)return 88}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 90;case 1:return 86;default:return 92}}
      return 0}
    function try_key_code_right(param)
     {if(19 <= param)
       {if(91 === param)return 89}
      else
       if(16 <= param)
        {var switcher=param - 16 | 0;
         switch(switcher){case 0:return 91;case 1:return 87;default:return 93}}
      return 0}
    function try_key_code_numpad(param)
     {if(47 <= param)
       {var switcher=param - 96 | 0;
        if(! (15 < switcher >>> 0))
         switch(switcher)
          {case 0:return 68;
           case 1:return 69;
           case 2:return 70;
           case 3:return 71;
           case 4:return 72;
           case 5:return 73;
           case 6:return 74;
           case 7:return 75;
           case 8:return 76;
           case 9:return 77;
           case 10:return 78;
           case 11:return 80;
           case 12:break;
           case 13:return 79;
           case 14:return 81;
           default:return 84}}
      else
       if(12 <= param)
        {var switcher$0=param - 12 | 0;
         switch(switcher$0)
          {case 0:return 73;
           case 1:return 83;
           case 21:return 77;
           case 22:return 71;
           case 23:return 69;
           case 24:return 75;
           case 25:return 72;
           case 26:return 76;
           case 27:return 74;
           case 28:return 70;
           case 33:return 68;
           case 34:return 81
           }}
      return 0}
    function try_key_code_normal(param)
     {var switcher=param - 8 | 0;
      if(! (214 < switcher >>> 0))
       {var _fG_=switcher;
        if(67 <= _fG_)
         switch(_fG_)
          {case 67:return 11;
           case 68:return 12;
           case 69:return 13;
           case 70:return 14;
           case 71:return 15;
           case 72:return 16;
           case 73:return 17;
           case 74:return 18;
           case 75:return 19;
           case 76:return 20;
           case 77:return 21;
           case 78:return 22;
           case 79:return 23;
           case 80:return 24;
           case 81:return 25;
           case 82:return 26;
           case 85:return 109;
           case 104:return 56;
           case 105:return 57;
           case 106:return 58;
           case 107:return 59;
           case 108:return 60;
           case 109:return 61;
           case 110:return 62;
           case 111:return 63;
           case 112:return 64;
           case 113:return 65;
           case 114:return 66;
           case 115:return 67;
           case 137:return 119;
           case 178:return 49;
           case 179:return 38;
           case 180:return 53;
           case 181:return 37;
           case 182:return 54;
           case 183:return 55;
           case 184:return 51;
           case 211:return 47;
           case 212:return 52;
           case 213:return 48;
           case 214:return 50
           }
        else
         switch(_fG_)
          {case 0:return 43;
           case 1:return 39;
           case 5:return 40;
           case 11:return 123;
           case 12:return 46;
           case 19:return 42;
           case 24:return 41;
           case 25:return 98;
           case 26:return 99;
           case 27:return 101;
           case 28:return 100;
           case 29:return 94;
           case 30:return 96;
           case 31:return 95;
           case 32:return 97;
           case 34:return 120;
           case 37:return 44;
           case 38:return 45;
           case 40:return 27;
           case 41:return 28;
           case 42:return 29;
           case 43:return 30;
           case 44:return 31;
           case 45:return 32;
           case 46:return 33;
           case 47:return 34;
           case 48:return 35;
           case 49:return 36;
           case 57:return 1;
           case 58:return 2;
           case 59:return 3;
           case 60:return 4;
           case 61:return 5;
           case 62:return 6;
           case 63:return 7;
           case 64:return 8;
           case 65:return 9;
           case 66:return 10
           }}
      return 0}
    function make_unidentified(param){return 0}
    function run_next(value,f,v){return v?v:caml_call1(f,value)}
    function symbol$11(x,f){return caml_call1(f,x)}
    function of_event(evt)
     {var _fz_=evt.keyCode;
      function _fA_(_fF_){return run_next(_fz_,try_key_code_normal,_fF_)}
      var match=evt.location,switcher=match - 1 | 0;
      if(2 < switcher >>> 0)
       var _fB_=make_unidentified;
      else
       switch(switcher)
        {case 0:
          var
           _fw_=evt.keyCode,
           _fB_=function(_fD_){return run_next(_fw_,try_key_code_left,_fD_)};
          break;
         case 1:
          var
           _fx_=evt.keyCode,
           _fB_=function(_fC_){return run_next(_fx_,try_key_code_right,_fC_)};
          break;
         default:
          var
           _fy_=evt.keyCode,
           _fB_=function(_fE_){return run_next(_fy_,try_key_code_numpad,_fE_)}}
      var value=evt.code;
      return symbol$11
              (symbol$11
                (symbol$11
                  (0,
                   function(v)
                    {return v?v:caml_call3(Optdef[7],value,make_unidentified,f)}),
                 _fB_),
               _fA_)}
    function char_of_int(value)
     {if(caml_call2(symbol$5,0,value))
       try
        {var _fu_=[0,caml_call1(Stdlib_uchar[8],value)];return _fu_}
       catch(_fv_){return 0}
      return 0}
    function empty_string(param){return ""}
    function none(param){return 0}
    function of_event$0(evt)
     {var key=caml_call2(Optdef[8],evt.key,empty_string),match=key.length;
      return 0 === match
              ?caml_call3(Optdef[7],evt.charCode,none,char_of_int)
              :1 === match?char_of_int(key.charCodeAt(0) | 0):0}
    function element$1(_ft_){return _ft_}
    function tagged(e)
     {var tag=caml_string_of_jsbytes(e.tagName.toLowerCase());
      if(caml_call2(symbol$8,caml_ml_string_length(tag),0))return [61,e];
      var match=runtime.caml_string_unsafe_get(tag,0),switcher=match - 97 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:
          return caml_string_notequal(tag,cst_a$1)
                  ?caml_string_notequal(tag,cst_area$1)
                    ?caml_string_notequal(tag,cst_audio$1)?[61,e]:[2,e]
                    :[1,e]
                  :[0,e];
         case 1:
          return caml_string_notequal(tag,cst_base$1)
                  ?caml_string_notequal(tag,cst_blockquote$1)
                    ?caml_string_notequal(tag,cst_body$1)
                      ?caml_string_notequal(tag,cst_br$1)
                        ?caml_string_notequal(tag,cst_button$1)?[61,e]:[7,e]
                        :[6,e]
                      :[5,e]
                    :[4,e]
                  :[3,e];
         case 2:
          return caml_string_notequal(tag,cst_canvas$1)
                  ?caml_string_notequal(tag,cst_caption$1)
                    ?caml_string_notequal(tag,cst_col$1)
                      ?caml_string_notequal(tag,cst_colgroup$1)?[61,e]:[11,e]
                      :[10,e]
                    :[9,e]
                  :[8,e];
         case 3:
          return caml_string_notequal(tag,cst_del$1)
                  ?caml_string_notequal(tag,cst_div$1)
                    ?caml_string_notequal(tag,cst_dl$1)?[61,e]:[14,e]
                    :[13,e]
                  :[12,e];
         case 4:return caml_string_notequal(tag,cst_embed$1)?[61,e]:[15,e];
         case 5:
          return caml_string_notequal(tag,cst_fieldset$1)
                  ?caml_string_notequal(tag,cst_form$1)
                    ?caml_string_notequal(tag,cst_frame$1)
                      ?caml_string_notequal(tag,cst_frameset$1)?[61,e]:[18,e]
                      :[19,e]
                    :[17,e]
                  :[16,e];
         case 7:
          return caml_string_notequal(tag,cst_h1$1)
                  ?caml_string_notequal(tag,cst_h2$1)
                    ?caml_string_notequal(tag,cst_h3$1)
                      ?caml_string_notequal(tag,cst_h4$1)
                        ?caml_string_notequal(tag,cst_h5$1)
                          ?caml_string_notequal(tag,cst_h6$1)
                            ?caml_string_notequal(tag,cst_head$1)
                              ?caml_string_notequal(tag,cst_hr$1)
                                ?caml_string_notequal(tag,cst_html$1)?[61,e]:[28,e]
                                :[27,e]
                              :[26,e]
                            :[25,e]
                          :[24,e]
                        :[23,e]
                      :[22,e]
                    :[21,e]
                  :[20,e];
         case 8:
          return caml_string_notequal(tag,cst_iframe$1)
                  ?caml_string_notequal(tag,cst_img$1)
                    ?caml_string_notequal(tag,cst_input$2)
                      ?caml_string_notequal(tag,cst_ins$1)?[61,e]:[32,e]
                      :[31,e]
                    :[30,e]
                  :[29,e];
         case 11:
          return caml_string_notequal(tag,cst_label$1)
                  ?caml_string_notequal(tag,cst_legend$1)
                    ?caml_string_notequal(tag,cst_li$1)
                      ?caml_string_notequal(tag,cst_link$1)?[61,e]:[36,e]
                      :[35,e]
                    :[34,e]
                  :[33,e];
         case 12:
          return caml_string_notequal(tag,cst_map$1)
                  ?caml_string_notequal(tag,cst_meta$1)?[61,e]:[38,e]
                  :[37,e];
         case 14:
          return caml_string_notequal(tag,cst_object$1)
                  ?caml_string_notequal(tag,cst_ol$1)
                    ?caml_string_notequal(tag,cst_optgroup$1)
                      ?caml_string_notequal(tag,cst_option$1)?[61,e]:[42,e]
                      :[41,e]
                    :[40,e]
                  :[39,e];
         case 15:
          return caml_string_notequal(tag,cst_p$1)
                  ?caml_string_notequal(tag,cst_param$1)
                    ?caml_string_notequal(tag,cst_pre$1)?[61,e]:[45,e]
                    :[44,e]
                  :[43,e];
         case 16:return caml_string_notequal(tag,cst_q$1)?[61,e]:[46,e];
         case 18:
          return caml_string_notequal(tag,cst_script$1)
                  ?caml_string_notequal(tag,cst_select$2)
                    ?caml_string_notequal(tag,cst_style$1)?[61,e]:[49,e]
                    :[48,e]
                  :[47,e];
         case 19:
          return caml_string_notequal(tag,cst_table$1)
                  ?caml_string_notequal(tag,cst_tbody$1)
                    ?caml_string_notequal(tag,cst_td$1)
                      ?caml_string_notequal(tag,cst_textarea$1)
                        ?caml_string_notequal(tag,cst_tfoot$1)
                          ?caml_string_notequal(tag,cst_th$1)
                            ?caml_string_notequal(tag,cst_thead$1)
                              ?caml_string_notequal(tag,cst_title$1)
                                ?caml_string_notequal(tag,cst_tr$1)?[61,e]:[58,e]
                                :[57,e]
                              :[56,e]
                            :[55,e]
                          :[54,e]
                        :[53,e]
                      :[52,e]
                    :[51,e]
                  :[50,e];
         case 20:return caml_string_notequal(tag,cst_ul$1)?[61,e]:[59,e];
         case 21:return caml_string_notequal(tag,cst_video$1)?[61,e]:[60,e]
         }
      return [61,e]}
    function opt_tagged(e)
     {function _fr_(e){return [0,tagged(e)]}
      function _fs_(param){return 0}
      return caml_call3(Opt[7],e,_fs_,_fr_)}
    function taggedEvent(ev)
     {function _fc_(ev){return [0,ev]}
      function _fd_(param)
       {function _ff_(ev){return [1,ev]}
        function _fg_(param)
         {function _fi_(ev){return [2,ev]}
          function _fj_(param)
           {function _fl_(ev){return [3,ev]}
            function _fm_(param)
             {function _fo_(ev){return [4,ev]}
              function _fp_(param){return [5,ev]}
              var _fq_=popStateEvent(ev);
              return caml_call3(Opt[7],_fq_,_fp_,_fo_)}
            var _fn_=mouseScrollEvent(ev);
            return caml_call3(Opt[7],_fn_,_fm_,_fl_)}
          var _fk_=wheelEvent(ev);
          return caml_call3(Opt[7],_fk_,_fj_,_fi_)}
        var _fh_=keyboardEvent(ev);
        return caml_call3(Opt[7],_fh_,_fg_,_ff_)}
      var _fe_=mouseEvent(ev);
      return caml_call3(Opt[7],_fe_,_fd_,_fc_)}
    function opt_taggedEvent(ev)
     {function _fa_(ev){return [0,taggedEvent(ev)]}
      function _fb_(param){return 0}
      return caml_call3(Opt[7],ev,_fb_,_fa_)}
    function stopPropagation(ev)
     {function _e__(param){return ev.stopPropagation()}
      function _e$_(param){return ev.cancelBubble = true$0}
      return caml_call3(Optdef[7],ev.stopPropagation,_e$_,_e__)}
    var
     requestAnimationFrame=
      runtime.caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             _g_.requestAnimationFrame,
             [0,
              _g_.mozRequestAnimationFrame,
              [0,
               _g_.webkitRequestAnimationFrame,
               [0,
                _g_.oRequestAnimationFrame,
                [0,_g_.msRequestAnimationFrame,0]]]]];
          try
           {var
             _e7_=function(c){return caml_call1(Optdef[5],c)},
             req=caml_call2(Stdlib_list[35],_e7_,l),
             _e8_=function(callback){return req(callback)};
            return _e8_}
          catch(_e9_)
           {_e9_ = caml_wrap_exception(_e9_);
            if(_e9_ === Stdlib[8])
             {var
               now=function(param){return new date_ms().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                _g_.setTimeout(callback,dt$0);
                return 0}}
            throw _e9_}});
    function hasPushState(param)
     {return caml_call1(Optdef[5],_g_.history.pushState)}
    function hasPlaceholder(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.placeholder)}
    function hasRequired(param)
     {var i=createInput(0,0,document$0);
      return caml_call1(Optdef[5],i.required)}
    var overflow_limit=2147483000.;
    function setTimeout(callback,d)
     {var id=[0,0];
      function loop(step,param)
       {if(2147483000. < step)
         var remain=step - 2147483000.,step$0=overflow_limit;
        else
         var remain=0.,step$0=step;
        var cb=remain == 0.?callback:function(_e6_){return loop(remain,_e6_)};
        id[1] = [0,_g_.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d,0);
      return id}
    function clearTimeout(id)
     {var _e5_=id[1];
      if(_e5_){var x=_e5_[1];id[1] = 0;return _g_.clearTimeout(x)}
      return 0}
    function js_array_of_collection(c){return [].slice.call(c)}
    var
     Js_of_ocaml_Dom_html=
      [0,
       d,
       document$0,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       _g_,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       Event$0,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0,of_event,try_key_code_normal],
       [0,of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$1,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element$0,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map$2,
        meta,
        object,
        ol,
        optgroup,
        option$1,
        p,
        param,
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       runtime.caml_js_html_entities,
       onIE,
       hasPushState,
       hasPlaceholder,
       hasRequired];
    caml_register_global(1645,Js_of_ocaml_Dom_html,"Js_of_ocaml__Dom_html");
    var formData=Unsafe[1].FormData,formData_form=Unsafe[1].FormData;
    function filter_map$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var q=param$0[2],v=param$0[1],match=caml_call1(f,v);
          if(match){var v$0=match[1];return [0,v$0,filter_map$0(f,q)]}
          var param$0=q;
          continue}
        return 0}}
    function have_content(elt)
     {var
       _e3_=caml_call2(symbol$9,elt.name.length,0),
       _e4_=_e3_?1 - (elt.disabled | 0):_e3_;
      return _e4_}
    function form_elements(get,form)
     {var length=form.elements.length;
      function _eR_(i)
       {var _e2_=form.elements.item(i);return caml_call1(Opt[10],_e2_)}
      var
       _eS_=caml_call2(Stdlib_array[2],length,_eR_),
       elements=caml_call1(Stdlib_array[11],_eS_);
      function _eT_(param)
       {if(param)
         {var v=param[1],match$3=tagged(v);
          switch(match$3[0])
           {case 31:
             var v$0=match$3[1];
             if(get)var sth=get[1],get$0=sth;else var get$0=0;
             if(have_content(v$0))
              {var
                name$1=caml_string_of_jsstring(v$0.name),
                value=v$0.value,
                match=caml_string_of_jsbytes(v$0.type.toLowerCase());
               if(caml_string_notequal(match,cst_checkbox))
                {if(! caml_string_notequal(match,cst_file))
                  {if(get$0)return [0,[0,name$1,[0,-976970511,value]],0];
                   var match$0=caml_call1(Optdef[10],v$0.files);
                   if(match$0)
                    {var list=match$0[1];
                     if(caml_call2(symbol$8,list.length,0))
                      return [0,[0,name$1,[0,-976970511,""]],0];
                     var match$1=caml_call1(Optdef[10],v$0.multiple);
                     if(match$1 && match$1[1])
                      {var
                        _eX_=function(i){return list.item(i)},
                        _eY_=caml_call2(Stdlib_array[2],list.length,_eX_),
                        _eZ_=caml_call1(Stdlib_array[11],_eY_);
                       return filter_map$0
                               (function(f)
                                 {var match=caml_call1(Opt[10],f);
                                  if(match)
                                   {var file=match[1];return [0,[0,name$1,[0,781515420,file]]]}
                                  return 0},
                                _eZ_)}
                     var _e0_=list.item(0),match$2=caml_call1(Opt[10],_e0_);
                     if(match$2)
                      {var file=match$2[1];
                       return [0,[0,name$1,[0,781515420,file]],0]}
                     return 0}
                   return 0}
                 var switch$0=0;
                 if(caml_string_notequal(match,cst_password))
                  {if(caml_string_notequal(match,cst_radio))
                    {var switch$1=0;
                     if
                      (caml_string_notequal(match,cst_reset)
                       &&
                       caml_string_notequal(match,cst_submit$0))
                      {if(caml_string_notequal(match,cst_text))
                        return [0,[0,name$1,[0,-976970511,value]],0];
                       switch$0 = 1;
                       switch$1 = 1}
                     if(! switch$1)return 0}}
                 else
                  switch$0 = 1;
                 if(switch$0)return [0,[0,name$1,[0,-976970511,value]],0]}
               return v$0.checked | 0?[0,[0,name$1,[0,-976970511,value]],0]:0}
             return 0;
            case 48:
             var v$1=match$3[1];
             if(have_content(v$1))
              {var name$0=caml_string_of_jsstring(v$1.name);
               if(v$1.multiple | 0)
                {var
                  _eV_=
                   function(i)
                    {var _e1_=v$1.options.item(i);
                     return caml_call1(Opt[10],_e1_)},
                  options=caml_call2(Stdlib_array[2],v$1.options.length,_eV_),
                  _eW_=caml_call1(Stdlib_array[11],options);
                 return filter_map$0
                         (function(param)
                           {if(param)
                             {var e=param[1];
                              return e.selected | 0
                                      ?[0,[0,name$0,[0,-976970511,e.value]]]
                                      :0}
                            return 0},
                          _eW_)}
               return [0,[0,name$0,[0,-976970511,v$1.value]],0]}
             return 0;
            case 53:
             var v$2=match$3[1];
             if(have_content(v$2))
              {var name=caml_string_of_jsstring(v$2.name);
               return [0,[0,name,[0,-976970511,v$2.value]],0]}
             return 0;
            default:return 0}}
        return 0}
      var
       _eU_=caml_call2(Stdlib_list[17],_eT_,elements),
       contents=caml_call1(Stdlib_list[14],_eU_);
      return contents}
    function append(form_contents,form_elt)
     {if(891486873 <= form_contents[1])
       {var list=form_contents[2];list[1] = [0,form_elt,list[1]];return 0}
      var f=form_contents[2],_eP_=form_elt[2],_eQ_=form_elt[1];
      if(781515420 <= _eP_[1])
       {var file=_eP_[2];return f.append(caml_jsstring_of_string(_eQ_),file)}
      var s=_eP_[2];
      return f.append(caml_jsstring_of_string(_eQ_),s)}
    function empty_form_contents(param)
     {var match=caml_call1(Optdef[10],formData);
      if(match){var constr=match[1];return [0,808620462,new constr()]}
      return [0,891486873,[0,0]]}
    function post_form_contents(form)
     {var contents=empty_form_contents(0),_eM_=form_elements(0,form);
      function _eN_(_eO_){return append(contents,_eO_)}
      caml_call2(Stdlib_list[15],_eN_,_eM_);
      return contents}
    function get_form_contents(form)
     {var _eJ_=form_elements(_k_,form);
      function _eK_(param)
       {var _eL_=param[2];
        if(typeof _eL_ !== "number" && -976970511 === _eL_[1])
         {var s=_eL_[2],name=param[1];
          return [0,name,caml_string_of_jsstring(s)]}
        throw [0,Assert_failure,_l_]}
      return caml_call2(Stdlib_list[17],_eK_,_eJ_)}
    var
     Js_of_ocaml_Form=
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
    caml_register_global(1646,Js_of_ocaml_Form,"Js_of_ocaml__Form");
    var
     readystatechange=caml_call1(Event[1],cst_readystatechange),
     loadstart$1=caml_call1(Event[1],cst_loadstart$1),
     progress$1=caml_call1(Event[1],cst_progress$1),
     abort$1=caml_call1(Event[1],cst_abort$1),
     error$1=caml_call1(Event[1],cst_error$1),
     load$1=caml_call1(Event[1],cst_load$1),
     timeout=caml_call1(Event[1],cst_timeout),
     loadend$0=caml_call1(Event[1],cst_loadend$0),
     Event$1=
      [0,
       readystatechange,
       loadstart$1,
       progress$1,
       abort$1,
       error$1,
       load$1,
       timeout,
       loadend$0],
     Js_of_ocaml_XmlHttpRequest=[0,runtime.caml_xmlhttprequest_create,Event$1];
    caml_register_global
     (1647,Js_of_ocaml_XmlHttpRequest,"Js_of_ocaml__XmlHttpRequest");
    var worker=Unsafe[1].Worker;
    function create(script)
     {return new worker(caml_jsstring_of_string(script))}
    function import_scripts(scripts)
     {if(Unsafe[1].importScripts === t39)
       caml_call1(Stdlib[1],cst_Worker_import_scripts_is_u);
      var
       _eH_=caml_call1(Stdlib_array[12],scripts),
       _eI_=caml_call2(Stdlib_array[15],caml_jsstring_of_string,_eH_);
      return runtime.caml_js_fun_call(Unsafe[1].importScripts,_eI_)}
    function set_onmessage(handler)
     {if(Unsafe[1].onmessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi);
      function js_handler(ev){return caml_call1(handler,ev.data)}
      return Unsafe[1].onmessage = caml_js_wrap_callback(js_handler)}
    function post_message(msg)
     {if(Unsafe[1].postMessage === t39)
       caml_call1(Stdlib[1],cst_Worker_onmessage_is_undefi$0);
      return Unsafe[1].postMessage(msg)}
    var
     Js_of_ocaml_Worker=
      [0,create,import_scripts,set_onmessage,post_message];
    caml_register_global(1648,Js_of_ocaml_Worker,"Js_of_ocaml__Worker");
    var webSocket=Unsafe[1].WebSocket;
    function is_supported(param){return caml_call1(Optdef[5],webSocket)}
    var Js_of_ocaml_WebSockets=[0,webSocket,webSocket,webSocket,is_supported];
    caml_register_global
     (1649,Js_of_ocaml_WebSockets,"Js_of_ocaml__WebSockets");
    var
     defaultContextAttributes=
      {"alpha":true$0,
       "depth":true$0,
       "stencil":false$0,
       "antialias":true$0,
       "premultipliedAlpha":false$0,
       "preserveDrawingBuffer":false$0,
       "preferLowPowerToHighPerformance":false$0,
       "failIfMajorPerformanceCaveat":false$0},
     webglcontextlost=caml_call1(Event$0[83],cst_webglcontextlost),
     webglcontextrestored=caml_call1(Event$0[83],cst_webglcontextrestored),
     webglcontextcreationerror=
      caml_call1(Event$0[83],cst_webglcontextcreationerror),
     Event$2=
      [0,webglcontextlost,webglcontextrestored,webglcontextcreationerror];
    function getContext(c)
     {var ctx=c.getContext("webgl");
      return caml_call1(Opt[5],ctx)?ctx:c.getContext("experimental-webgl")}
    function getContextWithAttributes(c,attribs)
     {var ctx=c.getContext("webgl",attribs);
      return caml_call1(Opt[5],ctx)
              ?ctx
              :c.getContext("experimental-webgl",attribs)}
    var
     Js_of_ocaml_WebGL=
      [0,defaultContextAttributes,Event$2,getContext,getContextWithAttributes];
    caml_register_global(1650,Js_of_ocaml_WebGL,"Js_of_ocaml__WebGL");
    function regexp(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"g")}
    function regexp_case_fold(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"gi")}
    function regexp_with_flag(s,f)
     {return new
              regExp_withFlags
              (caml_jsbytes_of_string(s),
               caml_jsstring_of_string(caml_call2(Stdlib[28],cst_g,f)))}
    function blunt_str_array_get(a,i)
     {function _eG_(param){throw [0,Assert_failure,_m_]}
      return caml_string_of_jsbytes(caml_call2(Optdef[8],a[i],_eG_))}
    function string_match(r,s,i)
     {r.lastIndex = i;
      var
       _eE_=r.exec(caml_jsbytes_of_string(s)),
       _eF_=caml_call2(Opt[3],_eE_,match_result);
      return caml_call1(Opt[10],_eF_)}
    function search_forward(r,s,i)
     {r.lastIndex = i;
      function _eB_(res){return [0,res.index,res]}
      var
       _eC_=r.exec(caml_jsbytes_of_string(s)),
       _eD_=caml_call2(Opt[3],_eC_,_eB_);
      return caml_call1(Opt[10],_eD_)}
    function matched_string(r){return blunt_str_array_get(r,0)}
    function matched_group(r,i)
     {var _eA_=caml_call2(Optdef[3],r[i],caml_string_of_jsbytes);
      return caml_call1(Optdef[10],_eA_)}
    var quote_repl_re=new regExp_withFlags("[$]","g");
    function quote_repl(s)
     {return caml_jsbytes_of_string(s).replace(quote_repl_re,"$$$$")}
    function global_replace(r,s,s_by)
     {r.lastIndex = 0;
      return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(r,quote_repl(s_by)))}
    function replace_first(r,s,s_by)
     {var
       match=r.ignoreCase | 0,
       match$0=r.multiline | 0,
       flags=match?match$0?"mi":"i":match$0?"m":"",
       r$0=new regExp_withFlags(r.source,flags);
      return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(r$0,quote_repl(s_by)))}
    function list_of_js_array(a)
     {var idx$1=a.length - 1 | 0,accu=0,idx=idx$1;
      for(;;)
       {if(caml_call2(symbol$5,idx,0))return accu;
        var
         idx$0=idx - 1 | 0,
         accu$0=[0,blunt_str_array_get(a,idx),accu],
         accu=accu$0,
         idx=idx$0;
        continue}}
    function split(r,s)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r))}
    function bounded_split(r,s,i)
     {r.lastIndex = 0;
      return list_of_js_array(caml_jsbytes_of_string(s).split(r,i))}
    var quote_re=regexp(cst);
    function quote(s)
     {return caml_string_of_jsbytes
              (caml_jsbytes_of_string(s).replace(quote_re,"\\$&"))}
    function regexp_string(s){return regexp(quote(s))}
    function regexp_string_case_fold(s){return regexp_case_fold(quote(s))}
    var
     Js_of_ocaml_Regexp=
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_forward,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
    caml_register_global(1651,Js_of_ocaml_Regexp,"Js_of_ocaml__Regexp");
    var Local_exn=[248,cst_Js_of_ocaml_Url_Local_exn,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    var
     plus_re=regexp_string(cst$0),
     plus_re_js_string=new regExp_withFlags("\\+","g");
    function urldecode_js_string_string(s)
     {plus_re_js_string.lastIndex = 0;
      return caml_string_of_jsbytes
              (unescape(s.replace(plus_re_js_string," ")))}
    function urldecode(s)
     {return caml_string_of_jsbytes
              (unescape
                (caml_jsbytes_of_string(global_replace(plus_re,s,cst$1))))}
    function urlencode(opt,s)
     {if(opt)var sth=opt[1],with_plus=sth;else var with_plus=1;
      if(with_plus)
       {var s$0=caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)));
        return global_replace(plus_re,s$0,cst_2B)}
      return caml_string_of_jsbytes(escape(caml_jsbytes_of_string(s)))}
    var
     Not_an_http_protocol=
      [248,cst_Js_of_ocaml_Url_Not_an_htt,caml_fresh_oo_id(0)],
     default_http_port=80,
     default_https_port=443;
    function path_of_path_string(s)
     {var l=caml_ml_string_length(s);
      function aux(i)
       {try
         {var _ey_=caml_call3(String[18],s,i,47),j=_ey_}
        catch(_ez_)
         {_ez_ = caml_wrap_exception(_ez_);
          if(_ez_ !== Stdlib[8])throw _ez_;
          var j=l}
        var word=caml_call3(String[4],s,i,j - i | 0);
        return caml_call2(symbol$10,j,l)?[0,word,0]:[0,word,aux(j + 1 | 0)]}
      var a=aux(0);
      if(a && ! caml_string_notequal(a[1],cst$2))
       {var _ex_=a[2];
        if(! _ex_)return 0;
        if(! caml_string_notequal(_ex_[1],cst$3) && ! _ex_[2])return _n_}
      return a}
    function encode_arguments(l)
     {function _es_(param)
       {var
         v=param[2],
         n=param[1],
         _eu_=urlencode(0,v),
         _ev_=caml_call2(Stdlib[28],cst$4,_eu_),
         _ew_=urlencode(0,n);
        return caml_call2(Stdlib[28],_ew_,_ev_)}
      var _et_=caml_call2(Stdlib_list[17],_es_,l);
      return caml_call2(String[7],cst$5,_et_)}
    function decode_arguments_js_string(s)
     {var
       arr=s.split(caml_jsstring_of_string(caml_call2(String[1],1,38))),
       len=arr.length;
      function aux(acc,idx)
       {var idx$0=idx;
        for(;;)
         {if(caml_call2(symbol$5,idx$0,0))return acc;
          try
           {var
             _ek_=idx$0 - 1 | 0,
             _el_=
              function(s)
               {function _eq_(param)
                 {var
                   y=param[2],
                   x=param[1],
                   _er_=urldecode_js_string_string(y);
                  return [0,urldecode_js_string_string(x),_er_]}
                var
                 index=
                  s.indexOf
                   (caml_jsstring_of_string(caml_call2(String[1],1,61)));
                if(caml_call2(symbol$5,index,0))
                 var _ep_=t39;
                else
                 var
                  _eo_=s.slice(index + 1 | 0),
                  _ep_=[0,s.slice(0,index),_eo_];
                return caml_call3(Optdef[7],_ep_,interrupt,_eq_)},
             _em_=
              aux
               ([0,caml_call3(Optdef[7],arr[idx$0],interrupt,_el_),acc],_ek_);
            return _em_}
          catch(_en_)
           {_en_ = caml_wrap_exception(_en_);
            if(_en_ === Local_exn)
             {var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
            throw _en_}}}
      return aux(0,len - 1 | 0)}
    function decode_arguments(s)
     {return decode_arguments_js_string(caml_jsbytes_of_string(s))}
    var
     url_re=
      new
       regExp_withFlags
       (caml_jsbytes_of_string(cst_Hh_Tt_Tt_Pp_Ss_0_9a_zA_Z_0)),
     file_re=new regExp_withFlags(caml_jsbytes_of_string(cst_Ff_Ii_Ll_Ee));
    function url_of_js_string(s)
     {function _d3_(res)
       {var
         prot_string=caml_call2(Optdef[8],res[1],interrupt),
         match=caml_string_of_jsbytes(prot_string.toLowerCase());
        if
         (caml_string_notequal(match,cst_file$0)
          &&
          caml_string_notequal(match,cst_file$1))
         {var switch$0=0;
          if
           (caml_string_notequal(match,cst_http)
            &&
            caml_string_notequal(match,cst_http$0))
           {var switch$1=0;
            if
             (caml_string_notequal(match,cst_https)
              &&
              caml_string_notequal(match,cst_https$0))
             switch$1 = 1;
            if(! switch$1){var ssl=1;switch$0 = 2}}
          else
           switch$0 = 1;
          var switch$2=0;
          switch(switch$0)
           {case 1:var ssl=0;switch$2 = 1;break;
            case 0:break;
            default:switch$2 = 1}
          if(switch$2)
           {var
             _eb_=function(param){return caml_jsbytes_of_string(cst$7)},
             path_str=
              urldecode_js_string_string(caml_call2(Optdef[8],res[6],_eb_)),
             _ec_=function(param){return caml_jsbytes_of_string(cst$8)},
             _ed_=
              urldecode_js_string_string(caml_call2(Optdef[8],res[10],_ec_)),
             _ee_=function(param){return caml_jsbytes_of_string(cst$9)},
             _ef_=
              decode_arguments_js_string(caml_call2(Optdef[8],res[8],_ee_)),
             _eg_=path_of_path_string(path_str),
             _eh_=function(param){return caml_jsbytes_of_string(cst$10)},
             s=caml_string_of_jsbytes(caml_call2(Optdef[8],res[4],_eh_)),
             _ei_=
              caml_string_notequal(s,cst$6)?caml_int_of_string(s):ssl?443:80,
             url=
              [0,
               urldecode_js_string_string
                (caml_call2(Optdef[8],res[2],interrupt)),
               _ei_,
               _eg_,
               path_str,
               _ef_,
               _ed_],
             _ej_=ssl?[1,url]:[0,url];
            return [0,_ej_]}}
        throw Not_an_http_protocol}
      function _d4_(param)
       {function _d6_(res)
         {var
           path_str=
            urldecode_js_string_string(caml_call2(Optdef[8],res[2],interrupt));
          function _d9_(param){return caml_jsbytes_of_string(cst$11)}
          var _d__=caml_string_of_jsbytes(caml_call2(Optdef[8],res[6],_d9_));
          function _d$_(param){return caml_jsbytes_of_string(cst$12)}
          var
           _ea_=
            decode_arguments_js_string(caml_call2(Optdef[8],res[4],_d$_));
          return [0,[2,[0,path_of_path_string(path_str),path_str,_ea_,_d__]]]}
        function _d7_(param){return 0}
        var _d8_=file_re.exec(s);
        return caml_call3(Opt[7],_d8_,_d7_,_d6_)}
      var _d5_=url_re.exec(s);
      return caml_call3(Opt[7],_d5_,_d4_,_d3_)}
    function url_of_string(s)
     {return url_of_js_string(caml_jsbytes_of_string(s))}
    function string_of_url(param)
     {switch(param[0])
       {case 0:
         var
          match=param[1],
          frag=match[6],
          args=match[5],
          path=match[3],
          port=match[2],
          host=match[1];
         if(caml_string_notequal(frag,cst$13))
          var _dq_=urlencode(0,frag),_dr_=caml_call2(Stdlib[28],cst$14,_dq_);
         else
          var _dr_=cst$21;
         if(args)
          var
           _ds_=encode_arguments(args),
           _dt_=caml_call2(Stdlib[28],cst$15,_ds_);
         else
          var _dt_=cst$20;
         var
          _du_=caml_call2(Stdlib[28],_dt_,_dr_),
          _dv_=function(x){return urlencode(0,x)},
          _dw_=caml_call2(Stdlib_list[17],_dv_,path),
          _dx_=caml_call2(String[7],cst$16,_dw_),
          _dy_=caml_call2(Stdlib[28],_dx_,_du_),
          _dz_=caml_call2(Stdlib[28],cst$17,_dy_);
         if(80 === port)
          var _dA_=cst$18;
         else
          var
           _dE_=caml_call1(Stdlib[33],port),
           _dA_=caml_call2(Stdlib[28],cst$19,_dE_);
         var
          _dB_=caml_call2(Stdlib[28],_dA_,_dz_),
          _dC_=urlencode(0,host),
          _dD_=caml_call2(Stdlib[28],_dC_,_dB_);
         return caml_call2(Stdlib[28],cst_http$1,_dD_);
        case 1:
         var
          match$0=param[1],
          frag$0=match$0[6],
          args$0=match$0[5],
          path$0=match$0[3],
          port$0=match$0[2],
          host$0=match$0[1];
         if(caml_string_notequal(frag$0,cst$22))
          var
           _dF_=urlencode(0,frag$0),
           _dG_=caml_call2(Stdlib[28],cst$23,_dF_);
         else
          var _dG_=cst$30;
         if(args$0)
          var
           _dH_=encode_arguments(args$0),
           _dI_=caml_call2(Stdlib[28],cst$24,_dH_);
         else
          var _dI_=cst$29;
         var
          _dJ_=caml_call2(Stdlib[28],_dI_,_dG_),
          _dK_=function(x){return urlencode(0,x)},
          _dL_=caml_call2(Stdlib_list[17],_dK_,path$0),
          _dM_=caml_call2(String[7],cst$25,_dL_),
          _dN_=caml_call2(Stdlib[28],_dM_,_dJ_),
          _dO_=caml_call2(Stdlib[28],cst$26,_dN_);
         if(443 === port$0)
          var _dP_=cst$27;
         else
          var
           _dT_=caml_call1(Stdlib[33],port$0),
           _dP_=caml_call2(Stdlib[28],cst$28,_dT_);
         var
          _dQ_=caml_call2(Stdlib[28],_dP_,_dO_),
          _dR_=urlencode(0,host$0),
          _dS_=caml_call2(Stdlib[28],_dR_,_dQ_);
         return caml_call2(Stdlib[28],cst_https$1,_dS_);
        default:
         var
          match$1=param[1],
          frag$1=match$1[4],
          args$1=match$1[3],
          path$1=match$1[1];
         if(caml_string_notequal(frag$1,cst$31))
          var
           _dU_=urlencode(0,frag$1),
           _dV_=caml_call2(Stdlib[28],cst$32,_dU_);
         else
          var _dV_=cst$36;
         if(args$1)
          var
           _dW_=encode_arguments(args$1),
           _dX_=caml_call2(Stdlib[28],cst$33,_dW_);
         else
          var _dX_=cst$35;
         var
          _dY_=caml_call2(Stdlib[28],_dX_,_dV_),
          _dZ_=function(x){return urlencode(0,x)},
          _d0_=caml_call2(Stdlib_list[17],_dZ_,path$1),
          _d1_=caml_call2(String[7],cst$34,_d0_),
          _d2_=caml_call2(Stdlib[28],_d1_,_dY_);
         return caml_call2(Stdlib[28],cst_file$2,_d2_)}}
    var _o_=caml_call1(Optdef[2],_g_.location);
    if(caml_call1(Optdef[5],_o_))
     var _p_=_g_.location;
    else
     var
      t42=function(param,_dp_){return 0},
      t41=function(param,_do_){return 0},
      t40=function(param){return 0},
      _p_=
       {"href":"",
        "protocol":"",
        "host":"",
        "hostname":"",
        "port":"",
        "pathname":"",
        "search":"",
        "hash":"",
        "origin":t39,
        "reload":caml_js_wrap_meth_callback(t40),
        "replace":caml_js_wrap_meth_callback(t41),
        "assign":caml_js_wrap_meth_callback(t42)};
    var
     host=urldecode_js_string_string(_p_.hostname),
     protocol=urldecode_js_string_string(_p_.protocol),
     _q_=0,
     port=
      function(param)
        {try
          {var _dm_=[0,caml_int_of_string(caml_string_of_jsbytes(_p_.port))];
           return _dm_}
         catch(_dn_)
          {_dn_ = caml_wrap_exception(_dn_);
           if(_dn_[1] === Stdlib[7])return 0;
           throw _dn_}}
       (_q_),
     path_string=urldecode_js_string_string(_p_.pathname),
     path=path_of_path_string(path_string),
     _r_=_p_.search.charAt(0) === "?"?_p_.search.slice(1):_p_.search,
     arguments$0=decode_arguments_js_string(_r_);
    function get_fragment(param)
     {function _di_(res){return caml_string_of_jsstring(res[1])}
      function _dj_(param){return cst$37}
      var _dk_=new regExp_withFlags("#(.*)"),_dl_=_p_.href.match(_dk_);
      return caml_call3(Opt[7],_dl_,_dj_,_di_)}
    function set_fragment(s)
     {return _p_.hash = caml_jsbytes_of_string(urlencode(0,s))}
    function get$2(param){return url_of_js_string(_p_.href)}
    function set$0(u)
     {return _p_.href = caml_jsbytes_of_string(string_of_url(u))}
    var
     as_string=urldecode_js_string_string(_p_.href),
     Js_of_ocaml_Url=
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$0,
        get_fragment,
        set_fragment,
        get$2,
        set$0,
        as_string]];
    caml_register_global(1653,Js_of_ocaml_Url,"Js_of_ocaml__Url");
    var Js_of_ocaml_Lib_version=[0,s,git_version];
    caml_register_global
     (1654,Js_of_ocaml_Lib_version,"Js_of_ocaml__Lib_version");
    function update_file(name,content)
     {var oc=caml_call1(Stdlib[60],name);
      caml_call2(Stdlib[66],oc,content);
      return caml_call1(Stdlib[76],oc)}
    function set_channel_flusher(out_channel,f)
     {var
       f$0=
        caml_js_wrap_callback
         (function(s){return caml_call1(f,caml_string_of_jsbytes(s))});
      return runtime.caml_ml_set_channel_output(out_channel,f$0)}
    function set_channel_filler(in_channel,f)
     {var f$0=caml_js_wrap_callback(f);
      return runtime.caml_ml_set_channel_refill(in_channel,f$0)}
    function mount(path,f)
     {return runtime.caml_mount_autoload
              (path,
               caml_js_wrap_callback
                (function(prefix,path){return caml_call2(f,prefix,path)}))}
    var unmount=runtime.caml_unmount;
    if(caml_call2(String[38],git_version,cst$38))
     var js_of_ocaml_version=s;
    else
     var
      _cl_=caml_call2(Stdlib[28],cst$41,git_version),
      js_of_ocaml_version=caml_call2(Stdlib[28],s,_cl_);
    var
     _s_=runtime.caml_create_file,
     _t_=runtime.caml_read_file_content,
     Js_of_ocaml_Sys_js=
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(_dh_){return runtime.caml_list_mount_point(_dh_)},
       unmount,
       mount,
       _t_,
       _s_,
       update_file,
       js_of_ocaml_version];
    caml_register_global(1655,Js_of_ocaml_Sys_js,"Js_of_ocaml__Sys_js");
    function empty_resize_observer_options(param){return {}}
    var resizeObserver=Unsafe[1].ResizeObserver;
    function is_supported$0(param)
     {return caml_call1(Optdef[5],resizeObserver)}
    function observe(node,f,box,param)
     {var obs=new resizeObserver(caml_js_wrap_callback(f));
      if(box)
       {var box$0=box[1],opts={};opts.box = box$0;obs.observe(node,opts)}
      else
       obs.observe(node);
      return obs}
    var
     Js_of_ocaml_ResizeObserver=
      [0,empty_resize_observer_options,resizeObserver,is_supported$0,observe];
    caml_register_global
     (1656,Js_of_ocaml_ResizeObserver,"Js_of_ocaml__ResizeObserver");
    function empty_mutation_observer_init(param){return {}}
    var mutationObserver=Unsafe[1].MutationObserver;
    function is_supported$1(param)
     {return caml_call1(Optdef[5],mutationObserver)}
    function observe$0
     (node,
      f,
      child_list,
      attributes,
      character_data,
      subtree,
      attribute_old_value,
      character_data_old_value,
      attribute_filter,
      param)
     {function opt_iter(x,f)
       {if(x){var x$0=x[1];return caml_call1(f,x$0)}return 0}
      var obs=new mutationObserver(caml_js_wrap_callback(f)),cfg={};
      opt_iter(child_list,function(v){return cfg.childList = v});
      opt_iter(attributes,function(v){return cfg.attributes = v});
      opt_iter(character_data,function(v){return cfg.characterData = v});
      opt_iter(subtree,function(v){return cfg.subtree = v});
      opt_iter
       (attribute_old_value,function(v){return cfg.attributeOldValue = v});
      opt_iter
       (character_data_old_value,
        function(v){return cfg.characterDataOldValue = v});
      opt_iter
       (attribute_filter,
        function(l)
         {return cfg.attributeFilter
                 =
                 caml_js_from_array(caml_call1(Stdlib_array[12],l))});
      obs.observe(node,cfg);
      return obs}
    var
     Js_of_ocaml_MutationObserver=
      [0,
       empty_mutation_observer_init,
       mutationObserver,
       is_supported$1,
       observe$0];
    caml_register_global
     (1657,Js_of_ocaml_MutationObserver,"Js_of_ocaml__MutationObserver");
    var obj=Unsafe[1].Object;
    function create$0(param){return new obj()}
    function add$0(t,k,v){return t[k.concat("_")] = v}
    function remove(t,k){return delete t[k.concat("_")]}
    function find(t,k){return t[k.concat("_")]}
    function keys(t)
     {var
       key_array=Unsafe[1].Object.keys(t),
       res=[0,0],
       _dd_=key_array.length - 1 | 0,
       _dc_=0;
      if(! (_dd_ < 0))
       {var i=_dc_;
        for(;;)
         {var
           _de_=function(param){return caml_call1(Stdlib[2],cst_Jstable_keys)},
           key=caml_call2(Optdef[8],key_array[i],_de_),
           _df_=res[1];
          res[1] = [0,key.substring(0,key.length - 1 | 0),_df_];
          var _dg_=i + 1 | 0;
          if(_dd_ !== i){var i=_dg_;continue}
          break}}
      return caml_call1(Stdlib_list[9],res[1])}
    var Js_of_ocaml_Jstable=[0,create$0,add$0,remove,find,keys];
    caml_register_global(1658,Js_of_ocaml_Jstable,"Js_of_ocaml__Jstable");
    var json=Unsafe[1].JSON;
    function reviver(this$0,key,value)
     {if(typeof value == typeof "foo")return caml_string_of_jsbytes(value);
      if
       (value instanceof array_length
        &&
        4
        ===
        value.length
        &&
        255
        ===
        value[0])
       return runtime.caml_int64_create_lo_mi_hi(value[1],value[2],value[3]);
      return value}
    var input_reviver=caml_js_wrap_meth_callback(reviver);
    function unsafe_input(s){return json.parse(s,input_reviver)}
    var
     mlString_constr=dummy_string.constructor,
     mlInt64_constr=dummy_int64.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_jsbytes_of_string(value)
              :value instanceof mlInt64_constr
                ?caml_js_from_array([0,255,value.lo,value.mi,value.hi])
                :value}
    function output(obj){return json.stringify(obj,output_reviver)}
    var Js_of_ocaml_Json=[0,output,unsafe_input];
    caml_register_global(1659,Js_of_ocaml_Json,"Js_of_ocaml__Json");
    function string_of_name(param)
     {var _db_=param;
      if(74 <= _db_)
       {if(111 <= _db_)
         switch(_db_)
          {case 111:return cst_palevioletred;
           case 112:return cst_papayawhip;
           case 113:return cst_peachpuff;
           case 114:return cst_peru;
           case 115:return cst_pink;
           case 116:return cst_plum;
           case 117:return cst_powderblue;
           case 118:return cst_purple;
           case 119:return cst_red;
           case 120:return cst_rosybrown;
           case 121:return cst_royalblue;
           case 122:return cst_saddlebrown;
           case 123:return cst_salmon;
           case 124:return cst_sandybrown;
           case 125:return cst_seagreen;
           case 126:return cst_seashell;
           case 127:return cst_sienna;
           case 128:return cst_silver;
           case 129:return cst_skyblue;
           case 130:return cst_slateblue;
           case 131:return cst_slategray;
           case 132:return cst_slategrey;
           case 133:return cst_snow;
           case 134:return cst_springgreen;
           case 135:return cst_steelblue;
           case 136:return cst_tan;
           case 137:return cst_teal;
           case 138:return cst_thistle;
           case 139:return cst_tomato;
           case 140:return cst_turquoise;
           case 141:return cst_violet;
           case 142:return cst_wheat;
           case 143:return cst_white;
           case 144:return cst_whitesmoke;
           case 145:return cst_yellow;
           default:return cst_yellowgreen}
        switch(_db_)
         {case 74:return cst_lightpink;
          case 75:return cst_lightsalmon;
          case 76:return cst_lightseagreen;
          case 77:return cst_lightskyblue;
          case 78:return cst_lightslategray;
          case 79:return cst_lightslategrey;
          case 80:return cst_lightsteelblue;
          case 81:return cst_lightyellow;
          case 82:return cst_lime;
          case 83:return cst_limegreen;
          case 84:return cst_linen;
          case 85:return cst_magenta;
          case 86:return cst_maroon;
          case 87:return cst_mediumaquamarine;
          case 88:return cst_mediumblue;
          case 89:return cst_mediumorchid;
          case 90:return cst_mediumpurple;
          case 91:return cst_mediumseagreen;
          case 92:return cst_mediumslateblue;
          case 93:return cst_mediumspringgreen;
          case 94:return cst_mediumturquoise;
          case 95:return cst_mediumvioletred;
          case 96:return cst_midnightblue;
          case 97:return cst_mintcream;
          case 98:return cst_mistyrose;
          case 99:return cst_moccasin;
          case 100:return cst_navajowhite;
          case 101:return cst_navy;
          case 102:return cst_oldlace;
          case 103:return cst_olive;
          case 104:return cst_olivedrab;
          case 105:return cst_orange;
          case 106:return cst_orangered;
          case 107:return cst_orchid;
          case 108:return cst_palegoldenrod;
          case 109:return cst_palegreen;
          default:return cst_paleturquoise}}
      if(37 <= _db_)
       switch(_db_)
        {case 37:return cst_darkslategrey;
         case 38:return cst_darkturquoise;
         case 39:return cst_darkviolet;
         case 40:return cst_deeppink;
         case 41:return cst_deepskyblue;
         case 42:return cst_dimgray;
         case 43:return cst_dimgrey;
         case 44:return cst_dodgerblue;
         case 45:return cst_firebrick;
         case 46:return cst_floralwhite;
         case 47:return cst_forestgreen;
         case 48:return cst_fuchsia;
         case 49:return cst_gainsboro;
         case 50:return cst_ghostwhite;
         case 51:return cst_gold;
         case 52:return cst_goldenrod;
         case 53:return cst_gray;
         case 54:return cst_grey;
         case 55:return cst_green;
         case 56:return cst_greenyellow;
         case 57:return cst_honeydew;
         case 58:return cst_hotpink;
         case 59:return cst_indianred;
         case 60:return cst_indigo;
         case 61:return cst_ivory;
         case 62:return cst_khaki;
         case 63:return cst_lavender;
         case 64:return cst_lavenderblush;
         case 65:return cst_lawngreen;
         case 66:return cst_lemonchiffon;
         case 67:return cst_lightblue;
         case 68:return cst_lightcoral;
         case 69:return cst_lightcyan;
         case 70:return cst_lightgoldenrodyellow;
         case 71:return cst_lightgray;
         case 72:return cst_lightgreen;
         default:return cst_lightgrey}
      switch(_db_)
       {case 0:return cst_aliceblue;
        case 1:return cst_antiquewhite;
        case 2:return cst_aqua;
        case 3:return cst_aquamarine;
        case 4:return cst_azure;
        case 5:return cst_beige;
        case 6:return cst_bisque;
        case 7:return cst_black;
        case 8:return cst_blanchedalmond;
        case 9:return cst_blue;
        case 10:return cst_blueviolet;
        case 11:return cst_brown;
        case 12:return cst_burlywood;
        case 13:return cst_cadetblue;
        case 14:return cst_chartreuse;
        case 15:return cst_chocolate;
        case 16:return cst_coral;
        case 17:return cst_cornflowerblue;
        case 18:return cst_cornsilk;
        case 19:return cst_crimson;
        case 20:return cst_cyan;
        case 21:return cst_darkblue;
        case 22:return cst_darkcyan;
        case 23:return cst_darkgoldenrod;
        case 24:return cst_darkgray;
        case 25:return cst_darkgreen;
        case 26:return cst_darkgrey;
        case 27:return cst_darkkhaki;
        case 28:return cst_darkmagenta;
        case 29:return cst_darkolivegreen;
        case 30:return cst_darkorange;
        case 31:return cst_darkorchid;
        case 32:return cst_darkred;
        case 33:return cst_darksalmon;
        case 34:return cst_darkseagreen;
        case 35:return cst_darkslateblue;
        default:return cst_darkslategray}}
    function name_of_string(s)
     {var switch$0=caml_string_compare(s,cst_lightgrey$0);
      if(0 <= switch$0)
       {if(! (0 < switch$0))return 73;
        var switch$1=caml_string_compare(s,cst_paleturquoise$0);
        if(0 <= switch$1)
         {if(! (0 < switch$1))return 110;
          var switch$2=caml_string_compare(s,cst_skyblue$0);
          if(0 <= switch$2)
           {if(! (0 < switch$2))return 129;
            var switch$3=caml_string_compare(s,cst_thistle$0);
            if(0 <= switch$3)
             {if(! (0 < switch$3))return 138;
              if(! caml_string_notequal(s,cst_tomato$0))return 139;
              if(! caml_string_notequal(s,cst_turquoise$0))return 140;
              if(! caml_string_notequal(s,cst_violet$0))return 141;
              if(! caml_string_notequal(s,cst_wheat$0))return 142;
              if(! caml_string_notequal(s,cst_white$0))return 143;
              if(! caml_string_notequal(s,cst_whitesmoke$0))return 144;
              if(! caml_string_notequal(s,cst_yellow$0))return 145;
              if(! caml_string_notequal(s,cst_yellowgreen$0))return 146}
            else
             {if(! caml_string_notequal(s,cst_slateblue$0))return 130;
              if(! caml_string_notequal(s,cst_slategray$0))return 131;
              if(! caml_string_notequal(s,cst_slategrey$0))return 132;
              if(! caml_string_notequal(s,cst_snow$0))return 133;
              if(! caml_string_notequal(s,cst_springgreen$0))return 134;
              if(! caml_string_notequal(s,cst_steelblue$0))return 135;
              if(! caml_string_notequal(s,cst_tan$0))return 136;
              if(! caml_string_notequal(s,cst_teal$0))return 137}}
          else
           {var switch$4=caml_string_compare(s,cst_rosybrown$0);
            if(0 <= switch$4)
             {if(! (0 < switch$4))return 120;
              if(! caml_string_notequal(s,cst_royalblue$0))return 121;
              if(! caml_string_notequal(s,cst_saddlebrown$0))return 122;
              if(! caml_string_notequal(s,cst_salmon$0))return 123;
              if(! caml_string_notequal(s,cst_sandybrown$0))return 124;
              if(! caml_string_notequal(s,cst_seagreen$0))return 125;
              if(! caml_string_notequal(s,cst_seashell$0))return 126;
              if(! caml_string_notequal(s,cst_sienna$0))return 127;
              if(! caml_string_notequal(s,cst_silver$0))return 128}
            else
             {if(! caml_string_notequal(s,cst_palevioletred$0))return 111;
              if(! caml_string_notequal(s,cst_papayawhip$0))return 112;
              if(! caml_string_notequal(s,cst_peachpuff$0))return 113;
              if(! caml_string_notequal(s,cst_peru$0))return 114;
              if(! caml_string_notequal(s,cst_pink$0))return 115;
              if(! caml_string_notequal(s,cst_plum$0))return 116;
              if(! caml_string_notequal(s,cst_powderblue$0))return 117;
              if(! caml_string_notequal(s,cst_purple$0))return 118;
              if(! caml_string_notequal(s,cst_red$0))return 119}}}
        else
         {var switch$5=caml_string_compare(s,cst_mediumslateblue$0);
          if(0 <= switch$5)
           {if(! (0 < switch$5))return 92;
            var switch$6=caml_string_compare(s,cst_navy$0);
            if(0 <= switch$6)
             {if(! (0 < switch$6))return 101;
              if(! caml_string_notequal(s,cst_oldlace$0))return 102;
              if(! caml_string_notequal(s,cst_olive$0))return 103;
              if(! caml_string_notequal(s,cst_olivedrab$0))return 104;
              if(! caml_string_notequal(s,cst_orange$0))return 105;
              if(! caml_string_notequal(s,cst_orangered$0))return 106;
              if(! caml_string_notequal(s,cst_orchid$0))return 107;
              if(! caml_string_notequal(s,cst_palegoldenrod$0))return 108;
              if(! caml_string_notequal(s,cst_palegreen$0))return 109}
            else
             {if(! caml_string_notequal(s,cst_mediumspringgreen$0))return 93;
              if(! caml_string_notequal(s,cst_mediumturquoise$0))return 94;
              if(! caml_string_notequal(s,cst_mediumvioletred$0))return 95;
              if(! caml_string_notequal(s,cst_midnightblue$0))return 96;
              if(! caml_string_notequal(s,cst_mintcream$0))return 97;
              if(! caml_string_notequal(s,cst_mistyrose$0))return 98;
              if(! caml_string_notequal(s,cst_moccasin$0))return 99;
              if(! caml_string_notequal(s,cst_navajowhite$0))return 100}}
          else
           {var switch$7=caml_string_compare(s,cst_limegreen$0);
            if(0 <= switch$7)
             {if(! (0 < switch$7))return 83;
              if(! caml_string_notequal(s,cst_linen$0))return 84;
              if(! caml_string_notequal(s,cst_magenta$0))return 85;
              if(! caml_string_notequal(s,cst_maroon$0))return 86;
              if(! caml_string_notequal(s,cst_mediumaquamarine$0))return 87;
              if(! caml_string_notequal(s,cst_mediumblue$0))return 88;
              if(! caml_string_notequal(s,cst_mediumorchid$0))return 89;
              if(! caml_string_notequal(s,cst_mediumpurple$0))return 90;
              if(! caml_string_notequal(s,cst_mediumseagreen$0))return 91}
            else
             {if(! caml_string_notequal(s,cst_lightpink$0))return 74;
              if(! caml_string_notequal(s,cst_lightsalmon$0))return 75;
              if(! caml_string_notequal(s,cst_lightseagreen$0))return 76;
              if(! caml_string_notequal(s,cst_lightskyblue$0))return 77;
              if(! caml_string_notequal(s,cst_lightslategray$0))return 78;
              if(! caml_string_notequal(s,cst_lightslategrey$0))return 79;
              if(! caml_string_notequal(s,cst_lightsteelblue$0))return 80;
              if(! caml_string_notequal(s,cst_lightyellow$0))return 81;
              if(! caml_string_notequal(s,cst_lime$0))return 82}}}}
      else
       {var switch$8=caml_string_compare(s,cst_darkslategray$0);
        if(0 <= switch$8)
         {if(! (0 < switch$8))return 36;
          var switch$9=caml_string_compare(s,cst_greenyellow$0);
          if(0 <= switch$9)
           {if(! (0 < switch$9))return 56;
            var switch$10=caml_string_compare(s,cst_lavenderblush$0);
            if(0 <= switch$10)
             {if(! (0 < switch$10))return 64;
              if(! caml_string_notequal(s,cst_lawngreen$0))return 65;
              if(! caml_string_notequal(s,cst_lemonchiffon$0))return 66;
              if(! caml_string_notequal(s,cst_lightblue$0))return 67;
              if(! caml_string_notequal(s,cst_lightcoral$0))return 68;
              if(! caml_string_notequal(s,cst_lightcyan$0))return 69;
              if(! caml_string_notequal(s,cst_lightgoldenrodyellow$0))
               return 70;
              if(! caml_string_notequal(s,cst_lightgray$0))return 71;
              if(! caml_string_notequal(s,cst_lightgreen$0))return 72}
            else
             {if(! caml_string_notequal(s,cst_grey$0))return 54;
              if(! caml_string_notequal(s,cst_honeydew$0))return 57;
              if(! caml_string_notequal(s,cst_hotpink$0))return 58;
              if(! caml_string_notequal(s,cst_indianred$0))return 59;
              if(! caml_string_notequal(s,cst_indigo$0))return 60;
              if(! caml_string_notequal(s,cst_ivory$0))return 61;
              if(! caml_string_notequal(s,cst_khaki$0))return 62;
              if(! caml_string_notequal(s,cst_lavender$0))return 63}}
          else
           {var switch$11=caml_string_compare(s,cst_floralwhite$0);
            if(0 <= switch$11)
             {if(! (0 < switch$11))return 46;
              if(! caml_string_notequal(s,cst_forestgreen$0))return 47;
              if(! caml_string_notequal(s,cst_fuchsia$0))return 48;
              if(! caml_string_notequal(s,cst_gainsboro$0))return 49;
              if(! caml_string_notequal(s,cst_ghostwhite$0))return 50;
              if(! caml_string_notequal(s,cst_gold$0))return 51;
              if(! caml_string_notequal(s,cst_goldenrod$0))return 52;
              if(! caml_string_notequal(s,cst_gray$0))return 53;
              if(! caml_string_notequal(s,cst_green$0))return 55}
            else
             {if(! caml_string_notequal(s,cst_darkslategrey$0))return 37;
              if(! caml_string_notequal(s,cst_darkturquoise$0))return 38;
              if(! caml_string_notequal(s,cst_darkviolet$0))return 39;
              if(! caml_string_notequal(s,cst_deeppink$0))return 40;
              if(! caml_string_notequal(s,cst_deepskyblue$0))return 41;
              if(! caml_string_notequal(s,cst_dimgray$0))return 42;
              if(! caml_string_notequal(s,cst_dimgrey$0))return 43;
              if(! caml_string_notequal(s,cst_dodgerblue$0))return 44;
              if(! caml_string_notequal(s,cst_firebrick$0))return 45}}}
        else
         {var switch$12=caml_string_compare(s,cst_cornsilk$0);
          if(0 <= switch$12)
           {if(! (0 < switch$12))return 18;
            var switch$13=caml_string_compare(s,cst_darkkhaki$0);
            if(0 <= switch$13)
             {if(! (0 < switch$13))return 27;
              if(! caml_string_notequal(s,cst_darkmagenta$0))return 28;
              if(! caml_string_notequal(s,cst_darkolivegreen$0))return 29;
              if(! caml_string_notequal(s,cst_darkorange$0))return 30;
              if(! caml_string_notequal(s,cst_darkorchid$0))return 31;
              if(! caml_string_notequal(s,cst_darkred$0))return 32;
              if(! caml_string_notequal(s,cst_darksalmon$0))return 33;
              if(! caml_string_notequal(s,cst_darkseagreen$0))return 34;
              if(! caml_string_notequal(s,cst_darkslateblue$0))return 35}
            else
             {if(! caml_string_notequal(s,cst_crimson$0))return 19;
              if(! caml_string_notequal(s,cst_cyan$0))return 20;
              if(! caml_string_notequal(s,cst_darkblue$0))return 21;
              if(! caml_string_notequal(s,cst_darkcyan$0))return 22;
              if(! caml_string_notequal(s,cst_darkgoldenrod$0))return 23;
              if(! caml_string_notequal(s,cst_darkgray$0))return 24;
              if(! caml_string_notequal(s,cst_darkgreen$0))return 25;
              if(! caml_string_notequal(s,cst_darkgrey$0))return 26}}
          else
           {var switch$14=caml_string_compare(s,cst_blue$0);
            if(0 <= switch$14)
             {if(! (0 < switch$14))return 9;
              if(! caml_string_notequal(s,cst_blueviolet$0))return 10;
              if(! caml_string_notequal(s,cst_brown$0))return 11;
              if(! caml_string_notequal(s,cst_burlywood$0))return 12;
              if(! caml_string_notequal(s,cst_cadetblue$0))return 13;
              if(! caml_string_notequal(s,cst_chartreuse$0))return 14;
              if(! caml_string_notequal(s,cst_chocolate$0))return 15;
              if(! caml_string_notequal(s,cst_coral$0))return 16;
              if(! caml_string_notequal(s,cst_cornflowerblue$0))return 17}
            else
             {if(! caml_string_notequal(s,cst_aliceblue$0))return 0;
              if(! caml_string_notequal(s,cst_antiquewhite$0))return 1;
              if(! caml_string_notequal(s,cst_aqua$0))return 2;
              if(! caml_string_notequal(s,cst_aquamarine$0))return 3;
              if(! caml_string_notequal(s,cst_azure$0))return 4;
              if(! caml_string_notequal(s,cst_beige$0))return 5;
              if(! caml_string_notequal(s,cst_bisque$0))return 6;
              if(! caml_string_notequal(s,cst_black$0))return 7;
              if(! caml_string_notequal(s,cst_blanchedalmond$0))return 8}}}}
      var _da_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color_name);
      throw [0,Stdlib[6],_da_]}
    function rgb_of_name(param)
     {var _c$_=param;
      if(74 <= _c$_)
       {if(111 <= _c$_)
         switch(_c$_)
          {case 111:return _bn_;
           case 112:return _bo_;
           case 113:return _bp_;
           case 114:return _bq_;
           case 115:return _br_;
           case 116:return _bs_;
           case 117:return _bt_;
           case 118:return _bu_;
           case 119:return _bv_;
           case 120:return _bw_;
           case 121:return _bx_;
           case 122:return _by_;
           case 123:return _bz_;
           case 124:return _bA_;
           case 125:return _bB_;
           case 126:return _bC_;
           case 127:return _bD_;
           case 128:return _bE_;
           case 129:return _bF_;
           case 130:return _bG_;
           case 131:return _bH_;
           case 132:return _bI_;
           case 133:return _bJ_;
           case 134:return _bK_;
           case 135:return _bL_;
           case 136:return _bM_;
           case 137:return _bN_;
           case 138:return _bO_;
           case 139:return _bP_;
           case 140:return _bQ_;
           case 141:return _bR_;
           case 142:return _bS_;
           case 143:return _bT_;
           case 144:return _bU_;
           case 145:return _bV_;
           default:return _bW_}
        switch(_c$_)
         {case 74:return _aO_;
          case 75:return _aP_;
          case 76:return _aQ_;
          case 77:return _aR_;
          case 78:return _aS_;
          case 79:return _aT_;
          case 80:return _aU_;
          case 81:return _aV_;
          case 82:return _aW_;
          case 83:return _aX_;
          case 84:return _aY_;
          case 85:return _aZ_;
          case 86:return _a0_;
          case 87:return _a1_;
          case 88:return _a2_;
          case 89:return _a3_;
          case 90:return _a4_;
          case 91:return _a5_;
          case 92:return _a6_;
          case 93:return _a7_;
          case 94:return _a8_;
          case 95:return _a9_;
          case 96:return _a__;
          case 97:return _a$_;
          case 98:return _ba_;
          case 99:return _bb_;
          case 100:return _bc_;
          case 101:return _bd_;
          case 102:return _be_;
          case 103:return _bf_;
          case 104:return _bg_;
          case 105:return _bh_;
          case 106:return _bi_;
          case 107:return _bj_;
          case 108:return _bk_;
          case 109:return _bl_;
          default:return _bm_}}
      if(37 <= _c$_)
       switch(_c$_)
        {case 37:return _ad_;
         case 38:return _ae_;
         case 39:return _af_;
         case 40:return _ag_;
         case 41:return _ah_;
         case 42:return _ai_;
         case 43:return _aj_;
         case 44:return _ak_;
         case 45:return _al_;
         case 46:return _am_;
         case 47:return _an_;
         case 48:return _ao_;
         case 49:return _ap_;
         case 50:return _aq_;
         case 51:return _ar_;
         case 52:return _as_;
         case 53:return _at_;
         case 54:return _au_;
         case 55:return _av_;
         case 56:return _aw_;
         case 57:return _ax_;
         case 58:return _ay_;
         case 59:return _az_;
         case 60:return _aA_;
         case 61:return _aB_;
         case 62:return _aC_;
         case 63:return _aD_;
         case 64:return _aE_;
         case 65:return _aF_;
         case 66:return _aG_;
         case 67:return _aH_;
         case 68:return _aI_;
         case 69:return _aJ_;
         case 70:return _aK_;
         case 71:return _aL_;
         case 72:return _aM_;
         default:return _aN_}
      switch(_c$_)
       {case 0:return _u_;
        case 1:return _v_;
        case 2:return _w_;
        case 3:return _x_;
        case 4:return _y_;
        case 5:return _z_;
        case 6:return _A_;
        case 7:return _B_;
        case 8:return _C_;
        case 9:return _D_;
        case 10:return _E_;
        case 11:return _F_;
        case 12:return _G_;
        case 13:return _H_;
        case 14:return _I_;
        case 15:return _J_;
        case 16:return _K_;
        case 17:return _L_;
        case 18:return _M_;
        case 19:return _N_;
        case 20:return _O_;
        case 21:return _P_;
        case 22:return _Q_;
        case 23:return _R_;
        case 24:return _S_;
        case 25:return _T_;
        case 26:return _U_;
        case 27:return _V_;
        case 28:return _W_;
        case 29:return _X_;
        case 30:return _Y_;
        case 31:return _Z_;
        case 32:return ___;
        case 33:return _$_;
        case 34:return _aa_;
        case 35:return _ab_;
        default:return _ac_}}
    function rgb(a,r,g,b)
     {if(a){var a$0=a[1];return [3,[0,r,g,b,a$0]]}return [1,[0,r,g,b]]}
    function hsl(a,h,s,l)
     {if(a){var a$0=a[1];return [6,[0,h,s,l,a$0]]}return [5,[0,h,s,l]]}
    function string_of_t(param)
     {switch(param[0])
       {case 0:var n=param[1];return string_of_name(n);
        case 1:
         var match=param[1],b=match[3],g=match[2],r=match[1];
         return caml_call4(Stdlib_printf[4],_bX_,r,g,b);
        case 2:
         var match$0=param[1],b$0=match$0[3],g$0=match$0[2],r$0=match$0[1];
         return caml_call4(Stdlib_printf[4],_bY_,r$0,g$0,b$0);
        case 3:
         var
          match$1=param[1],
          a=match$1[4],
          b$1=match$1[3],
          g$1=match$1[2],
          r$1=match$1[1];
         return caml_call5(Stdlib_printf[4],_bZ_,r$1,g$1,b$1,a);
        case 4:
         var
          match$2=param[1],
          a$0=match$2[4],
          b$2=match$2[3],
          g$2=match$2[2],
          r$2=match$2[1];
         return caml_call5(Stdlib_printf[4],_b0_,r$2,g$2,b$2,a$0);
        case 5:
         var match$3=param[1],l=match$3[3],s=match$3[2],h=match$3[1];
         return caml_call4(Stdlib_printf[4],_b1_,h,s,l);
        default:
         var
          match$4=param[1],
          a$1=match$4[4],
          l$0=match$4[3],
          s$0=match$4[2],
          h$0=match$4[1];
         return caml_call5(Stdlib_printf[4],_b2_,h$0,s$0,l$0,a$1)}}
    function hex_of_rgb(param)
     {var blue=param[3],green=param[2],red=param[1];
      function in_range(i)
       {var
         _c7_=caml_call2(symbol$5,i,0),
         _c8_=_c7_ || caml_call2(symbol$9,i,255);
        if(_c8_)
         {var
           _c9_=caml_call1(Stdlib[33],i),
           _c__=caml_call2(Stdlib[28],_c9_,cst_is_out_of_valid_range);
          throw [0,Stdlib[6],_c__]}
        return _c8_}
      in_range(red);
      in_range(green);
      in_range(blue);
      return caml_call4(Stdlib_printf[4],_b3_,red,green,blue)}
    function js_t_of_js_string(s)
     {var
       rgb_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d)),
       rgb_pct_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgb_s_d_s_d_s_d$0)),
       rgba_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d)),
       rgba_pct_re=
        new
         regExp_withFlags
         (caml_jsbytes_of_string(cst_rgba_s_d_s_d_s_d_d_d$0)),
       hsl_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsl_s_d_s_d_s_d)),
       hsla_re=
        new regExp_withFlags(caml_jsbytes_of_string(cst_hsla_s_d_s_d_s_d_d_d));
      if
       (!
        (rgb_re.test(s) | 0)
        &&
        !
        (rgba_re.test(s) | 0)
        &&
        !
        (rgb_pct_re.test(s) | 0)
        &&
        !
        (rgba_pct_re.test(s) | 0)
        &&
        !
        (hsl_re.test(s) | 0)
        &&
        !
        (hsla_re.test(s) | 0))
       {var _c4_=caml_string_of_jsstring(s);
        if(caml_call2(Stdlib_list[33],_c4_,_b4_))return s;
        var
         _c5_=caml_string_of_jsstring(s),
         _c6_=caml_call2(Stdlib[28],_c5_,cst_is_not_a_valid_color);
        throw [0,Stdlib[6],_c6_]}
      return s}
    function js(c)
     {if(0 === c[0])
       {var n=c[1];return caml_jsstring_of_string(string_of_name(n))}
      return caml_jsstring_of_string(string_of_t(c))}
    function ml(c)
     {var s=caml_string_of_jsstring(c);
      try
       {var _cR_=[0,name_of_string(s)];return _cR_}
      catch(_cS_)
       {_cS_ = caml_wrap_exception(_cS_);
        if(_cS_[1] === Stdlib[6])
         {var
           fail=
            function(param)
             {var _c3_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_color$0);
              throw [0,Stdlib[6],_c3_]},
           re_rgb=regexp(cst_rgba_d_d_d_d_d),
           re_rgb_pct=regexp(cst_rgba_d_d_d_d_d$0),
           re_hsl=regexp(cst_hsla_d_d_d_d_d),
           i_of_s_o=
            function(param)
             {if(param)
               {var i=param[1];
                try
                 {var _c1_=caml_int_of_string(i);return _c1_}
                catch(_c2_)
                 {_c2_ = caml_wrap_exception(_c2_);
                  if(_c2_[1] === Stdlib[6])
                   var s=_c2_[2];
                  else
                   {if(_c2_[1] !== Stdlib[7])throw _c2_;var s=_c2_[2]}
                  var
                   _cY_=caml_call2(Stdlib[28],cst$39,s),
                   _cZ_=caml_call2(Stdlib[28],i,_cY_),
                   _c0_=caml_call2(Stdlib[28],cst_color_conversion_error,_cZ_);
                  throw [0,Stdlib[6],_c0_]}}
              return fail(0)},
           f_of_s=
            function(f)
             {try
               {var _cW_=caml_float_of_string(f);return _cW_}
              catch(_cX_)
               {_cX_ = caml_wrap_exception(_cX_);
                if(_cX_[1] === Stdlib[6])
                 var s=_cX_[2];
                else
                 {if(_cX_[1] !== Stdlib[7])throw _cX_;var s=_cX_[2]}
                var
                 _cT_=caml_call2(Stdlib[28],cst$40,s),
                 _cU_=caml_call2(Stdlib[28],f,_cT_),
                 _cV_=caml_call2(Stdlib[28],cst_color_conversion_error$0,_cU_);
                throw [0,Stdlib[6],_cV_]}},
           match=string_match(re_rgb,s,0);
          if(match)
           {var
             r=match[1],
             red=matched_group(r,2),
             green=matched_group(r,3),
             blue=matched_group(r,4),
             alpha=matched_group(r,5),
             match$0=matched_group(r,1);
            if(match$0)
             {var _cz_=match$0[1];
              if(! caml_string_notequal(_cz_,cst_rgb))
               {if(alpha)return fail(0);
                var _cD_=i_of_s_o(blue),_cE_=i_of_s_o(green);
                return [1,[0,i_of_s_o(red),_cE_,_cD_]]}
              if(! caml_string_notequal(_cz_,cst_rgba))
               {if(alpha)
                 {var
                   a=alpha[1],
                   _cA_=f_of_s(a),
                   _cB_=i_of_s_o(blue),
                   _cC_=i_of_s_o(green);
                  return [3,[0,i_of_s_o(red),_cC_,_cB_,_cA_]]}
                return fail(0)}}
            return fail(0)}
          var match$1=string_match(re_rgb_pct,s,0);
          if(match$1)
           {var
             r$0=match$1[1],
             red$0=matched_group(r$0,2),
             green$0=matched_group(r$0,3),
             blue$0=matched_group(r$0,4),
             alpha$0=matched_group(r$0,5),
             match$2=matched_group(r$0,1);
            if(match$2)
             {var _cF_=match$2[1];
              if(! caml_string_notequal(_cF_,cst_rgb$0))
               {if(alpha$0)return fail(0);
                var _cJ_=i_of_s_o(blue$0),_cK_=i_of_s_o(green$0);
                return [2,[0,i_of_s_o(red$0),_cK_,_cJ_]]}
              if(! caml_string_notequal(_cF_,cst_rgba$0))
               {if(alpha$0)
                 {var
                   a$0=alpha$0[1],
                   _cG_=f_of_s(a$0),
                   _cH_=i_of_s_o(blue$0),
                   _cI_=i_of_s_o(green$0);
                  return [4,[0,i_of_s_o(red$0),_cI_,_cH_,_cG_]]}
                return fail(0)}}
            return fail(0)}
          var match$3=string_match(re_hsl,s,0);
          if(match$3)
           {var
             r$1=match$3[1],
             red$1=matched_group(r$1,2),
             green$1=matched_group(r$1,3),
             blue$1=matched_group(r$1,4),
             alpha$1=matched_group(r$1,5),
             match$4=matched_group(r$1,1);
            if(match$4)
             {var _cL_=match$4[1];
              if(! caml_string_notequal(_cL_,cst_hsl))
               {if(alpha$1)return fail(0);
                var _cP_=i_of_s_o(blue$1),_cQ_=i_of_s_o(green$1);
                return [5,[0,i_of_s_o(red$1),_cQ_,_cP_]]}
              if(! caml_string_notequal(_cL_,cst_hsla))
               {if(alpha$1)
                 {var
                   a$1=alpha$1[1],
                   _cM_=f_of_s(a$1),
                   _cN_=i_of_s_o(blue$1),
                   _cO_=i_of_s_o(green$1);
                  return [6,[0,i_of_s_o(red$1),_cO_,_cN_,_cM_]]}
                return fail(0)}}
            return fail(0)}
          return fail(0)}
        throw _cS_}}
    function string_of_t$0(param)
     {if(typeof param === "number")
       return cst_0;
      else
       switch(param[0])
        {case 0:
          var f=param[1];return caml_call3(Stdlib_printf[4],_b5_,f,cst_em$0);
         case 1:
          var f$0=param[1];
          return caml_call3(Stdlib_printf[4],_b6_,f$0,cst_ex);
         case 2:
          var f$1=param[1];
          return caml_call3(Stdlib_printf[4],_b7_,f$1,cst_px);
         case 3:
          var f$2=param[1];
          return caml_call3(Stdlib_printf[4],_b8_,f$2,cst_gd);
         case 4:
          var f$3=param[1];
          return caml_call3(Stdlib_printf[4],_b9_,f$3,cst_rem);
         case 5:
          var f$4=param[1];
          return caml_call3(Stdlib_printf[4],_b__,f$4,cst_vw);
         case 6:
          var f$5=param[1];
          return caml_call3(Stdlib_printf[4],_b$_,f$5,cst_vh);
         case 7:
          var f$6=param[1];
          return caml_call3(Stdlib_printf[4],_ca_,f$6,cst_vm);
         case 8:
          var f$7=param[1];
          return caml_call3(Stdlib_printf[4],_cb_,f$7,cst_ch);
         case 9:
          var f$8=param[1];
          return caml_call3(Stdlib_printf[4],_cc_,f$8,cst_mm);
         case 10:
          var f$9=param[1];
          return caml_call3(Stdlib_printf[4],_cd_,f$9,cst_cm);
         case 11:
          var f$10=param[1];
          return caml_call3(Stdlib_printf[4],_ce_,f$10,cst_in);
         case 12:
          var f$11=param[1];
          return caml_call3(Stdlib_printf[4],_cf_,f$11,cst_pt);
         default:
          var f$12=param[1];
          return caml_call3(Stdlib_printf[4],_cg_,f$12,cst_pc)}}
    function js$0(t){return caml_jsstring_of_string(string_of_t$0(t))}
    function ml$0(t)
     {var s=caml_string_of_jsstring(t);
      if(caml_call2(String[38],s,cst_0$0))return 0;
      function fail(param)
       {var _cy_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length);
        throw [0,Stdlib[6],_cy_]}
      var re=regexp(cst_d_d_s_S),match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cw_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cv_=caml_call2(Stdlib[28],cst_length_conversion_error,s$0);
              throw [0,Stdlib[6],_cv_]}
            throw exn}
          var f$0=_cw_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _cx_=match$1[1],switch$0=caml_string_compare(_cx_,cst_pc$0);
          if(0 <= switch$0)
           {if(! (0 < switch$0))return [13,f$0];
            if(! caml_string_notequal(_cx_,cst_pt$0))return [12,f$0];
            if(! caml_string_notequal(_cx_,cst_px$0))return [2,f$0];
            if(! caml_string_notequal(_cx_,cst_rem$0))return [4,f$0];
            if(! caml_string_notequal(_cx_,cst_vh$0))return [6,f$0];
            if(! caml_string_notequal(_cx_,cst_vm$0))return [7,f$0];
            if(! caml_string_notequal(_cx_,cst_vw$0))return [5,f$0]}
          else
           {if(! caml_string_notequal(_cx_,cst_ch$0))return [8,f$0];
            if(! caml_string_notequal(_cx_,cst_cm$0))return [10,f$0];
            if(! caml_string_notequal(_cx_,cst_em$1))return [0,f$0];
            if(! caml_string_notequal(_cx_,cst_ex$0))return [1,f$0];
            if(! caml_string_notequal(_cx_,cst_gd$0))return [3,f$0];
            if(! caml_string_notequal(_cx_,cst_in$0))return [11,f$0];
            if(! caml_string_notequal(_cx_,cst_mm$0))return [9,f$0]}
          return fail(0)}
        return fail(0)}
      return fail(0)}
    var Length=[0,string_of_t$0,js$0,ml$0];
    function string_of_t$1(param)
     {switch(param[0])
       {case 0:
         var f=param[1];return caml_call3(Stdlib_printf[4],_ch_,f,cst_deg);
        case 1:
         var f$0=param[1];
         return caml_call3(Stdlib_printf[4],_ci_,f$0,cst_grad);
        case 2:
         var f$1=param[1];
         return caml_call3(Stdlib_printf[4],_cj_,f$1,cst_rad);
        default:
         var f$2=param[1];
         return caml_call3(Stdlib_printf[4],_ck_,f$2,cst_turns)}}
    function js$1(t){return caml_jsstring_of_string(string_of_t$1(t))}
    function ml$1(j)
     {var s=caml_string_of_jsstring(j),re=regexp(cst_d_d_deg_grad_rad_turns);
      function fail(param)
       {var _cu_=caml_call2(Stdlib[28],s,cst_is_not_a_valid_length$0);
        throw [0,Stdlib[6],_cu_]}
      var match=string_match(re,s,0);
      if(match)
       {var r=match[1],match$0=matched_group(r,1);
        if(match$0)
         {var f=match$0[1];
          try
           {var _cs_=caml_float_of_string(f)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Stdlib[6])
             {var
               s$0=exn[2],
               _cr_=caml_call2(Stdlib[28],cst_length_conversion_error$0,s$0);
              throw [0,Stdlib[6],_cr_]}
            throw exn}
          var f$0=_cs_}
        else
         var f$0=fail(0);
        var match$1=matched_group(r,2);
        if(match$1)
         {var _ct_=match$1[1];
          if(! caml_string_notequal(_ct_,cst_deg$0))return [0,f$0];
          if(! caml_string_notequal(_ct_,cst_grad$0))return [1,f$0];
          if(! caml_string_notequal(_ct_,cst_rad$0))return [2,f$0];
          if(! caml_string_notequal(_ct_,cst_turns$0))return [3,f$0]}
        return fail(0)}
      return fail(0)}
    var
     Angle=[0,string_of_t$1,js$1,ml$1],
     Js_of_ocaml_CSS=
      [0,
       [0,
        string_of_name,
        rgb_of_name,
        hex_of_rgb,
        rgb,
        hsl,
        string_of_t,
        js,
        ml,
        js_t_of_js_string],
       Length,
       Angle];
    caml_register_global(1660,Js_of_ocaml_CSS,"Js_of_ocaml__CSS");
    function listen(opt,target,typ,cb)
     {if(opt)var sth=opt[1],capture=sth;else var capture=0;
      var _cq_=! ! capture;
      return addEventListener
              (target,
               typ,
               full_handler(function(n,e){return ! ! caml_call2(cb,n,e)}),
               _cq_)}
    var Js_of_ocaml_Dom_events=[0,Event$0,listen,removeEventListener];
    caml_register_global
     (1661,Js_of_ocaml_Dom_events,"Js_of_ocaml__Dom_events");
    var
     xmlns="http://www.w3.org/2000/svg",
     SVGError=[248,cst_Js_of_ocaml_Dom_svg_SVGErr,caml_fresh_oo_id(0)];
    function createElement$0(doc,name)
     {return doc.createElementNS
              ("http://www.w3.org/2000/svg",caml_jsstring_of_string(name))}
    function unsafeCreateElement$0(doc,name){return createElement$0(doc,name)}
    function createA$0(doc){return unsafeCreateElement$0(doc,cst_a$2)}
    function createAltGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_altglyph)}
    function createAltGlyphDef(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphdef)}
    function createAltGlyphItem(doc)
     {return unsafeCreateElement$0(doc,cst_altglyphitem)}
    function createAnimate(doc){return unsafeCreateElement$0(doc,cst_animate)}
    function createAnimateColor(doc)
     {return unsafeCreateElement$0(doc,cst_animatecolor)}
    function createAnimateMotion(doc)
     {return unsafeCreateElement$0(doc,cst_animatemotion)}
    function createAnimateTransform(doc)
     {return unsafeCreateElement$0(doc,cst_animatetransform)}
    function createCircle(doc){return unsafeCreateElement$0(doc,cst_circle)}
    function createClipPath(doc)
     {return unsafeCreateElement$0(doc,cst_clippath)}
    function createCursor(doc){return unsafeCreateElement$0(doc,cst_cursor)}
    function createDefs(doc){return unsafeCreateElement$0(doc,cst_defs)}
    function createDesc(doc){return unsafeCreateElement$0(doc,cst_desc)}
    function createEllipse(doc){return unsafeCreateElement$0(doc,cst_ellipse)}
    function createFilter(doc){return unsafeCreateElement$0(doc,cst_filter)}
    function createFont(doc){return unsafeCreateElement$0(doc,cst_font)}
    function createFontFace(doc)
     {return unsafeCreateElement$0(doc,cst_font_face)}
    function createFontFaceFormat(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_format)}
    function createFontFaceName(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_name)}
    function createFontFaceSrc(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_src)}
    function createFontFaceUri(doc)
     {return unsafeCreateElement$0(doc,cst_font_face_uri)}
    function createForeignObject(doc)
     {return unsafeCreateElement$0(doc,cst_foreignObject)}
    function createG(doc){return unsafeCreateElement$0(doc,cst_g$0)}
    function createGlyph(doc){return unsafeCreateElement$0(doc,cst_glyph)}
    function createGlyphRef(doc)
     {return unsafeCreateElement$0(doc,cst_glyphref)}
    function createhkern(doc){return unsafeCreateElement$0(doc,cst_hkern)}
    function createImage(doc){return unsafeCreateElement$0(doc,cst_image)}
    function createLineElement(doc)
     {return unsafeCreateElement$0(doc,cst_line)}
    function createLinearElement(doc)
     {return unsafeCreateElement$0(doc,cst_lineargradient)}
    function createMask(doc){return unsafeCreateElement$0(doc,cst_mask)}
    function createMetaData(doc)
     {return unsafeCreateElement$0(doc,cst_metadata)}
    function createMissingGlyph(doc)
     {return unsafeCreateElement$0(doc,cst_missing_glyph)}
    function createMPath(doc){return unsafeCreateElement$0(doc,cst_mpath)}
    function createPath(doc){return unsafeCreateElement$0(doc,cst_path)}
    function createPattern(doc){return unsafeCreateElement$0(doc,cst_pattern)}
    function createPolygon(doc){return unsafeCreateElement$0(doc,cst_polygon)}
    function createPolyline(doc)
     {return unsafeCreateElement$0(doc,cst_polyline)}
    function createRadialgradient(doc)
     {return unsafeCreateElement$0(doc,cst_radialgradient)}
    function createRect(doc){return unsafeCreateElement$0(doc,cst_rect)}
    function createScript$0(doc)
     {return unsafeCreateElement$0(doc,cst_script$2)}
    function createSet(doc){return unsafeCreateElement$0(doc,cst_set)}
    function createStop(doc){return unsafeCreateElement$0(doc,cst_stop)}
    function createStyle$0(doc){return unsafeCreateElement$0(doc,cst_style$2)}
    function createSvg(doc){return unsafeCreateElement$0(doc,cst_svg)}
    function createSwitch(doc){return unsafeCreateElement$0(doc,cst_switch)}
    function createSymbol(doc){return unsafeCreateElement$0(doc,cst_symbol)}
    function createTextElement(doc)
     {return unsafeCreateElement$0(doc,cst_text$0)}
    function createTextpath(doc)
     {return unsafeCreateElement$0(doc,cst_textpath)}
    function createTitle$0(doc){return unsafeCreateElement$0(doc,cst_title$2)}
    function createTref(doc){return unsafeCreateElement$0(doc,cst_tref)}
    function createTspan(doc){return unsafeCreateElement$0(doc,cst_tspan)}
    function createUse(doc){return unsafeCreateElement$0(doc,cst_use)}
    function createView(doc){return unsafeCreateElement$0(doc,cst_view)}
    function createvkern(doc){return unsafeCreateElement$0(doc,cst_vkern)}
    var svg_element=Unsafe[1].SVGElement,document$1=Unsafe[1].document;
    function getElementById$0(id)
     {function _cn_(e){if(e instanceof svg_element)return e;throw Stdlib[8]}
      function _co_(param){throw Stdlib[8]}
      var _cp_=Unsafe[1].document.getElementById(caml_jsstring_of_string(id));
      return caml_call3(Opt[7],_cp_,_co_,_cn_)}
    function element$2(e){return e instanceof svg_element?e:no_handler}
    function unsafeCoerce$0(e,tag)
     {var _cm_=caml_jsstring_of_string(tag);
      return e.tagName.toLowerCase() === _cm_?e:no_handler}
    function a$0(e){return unsafeCoerce$0(e,cst_a$3)}
    function altGlyph(e){return unsafeCoerce$0(e,cst_altglyph$0)}
    function altGlyphDef(e){return unsafeCoerce$0(e,cst_altglyphdef$0)}
    function altGlyphItem(e){return unsafeCoerce$0(e,cst_altglyphitem$0)}
    function animate(e){return unsafeCoerce$0(e,cst_animate$0)}
    function animateColor(e){return unsafeCoerce$0(e,cst_animatecolor$0)}
    function animateMotion(e){return unsafeCoerce$0(e,cst_animatemotion$0)}
    function animateTransform(e)
     {return unsafeCoerce$0(e,cst_animatetransform$0)}
    function circle(e){return unsafeCoerce$0(e,cst_circle$0)}
    function clipPath(e){return unsafeCoerce$0(e,cst_clippath$0)}
    function cursor(e){return unsafeCoerce$0(e,cst_cursor$0)}
    function defs(e){return unsafeCoerce$0(e,cst_defs$0)}
    function desc(e){return unsafeCoerce$0(e,cst_desc$0)}
    function ellipse(e){return unsafeCoerce$0(e,cst_ellipse$0)}
    function filter(e){return unsafeCoerce$0(e,cst_filter$0)}
    function font(e){return unsafeCoerce$0(e,cst_font$0)}
    function fontFace(e){return unsafeCoerce$0(e,cst_font_face$0)}
    function fontFaceFormat(e)
     {return unsafeCoerce$0(e,cst_font_face_format$0)}
    function fontFaceName(e){return unsafeCoerce$0(e,cst_font_face_name$0)}
    function fontFaceSrc(e){return unsafeCoerce$0(e,cst_font_face_src$0)}
    function fontFaceUri(e){return unsafeCoerce$0(e,cst_font_face_uri$0)}
    function foreignObject(e){return unsafeCoerce$0(e,cst_foreignobject)}
    function g(e){return unsafeCoerce$0(e,cst_g$1)}
    function glyph(e){return unsafeCoerce$0(e,cst_glyph$0)}
    function glyphRef(e){return unsafeCoerce$0(e,cst_glyphref$0)}
    function hkern(e){return unsafeCoerce$0(e,cst_hkern$0)}
    function image(e){return unsafeCoerce$0(e,cst_image$0)}
    function lineElement(e){return unsafeCoerce$0(e,cst_line$0)}
    function linearElement(e){return unsafeCoerce$0(e,cst_lineargradient$0)}
    function mask(e){return unsafeCoerce$0(e,cst_mask$0)}
    function metaData(e){return unsafeCoerce$0(e,cst_metadata$0)}
    function missingGlyph(e){return unsafeCoerce$0(e,cst_missing_glyph$0)}
    function mPath(e){return unsafeCoerce$0(e,cst_mpath$0)}
    function path$0(e){return unsafeCoerce$0(e,cst_path$0)}
    function pattern(e){return unsafeCoerce$0(e,cst_pattern$0)}
    function polygon(e){return unsafeCoerce$0(e,cst_polygon$0)}
    function polyline(e){return unsafeCoerce$0(e,cst_polyline$0)}
    function radialgradient(e){return unsafeCoerce$0(e,cst_radialgradient$0)}
    function rect(e){return unsafeCoerce$0(e,cst_rect$0)}
    function script$0(e){return unsafeCoerce$0(e,cst_script$3)}
    function set$1(e){return unsafeCoerce$0(e,cst_set$0)}
    function stop(e){return unsafeCoerce$0(e,cst_stop$0)}
    function style$0(e){return unsafeCoerce$0(e,cst_style$3)}
    function svg(e){return unsafeCoerce$0(e,cst_svg$0)}
    function switch$0(e){return unsafeCoerce$0(e,cst_switch$0)}
    function symbol$12(e){return unsafeCoerce$0(e,cst_symbol$0)}
    function textElement(e){return unsafeCoerce$0(e,cst_text$1)}
    function textpath(e){return unsafeCoerce$0(e,cst_textpath$0)}
    function title$0(e){return unsafeCoerce$0(e,cst_title$3)}
    function tref(e){return unsafeCoerce$0(e,cst_tref$0)}
    function tspan(e){return unsafeCoerce$0(e,cst_tspan$0)}
    function use(e){return unsafeCoerce$0(e,cst_use$0)}
    function view(e){return unsafeCoerce$0(e,cst_view$0)}
    function vkern(e){return unsafeCoerce$0(e,cst_vkern$0)}
    var
     Js_of_ocaml_Dom_svg=
      [0,
       xmlns,
       SVGError,
       createElement$0,
       createA$0,
       createAltGlyph,
       createAltGlyphDef,
       createAltGlyphItem,
       createAnimate,
       createAnimateColor,
       createAnimateMotion,
       createAnimateTransform,
       createCircle,
       createClipPath,
       createCursor,
       createDefs,
       createDesc,
       createEllipse,
       createFilter,
       createFont,
       createFontFace,
       createFontFaceFormat,
       createFontFaceName,
       createFontFaceSrc,
       createFontFaceUri,
       createForeignObject,
       createG,
       createGlyph,
       createGlyphRef,
       createhkern,
       createImage,
       createLineElement,
       createLinearElement,
       createMask,
       createMetaData,
       createMissingGlyph,
       createMPath,
       createPath,
       createPattern,
       createPolygon,
       createPolyline,
       createRadialgradient,
       createRect,
       createScript$0,
       createSet,
       createStop,
       createStyle$0,
       createSvg,
       createSwitch,
       createSymbol,
       createTextElement,
       createTextpath,
       createTitle$0,
       createTref,
       createTspan,
       createUse,
       createView,
       createvkern,
       svg_element,
       document$1,
       getElementById$0,
       [0,
        element$2,
        a$0,
        altGlyph,
        altGlyphDef,
        altGlyphItem,
        animate,
        animateColor,
        animateMotion,
        animateTransform,
        circle,
        clipPath,
        cursor,
        defs,
        desc,
        ellipse,
        filter,
        font,
        fontFace,
        fontFaceFormat,
        fontFaceName,
        fontFaceSrc,
        fontFaceUri,
        foreignObject,
        g,
        glyph,
        glyphRef,
        hkern,
        image,
        lineElement,
        linearElement,
        mask,
        metaData,
        missingGlyph,
        mPath,
        path$0,
        pattern,
        polygon,
        polyline,
        radialgradient,
        rect,
        script$0,
        set$1,
        stop,
        style$0,
        svg,
        switch$0,
        symbol$12,
        textElement,
        textpath,
        title$0,
        tref,
        tspan,
        use,
        view,
        vkern]];
    caml_register_global(1662,Js_of_ocaml_Dom_svg,"Js_of_ocaml__Dom_svg");
    function withCredentials(b)
     {var init={};init.withCredentials = ! ! b;return init}
    var
     eventSource=Unsafe[1].EventSource,
     eventSource_options=Unsafe[1].EventSource,
     Js_of_ocaml_EventSource=
      [0,withCredentials,eventSource,eventSource_options,addEventListener];
    caml_register_global
     (1663,Js_of_ocaml_EventSource,"Js_of_ocaml__EventSource");
    var
     console=runtime.caml_js_get_console(0),
     Js_of_ocaml_Firebug=[0,console];
    caml_register_global(1664,Js_of_ocaml_Firebug,"Js_of_ocaml__Firebug");
    function empty_position_options(param){return {}}
    var
     x=Unsafe[1].navigator,
     geolocation=caml_call1(Optdef[5],x)?x.geolocation:x;
    function is_supported$2(param){return caml_call1(Optdef[5],geolocation)}
    var
     Js_of_ocaml_Geolocation=
      [0,empty_position_options,geolocation,is_supported$2];
    caml_register_global
     (1665,Js_of_ocaml_Geolocation,"Js_of_ocaml__Geolocation");
    function object_options(param){return {"localeMatcher":"best fit"}}
    function options(param)
     {return {"localeMatcher":"best fit",
              "usage":"sort",
              "sensitivity":"variant",
              "ignorePunctuation":false$0,
              "numeric":false$0,
              "caseFirst":"false"}}
    var Collator=[0,object_options,options];
    function options$0(param)
     {return {"localeMatcher":"best fit",
              "timeZone":t39,
              "hour12":t39,
              "hourCycle":t39,
              "formatMatcher":"best fit",
              "weekday":t39,
              "era":t39,
              "year":t39,
              "month":t39,
              "day":t39,
              "hour":t39,
              "minute":t39,
              "second":t39,
              "timeZoneName":t39}}
    var DateTimeFormat=[0,object_options,options$0];
    function options$1(param)
     {return {"localeMatcher":"best fit",
              "style":"decimal",
              "currency":t39,
              "currencyDisplay":t39,
              "useGrouping":true$0,
              "minimumIntegerDigits":t39,
              "minimumFractionDigits":t39,
              "maximumFractionDigits":t39,
              "minimumSignificantDigits":t39,
              "maximumSignificantDigits":t39}}
    var NumberFormat=[0,object_options,options$1];
    function options$2(param)
     {return {"localeMatcher":"best fit","type":"cardinal"}}
    var
     PluralRules=[0,object_options,options$2],
     intl=Unsafe[1].Intl,
     collator_constr=Unsafe[1].Intl.Collator,
     dateTimeFormat_constr=Unsafe[1].Intl.DateTimeFormat,
     numberFormat_constr=Unsafe[1].Intl.NumberFormat,
     pluralRules_constr=Unsafe[1].Intl.PluralRules;
    function is_supported$3(param){return caml_call1(Optdef[5],intl)}
    var
     Js_of_ocaml_Intl=
      [0,
       Collator,
       DateTimeFormat,
       NumberFormat,
       PluralRules,
       intl,
       collator_constr,
       dateTimeFormat_constr,
       numberFormat_constr,
       pluralRules_constr,
       is_supported$3];
    caml_register_global(1666,Js_of_ocaml_Intl,"Js_of_ocaml__Intl");
    var Js_of_ocaml$0=[0];
    caml_register_global(1667,Js_of_ocaml$0,"Js_of_ocaml");
    function empty_intersection_observer_op(param){return {}}
    var intersectionObserver_unsafe=Unsafe[1].IntersectionObserver;
    function is_supported$4(param)
     {return caml_call1(Optdef[5],intersectionObserver_unsafe)}
    var
     Js_of_ocaml_IntersectionObserv=
      [0,
       empty_intersection_observer_op,
       is_supported$4,
       intersectionObserver_unsafe];
    caml_register_global
     (1668,Js_of_ocaml_IntersectionObserv,"Js_of_ocaml__IntersectionObserver");
    return}
  (function(){return this}()));


//# 1 ".main.eobjs/byte/denotation.cmo.js"
(function(V){"use strict";/*<<?>>*/var
k="args",j="List",d=V.jsoo_runtime,a=d.caml_string_of_jsbytes;/*<<?>>*/function
c(a,b){return a.length==1?a(b):d.caml_call_gen(a,[b])}/*<<?>>*/function
h(a,b,c){return a.length==2?a(b,c):d.caml_call_gen(a,[b,c])}/*<<?>>*/function
U(a,b,c,e){return a.length==3?a(b,c,e):d.caml_call_gen(a,[b,c,e])}var
e=d.caml_get_global_data(),g=e.Stdlib__list,l=e.Pair2,R=a(j),S=a("L"),Q=a(k),P=[2,a("Polymorphic args3 unimplemented"),0],N=a(k),M=[2,a("Polymorphic args2 unimplemented"),0],H=a("Node"),I=[3,0],J=a("Leaf"),K=a("Tree"),E=a("Cons"),C=[3,0],D=a("Nil"),B=a(j),y=a("Some"),z=[3,0],A=a("None"),x=[2,a("Polymorphic opt unimplemented"),0],n=[3,0],o=a("T"),p=a("F"),m=[2,a("Boolean"),0],r=[2,a("Nat"),0],u=[2,a("Polymorphic var unimplemented"),0],T=e.Stdlib,s=e.Smyth__Desugar,q=[0,function(a){/*<<src/denotation.ml 9 6>>*/var/*<<src/denotation.ml 9 6>>*/b=0,/*<<src/denotation.ml 9 6>>*/c=a?o:p;return[5,c,b,n]/*<<src/denotation.ml 13 9>>*/},m],t=[0,s[4],r],v=[0,function(a){/*<<src/denotation.ml 25 6>>*/return[2,a]/*<<src/denotation.ml 25 12>>*/},u];function
w(a){/*<<src/denotation.ml 31 2>>*/var/*<<src/denotation.ml 31 2>>*/b=a[2],/*<<src/denotation.ml 31 2>>*/d=a[1];/*<<src/denotation.ml 31 2>>*/return[0,function(a){/*<<src/denotation.ml 33 8>>*/return a?[5,y,[0,b,0],/*<<src/denotation.ml 38 36>>*/c(d,a[1])]:[5,A,[0,b,0],z]/*<<src/denotation.ml 38 41>>*/},x]/*<<src/denotation.ml 41 5>>*/}function
f(b){/*<<src/denotation.ml 44 2>>*/var/*<<src/denotation.ml 44 2>>*/a=b[2],/*<<src/denotation.ml 44 2>>*/d=b[1],/*<<src/denotation.ml 44 2>>*/e=[2,B,[0,a,0]];/*<<src/denotation.ml 44 2>>*/return[0,function(b){/*<<src/denotation.ml 46 8>>*/ /*<<src/denotation.ml 46 8>>*/var
e=[5,D,[0,a,0],C];/*<<src/denotation.ml 46 8>>*/function
f(e,b){/*<<src/denotation.ml 48 44>>*/return[5,E,[0,a,0],[3,[0,/*<<src/denotation.ml 48 44>>*/c(d,e),[0,b,0]]]]/*<<src/denotation.ml 48 55>>*/}/*<<src/denotation.ml 46 8>>*/return/*<<src/denotation.ml 46 8>>*/U(g[23],f,b,e)/*<<src/denotation.ml 51 43>>*/},e]/*<<src/denotation.ml 54 5>>*/}function
F(a){/*<<src/denotation.ml 58 9>>*/return/*<<src/denotation.ml 58 9>>*/f(/*<<src/denotation.ml 58 9>>*/f(a))/*<<src/denotation.ml 58 17>>*/}function
G(a){/*<<src/denotation.ml 61 2>>*/var/*<<src/denotation.ml 61 2>>*/b=a[2],/*<<src/denotation.ml 61 2>>*/e=a[1];/*<<src/denotation.ml 61 2>>*/function
d(a){/*<<src/denotation.ml 63 8>>*/if(a){/*<<src/denotation.ml 74 22>>*/var
f=a[2],g=a[1],/*<<src/denotation.ml 74 22>>*/h=[0,/*<<src/denotation.ml 74 22>>*/d(a[3]),0],/*<<src/denotation.ml 73 22>>*/i=[0,/*<<src/denotation.ml 73 22>>*/c(e,f),h];/*<<src/denotation.ml 72 22>>*/return[5,H,[0,b,0],[3,[0,/*<<src/denotation.ml 72 22>>*/d(g),i]]]}/*<<src/denotation.ml 65 14>>*/return[5,J,[0,b,0],I]/*<<src/denotation.ml 76 17>>*/}/*<<src/denotation.ml 61 2>>*/return[0,d,[2,K,[0,b,0]]]/*<<src/denotation.ml 80 5>>*/}function
L(b,a){/*<<src/denotation.ml 83 2>>*/var/*<<src/denotation.ml 83 2>>*/d=a[1],/*<<src/denotation.ml 83 2>>*/e=b[1];/*<<src/denotation.ml 83 2>>*/return[0,function(a){/*<<src/denotation.ml 84 6>>*/var/*<<src/denotation.ml 84 6>>*/b=a[1],/*<<src/denotation.ml 85 43>>*/f=[0,/*<<src/denotation.ml 85 43>>*/c(d,a[2]),0];/*<<src/denotation.ml 85 35>>*/return[5,N,0,[3,[0,/*<<src/denotation.ml 85 35>>*/c(e,b),f]]]/*<<src/denotation.ml 86 9>>*/},M]/*<<src/denotation.ml 88 5>>*/}function
O(d,b,a){/*<<src/denotation.ml 91 2>>*/var/*<<src/denotation.ml 91 2>>*/e=a[1],/*<<src/denotation.ml 91 2>>*/f=b[1],/*<<src/denotation.ml 91 2>>*/g=d[1];/*<<src/denotation.ml 91 2>>*/return[0,function(a){/*<<src/denotation.ml 92 6>>*/var/*<<src/denotation.ml 92 6>>*/b=a[2],/*<<src/denotation.ml 92 6>>*/d=a[1],/*<<src/denotation.ml 93 51>>*/h=[0,/*<<src/denotation.ml 93 51>>*/c(e,a[3]),0],/*<<src/denotation.ml 93 43>>*/i=[0,/*<<src/denotation.ml 93 43>>*/c(f,b),h];/*<<src/denotation.ml 93 35>>*/return[5,Q,0,[3,[0,/*<<src/denotation.ml 93 35>>*/c(g,d),i]]]/*<<src/denotation.ml 94 9>>*/},P]/*<<src/denotation.ml 96 5>>*/}function
b(m){/*<<?>>*/var
a=m;/*<<src/denotation.ml 99 2>>*/for(;;)/*<<src/denotation.ml 99 2>>*/switch(a[0]){case
0:var
n=a[2],o=a[1];/*<<src/denotation.ml 114 20>>*/return[0,o,n,/*<<src/denotation.ml 114 20>>*/b(a[3])];case
1:var
f=a[3],i=a[2],p=a[1];if(0===f[0]){/*<<src/denotation.ml 117 46>>*/ /*<<src/denotation.ml 117 46>>*/var
q=[0,/*<<src/denotation.ml 117 46>>*/b(f[1])];/*<<src/denotation.ml 117 23>>*/return[1,p,/*<<src/denotation.ml 117 23>>*/b(i),q]}var
a=i;continue;case
2:/*<<src/denotation.ml 120 8>>*/return[2,a[1]];case
3:/*<<src/denotation.ml 123 15>>*/return[3,/*<<src/denotation.ml 123 15>>*/h(g[17],b,a[1])];case
4:var
r=a[2],s=a[1];/*<<src/denotation.ml 126 21>>*/return[4,s,r,/*<<src/denotation.ml 126 21>>*/b(a[3])];case
5:var
j=a[1],e=a[2];if(e){var
k=e[1];if(2===k[0]&&!d.caml_string_notequal(k[1],R)&&!e[2]){/*<<src/denotation.ml 106 36>>*/ /*<<src/denotation.ml 106 36>>*/var
t=/*<<src/denotation.ml 106 36>>*/b(a[3]);/*<<src/denotation.ml 106 15>>*/return[5,/*<<src/denotation.ml 106 15>>*/h(T[28],S,j),0,t]}}/*<<src/denotation.ml 109 30>>*/return[5,j,0,/*<<src/denotation.ml 109 30>>*/b(a[3])];case
6:/*<<src/denotation.ml 131 36>>*/var
u=a[2],v=a[1],/*<<src/denotation.ml 131 36>>*/w=/*<<src/denotation.ml 131 36>>*/c(l[3],b),/*<<src/denotation.ml 131 21>>*/x=/*<<src/denotation.ml 131 21>>*/c(l[3],w),/*<<src/denotation.ml 131 12>>*/y=/*<<src/denotation.ml 131 12>>*/h(g[17],x,u);/*<<src/denotation.ml 130 12>>*/return[6,/*<<src/denotation.ml 130 12>>*/b(v),y];case
7:/*<<src/denotation.ml 135 8>>*/return[7,a[1]];case
8:/*<<src/denotation.ml 138 34>>*/var
z=a[1],/*<<src/denotation.ml 138 34>>*/A=/*<<src/denotation.ml 138 34>>*/b(a[2]);/*<<src/denotation.ml 138 17>>*/return[8,/*<<src/denotation.ml 138 17>>*/b(z),A];default:var
B=a[2];/*<<src/denotation.ml 141 25>>*/return[9,/*<<src/denotation.ml 141 25>>*/b(a[1]),B]}/*<<src/denotation.ml 141 45>>*/}function
i(b,a){/*<<src/denotation.ml 144 2>>*/return/*<<src/denotation.ml 144 2>>*/c(b[1],a)/*<<src/denotation.ml 145 8>>*/}d.caml_register_global(28,[0,q,t,v,w,f,F,G,L,O,function(c,a){/*<<src/denotation.ml 149 17>>*/return/*<<src/denotation.ml 149 17>>*/b(/*<<src/denotation.ml 149 17>>*/i(c,a))/*<<src/denotation.ml 149 27>>*/},i],"Denotation");return/*<<?>>*/}(function(){return this}()));

//# 1 ".main.eobjs/byte/references.cmo.js"
(function(H){"use strict";/*<<?>>*/var
l="inc",r="sum",o="'",n="isEven",s="div2",m="Unknown Myth built-in '",A="zero",y="countOdd",z="isNonzero",i=H.jsoo_runtime,x=i.caml_equal,k=i.caml_string_notequal,d=i.caml_string_of_jsbytes;/*<<?>>*/function
b(a,b){return a.length==1?a(b):i.caml_call_gen(a,[b])}/*<<?>>*/function
e(a,b,c){return a.length==2?a(b,c):i.caml_call_gen(a,[b,c])}/*<<?>>*/function
q(a,b,c,d){return a.length==3?a(b,c,d):i.caml_call_gen(a,[b,c,d])}var
j=i.caml_get_global_data(),f=j.Stdlib,g=j.Stdlib__list,p=j.List2,h=j.Tree2,a=j.Denotation,c=j.Sample2,C=[0,0],d9=d(n),d_=d(z),d$=d(o),ea=d(m),dR=d(y),dS=d(r),dT=d(o),dU=d(m),c7=d(l),c8=d(A),c9=d(o),c_=d(m),R=d(s),S=d(l),T=d(o),U=d(m),D=d("treePreorder"),E=d("tree_preorder"),F=d("treePostorder"),G=d("tree_postorder"),I=[0,0,0],N=d("treeNodesAtLevel"),O=d("tree_nodes_at_level"),W=[0,d(s),0],Z=[0,d(s),[0,d(l),0]],ac=d("treeMap"),ad=d("tree_map"),ak=d("treeInOrder"),al=d("tree_inorder"),as=d("treeCountNodes"),at=d("tree_count_nodes"),aA=d("treeCountLeaves"),aB=d("tree_count_leaves"),aI=d("treeCollectLeaves"),aJ=d("tree_collect_leaves"),aM=[0,0,0],aR=d("treeBInsert"),aS=d("tree_binsert"),aV=[0,0,0],aZ=d("natAdd"),a0=d("nat_add"),a4=d("natPred"),a5=d("nat_pred"),a8=[0,0,0],ba=d("natMax"),bb=d("nat_max"),bf=d(n),bg=d("nat_iseven"),bn=d("listTail"),bo=d("list_tl"),bs=[0,0,0],bx=d("listTake"),by=d("list_take"),bE=d("listSum"),bF=d("list_sum"),bL=d("listStutter"),bM=d("list_stutter"),bP=[0,0,0],bV=d("listSortedInsert"),bW=d("list_sorted_insert"),b3=d("listSortSortedInsert"),b4=d("list_sort_sorted_insert"),b8=[0,0,0],cc=d("listSnoc"),cd=d("list_snoc"),ch=[0,0,0],cn=d("listRevTailcall"),co=d("list_rev_tailcall"),cv=d("listRevSnoc"),cw=d("list_rev_snoc"),cD=d("listRevFold"),cE=d("list_rev_fold"),cL=d("listRevAppend"),cM=d("list_rev_append"),cT=d("listPairwiseSwap"),cU=d("list_pairwise_swap"),cX=[0,0,0],c3=d("listNth"),c4=d("list_nth"),da=[0,d(l),0],dd=[0,d(l),[0,d(A),0]],di=d("listMap"),dj=d("list_map"),dr=d("listLength"),ds=d("list_length"),dz=d("listLast"),dA=d("list_last"),dG=d("listInc"),dH=d("list_inc"),dN=d("listHead"),dO=d("list_hd"),dW=[0,d(r),0,0],d0=[0,d(r),[0,d(y),0]],d5=d("listFold"),d6=d("list_fold"),ec=[0,d(n),0],ef=[0,d(n),[0,d(z),0]],ek=d("listFilter"),el=d("list_filter"),er=d("evenParity"),es=d("list_even_parity"),ew=[0,0,0],eC=d("listDrop"),eD=d("list_drop"),eK=d("concat"),eL=d("list_concat"),eS=d("compress"),eT=d("list_compress"),eX=[0,0,0],e3=d("append"),e4=d("list_append"),e9=d("xor"),e_=d("bool_xor"),fb=d("neg"),fc=d("bool_neg"),fh=d("impl"),fi=d("bool_impl"),fn=d("or"),fo=d("bool_bor"),ft=d("and"),fu=d("bool_band"),B=j.Stdlib__option,bZ=j.Stdlib__int;function
t(f){/*<<?>>*/var
a=f;/*<<src/references.ml 5 4>>*/for(;;){/*<<src/references.ml 5 4>>*/if(a){var
b=a[2];if(b){var
d=b[2],c=b[1],e=a[1];/*<<src/references.ml 7 13>>*/if(/*<<src/references.ml 7 13>>*/x(e,c)){var
a=[0,c,d];continue}/*<<src/references.ml 10 17>>*/return[0,e,/*<<src/references.ml 10 17>>*/t([0,c,d])]}}/*<<src/references.ml 13 10>>*/return a}/*<<src/references.ml 13 12>>*/}function
u(c){/*<<?>>*/var
a=c;/*<<src/references.ml 17 4>>*/for(;;){/*<<src/references.ml 17 4>>*/if(a){var
b=a[2];if(a[1])/*<<src/references.ml 23 16>>*/return 1-/*<<src/references.ml 23 16>>*/u(b);var
a=b;continue}/*<<src/references.ml 19 10>>*/return 1}/*<<src/references.ml 25 33>>*/}function
v(a){/*<<src/references.ml 29 4>>*/if(a){var
b=a[2],c=a[1];if(b){/*<<src/references.ml 39 12>>*/var
d=b[1],/*<<src/references.ml 39 12>>*/f=/*<<src/references.ml 39 12>>*/v(b[2]),/*<<src/references.ml 39 12>>*/g=function(a){/*<<src/references.ml 38 28>>*/return[0,d,[0,c,a]]/*<<src/references.ml 38 47>>*/};/*<<src/references.ml 39 12>>*/return/*<<src/references.ml 39 12>>*/e(B[7],g,f)}/*<<src/references.ml 34 10>>*/return 0}/*<<src/references.ml 31 10>>*/return C/*<<src/references.ml 39 37>>*/}function
w(b,a){/*<<src/references.ml 43 4>>*/if(a){var
c=a[1],d=a[2];/*<<src/references.ml 48 13>>*/return/*<<src/references.ml 48 13>>*/i.caml_lessthan(b,c)?[0,b,a]:/*<<src/references.ml 50 18>>*/x(b,c)?a:[0,c,/*<<src/references.ml 53 20>>*/w(b,d)]}/*<<src/references.ml 45 10>>*/return[0,b,0]/*<<src/references.ml 53 47>>*/}i.caml_register_global(130,[0,function(j){/*<<src/references.ml 73 2>>*/var/*<<src/references.ml 73 2>>*/d=j[1],/*<<src/references.ml 73 2>>*/l=0;/*<<src/references.ml 73 2>>*/function
m(a){/*<<src/references.ml 918 18>>*/return/*<<src/references.ml 918 18>>*/b(h[2],a)/*<<src/references.ml 918 38>>*/}/*<<src/references.ml 73 2>>*/var/*<<src/references.ml 73 2>>*/n=[0,a[2][2],0],/*<<src/references.ml 913 29>>*/o=[0,/*<<src/references.ml 913 29>>*/b(c[1],0)],/*<<src/references.ml 913 29>>*/r=c[10],/*<<src/references.ml 911 20>>*/s=/*<<src/references.ml 911 20>>*/b(a[5],a[2]),/*<<src/references.ml 907 8>>*/x=[0,[0,E,/*<<src/references.ml 907 8>>*/b(d,[0,D,15,/*<<src/references.ml 910 19>>*/b(a[7],a[2]),s,r,o,n,m])],l];/*<<src/references.ml 907 8>>*/function
y(a){/*<<src/references.ml 901 18>>*/return/*<<src/references.ml 901 18>>*/b(h[4],a)/*<<src/references.ml 901 39>>*/}/*<<src/references.ml 896 29>>*/var/*<<src/references.ml 896 29>>*/z=[0,/*<<src/references.ml 896 29>>*/b(c[1],0)],/*<<src/references.ml 896 29>>*/A=c[10],/*<<src/references.ml 894 20>>*/B=/*<<src/references.ml 894 20>>*/b(a[5],a[2]),/*<<src/references.ml 890 8>>*/C=[0,[0,G,/*<<src/references.ml 890 8>>*/b(d,[0,F,20,/*<<src/references.ml 893 19>>*/b(a[7],a[2]),B,A,z,0,y])],x];/*<<src/references.ml 890 8>>*/function
H(a){/*<<src/references.ml 883 16>>*/return/*<<src/references.ml 883 16>>*/e(h[8],a[1],a[2])/*<<src/references.ml 884 55>>*/}/*<<src/references.ml 879 29>>*/var/*<<src/references.ml 879 29>>*/J=[0,/*<<src/references.ml 879 29>>*/b(c[1],I)],/*<<src/references.ml 878 20>>*/K=/*<<src/references.ml 878 20>>*/e(c[3],c[5],c[11]),/*<<src/references.ml 878 20>>*/L=a[2],/*<<src/references.ml 876 46>>*/M=/*<<src/references.ml 876 46>>*/b(a[7],a[1]),/*<<src/references.ml 872 8>>*/P=[0,[0,O,/*<<src/references.ml 872 8>>*/b(d,[0,N,20,/*<<src/references.ml 876 14>>*/e(a[8],a[2],M),L,K,J,0,H])],C];/*<<src/references.ml 872 8>>*/function
Q(d){/*<<src/references.ml 859 16>>*/var/*<<src/references.ml 859 16>>*/a=d[1],/*<<src/references.ml 859 16>>*/g=d[2];/*<<src/references.ml 859 16>>*/if(/*<<src/references.ml 859 16>>*/k(a,R))if(k(a,S))/*<<src/references.ml 864 67>>*/var/*<<src/references.ml 864 67>>*/i=/*<<src/references.ml 864 67>>*/e(f[28],a,T),/*<<src/references.ml 864 38>>*/j=/*<<src/references.ml 864 38>>*/e(f[28],U,i),c=/*<<src/references.ml 864 29>>*/b(f[2],j);else
var
c=function(a){/*<<src/references.ml 863 42>>*/return a+1|0/*<<src/references.ml 863 47>>*/};else
var
c=function(a){/*<<src/references.ml 862 43>>*/return a/2|0/*<<src/references.ml 862 48>>*/};/*<<src/references.ml 864 79>>*/return/*<<src/references.ml 864 79>>*/e(h[7],c,g)/*<<src/references.ml 866 36>>*/}/*<<src/references.ml 872 8>>*/var/*<<src/references.ml 872 8>>*/V=[0,a[2][2],[0,a[2][2],0]],/*<<src/references.ml 855 29>>*/X=[0,/*<<src/references.ml 855 29>>*/b(c[1],W)],/*<<src/references.ml 855 29>>*/Y=c[10],/*<<src/references.ml 853 16>>*/_=/*<<src/references.ml 853 16>>*/b(c[2],Z),/*<<src/references.ml 852 14>>*/$=/*<<src/references.ml 852 14>>*/e(c[3],_,Y),/*<<src/references.ml 850 20>>*/aa=/*<<src/references.ml 850 20>>*/b(a[7],a[2]),/*<<src/references.ml 849 16>>*/ab=/*<<src/references.ml 849 16>>*/b(a[7],a[2]),/*<<src/references.ml 843 8>>*/ae=[0,[0,ad,/*<<src/references.ml 843 8>>*/b(d,[0,ac,20,/*<<src/references.ml 847 14>>*/e(a[8],a[3],ab),aa,$,X,V,Q])],P];/*<<src/references.ml 843 8>>*/function
af(a){/*<<src/references.ml 837 18>>*/return/*<<src/references.ml 837 18>>*/b(h[3],a)/*<<src/references.ml 837 37>>*/}/*<<src/references.ml 843 8>>*/var/*<<src/references.ml 843 8>>*/ag=[0,a[2][2],0],/*<<src/references.ml 832 29>>*/ah=[0,/*<<src/references.ml 832 29>>*/b(c[1],0)],/*<<src/references.ml 832 29>>*/ai=c[10],/*<<src/references.ml 830 20>>*/aj=/*<<src/references.ml 830 20>>*/b(a[5],a[2]),/*<<src/references.ml 826 8>>*/am=[0,[0,al,/*<<src/references.ml 826 8>>*/b(d,[0,ak,15,/*<<src/references.ml 829 19>>*/b(a[7],a[2]),aj,ai,ah,ag,af])],ae];/*<<src/references.ml 826 8>>*/function
an(a){/*<<src/references.ml 820 18>>*/return/*<<src/references.ml 820 18>>*/b(h[6],a)/*<<src/references.ml 820 40>>*/}/*<<src/references.ml 826 8>>*/var/*<<src/references.ml 826 8>>*/ao=[0,a[2][2],0],/*<<src/references.ml 815 29>>*/ap=[0,/*<<src/references.ml 815 29>>*/b(c[1],0)],/*<<src/references.ml 815 29>>*/aq=c[10],/*<<src/references.ml 815 29>>*/ar=a[2],/*<<src/references.ml 809 8>>*/au=[0,[0,at,/*<<src/references.ml 809 8>>*/b(d,[0,as,15,/*<<src/references.ml 812 19>>*/b(a[7],a[2]),ar,aq,ap,ao,an])],am];/*<<src/references.ml 809 8>>*/function
av(a){/*<<src/references.ml 803 18>>*/return/*<<src/references.ml 803 18>>*/b(h[5],a)/*<<src/references.ml 803 41>>*/}/*<<src/references.ml 809 8>>*/var/*<<src/references.ml 809 8>>*/aw=[0,a[1][2],0],/*<<src/references.ml 798 29>>*/ax=[0,/*<<src/references.ml 798 29>>*/b(c[1],0)],/*<<src/references.ml 798 29>>*/ay=c[11],/*<<src/references.ml 798 29>>*/az=a[2],/*<<src/references.ml 792 8>>*/aC=[0,[0,aB,/*<<src/references.ml 792 8>>*/b(d,[0,aA,15,/*<<src/references.ml 795 19>>*/b(a[7],a[1]),az,ay,ax,aw,av])],au];/*<<src/references.ml 792 8>>*/function
aD(a){/*<<src/references.ml 786 18>>*/return/*<<src/references.ml 786 18>>*/b(h[3],a)/*<<src/references.ml 786 37>>*/}/*<<src/references.ml 792 8>>*/var/*<<src/references.ml 792 8>>*/aE=[0,a[1][2],0],/*<<src/references.ml 781 29>>*/aF=[0,/*<<src/references.ml 781 29>>*/b(c[1],0)],/*<<src/references.ml 781 29>>*/aG=c[11],/*<<src/references.ml 779 20>>*/aH=/*<<src/references.ml 779 20>>*/b(a[5],a[1]),/*<<src/references.ml 775 8>>*/aK=[0,[0,aJ,/*<<src/references.ml 775 8>>*/b(d,[0,aI,20,/*<<src/references.ml 778 19>>*/b(a[7],a[1]),aH,aG,aF,aE,aD])],aC];/*<<src/references.ml 775 8>>*/function
aL(a){/*<<src/references.ml 768 16>>*/return/*<<src/references.ml 768 16>>*/e(h[1],a[1],a[2])/*<<src/references.ml 769 38>>*/}/*<<src/references.ml 764 29>>*/var/*<<src/references.ml 764 29>>*/aN=[0,/*<<src/references.ml 764 29>>*/b(c[1],aM)],/*<<src/references.ml 763 20>>*/aO=/*<<src/references.ml 763 20>>*/e(c[3],c[5],c[10]),/*<<src/references.ml 762 20>>*/aP=/*<<src/references.ml 762 20>>*/b(a[7],a[2]),/*<<src/references.ml 761 46>>*/aQ=/*<<src/references.ml 761 46>>*/b(a[7],a[2]),/*<<src/references.ml 757 8>>*/aT=[0,[0,aS,/*<<src/references.ml 757 8>>*/b(d,[0,aR,20,/*<<src/references.ml 761 14>>*/e(a[8],a[2],aQ),aP,aO,aN,0,aL])],aK];/*<<src/references.ml 757 8>>*/function
aU(a){/*<<src/references.ml 750 16>>*/return a[1]+a[2]|0/*<<src/references.ml 751 23>>*/}/*<<src/references.ml 746 29>>*/var/*<<src/references.ml 746 29>>*/aW=[0,/*<<src/references.ml 746 29>>*/b(c[1],aV)],/*<<src/references.ml 745 20>>*/aX=/*<<src/references.ml 745 20>>*/e(c[3],c[5],c[5]),/*<<src/references.ml 745 20>>*/aY=a[2],/*<<src/references.ml 740 8>>*/a1=[0,[0,a0,/*<<src/references.ml 740 8>>*/b(d,[0,aZ,9,/*<<src/references.ml 743 19>>*/e(a[8],a[2],a[2]),aY,aX,aW,0,aU])],aT];/*<<src/references.ml 740 8>>*/function
a2(a){/*<<src/references.ml 731 18>>*/return 0===a?0:a-1|0/*<<src/references.ml 734 25>>*/}/*<<src/references.ml 726 29>>*/var/*<<src/references.ml 726 29>>*/a3=[0,/*<<src/references.ml 726 29>>*/b(c[1],0)],/*<<src/references.ml 720 8>>*/a6=[0,[0,a5,/*<<src/references.ml 720 8>>*/b(d,[0,a4,4,a[2],a[2],c[5],a3,0,a2])],a1];/*<<src/references.ml 720 8>>*/function
a7(a){/*<<src/references.ml 710 16>>*/var/*<<src/references.ml 710 16>>*/b=a[2],/*<<src/references.ml 710 16>>*/c=a[1];/*<<src/references.ml 710 16>>*/return b<=c?c:b/*<<src/references.ml 714 21>>*/}/*<<src/references.ml 706 29>>*/var/*<<src/references.ml 706 29>>*/a9=[0,/*<<src/references.ml 706 29>>*/b(c[1],a8)],/*<<src/references.ml 705 20>>*/a_=/*<<src/references.ml 705 20>>*/e(c[3],c[5],c[5]),/*<<src/references.ml 705 20>>*/a$=a[2],/*<<src/references.ml 700 8>>*/bc=[0,[0,bb,/*<<src/references.ml 700 8>>*/b(d,[0,ba,15,/*<<src/references.ml 703 19>>*/e(a[8],a[2],a[2]),a$,a_,a9,0,a7])],a6];/*<<src/references.ml 700 8>>*/function
bd(b){/*<<?>>*/var
a=b;/*<<src/references.ml 689 18>>*/for(;;){/*<<src/references.ml 689 18>>*/if(0===a)/*<<src/references.ml 690 20>>*/return 1;/*<<src/references.ml 691 23>>*/if(1===a)/*<<src/references.ml 692 20>>*/return 0;var
a=a-2|0;continue}/*<<src/references.ml 694 29>>*/}/*<<src/references.ml 684 29>>*/var/*<<src/references.ml 684 29>>*/be=[0,/*<<src/references.ml 684 29>>*/b(c[1],0)],/*<<src/references.ml 678 8>>*/bh=[0,[0,bg,/*<<src/references.ml 678 8>>*/b(d,[0,bf,4,a[2],a[1],c[5],be,0,bd])],bc];/*<<src/references.ml 678 8>>*/function
bi(a){/*<<src/references.ml 667 18>>*/return a?a[2]:0/*<<src/references.ml 672 28>>*/}/*<<src/references.ml 678 8>>*/var/*<<src/references.ml 678 8>>*/bj=[0,a[2][2],0],/*<<src/references.ml 662 29>>*/bk=[0,/*<<src/references.ml 662 29>>*/b(c[1],0)],/*<<src/references.ml 662 29>>*/bl=c[7],/*<<src/references.ml 660 20>>*/bm=/*<<src/references.ml 660 20>>*/b(a[5],a[2]),/*<<src/references.ml 656 8>>*/bp=[0,[0,bo,/*<<src/references.ml 656 8>>*/b(d,[0,bn,10,/*<<src/references.ml 659 19>>*/b(a[5],a[2]),bm,bl,bk,bj,bi])],bh];/*<<src/references.ml 656 8>>*/function
bq(a){/*<<src/references.ml 649 16>>*/return/*<<src/references.ml 649 16>>*/e(p[26],a[1],a[2])/*<<src/references.ml 650 33>>*/}/*<<src/references.ml 656 8>>*/var/*<<src/references.ml 656 8>>*/br=[0,a[2][2],0],/*<<src/references.ml 645 29>>*/bt=[0,/*<<src/references.ml 645 29>>*/b(c[1],bs)],/*<<src/references.ml 644 20>>*/bu=/*<<src/references.ml 644 20>>*/e(c[3],c[5],c[7]),/*<<src/references.ml 643 20>>*/bv=/*<<src/references.ml 643 20>>*/b(a[5],a[2]),/*<<src/references.ml 642 46>>*/bw=/*<<src/references.ml 642 46>>*/b(a[5],a[2]),/*<<src/references.ml 638 8>>*/bz=[0,[0,by,/*<<src/references.ml 638 8>>*/b(d,[0,bx,20,/*<<src/references.ml 642 14>>*/e(a[8],a[2],bw),bv,bu,bt,br,bq])],bp];/*<<src/references.ml 638 8>>*/function
bA(a){/*<<src/references.ml 632 18>>*/return/*<<src/references.ml 632 18>>*/b(p[23],a)/*<<src/references.ml 632 30>>*/}/*<<src/references.ml 627 29>>*/var/*<<src/references.ml 627 29>>*/bB=[0,/*<<src/references.ml 627 29>>*/b(c[1],0)],/*<<src/references.ml 627 29>>*/bC=c[7],/*<<src/references.ml 627 29>>*/bD=a[2],/*<<src/references.ml 621 8>>*/bG=[0,[0,bF,/*<<src/references.ml 621 8>>*/b(d,[0,bE,10,/*<<src/references.ml 624 19>>*/b(a[5],a[2]),bD,bC,bB,0,bA])],bz];/*<<src/references.ml 621 8>>*/function
i(a){/*<<src/references.ml 610 18>>*/if(a){var
b=a[1];/*<<src/references.ml 615 34>>*/return[0,b,[0,b,/*<<src/references.ml 615 34>>*/i(a[2])]]}/*<<src/references.ml 612 24>>*/return 0/*<<src/references.ml 615 38>>*/}/*<<src/references.ml 621 8>>*/var/*<<src/references.ml 621 8>>*/bH=[0,a[2][2],0],/*<<src/references.ml 605 29>>*/bI=[0,/*<<src/references.ml 605 29>>*/b(c[1],0)],/*<<src/references.ml 605 29>>*/bJ=c[7],/*<<src/references.ml 603 20>>*/bK=/*<<src/references.ml 603 20>>*/b(a[5],a[2]),/*<<src/references.ml 599 8>>*/bN=[0,[0,bM,/*<<src/references.ml 599 8>>*/b(d,[0,bL,10,/*<<src/references.ml 602 19>>*/b(a[5],a[2]),bK,bJ,bI,bH,i])],bG];/*<<src/references.ml 599 8>>*/function
bO(a){/*<<src/references.ml 592 16>>*/return/*<<src/references.ml 592 16>>*/w(a[2],a[1])/*<<src/references.ml 593 41>>*/}/*<<src/references.ml 588 29>>*/var/*<<src/references.ml 588 29>>*/bQ=[0,/*<<src/references.ml 588 29>>*/b(c[1],bP)],/*<<src/references.ml 587 20>>*/bR=/*<<src/references.ml 587 20>>*/e(c[3],c[7],c[5]),/*<<src/references.ml 586 20>>*/bS=/*<<src/references.ml 586 20>>*/b(a[5],a[2]),/*<<src/references.ml 586 20>>*/bT=a[2],/*<<src/references.ml 585 31>>*/bU=/*<<src/references.ml 585 31>>*/b(a[5],a[2]),/*<<src/references.ml 581 8>>*/bX=[0,[0,bW,/*<<src/references.ml 581 8>>*/b(d,[0,bV,20,/*<<src/references.ml 585 14>>*/e(a[8],bU,bT),bS,bR,bQ,0,bO])],bN];/*<<src/references.ml 581 8>>*/function
bY(a){/*<<src/references.ml 575 18>>*/return/*<<src/references.ml 575 18>>*/e(g[54],bZ[9],a)/*<<src/references.ml 575 47>>*/}/*<<src/references.ml 570 29>>*/var/*<<src/references.ml 570 29>>*/b0=[0,/*<<src/references.ml 570 29>>*/b(c[1],0)],/*<<src/references.ml 570 29>>*/b1=c[7],/*<<src/references.ml 568 20>>*/b2=/*<<src/references.ml 568 20>>*/b(a[5],a[2]),/*<<src/references.ml 564 8>>*/b5=[0,[0,b4,/*<<src/references.ml 564 8>>*/b(d,[0,b3,20,/*<<src/references.ml 567 19>>*/b(a[5],a[2]),b2,b1,b0,0,bY])],bX];/*<<src/references.ml 564 8>>*/function
b6(a){/*<<src/references.ml 557 16>>*/return/*<<src/references.ml 557 16>>*/e(f[37],a[1],[0,a[2],0])/*<<src/references.ml 558 26>>*/}/*<<src/references.ml 564 8>>*/var/*<<src/references.ml 564 8>>*/b7=[0,a[2][2],0],/*<<src/references.ml 553 29>>*/b9=[0,/*<<src/references.ml 553 29>>*/b(c[1],b8)],/*<<src/references.ml 552 20>>*/b_=/*<<src/references.ml 552 20>>*/e(c[3],c[7],c[5]),/*<<src/references.ml 551 20>>*/b$=/*<<src/references.ml 551 20>>*/b(a[5],a[2]),/*<<src/references.ml 551 20>>*/ca=a[2],/*<<src/references.ml 550 31>>*/cb=/*<<src/references.ml 550 31>>*/b(a[5],a[2]),/*<<src/references.ml 546 8>>*/ce=[0,[0,cd,/*<<src/references.ml 546 8>>*/b(d,[0,cc,20,/*<<src/references.ml 550 14>>*/e(a[8],cb,ca),b$,b_,b9,b7,b6])],b5];/*<<src/references.ml 546 8>>*/function
cf(d){/*<<?>>*/var
a=d;/*<<src/references.ml 534 16>>*/for(;;){/*<<src/references.ml 534 16>>*/var/*<<src/references.ml 534 16>>*/c=a[2],/*<<src/references.ml 534 16>>*/b=a[1];/*<<src/references.ml 534 16>>*/if(b){var
a=[0,b[2],[0,b[1],c]];continue}/*<<src/references.ml 537 24>>*/return c}/*<<src/references.ml 540 45>>*/}/*<<src/references.ml 546 8>>*/var/*<<src/references.ml 546 8>>*/cg=[0,a[2][2],0],/*<<src/references.ml 530 29>>*/ci=[0,/*<<src/references.ml 530 29>>*/b(c[1],ch)],/*<<src/references.ml 529 20>>*/cj=/*<<src/references.ml 529 20>>*/e(c[3],c[7],c[7]),/*<<src/references.ml 528 20>>*/ck=/*<<src/references.ml 528 20>>*/b(a[5],a[2]),/*<<src/references.ml 527 16>>*/cl=/*<<src/references.ml 527 16>>*/b(a[5],a[2]),/*<<src/references.ml 526 16>>*/cm=/*<<src/references.ml 526 16>>*/b(a[5],a[2]),/*<<src/references.ml 521 8>>*/cp=[0,[0,co,/*<<src/references.ml 521 8>>*/b(d,[0,cn,20,/*<<src/references.ml 525 14>>*/e(a[8],cm,cl),ck,cj,ci,cg,cf])],ce];/*<<src/references.ml 521 8>>*/function
cq(a){/*<<src/references.ml 515 18>>*/return/*<<src/references.ml 515 18>>*/b(g[9],a)/*<<src/references.ml 515 29>>*/}/*<<src/references.ml 521 8>>*/var/*<<src/references.ml 521 8>>*/cr=[0,a[2][2],0],/*<<src/references.ml 510 29>>*/cs=[0,/*<<src/references.ml 510 29>>*/b(c[1],0)],/*<<src/references.ml 510 29>>*/ct=c[7],/*<<src/references.ml 508 20>>*/cu=/*<<src/references.ml 508 20>>*/b(a[5],a[2]),/*<<src/references.ml 504 8>>*/cx=[0,[0,cw,/*<<src/references.ml 504 8>>*/b(d,[0,cv,15,/*<<src/references.ml 507 19>>*/b(a[5],a[2]),cu,ct,cs,cr,cq])],cp];/*<<src/references.ml 504 8>>*/function
cy(a){/*<<src/references.ml 498 18>>*/return/*<<src/references.ml 498 18>>*/b(g[9],a)/*<<src/references.ml 498 29>>*/}/*<<src/references.ml 504 8>>*/var/*<<src/references.ml 504 8>>*/cz=[0,a[2][2],0],/*<<src/references.ml 493 29>>*/cA=[0,/*<<src/references.ml 493 29>>*/b(c[1],0)],/*<<src/references.ml 493 29>>*/cB=c[7],/*<<src/references.ml 491 20>>*/cC=/*<<src/references.ml 491 20>>*/b(a[5],a[2]),/*<<src/references.ml 487 8>>*/cF=[0,[0,cE,/*<<src/references.ml 487 8>>*/b(d,[0,cD,15,/*<<src/references.ml 490 19>>*/b(a[5],a[2]),cC,cB,cA,cz,cy])],cx];/*<<src/references.ml 487 8>>*/function
cG(a){/*<<src/references.ml 481 18>>*/return/*<<src/references.ml 481 18>>*/b(g[9],a)/*<<src/references.ml 481 29>>*/}/*<<src/references.ml 487 8>>*/var/*<<src/references.ml 487 8>>*/cH=[0,a[2][2],0],/*<<src/references.ml 476 29>>*/cI=[0,/*<<src/references.ml 476 29>>*/b(c[1],0)],/*<<src/references.ml 476 29>>*/cJ=c[7],/*<<src/references.ml 474 20>>*/cK=/*<<src/references.ml 474 20>>*/b(a[5],a[2]),/*<<src/references.ml 470 8>>*/cN=[0,[0,cM,/*<<src/references.ml 470 8>>*/b(d,[0,cL,15,/*<<src/references.ml 473 19>>*/b(a[5],a[2]),cK,cJ,cI,cH,cG])],cF];/*<<src/references.ml 470 8>>*/function
cO(b){/*<<src/references.ml 459 24>>*/ /*<<src/references.ml 459 24>>*/var
a=/*<<src/references.ml 459 24>>*/v(b);/*<<src/references.ml 459 24>>*/return a?a[1]:0/*<<src/references.ml 464 31>>*/}/*<<src/references.ml 470 8>>*/var/*<<src/references.ml 470 8>>*/cP=[0,a[2][2],0],/*<<src/references.ml 454 29>>*/cQ=[0,/*<<src/references.ml 454 29>>*/b(c[1],0)],/*<<src/references.ml 454 29>>*/cR=c[7],/*<<src/references.ml 452 20>>*/cS=/*<<src/references.ml 452 20>>*/b(a[5],a[2]),/*<<src/references.ml 448 8>>*/cV=[0,[0,cU,/*<<src/references.ml 448 8>>*/b(d,[0,cT,20,/*<<src/references.ml 451 19>>*/b(a[5],a[2]),cS,cR,cQ,cP,cO])],cN];/*<<src/references.ml 448 8>>*/function
cW(d){/*<<?>>*/var
a=d;/*<<src/references.ml 433 16>>*/for(;;){/*<<src/references.ml 433 16>>*/var/*<<src/references.ml 433 16>>*/c=a[2],/*<<src/references.ml 433 16>>*/b=a[1];/*<<src/references.ml 433 16>>*/if(b){var
e=b[2],f=b[1];if(0===c)/*<<src/references.ml 440 26>>*/return f;var
a=[0,e,c-1|0];continue}/*<<src/references.ml 436 24>>*/return 0}/*<<src/references.ml 442 41>>*/}/*<<src/references.ml 429 29>>*/var/*<<src/references.ml 429 29>>*/cY=[0,/*<<src/references.ml 429 29>>*/b(c[1],cX)],/*<<src/references.ml 428 20>>*/cZ=/*<<src/references.ml 428 20>>*/e(c[3],c[7],c[5]),/*<<src/references.ml 428 20>>*/c0=a[2],/*<<src/references.ml 428 20>>*/c1=a[2],/*<<src/references.ml 426 31>>*/c2=/*<<src/references.ml 426 31>>*/b(a[5],a[2]),/*<<src/references.ml 422 8>>*/c5=[0,[0,c4,/*<<src/references.ml 422 8>>*/b(d,[0,c3,20,/*<<src/references.ml 426 14>>*/e(a[8],c2,c1),c0,cZ,cY,0,cW])],cV];/*<<src/references.ml 422 8>>*/function
c6(d){/*<<src/references.ml 409 16>>*/var/*<<src/references.ml 409 16>>*/a=d[1],/*<<src/references.ml 409 16>>*/h=d[2];/*<<src/references.ml 409 16>>*/if(/*<<src/references.ml 409 16>>*/k(a,c7))if(k(a,c8))/*<<src/references.ml 414 67>>*/var/*<<src/references.ml 414 67>>*/i=/*<<src/references.ml 414 67>>*/e(f[28],a,c9),/*<<src/references.ml 414 38>>*/j=/*<<src/references.ml 414 38>>*/e(f[28],c_,i),c=/*<<src/references.ml 414 29>>*/b(f[2],j);else
var
c=function(a){/*<<src/references.ml 413 43>>*/return 0/*<<src/references.ml 413 44>>*/};else
var
c=function(a){/*<<src/references.ml 412 42>>*/return a+1|0/*<<src/references.ml 412 47>>*/};/*<<src/references.ml 414 79>>*/return/*<<src/references.ml 414 79>>*/e(g[17],c,h)/*<<src/references.ml 416 36>>*/}/*<<src/references.ml 422 8>>*/var/*<<src/references.ml 422 8>>*/c$=[0,a[2][2],[0,a[2][2],0]],/*<<src/references.ml 405 29>>*/db=[0,/*<<src/references.ml 405 29>>*/b(c[1],da)],/*<<src/references.ml 405 29>>*/dc=c[7],/*<<src/references.ml 403 16>>*/de=/*<<src/references.ml 403 16>>*/b(c[2],dd),/*<<src/references.ml 402 14>>*/df=/*<<src/references.ml 402 14>>*/e(c[3],de,dc),/*<<src/references.ml 400 20>>*/dg=/*<<src/references.ml 400 20>>*/b(a[5],a[2]),/*<<src/references.ml 399 16>>*/dh=/*<<src/references.ml 399 16>>*/b(a[5],a[2]),/*<<src/references.ml 393 8>>*/dk=[0,[0,dj,/*<<src/references.ml 393 8>>*/b(d,[0,di,20,/*<<src/references.ml 397 14>>*/e(a[8],a[3],dh),dg,df,db,c$,c6])],c5];/*<<src/references.ml 393 8>>*/function
dl(a){/*<<src/references.ml 387 18>>*/return/*<<src/references.ml 387 18>>*/b(g[1],a)/*<<src/references.ml 387 32>>*/}/*<<src/references.ml 393 8>>*/var/*<<src/references.ml 393 8>>*/dm=[0,a[2][2],0],/*<<src/references.ml 382 29>>*/dn=[0,/*<<src/references.ml 382 29>>*/b(c[1],0)],/*<<src/references.ml 382 29>>*/dp=c[7],/*<<src/references.ml 382 29>>*/dq=a[2],/*<<src/references.ml 376 8>>*/dt=[0,[0,ds,/*<<src/references.ml 376 8>>*/b(d,[0,dr,5,/*<<src/references.ml 379 19>>*/b(a[5],a[2]),dq,dp,dn,dm,dl])],dk];/*<<src/references.ml 376 8>>*/function
du(b){/*<<?>>*/var
a=b;/*<<src/references.ml 362 18>>*/for(;;){/*<<src/references.ml 362 18>>*/if(a){var
c=a[1];if(a[2]){var
a=a[2];continue}/*<<src/references.ml 367 24>>*/return[0,c]}/*<<src/references.ml 364 24>>*/return 0}/*<<src/references.ml 370 30>>*/}/*<<src/references.ml 376 8>>*/var/*<<src/references.ml 376 8>>*/dv=[0,a[2][2],0],/*<<src/references.ml 357 29>>*/dw=[0,/*<<src/references.ml 357 29>>*/b(c[1],0)],/*<<src/references.ml 357 29>>*/dx=c[7],/*<<src/references.ml 355 20>>*/dy=/*<<src/references.ml 355 20>>*/b(a[4],a[2]),/*<<src/references.ml 351 8>>*/dB=[0,[0,dA,/*<<src/references.ml 351 8>>*/b(d,[0,dz,20,/*<<src/references.ml 354 19>>*/b(a[5],a[2]),dy,dx,dw,dv,du])],dt];/*<<src/references.ml 351 8>>*/function
dC(a){/*<<src/references.ml 345 27>>*/function
b(a){/*<<?>>*/return 1+a|0}/*<<src/references.ml 345 27>>*/return/*<<src/references.ml 345 27>>*/e(g[17],b,a)/*<<src/references.ml 345 37>>*/}/*<<src/references.ml 340 29>>*/var/*<<src/references.ml 340 29>>*/dD=[0,/*<<src/references.ml 340 29>>*/b(c[1],0)],/*<<src/references.ml 340 29>>*/dE=c[7],/*<<src/references.ml 338 20>>*/dF=/*<<src/references.ml 338 20>>*/b(a[5],a[2]),/*<<src/references.ml 334 8>>*/dI=[0,[0,dH,/*<<src/references.ml 334 8>>*/b(d,[0,dG,10,/*<<src/references.ml 337 19>>*/b(a[5],a[2]),dF,dE,dD,0,dC])],dB];/*<<src/references.ml 334 8>>*/function
dJ(a){/*<<src/references.ml 323 18>>*/return a?a[1]:0/*<<src/references.ml 328 28>>*/}/*<<src/references.ml 318 29>>*/var/*<<src/references.ml 318 29>>*/dK=[0,/*<<src/references.ml 318 29>>*/b(c[1],0)],/*<<src/references.ml 318 29>>*/dL=c[7],/*<<src/references.ml 318 29>>*/dM=a[2],/*<<src/references.ml 312 8>>*/dP=[0,[0,dO,/*<<src/references.ml 312 8>>*/b(d,[0,dN,10,/*<<src/references.ml 315 19>>*/b(a[5],a[2]),dM,dL,dK,0,dJ])],dI];/*<<src/references.ml 312 8>>*/function
dQ(a){/*<<src/references.ml 296 16>>*/var/*<<src/references.ml 296 16>>*/c=a[1],/*<<src/references.ml 296 16>>*/h=a[3],/*<<src/references.ml 296 16>>*/i=a[2];/*<<src/references.ml 296 16>>*/if(/*<<src/references.ml 296 16>>*/k(c,dR))if(k(c,dS))/*<<src/references.ml 304 64>>*/var/*<<src/references.ml 304 64>>*/j=/*<<src/references.ml 304 64>>*/e(f[28],c,dT),/*<<src/references.ml 304 35>>*/l=/*<<src/references.ml 304 35>>*/e(f[28],dU,j),d=/*<<src/references.ml 304 26>>*/b(f[2],l);else
var
d=function(b,a){/*<<src/references.ml 300 37>>*/return b+a|0/*<<src/references.ml 300 42>>*/};else
var
d=function(a,b){/*<<src/references.ml 302 37>>*/return 1===(b%2|0)?a+1|0:a/*<<src/references.ml 302 69>>*/};/*<<src/references.ml 304 76>>*/return/*<<src/references.ml 304 76>>*/q(g[22],d,i,h)/*<<src/references.ml 306 46>>*/}/*<<src/references.ml 312 8>>*/var/*<<src/references.ml 312 8>>*/dV=[0,a[2][2],[0,a[2][2],0]],/*<<src/references.ml 292 29>>*/dX=[0,/*<<src/references.ml 292 29>>*/b(c[1],dW)],/*<<src/references.ml 292 29>>*/dY=c[7],/*<<src/references.ml 292 29>>*/dZ=c[5],/*<<src/references.ml 289 16>>*/d1=/*<<src/references.ml 289 16>>*/b(c[2],d0),/*<<src/references.ml 288 14>>*/d2=/*<<src/references.ml 288 14>>*/q(c[4],d1,dZ,dY),/*<<src/references.ml 288 14>>*/d3=a[2],/*<<src/references.ml 285 16>>*/d4=/*<<src/references.ml 285 16>>*/b(a[5],a[2]),/*<<src/references.ml 278 8>>*/d7=[0,[0,d6,/*<<src/references.ml 278 8>>*/b(d,[0,d5,20,/*<<src/references.ml 282 14>>*/q(a[9],a[3],a[2],d4),d3,d2,dX,dV,dQ])],dP];/*<<src/references.ml 278 8>>*/function
d8(d){/*<<src/references.ml 265 16>>*/var/*<<src/references.ml 265 16>>*/a=d[1],/*<<src/references.ml 265 16>>*/h=d[2];/*<<src/references.ml 265 16>>*/if(/*<<src/references.ml 265 16>>*/k(a,d9))if(k(a,d_))/*<<src/references.ml 270 67>>*/var/*<<src/references.ml 270 67>>*/i=/*<<src/references.ml 270 67>>*/e(f[28],a,d$),/*<<src/references.ml 270 38>>*/j=/*<<src/references.ml 270 38>>*/e(f[28],ea,i),c=/*<<src/references.ml 270 29>>*/b(f[2],j);else
var
c=function(a){/*<<src/references.ml 269 48>>*/return 0!==a?1:0/*<<src/references.ml 269 54>>*/};else
var
c=function(a){/*<<src/references.ml 268 45>>*/return 0===(a%2|0)?1:0/*<<src/references.ml 268 56>>*/};/*<<src/references.ml 270 79>>*/return/*<<src/references.ml 270 79>>*/e(g[38],c,h)/*<<src/references.ml 272 37>>*/}/*<<src/references.ml 278 8>>*/var/*<<src/references.ml 278 8>>*/eb=[0,a[2][2],0],/*<<src/references.ml 261 29>>*/ed=[0,/*<<src/references.ml 261 29>>*/b(c[1],ec)],/*<<src/references.ml 261 29>>*/ee=c[7],/*<<src/references.ml 259 16>>*/eg=/*<<src/references.ml 259 16>>*/b(c[2],ef),/*<<src/references.ml 258 14>>*/eh=/*<<src/references.ml 258 14>>*/e(c[3],eg,ee),/*<<src/references.ml 256 20>>*/ei=/*<<src/references.ml 256 20>>*/b(a[5],a[2]),/*<<src/references.ml 255 16>>*/ej=/*<<src/references.ml 255 16>>*/b(a[5],a[2]),/*<<src/references.ml 249 8>>*/em=[0,[0,el,/*<<src/references.ml 249 8>>*/b(d,[0,ek,20,/*<<src/references.ml 253 14>>*/e(a[8],a[3],ej),ei,eh,ed,eb,d8])],d7];/*<<src/references.ml 249 8>>*/function
en(a){/*<<src/references.ml 243 18>>*/return/*<<src/references.ml 243 18>>*/u(a)/*<<src/references.ml 243 37>>*/}/*<<src/references.ml 238 29>>*/var/*<<src/references.ml 238 29>>*/eo=[0,/*<<src/references.ml 238 29>>*/b(c[1],0)],/*<<src/references.ml 238 29>>*/ep=c[9],/*<<src/references.ml 238 29>>*/eq=a[1],/*<<src/references.ml 232 8>>*/et=[0,[0,es,/*<<src/references.ml 232 8>>*/b(d,[0,er,15,/*<<src/references.ml 235 19>>*/b(a[5],a[1]),eq,ep,eo,0,en])],em];/*<<src/references.ml 232 8>>*/function
eu(a){/*<<src/references.ml 225 16>>*/return/*<<src/references.ml 225 16>>*/e(p[27],a[2],a[1])/*<<src/references.ml 226 33>>*/}/*<<src/references.ml 232 8>>*/var/*<<src/references.ml 232 8>>*/ev=[0,a[2][2],0],/*<<src/references.ml 221 29>>*/ex=[0,/*<<src/references.ml 221 29>>*/b(c[1],ew)],/*<<src/references.ml 220 20>>*/ey=/*<<src/references.ml 220 20>>*/e(c[3],c[7],c[5]),/*<<src/references.ml 219 20>>*/ez=/*<<src/references.ml 219 20>>*/b(a[5],a[2]),/*<<src/references.ml 219 20>>*/eA=a[2],/*<<src/references.ml 218 31>>*/eB=/*<<src/references.ml 218 31>>*/b(a[5],a[2]),/*<<src/references.ml 214 8>>*/eE=[0,[0,eD,/*<<src/references.ml 214 8>>*/b(d,[0,eC,20,/*<<src/references.ml 218 14>>*/e(a[8],eB,eA),ez,ey,ex,ev,eu])],et];/*<<src/references.ml 214 8>>*/function
eF(a){/*<<src/references.ml 208 18>>*/return/*<<src/references.ml 208 18>>*/b(g[13],a)/*<<src/references.ml 208 33>>*/}/*<<src/references.ml 214 8>>*/var/*<<src/references.ml 214 8>>*/eG=[0,a[2][2],0],/*<<src/references.ml 203 29>>*/eH=[0,/*<<src/references.ml 203 29>>*/b(c[1],0)],/*<<src/references.ml 203 29>>*/eI=c[8],/*<<src/references.ml 201 20>>*/eJ=/*<<src/references.ml 201 20>>*/b(a[5],a[2]),/*<<src/references.ml 197 8>>*/eM=[0,[0,eL,/*<<src/references.ml 197 8>>*/b(d,[0,eK,20,/*<<src/references.ml 200 19>>*/b(a[6],a[2]),eJ,eI,eH,eG,eF])],eE];/*<<src/references.ml 197 8>>*/function
eN(a){/*<<src/references.ml 191 18>>*/return/*<<src/references.ml 191 18>>*/t(a)/*<<src/references.ml 191 34>>*/}/*<<src/references.ml 197 8>>*/var/*<<src/references.ml 197 8>>*/eO=[0,a[2][2],0],/*<<src/references.ml 186 29>>*/eP=[0,/*<<src/references.ml 186 29>>*/b(c[1],0)],/*<<src/references.ml 186 29>>*/eQ=c[7],/*<<src/references.ml 184 20>>*/eR=/*<<src/references.ml 184 20>>*/b(a[5],a[2]),/*<<src/references.ml 180 8>>*/eU=[0,[0,eT,/*<<src/references.ml 180 8>>*/b(d,[0,eS,20,/*<<src/references.ml 183 19>>*/b(a[5],a[2]),eR,eQ,eP,eO,eN])],eM];/*<<src/references.ml 180 8>>*/function
eV(a){/*<<src/references.ml 173 16>>*/return/*<<src/references.ml 173 16>>*/e(f[37],a[1],a[2])/*<<src/references.ml 174 25>>*/}/*<<src/references.ml 180 8>>*/var/*<<src/references.ml 180 8>>*/eW=[0,a[2][2],0],/*<<src/references.ml 169 29>>*/eY=[0,/*<<src/references.ml 169 29>>*/b(c[1],eX)],/*<<src/references.ml 168 20>>*/eZ=/*<<src/references.ml 168 20>>*/e(c[3],c[7],c[7]),/*<<src/references.ml 167 20>>*/e0=/*<<src/references.ml 167 20>>*/b(a[5],a[2]),/*<<src/references.ml 166 16>>*/e1=/*<<src/references.ml 166 16>>*/b(a[5],a[2]),/*<<src/references.ml 165 16>>*/e2=/*<<src/references.ml 165 16>>*/b(a[5],a[2]),/*<<src/references.ml 160 8>>*/e5=[0,[0,e4,/*<<src/references.ml 160 8>>*/b(d,[0,e3,20,/*<<src/references.ml 164 14>>*/e(a[8],e2,e1),e0,eZ,eY,eW,eV])],eU];/*<<src/references.ml 160 8>>*/function
e6(a){/*<<src/references.ml 153 16>>*/return a[1]!==a[2]?1:0/*<<src/references.ml 154 24>>*/}/*<<src/references.ml 148 20>>*/var/*<<src/references.ml 148 20>>*/e7=/*<<src/references.ml 148 20>>*/e(c[3],c[6],c[6]),/*<<src/references.ml 148 20>>*/e8=a[1],/*<<src/references.ml 143 8>>*/e$=[0,[0,e_,/*<<src/references.ml 143 8>>*/b(d,[0,e9,4,/*<<src/references.ml 146 19>>*/e(a[8],a[1],a[1]),e8,e7,0,0,e6])],e5];/*<<src/references.ml 143 8>>*/function
fa(a){/*<<src/references.ml 137 18>>*/return 1-a/*<<src/references.ml 137 23>>*/}/*<<src/references.ml 126 8>>*/ /*<<src/references.ml 126 8>>*/var
fd=[0,[0,fc,/*<<src/references.ml 126 8>>*/b(d,[0,fb,2,a[1],a[1],c[6],0,0,fa])],e$];/*<<src/references.ml 126 8>>*/function
fe(a){/*<<src/references.ml 119 16>>*/var/*<<src/references.ml 119 16>>*/c=1-a[1],/*<<src/references.ml 119 16>>*/b=a[2],/*<<src/references.ml 119 16>>*/d=c||b;/*<<src/references.ml 137 18>>*/return d/*<<src/references.ml 120 30>>*/}/*<<src/references.ml 114 20>>*/var/*<<src/references.ml 114 20>>*/ff=/*<<src/references.ml 114 20>>*/e(c[3],c[6],c[6]),/*<<src/references.ml 114 20>>*/fg=a[1],/*<<src/references.ml 109 8>>*/fj=[0,[0,fi,/*<<src/references.ml 109 8>>*/b(d,[0,fh,4,/*<<src/references.ml 112 19>>*/e(a[8],a[1],a[1]),fg,ff,0,0,fe])],fd];/*<<src/references.ml 109 8>>*/function
fk(a){/*<<src/references.ml 102 16>>*/var/*<<src/references.ml 102 16>>*/c=a[1],/*<<src/references.ml 102 16>>*/b=a[2],/*<<src/references.ml 102 16>>*/d=c||b;/*<<src/references.ml 119 16>>*/return d/*<<src/references.ml 103 24>>*/}/*<<src/references.ml 97 20>>*/var/*<<src/references.ml 97 20>>*/fl=/*<<src/references.ml 97 20>>*/e(c[3],c[6],c[6]),/*<<src/references.ml 97 20>>*/fm=a[1],/*<<src/references.ml 92 8>>*/fp=[0,[0,fo,/*<<src/references.ml 92 8>>*/b(d,[0,fn,4,/*<<src/references.ml 95 19>>*/e(a[8],a[1],a[1]),fm,fl,0,0,fk])],fj];/*<<src/references.ml 92 8>>*/function
fq(a){/*<<src/references.ml 85 16>>*/var/*<<src/references.ml 85 16>>*/b=a[1],/*<<src/references.ml 85 16>>*/c=a[2],/*<<src/references.ml 85 16>>*/d=b?c:b;/*<<src/references.ml 102 16>>*/return d/*<<src/references.ml 86 24>>*/}/*<<src/references.ml 80 20>>*/var/*<<src/references.ml 80 20>>*/fr=/*<<src/references.ml 80 20>>*/e(c[3],c[6],c[6]),/*<<src/references.ml 80 20>>*/fs=a[1];/*<<src/references.ml 75 8>>*/return[0,[0,fu,/*<<src/references.ml 75 8>>*/b(d,[0,ft,4,/*<<src/references.ml 78 19>>*/e(a[8],a[1],a[1]),fs,fr,0,0,fq])],fp]/*<<src/references.ml 923 5>>*/}],"References");return/*<<?>>*/}(function(){return this}()));

//# 1 ".main.eobjs/byte/fuzz.cmo.js"
(function(ai){"use strict";/*<<?>>*/var
w="(",v=" ",r="specifyFunction",s=")",q="args",p=", ",h=ai.jsoo_runtime,u=h.caml_string_notequal,b=h.caml_string_of_jsbytes;/*<<?>>*/function
e(a,b){return a.length==1?a(b):h.caml_call_gen(a,[b])}/*<<?>>*/function
a(a,b,c){return a.length==2?a(b,c):h.caml_call_gen(a,[b,c])}/*<<?>>*/function
t(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):h.caml_call_gen(a,[b,c,d,e,f])}var
d=h.caml_get_global_data(),c=d.Stdlib,o=d.Smyth__Pretty,j=d.Pervasives2,f=d.Stdlib__list,k=d.Stdlib__string,m=d.Sample2,l=d.List2,i=d.Denotation,n=d.Smyth__Desugar,g=d.Str,W=b(q),T=b(s),U=b(p),V=b(w),ah=b("Unequal arg lengths in specification_proj"),Y=b(""),Z=b(v),_=b(r),ac=b(">)"),ad=b(p),ae=b(" <"),af=b(" ("),ag=b(r),$=b("\n  ]"),aa=b("\n  , "),ab=b("\n  [ "),S=b("Sample2.io_trial didn't return singleton in specification_proj"),y=b(q),z=b(" *\n+ *"),B=b("( "),D=b(" )"),F=b(" ,"),H=b(","),J=b(s),L=b(w),N=b(v),X=d.Stdlib__int;function
x(c,h){/*<<src/fuzz.ml 8 4>>*/ /*<<src/fuzz.ml 8 4>>*/var
d=c?i[11]:i[10];/*<<src/fuzz.ml 14 4>>*/return[0,function(b,v){/*<<src/fuzz.ml 15 8>>*/var/*<<src/fuzz.ml 15 8>>*/g=b[1],/*<<src/fuzz.ml 15 8>>*/i=b[8],/*<<src/fuzz.ml 15 8>>*/o=b[7],/*<<src/fuzz.ml 15 8>>*/j=b[6],/*<<src/fuzz.ml 15 8>>*/k=b[5],/*<<src/fuzz.ml 15 8>>*/p=b[4],/*<<src/fuzz.ml 15 8>>*/q=b[3],/*<<src/fuzz.ml 52 14>>*/r=/*<<src/fuzz.ml 52 14>>*/a(l[10],0,b[2]);/*<<src/fuzz.ml 52 14>>*/function
s(b){/*<<src/fuzz.ml 49 20>>*/ /*<<src/fuzz.ml 49 20>>*/var
l=/*<<src/fuzz.ml 49 20>>*/t(m[12],h,b,i,k,j);/*<<src/fuzz.ml 49 20>>*/function
r(e){/*<<src/fuzz.ml 23 24>>*/var/*<<src/fuzz.ml 23 24>>*/l=e[2],/*<<src/fuzz.ml 25 36>>*/b=/*<<src/fuzz.ml 25 36>>*/a(d,q,e[1]),k=0;if(5===b[0]&&!u(b[1],y)&&!b[2]){var
j=b[3];if(3===j[0]){var
h=j[1];k=1}}/*<<src/fuzz.ml 91 25>>*/if(!k)var
h=[0,b,0];/*<<src/fuzz.ml 23 24>>*/ /*<<src/fuzz.ml 45 30>>*/var
m=/*<<src/fuzz.ml 45 30>>*/a(d,p,l);/*<<src/fuzz.ml 45 30>>*/function
r(a){/*<<src/fuzz.ml 44 52>>*/return[0,a]/*<<src/fuzz.ml 44 64>>*/}/*<<src/fuzz.ml 44 32>>*/ /*<<src/fuzz.ml 44 32>>*/var
s=/*<<src/fuzz.ml 44 32>>*/a(f[17],r,h);/*<<src/fuzz.ml 44 32>>*/if(c)/*<<src/fuzz.ml 34 36>>*/var/*<<src/fuzz.ml 34 36>>*/t=function(a){/*<<src/fuzz.ml 38 50>>*/return[1,a]/*<<src/fuzz.ml 38 63>>*/},/*<<src/fuzz.ml 37 38>>*/v=/*<<src/fuzz.ml 37 38>>*/a(f[17],t,o),i=/*<<src/fuzz.ml 34 36>>*/a(n[3],[2,g],v);else
var
i=[2,g];/*<<src/fuzz.ml 32 30>>*/return[0,/*<<src/fuzz.ml 32 30>>*/a(n[3],i,s),m]/*<<src/fuzz.ml 47 25>>*/}/*<<src/fuzz.ml 22 20>>*/ /*<<src/fuzz.ml 22 20>>*/var
s=/*<<src/fuzz.ml 22 20>>*/e(f[17],r);/*<<src/fuzz.ml 22 20>>*/return/*<<src/fuzz.ml 22 20>>*/a(f[17],s,l)/*<<src/fuzz.ml 50 21>>*/}/*<<src/fuzz.ml 52 14>>*/return/*<<src/fuzz.ml 52 14>>*/a(f[17],s,r)/*<<src/fuzz.ml 53 15>>*/}]/*<<src/fuzz.ml 54 5>>*/}/*<<src/fuzz.ml 57 2>>*/var/*<<src/fuzz.ml 57 2>>*/A=/*<<src/fuzz.ml 57 2>>*/e(g[1],z),/*<<src/fuzz.ml 60 2>>*/C=/*<<src/fuzz.ml 60 2>>*/e(g[1],B),/*<<src/fuzz.ml 63 2>>*/E=/*<<src/fuzz.ml 63 2>>*/e(g[1],D),/*<<src/fuzz.ml 66 2>>*/G=/*<<src/fuzz.ml 66 2>>*/e(g[1],F),/*<<src/fuzz.ml 72 7>>*/I=/*<<src/fuzz.ml 72 7>>*/a(g[16],G,H),/*<<src/fuzz.ml 71 7>>*/K=/*<<src/fuzz.ml 71 7>>*/a(g[16],E,J),/*<<src/fuzz.ml 70 7>>*/M=/*<<src/fuzz.ml 70 7>>*/a(g[16],C,L),/*<<src/fuzz.ml 69 2>>*/O=/*<<src/fuzz.ml 69 2>>*/a(g[16],A,N),/*<<src/fuzz.ml 69 2>>*/P=/*<<src/fuzz.ml 69 2>>*/a(j[3],O,M),/*<<src/fuzz.ml 69 2>>*/Q=/*<<src/fuzz.ml 69 2>>*/a(j[3],P,K),/*<<src/fuzz.ml 69 2>>*/R=/*<<src/fuzz.ml 69 2>>*/a(j[3],Q,I);/*<<src/fuzz.ml 69 2>>*/ /*<<src/fuzz.ml 69 2>>*/h.caml_register_global(37,[0,x,function(b){/*<<src/fuzz.ml 76 4>>*/ /*<<src/fuzz.ml 76 4>>*/var
g=b?i[11]:i[10];/*<<src/fuzz.ml 82 4>>*/return[0,function(b){/*<<src/fuzz.ml 83 8>>*/var/*<<src/fuzz.ml 83 8>>*/h=b[7],/*<<src/fuzz.ml 83 8>>*/i=b[1],/*<<src/fuzz.ml 83 8>>*/v=b[4],/*<<src/fuzz.ml 83 8>>*/w=b[3],/*<<src/fuzz.ml 86 16>>*/d=/*<<src/fuzz.ml 86 16>>*/t(m[12],1,b[2],b[8],b[5],b[6]);if(d&&!d[2]){/*<<src/fuzz.ml 88 16>>*/var/*<<src/fuzz.ml 88 16>>*/x=d[1],/*<<src/fuzz.ml 88 16>>*/y=function(h){/*<<src/fuzz.ml 91 25>>*/var/*<<src/fuzz.ml 91 25>>*/m=h[2],/*<<src/fuzz.ml 93 37>>*/b=/*<<src/fuzz.ml 93 37>>*/a(g,w,h[1]),l=0;if(5===b[0]&&!u(b[1],W)&&!b[2]){var
i=b[3];if(3===i[0]){var
d=i[1];l=1}}/*<<src/fuzz.ml 91 25>>*/if(!l)var
d=[0,b,0];/*<<src/fuzz.ml 91 25>>*/var/*<<src/fuzz.ml 102 42>>*/n=[0,/*<<src/fuzz.ml 102 42>>*/a(g,v,m),0],/*<<src/fuzz.ml 102 34>>*/p=/*<<src/fuzz.ml 102 34>>*/a(c[37],d,n),/*<<src/fuzz.ml 103 48>>*/q=/*<<src/fuzz.ml 103 48>>*/a(j[3],o[3],R),/*<<src/fuzz.ml 102 34>>*/r=/*<<src/fuzz.ml 102 34>>*/a(f[17],q,p),/*<<src/fuzz.ml 102 32>>*/s=/*<<src/fuzz.ml 102 32>>*/a(k[7],U,r),/*<<src/fuzz.ml 102 32>>*/t=/*<<src/fuzz.ml 102 32>>*/a(c[28],s,T),/*<<src/fuzz.ml 101 31>>*/x=/*<<src/fuzz.ml 101 31>>*/a(c[28],V,t);/*<<src/fuzz.ml 100 31>>*/return[0,/*<<src/fuzz.ml 100 31>>*/e(f[1],d),x]/*<<src/fuzz.ml 108 26>>*/},/*<<src/fuzz.ml 89 18>>*/z=/*<<src/fuzz.ml 89 18>>*/a(f[17],y,x),/*<<src/fuzz.ml 89 18>>*/n=/*<<src/fuzz.ml 89 18>>*/e(f[49],z),/*<<src/fuzz.ml 89 18>>*/A=n[2],/*<<src/fuzz.ml 112 24>>*/p=/*<<src/fuzz.ml 112 24>>*/e(l[19],n[1]),/*<<src/fuzz.ml 112 24>>*/q=p?p[1]:/*<<src/fuzz.ml 117 24>>*/e(c[2],ah),/*<<src/fuzz.ml 121 21>>*/r=/*<<src/fuzz.ml 121 21>>*/a(X[8],q,1)?Y:/*<<src/fuzz.ml 124 20>>*/e(c[33],q);/*<<src/fuzz.ml 124 41>>*/if(0===h)/*<<src/fuzz.ml 128 51>>*/var/*<<src/fuzz.ml 128 51>>*/B=/*<<src/fuzz.ml 128 51>>*/a(c[28],Z,i),/*<<src/fuzz.ml 128 40>>*/C=/*<<src/fuzz.ml 128 40>>*/a(c[28],r,B),s=/*<<src/fuzz.ml 128 20>>*/a(c[28],_,C);else/*<<src/fuzz.ml 131 39>>*/var/*<<src/fuzz.ml 131 39>>*/G=/*<<src/fuzz.ml 131 39>>*/a(f[17],o[2],h),/*<<src/fuzz.ml 131 20>>*/H=/*<<src/fuzz.ml 131 20>>*/a(k[7],ad,G),/*<<src/fuzz.ml 131 20>>*/I=/*<<src/fuzz.ml 131 20>>*/a(c[28],H,ac),/*<<src/fuzz.ml 130 74>>*/J=/*<<src/fuzz.ml 130 74>>*/a(c[28],ae,I),/*<<src/fuzz.ml 130 58>>*/K=/*<<src/fuzz.ml 130 58>>*/a(c[28],i,J),/*<<src/fuzz.ml 130 51>>*/L=/*<<src/fuzz.ml 130 51>>*/a(c[28],af,K),/*<<src/fuzz.ml 130 40>>*/M=/*<<src/fuzz.ml 130 40>>*/a(c[28],r,L),s=/*<<src/fuzz.ml 130 20>>*/a(c[28],ag,M);/*<<src/fuzz.ml 88 16>>*/var/*<<src/fuzz.ml 134 40>>*/D=/*<<src/fuzz.ml 134 40>>*/a(k[7],aa,A),/*<<src/fuzz.ml 134 40>>*/E=/*<<src/fuzz.ml 134 40>>*/a(c[28],D,$),/*<<src/fuzz.ml 134 29>>*/F=/*<<src/fuzz.ml 134 29>>*/a(c[28],ab,E);/*<<src/fuzz.ml 134 29>>*/return/*<<src/fuzz.ml 134 29>>*/a(c[28],s,F)}/*<<src/fuzz.ml 137 16>>*/return/*<<src/fuzz.ml 137 16>>*/e(c[2],S)/*<<src/fuzz.ml 138 82>>*/}]/*<<src/fuzz.ml 139 5>>*/}],"Fuzz");/*<<src/fuzz.ml 69 2>>*/return/*<<?>>*/}(function(){return this}()));

//# 1 ".main.eobjs/byte/python_denotation.cmo.js"
(function(o){"use strict";/*<<?>>*/var
j="'",i="None",d=o.jsoo_runtime,b=d.caml_string_notequal,a=d.caml_string_of_jsbytes;/*<<?>>*/function
r(a,b){return a.length==1?a(b):d.caml_call_gen(a,[b])}/*<<?>>*/function
c(a,b,c){return a.length==2?a(b,c):d.caml_call_gen(a,[b,c])}var
f=d.caml_get_global_data(),e=f.Stdlib,t=a("Cons"),u=a("LCons"),v=a("LNil"),w=a("Nil"),x=[0,0],m=a(", "),A=a("]"),B=a("["),C=a(j),D=a(j),E=a("F"),F=a("Leaf"),G=a("Node"),H=a(i),I=a("Some"),J=a("T"),K=a("True"),L=a(i),M=a(")"),N=a("("),O=a("()"),P=a("False"),s=a("UNSUPPORTED"),y=f.Stdlib__option,l=f.Stdlib__list,n=f.Stdlib__string,z=f.Smyth__Sugar;function
k(a){/*<<src/python_denotation.ml 8 2>>*/if(5===a[0]){var
e=a[1],j=0;if(b(e,t)){if(b(e,u)){var
d=0;if(b(e,v))if(b(e,w)||a[2])d=1;else{var
l=a[3];if(3!==l[0]||l[1])d=1}else
if(a[2])d=1;else{var
m=a[3];if(3!==m[0]||m[1])d=1}if(!d)/*<<src/python_denotation.ml 17 8>>*/return x}else
if(!a[2]){var
n=a[3];if(3===n[0]){var
f=n[1];if(f){var
g=f[2];if(g&&!g[2]){var
p=g[1],o=f[1];j=1}}}}}else
if(!a[2]){var
q=a[3];if(3===q[0]){var
h=q[1];if(h){var
i=h[2];if(i&&!i[2]){var
p=i[1],o=h[1];j=1}}}}/*<<src/python_denotation.ml 12 21>>*/if(j){/*<<src/python_denotation.ml 13 10>>*/var/*<<src/python_denotation.ml 13 10>>*/r=/*<<src/python_denotation.ml 13 10>>*/k(p),/*<<src/python_denotation.ml 13 10>>*/s=function(a){/*<<src/python_denotation.ml 12 21>>*/return[0,o,a]/*<<src/python_denotation.ml 12 31>>*/};/*<<src/python_denotation.ml 13 10>>*/return/*<<src/python_denotation.ml 13 10>>*/c(y[7],s,r)}}/*<<src/python_denotation.ml 20 8>>*/return 0/*<<src/python_denotation.ml 20 12>>*/}function
g(d,b,a){/*<<src/python_denotation.ml 24 30>>*/var/*<<src/python_denotation.ml 24 30>>*/f=/*<<src/python_denotation.ml 24 30>>*/c(l[17],h,a),/*<<src/python_denotation.ml 24 11>>*/g=/*<<src/python_denotation.ml 24 11>>*/c(n[7],m,f),/*<<src/python_denotation.ml 24 11>>*/i=/*<<src/python_denotation.ml 24 11>>*/c(e[28],g,b);/*<<src/python_denotation.ml 24 11>>*/return/*<<src/python_denotation.ml 24 11>>*/c(e[28],d,i)/*<<src/python_denotation.ml 24 55>>*/}function
h(t){/*<<?>>*/var
a=t;/*<<src/python_denotation.ml 28 4>>*/for(;;){/*<<src/python_denotation.ml 28 10>>*/ /*<<src/python_denotation.ml 28 10>>*/var
j=/*<<src/python_denotation.ml 28 10>>*/r(z[1],a);/*<<src/python_denotation.ml 28 10>>*/if(j)/*<<src/python_denotation.ml 30 10>>*/return/*<<src/python_denotation.ml 30 10>>*/r(e[33],j[1]);/*<<src/python_denotation.ml 28 10>>*/ /*<<src/python_denotation.ml 33 22>>*/var
l=/*<<src/python_denotation.ml 33 22>>*/k(a);/*<<src/python_denotation.ml 33 22>>*/if(l)/*<<src/python_denotation.ml 35 16>>*/return/*<<src/python_denotation.ml 35 16>>*/g(B,A,l[1]);/*<<src/python_denotation.ml 38 16>>*/switch(a[0]){case
2:/*<<src/python_denotation.ml 59 28>>*/ /*<<src/python_denotation.ml 59 28>>*/var
u=/*<<src/python_denotation.ml 59 28>>*/c(e[28],a[1],C);/*<<src/python_denotation.ml 59 28>>*/return/*<<src/python_denotation.ml 59 28>>*/c(e[28],D,u);case
5:var
d=a[1];if(b(d,E)){if(b(d,F)){if(b(d,G)){if(b(d,H)){if(b(d,I)){if(!b(d,J)&&!a[2]){var
m=a[3];if(3===m[0]&&!m[1])/*<<src/python_denotation.ml 47 22>>*/return K}}else
if(!a[2]){var
a=a[3];continue}}else
if(!a[2]){var
n=a[3];if(3===n[0]&&!n[1])/*<<src/python_denotation.ml 56 22>>*/return L}}else
if(!a[2]){var
o=a[3];if(3===o[0]){var
f=o[1];if(f){var
h=f[2];if(h){var
i=h[2];if(i&&!i[2])return g(N,M,[0,f[1],[0,h[1],[0,i[1],0]]])}}}}}else
if(!a[2]){var
p=a[3];if(3===p[0]&&!p[1])/*<<src/python_denotation.ml 44 22>>*/return O}}else
if(!a[2]){var
q=a[3];if(3===q[0]&&!q[1])/*<<src/python_denotation.ml 50 22>>*/return P}break}/*<<src/python_denotation.ml 62 22>>*/return s}/*<<src/python_denotation.ml 64 13>>*/}d.caml_register_global(28,[0,g,h],"Python_denotation");return/*<<?>>*/}(function(){return this}()));

//# 1 ".main.eobjs/byte/show.cmo.js"
(function(a4){"use strict";/*<<?>>*/var
k=",",j="variable not found: '",e="'",h=a4.jsoo_runtime,a=h.caml_string_of_jsbytes;/*<<?>>*/function
d(a,b){return a.length==1?a(b):h.caml_call_gen(a,[b])}/*<<?>>*/function
c(a,b,c){return a.length==2?a(b,c):h.caml_call_gen(a,[b,c])}var
g=h.caml_get_global_data(),b=g.Stdlib,i=g.Stdlib__string,f=g.Smyth__Pretty,a3=a(k),aT=a("No solutions"),aU=a("Error: examples are not a subset of the specification"),aW=a("\n"),aX=a("Parse error:\n"),aY=a(" in "),aZ=a("Type error: "),a0=a("Eval error: "),a1=a("Timed out"),ac=a("cannot infer type of function"),ad=a("cannot infer type of case expression"),af=a("cannot infer type of hole expression"),ah=a(e),aj=a(j),ak=a(e),am=a(j),an=a(e),aq=a("'does not match against type '"),ar=a("pattern match failure: pattern '"),as=a(", expecting "),au=a("wrong number of type argument: got "),av=a("got function but expecting "),aw=a("got tuple but expecting "),ay=a("got type abstraction but expecting "),az=a(" but expecting "),aA=a("got "),aB=a(e),aC=a("' for datatype '"),aD=a("branch mismatch: no constructor '"),aE=a("expecting function but got "),aF=a("expecting tuple but got "),aG=a("expecting forall but got "),aH=a("expecting datatype but got "),aI=a("tuple length mismatch: "),aJ=a("projection length mismatch: "),aK=a(" but got "),aL=a("projection out of bounds: max is "),aM=a(e),aN=a("' but got variable named '"),aO=a("type abstraction expecting variable named '"),aP=a(" are not the same type"),aQ=a(" and "),aR=a("assertion type mismatch: "),ap=a("] "),at=a(", col="),ax=a("[row="),o=a(e),p=a("keyword '"),m=a(e),n=a("symbol '"),l=a("Expecting "),q=a("("),r=a(")"),s=a("["),t=a("]"),u=a(k),v=a("->"),w=a("<"),x=a(">"),y=a("spaces"),z=a("#"),A=a("."),B=a("="),C=a("=="),D=a("??"),E=a("\\"),F=a("|"),G=a(":"),H=a("function specification"),I=a("wildcard pattern"),J=a("line comment"),K=a("multi-line comment start"),L=a("multi-line comment end"),M=a("more indentation"),N=a("let"),O=a("in"),P=a("case"),Q=a("of"),R=a("type"),S=a("assert"),T=a("natural number"),U=a("constructor name"),V=a("variable name"),W=a("hole name"),X=a("function arity"),Y=a("tuple size"),Z=a("tuple index"),_=a("Zero function arity"),$=a("EOF"),aa=a(", got "),ae=a("exactly "),ag=a(e),ai=a("', got '"),al=a("name '"),ao=a("Negative function arity: "),a2=g.Float2,aV=g.Stdlib__list;function
ab(i){/*<<src/show.ml 79 4>>*/ /*<<src/show.ml 79 4>>*/var
g=i[3];/*<<src/show.ml 6 4>>*/function
e(a){/*<<src/show.ml 7 6>>*/return/*<<src/show.ml 7 6>>*/c(b[28],l,a)/*<<src/show.ml 7 22>>*/}/*<<src/show.ml 6 4>>*/function
f(a){/*<<src/show.ml 10 32>>*/ /*<<src/show.ml 10 32>>*/var
d=/*<<src/show.ml 10 32>>*/c(b[28],a,m);/*<<src/show.ml 10 19>>*/return/*<<src/show.ml 10 19>>*/e(/*<<src/show.ml 10 19>>*/c(b[28],n,d))/*<<src/show.ml 10 39>>*/}/*<<src/show.ml 6 4>>*/function
h(a){/*<<src/show.ml 13 33>>*/ /*<<src/show.ml 13 33>>*/var
d=/*<<src/show.ml 13 33>>*/c(b[28],a,o);/*<<src/show.ml 13 19>>*/return/*<<src/show.ml 13 19>>*/e(/*<<src/show.ml 13 19>>*/c(b[28],p,d))/*<<src/show.ml 13 40>>*/}/*<<src/show.ml 6 4>>*/if(typeof
g==="number")/*<<src/show.ml 6 4>>*/switch(g){case
0:var
a=/*<<src/show.ml 17 30>>*/f(q);break;case
1:var
a=/*<<src/show.ml 18 31>>*/f(r);break;case
2:var
a=/*<<src/show.ml 19 32>>*/f(s);break;case
3:var
a=/*<<src/show.ml 20 33>>*/f(t);break;case
4:var
a=/*<<src/show.ml 21 26>>*/f(u);break;case
5:var
a=/*<<src/show.ml 22 31>>*/f(v);break;case
6:var
a=/*<<src/show.ml 23 27>>*/f(w);break;case
7:var
a=/*<<src/show.ml 24 27>>*/f(x);break;case
8:var
a=/*<<src/show.ml 25 26>>*/e(y);break;case
9:var
a=/*<<src/show.ml 26 26>>*/f(z);break;case
10:var
a=/*<<src/show.ml 27 24>>*/f(A);break;case
11:var
a=/*<<src/show.ml 28 27>>*/f(B);break;case
12:var
a=/*<<src/show.ml 29 33>>*/f(C);break;case
13:var
a=/*<<src/show.ml 30 25>>*/f(D);break;case
14:var
a=/*<<src/show.ml 31 27>>*/f(E);break;case
15:var
a=/*<<src/show.ml 32 25>>*/f(F);break;case
16:var
a=/*<<src/show.ml 33 26>>*/f(G);break;case
17:var
a=/*<<src/show.ml 34 29>>*/e(H);break;case
18:var
a=/*<<src/show.ml 36 29>>*/e(I);break;case
19:var
a=/*<<src/show.ml 37 32>>*/e(J);break;case
20:var
a=/*<<src/show.ml 38 38>>*/e(K);break;case
21:var
a=/*<<src/show.ml 39 36>>*/e(L);break;case
22:var
a=/*<<src/show.ml 45 31>>*/e(M);break;case
23:var
a=/*<<src/show.ml 47 24>>*/h(N);break;case
24:var
a=/*<<src/show.ml 48 23>>*/h(O);break;case
25:var
a=/*<<src/show.ml 49 25>>*/h(P);break;case
26:var
a=/*<<src/show.ml 50 23>>*/h(Q);break;case
27:var
a=/*<<src/show.ml 51 25>>*/h(R);break;case
28:var
a=/*<<src/show.ml 52 27>>*/h(S);break;case
29:var
a=/*<<src/show.ml 54 24>>*/e(T);break;case
30:var
a=/*<<src/show.ml 56 36>>*/e(U);break;case
31:var
a=/*<<src/show.ml 57 33>>*/e(V);break;case
32:var
a=/*<<src/show.ml 58 29>>*/e(W);break;case
33:var
a=/*<<src/show.ml 60 34>>*/e(X);break;case
34:var
a=/*<<src/show.ml 62 30>>*/e(Y);break;case
35:var
a=/*<<src/show.ml 63 31>>*/e(Z);break;case
36:var
a=_;break;default:var
a=/*<<src/show.ml 75 10>>*/e($)}else/*<<src/show.ml 6 4>>*/switch(g[0]){case
0:/*<<src/show.ml 43 54>>*/var
j=g[1],/*<<src/show.ml 43 54>>*/k=/*<<src/show.ml 43 54>>*/d(b[33],g[2]),/*<<src/show.ml 43 43>>*/ab=/*<<src/show.ml 43 43>>*/c(b[28],aa,k),/*<<src/show.ml 43 25>>*/ac=/*<<src/show.ml 43 25>>*/d(b[33],j),/*<<src/show.ml 43 25>>*/ad=/*<<src/show.ml 43 25>>*/c(b[28],ac,ab),a=/*<<src/show.ml 43 12>>*/e(/*<<src/show.ml 43 12>>*/c(b[28],ae,ad));break;case
1:/*<<src/show.ml 66 51>>*/var
af=g[1],/*<<src/show.ml 66 51>>*/ah=/*<<src/show.ml 66 51>>*/c(b[28],g[2],ag),/*<<src/show.ml 66 38>>*/aj=/*<<src/show.ml 66 38>>*/c(b[28],ai,ah),/*<<src/show.ml 66 31>>*/ak=/*<<src/show.ml 66 31>>*/c(b[28],af,aj),/*<<src/show.ml 66 10>>*/am=/*<<src/show.ml 66 10>>*/e(al),a=/*<<src/show.ml 66 10>>*/c(b[28],am,ak);break;default:/*<<src/show.ml 69 40>>*/var/*<<src/show.ml 69 40>>*/an=/*<<src/show.ml 69 40>>*/d(b[33],g[1]),a=/*<<src/show.ml 69 40>>*/c(b[28],ao,an)}/*<<src/show.ml 84 8>>*/var/*<<src/show.ml 84 8>>*/aq=/*<<src/show.ml 84 8>>*/c(b[28],ap,a),/*<<src/show.ml 83 8>>*/ar=/*<<src/show.ml 83 8>>*/d(b[33],i[2]),/*<<src/show.ml 83 8>>*/as=/*<<src/show.ml 83 8>>*/c(b[28],ar,aq),/*<<src/show.ml 82 8>>*/au=/*<<src/show.ml 82 8>>*/c(b[28],at,as),/*<<src/show.ml 81 8>>*/av=/*<<src/show.ml 81 8>>*/d(b[33],i[1]),/*<<src/show.ml 81 8>>*/aw=/*<<src/show.ml 81 8>>*/c(b[28],av,au);/*<<src/show.ml 81 8>>*/return/*<<src/show.ml 81 8>>*/c(b[28],ax,aw)/*<<src/show.ml 85 38>>*/}function
aS(g){/*<<src/show.ml 174 2>>*/if(typeof
g==="number")/*<<src/show.ml 174 2>>*/return 0===g?aT:aU;else/*<<src/show.ml 174 2>>*/switch(g[0]){case
0:/*<<src/show.ml 177 31>>*/var/*<<src/show.ml 177 31>>*/ae=/*<<src/show.ml 177 31>>*/c(aV[17],ab,g[1]),/*<<src/show.ml 177 12>>*/ag=/*<<src/show.ml 177 12>>*/c(i[7],aW,ae);/*<<src/show.ml 177 12>>*/return/*<<src/show.ml 177 12>>*/c(b[28],aX,ag);case
1:/*<<src/show.ml 183 12>>*/var
h=g[1],a=h[2],/*<<src/show.ml 183 12>>*/ai=/*<<src/show.ml 183 12>>*/d(f[3],h[1]),/*<<src/show.ml 182 12>>*/al=/*<<src/show.ml 182 12>>*/c(b[28],aY,ai);/*<<src/show.ml 89 4>>*/if(typeof
a==="number")/*<<src/show.ml 89 4>>*/switch(a){case
0:var
e=ac;break;case
1:var
e=ad;break;default:var
e=af}else/*<<src/show.ml 89 4>>*/switch(a[0]){case
0:/*<<src/show.ml 92 36>>*/var/*<<src/show.ml 92 36>>*/j=/*<<src/show.ml 92 36>>*/c(b[28],a[1],ah),e=/*<<src/show.ml 92 36>>*/c(b[28],aj,j);break;case
1:/*<<src/show.ml 95 36>>*/var/*<<src/show.ml 95 36>>*/k=/*<<src/show.ml 95 36>>*/c(b[28],a[1],ak),e=/*<<src/show.ml 95 36>>*/c(b[28],am,k);break;case
2:/*<<src/show.ml 101 14>>*/var
l=a[2],/*<<src/show.ml 101 14>>*/m=/*<<src/show.ml 101 14>>*/d(f[2],a[1]),/*<<src/show.ml 101 14>>*/n=/*<<src/show.ml 101 14>>*/c(b[28],m,an),/*<<src/show.ml 100 14>>*/o=/*<<src/show.ml 100 14>>*/c(b[28],aq,n),/*<<src/show.ml 99 14>>*/p=/*<<src/show.ml 99 14>>*/d(f[1],l),/*<<src/show.ml 99 14>>*/q=/*<<src/show.ml 99 14>>*/c(b[28],p,o),e=/*<<src/show.ml 99 14>>*/c(b[28],ar,q);break;case
3:/*<<src/show.ml 108 14>>*/var
r=a[2],/*<<src/show.ml 108 14>>*/s=/*<<src/show.ml 108 14>>*/d(b[33],a[1]),/*<<src/show.ml 107 14>>*/t=/*<<src/show.ml 107 14>>*/c(b[28],as,s),/*<<src/show.ml 106 14>>*/u=/*<<src/show.ml 106 14>>*/d(b[33],r),/*<<src/show.ml 106 14>>*/v=/*<<src/show.ml 106 14>>*/c(b[28],u,t),e=/*<<src/show.ml 106 14>>*/c(b[28],au,v);break;case
4:/*<<src/show.ml 111 42>>*/var/*<<src/show.ml 111 42>>*/w=/*<<src/show.ml 111 42>>*/d(f[2],a[1]),e=/*<<src/show.ml 111 42>>*/c(b[28],av,w);break;case
5:/*<<src/show.ml 114 39>>*/var/*<<src/show.ml 114 39>>*/x=/*<<src/show.ml 114 39>>*/d(f[2],a[1]),e=/*<<src/show.ml 114 39>>*/c(b[28],aw,x);break;case
6:/*<<src/show.ml 117 50>>*/var/*<<src/show.ml 117 50>>*/y=/*<<src/show.ml 117 50>>*/d(f[2],a[1]),e=/*<<src/show.ml 117 50>>*/c(b[28],ay,y);break;case
7:/*<<src/show.ml 120 56>>*/var
z=a[1],/*<<src/show.ml 120 56>>*/A=/*<<src/show.ml 120 56>>*/d(f[2],a[2]),/*<<src/show.ml 120 36>>*/B=/*<<src/show.ml 120 36>>*/c(b[28],az,A),/*<<src/show.ml 120 19>>*/C=/*<<src/show.ml 120 19>>*/d(f[2],z),/*<<src/show.ml 120 19>>*/D=/*<<src/show.ml 120 19>>*/c(b[28],C,B),e=/*<<src/show.ml 120 19>>*/c(b[28],aA,D);break;case
8:/*<<src/show.ml 124 42>>*/var
E=a[1],/*<<src/show.ml 124 42>>*/F=/*<<src/show.ml 124 42>>*/c(b[28],a[2],aB),/*<<src/show.ml 124 21>>*/G=/*<<src/show.ml 124 21>>*/c(b[28],aC,F),/*<<src/show.ml 124 14>>*/H=/*<<src/show.ml 124 14>>*/c(b[28],E,G),e=/*<<src/show.ml 124 14>>*/c(b[28],aD,H);break;case
9:/*<<src/show.ml 136 42>>*/var/*<<src/show.ml 136 42>>*/I=/*<<src/show.ml 136 42>>*/d(f[2],a[1]),e=/*<<src/show.ml 136 42>>*/c(b[28],aE,I);break;case
10:/*<<src/show.ml 139 39>>*/var/*<<src/show.ml 139 39>>*/J=/*<<src/show.ml 139 39>>*/d(f[2],a[1]),e=/*<<src/show.ml 139 39>>*/c(b[28],aF,J);break;case
11:/*<<src/show.ml 142 40>>*/var/*<<src/show.ml 142 40>>*/K=/*<<src/show.ml 142 40>>*/d(f[2],a[1]),e=/*<<src/show.ml 142 40>>*/c(b[28],aG,K);break;case
12:/*<<src/show.ml 145 42>>*/var/*<<src/show.ml 145 42>>*/L=/*<<src/show.ml 145 42>>*/d(f[2],a[1]),e=/*<<src/show.ml 145 42>>*/c(b[28],aH,L);break;case
13:/*<<src/show.ml 148 38>>*/var/*<<src/show.ml 148 38>>*/M=/*<<src/show.ml 148 38>>*/d(f[2],a[1]),e=/*<<src/show.ml 148 38>>*/c(b[28],aI,M);break;case
14:/*<<src/show.ml 151 43>>*/var/*<<src/show.ml 151 43>>*/N=/*<<src/show.ml 151 43>>*/d(f[2],a[1]),e=/*<<src/show.ml 151 43>>*/c(b[28],aJ,N);break;case
15:/*<<src/show.ml 157 14>>*/var
O=a[1],/*<<src/show.ml 157 14>>*/P=/*<<src/show.ml 157 14>>*/d(b[33],a[2]),/*<<src/show.ml 156 14>>*/Q=/*<<src/show.ml 156 14>>*/c(b[28],aK,P),/*<<src/show.ml 155 14>>*/R=/*<<src/show.ml 155 14>>*/d(b[33],O),/*<<src/show.ml 155 14>>*/S=/*<<src/show.ml 155 14>>*/c(b[28],R,Q),e=/*<<src/show.ml 155 14>>*/c(b[28],aL,S);break;case
16:/*<<src/show.ml 163 14>>*/var
T=a[2],/*<<src/show.ml 163 14>>*/U=/*<<src/show.ml 163 14>>*/c(b[28],a[1],aM),/*<<src/show.ml 162 14>>*/V=/*<<src/show.ml 162 14>>*/c(b[28],aN,U),/*<<src/show.ml 161 14>>*/W=/*<<src/show.ml 161 14>>*/c(b[28],T,V),e=/*<<src/show.ml 161 14>>*/c(b[28],aO,W);break;default:/*<<src/show.ml 170 14>>*/var
X=a[1],/*<<src/show.ml 170 14>>*/Y=/*<<src/show.ml 170 14>>*/d(f[2],a[2]),/*<<src/show.ml 170 14>>*/Z=/*<<src/show.ml 170 14>>*/c(b[28],Y,aP),/*<<src/show.ml 169 14>>*/_=/*<<src/show.ml 169 14>>*/c(b[28],aQ,Z),/*<<src/show.ml 168 14>>*/$=/*<<src/show.ml 168 14>>*/d(f[2],X),/*<<src/show.ml 168 14>>*/aa=/*<<src/show.ml 168 14>>*/c(b[28],$,_),e=/*<<src/show.ml 168 14>>*/c(b[28],aR,aa)}/*<<src/show.ml 183 12>>*/ /*<<src/show.ml 181 12>>*/var
ao=/*<<src/show.ml 181 12>>*/c(b[28],e,al);/*<<src/show.ml 181 12>>*/return/*<<src/show.ml 181 12>>*/c(b[28],aZ,ao);case
2:/*<<src/show.ml 186 8>>*/return/*<<src/show.ml 186 8>>*/c(b[28],a0,g[1]);default:/*<<src/show.ml 189 8>>*/return a1}/*<<src/show.ml 195 63>>*/}h.caml_register_global(100,[0,aS,function(a){/*<<src/show.ml 204 8>>*/var/*<<src/show.ml 204 8>>*/e=[0,/*<<src/show.ml 204 8>>*/d(b[30],a[4]),0],/*<<src/show.ml 203 8>>*/f=[0,/*<<src/show.ml 203 8>>*/d(b[30],a[3]),e],/*<<src/show.ml 202 8>>*/g=[0,/*<<src/show.ml 202 8>>*/d(b[33],a[2]),f],/*<<src/show.ml 201 8>>*/h=[0,/*<<src/show.ml 201 8>>*/d(b[33],a[1]),g],/*<<src/show.ml 200 8>>*/j=[0,/*<<src/show.ml 200 8>>*/d(a2[1],a[5]),h];/*<<src/show.ml 200 8>>*/return/*<<src/show.ml 200 8>>*/c(i[7],a3,j)/*<<src/show.ml 205 7>>*/}],"Show");return/*<<?>>*/}(function(){return this}()));

//# 1 ".main.eobjs/byte/main.cmo.js"
(function(eH){"use strict";/*<<?>>*/var
aT="Unknown built-in function '",aY='"',z="\n\n",aS="on",H="top1",aP="string",F="sketch",G=" ",$="examples",aX="'.",aW="built-in-func",ac="specification",aO="No solutions.",_="",aV="top1r",aR="The path to the specification",aN="sketches",ab="off",aa="  ",aQ="): ",l="\n",aU="? error (",j=eH.jsoo_runtime,i=j.caml_check_bound,aL=j.caml_string_get,m=j.caml_string_notequal,a=j.caml_string_of_jsbytes,g=j.caml_sys_argv;/*<<?>>*/function
d(a,b){return a.length==1?a(b):j.caml_call_gen(a,[b])}/*<<?>>*/function
b(a,b,c){return a.length==2?a(b,c):j.caml_call_gen(a,[b,c])}/*<<?>>*/function
p(a,b,c,d){return a.length==3?a(b,c,d):j.caml_call_gen(a,[b,c,d])}/*<<?>>*/function
eG(a,b,c,d,e){return a.length==4?a(b,c,d,e):j.caml_call_gen(a,[b,c,d,e])}/*<<?>>*/function
eE(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):j.caml_call_gen(a,[b,c,d,e,f])}var
f=j.caml_get_global_data(),ad=a("\n  -_-/                    ,  ,,\n (_ /                    ||  ||\n(_ --_  \\\\/\\\\/\\\\ '\\\\/\\\\ =||= ||/\\\\\n  --_ ) || || ||  || ;'  ||  || ||\n _/  )) || || ||  ||/    ||  || ||\n(_-_-   \\\\ \\\\ \\\\  |/     \\\\, \\\\ |/\n                 (             _/\n                  -_-\n"),I=a("Smyth"),ae=a("Programming-by-example in a typed functional language with sketches."),af=a("--------------------------------------------------------------------------------"),N=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]]],R=a("[--option=value]*"),c=f.Stdlib,D=f.Stdlib__printf,k=f.Io2,x=f.Smyth__Endpoint,o=f.Show,e=f.Stdlib__list,aH=f.Pervasives2,v=f.List2,aI=f.Python_denotation,h=f.Stdlib__string,U=f.Smyth__Rank,av=f.Smyth__Pretty,r=f.Smyth__Params,al=f.Float2,A=f.Option2,K=f.Compilation2,as=f.Str,aD=f.Fuzz,aE=f.References,s=[0,0],t=[0,10],u=[0,0],q=[0,0],dG=[0,[4,0,0,0,[12,44,[8,[0,0,0],0,[0,4],[12,44,[8,[0,0,0],0,[0,4],0]]]]],a("%d,%.4f,%.4f")],dC=a("': "),dD=a("error for '"),dB=[0,0,0],eb=a(")"),ec=a("]"),ed=a("["),ee=a("True"),eh=a("False"),ef=a(", "),eg=a("("),dl=a($),dm=a(aN),dn=a("specifications"),ds=a("% ! failure: "),dq=a(_),dr=a(","),dt=a("? inconsistent test: "),du=a(aQ),dv=a(aU),cX=[1,a(aO)],cY=a(_),cZ=a("Top recursive solution:\n\n"),c0=[1,a("No recursive solutions.")],c1=[1,a(aO)],cR=a("):"),cS=a(" (rank "),cT=a("Solution #"),cU=a(z),cO=a("\n,\n"),cP=a("\n]"),cQ=a("[\n"),cV=a(l),cW=a(l),cL=a(": \n\n"),cM=a("??"),cF=a(aY),cG=a('": "'),cH=a(aY),cI=a("\n, "),cJ=a("\n}"),cK=a("{ "),cN=a(z),cA=a("'.\n\n"),cB=a("Could not find command '"),b5=a("|"),b6=[0,[11,a(aa),[2,[0,0,20],[12,40,[2,0,[11,a(") "),[2,0,[11,a(". Default: "),[2,0,0]]]]]]]],a("  %-20s(%s) %s. Default: %s")],bZ=[0,[11,a(aa),[2,[0,0,20],[2,0,0]]],a("  %-20s%s")],bR=[0,[11,a(aa),[2,[0,0,22],[2,0,0]]],a("  %-22s%s")],bS=a(l),bT=a("\n\nArguments:\n"),bU=a(G),bV=a(G),bW=a(G),bX=a(G),bH=a(ab),bI=a(aS),bJ=a(H),bK=a(aV),bL=a(H),bM=a(aV),bN=a("top3"),bO=a("json"),bP=a(aP),bz=[0,a("Include debug logging"),a(ab),[0,a(ab),[0,a(aS),0]]],bA=[0,a("<positive-float>"),0],bB=a("Set maximum total time allowed per synthesis request"),bC=[0,a("<positive-integer>"),0],bD=a("Set the number of replications for a suite test"),bE=[0,a("Set the criterion to alert a failure for suite tests"),a(H),[0,a("<top1|top1r>"),0]],bF=[0,a("Set the display method for forge results"),a(H),[0,a("<top1|top1r|top3>"),0]],bG=[0,a("Set the output format for forge results"),a(aP),[0,a("<string|json>"),0]],bt=a("debug"),bu=a("timeout"),bv=a("replications"),bw=a("test-alert"),bx=a("show"),by=a("format"),bj=[0,[0,a(F),a("The path to the sketch to be completed")],0],bk=a(F),bl=a("The path to the examples for "),bm=a($),bn=[0,a(F),a("The path to the sketch to be tested WITHOUT any examples")],bo=[0,a(ac),a(aR)],bp=[0,[0,a("suite"),a("The path to the suite to be tested")],0],br=[0,[0,a(ac),a("The path to the specification to be exported")],[0,[0,a($),a("The path to the examples to be exported")],0]],bq=[0,[0,a("trial-count"),a("The number of trials to run for each size of example set")],[0,[0,a(aW),a("The built-in function to use as a reference")],[0,[0,a(ac),a(aR)],[0,[0,a(F),a("The path to the sketch to be fuzzed WITHOUT any examples")],0]]]],bs=[0,[0,a(aW),a("The built-in function to generate an example specification for")],0],a$=a("Complete a program sketch"),ba=a("Test a solution against a specification"),bb=a("Test multiple solutions against specifications"),bc=a("function"),bd=a("Stress-test a program sketch with examples fuzzed from a built-in "),be=a("built-in function"),bf=a("Stress-test a polymorphic program sketch with examples fuzzed from a "),bg=a("Export a set of assertions to Python code"),bh=a("Generate an example specification of a built-in function"),bi=a("Generate a polymorphic example specification of a built-in function"),a3=a("forge"),a4=a("test"),a5=a("suite-test"),a6=a("fuzz"),a7=a("poly-fuzz"),a8=a("export-assertions"),a9=a("generate-spec"),a_=a("generate-poly-spec"),aZ=a(">"),a0=a("<"),a2=[0,0,0],eD=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,0]]]]]]]],bQ=a("Usage: "),b1=a(l),b3=a("Available commands:\n\n"),b8=a(l),b_=a("Available options:\n\n"),b$=a(" (JavaScript version)"),eC=a(_),ca=a(" <command> --help"),cc=a("\n\nFor more specific information, run:\n\n  "),cf=a(z),ci=a(z),cl=a(" <command> <args> "),co=a(z),cr=a(l),cv=a(" v"),cy=a(l),cC=a(l),cD=a("\\n"),c3=a("--help"),de=[0,a(aN),0],di=a("% Replications = "),ej=a("\n      ]"),ek=a("\n      , "),en=a("      [ "),eq=a(aQ),et=a(aU),d5=a("Trial count must be a positive integer.\n"),d1=a(aX),d3=a(aT),dI=a(l),dK=a(l),dM=a("top recursive success percent"),dO=a("example count,top success percent,"),dQ=a(l),dU=a("\ntrial count,"),dY=a("\ntimeout,"),ex=a(aX),ez=a(aT),dp=f.Result2,cE=f.Stdlib__int,c2=f.Stdlib__random;function
J(a){/*<<src/main.ml 56 10>>*/ /*<<src/main.ml 56 10>>*/var
d=/*<<src/main.ml 56 10>>*/b(c[28],a,aZ);/*<<src/main.ml 56 10>>*/return/*<<src/main.ml 56 10>>*/b(c[28],a0,d)/*<<src/main.ml 56 17>>*/}function
ag(c){/*<<src/main.ml 60 4>>*/function
a(a){/*<<src/main.ml 65 4>>*/function
f(j){/*<<src/main.ml 73 4>>*/function
f(b){/*<<src/main.ml 78 4>>*/return[0,a[1],a[2],a[3],a[4],b]/*<<src/main.ml 80 5>>*/}/*<<src/main.ml 73 4>>*/function
g(a){/*<<src/main.ml 75 47>>*/return a[5]/*<<src/main.ml 75 60>>*/}/*<<src/main.ml 74 6>>*/var/*<<src/main.ml 74 6>>*/h=/*<<src/main.ml 74 6>>*/b(e[17],g,c),/*<<src/main.ml 74 6>>*/i=/*<<src/main.ml 74 6>>*/d(v[25],h);/*<<src/main.ml 74 6>>*/return/*<<src/main.ml 74 6>>*/b(A[11][1],i,f)/*<<src/main.ml 80 5>>*/}/*<<src/main.ml 65 4>>*/function
g(b){/*<<src/main.ml 69 14>>*/return/*<<src/main.ml 69 14>>*/j.caml_equal([0,b[1],b[2],b[3],b[4],0.],[0,a[1],a[2],a[3],a[4],0.])/*<<src/main.ml 69 75>>*/}/*<<src/main.ml 67 8>>*/var/*<<src/main.ml 67 8>>*/h=/*<<src/main.ml 67 8>>*/b(e[29],g,c),/*<<src/main.ml 66 6>>*/i=/*<<src/main.ml 66 6>>*/d(A[5],h);/*<<src/main.ml 66 6>>*/return/*<<src/main.ml 66 6>>*/b(A[11][2],i,f)/*<<src/main.ml 80 5>>*/}/*<<src/main.ml 63 6>>*/ /*<<src/main.ml 63 6>>*/var
f=/*<<src/main.ml 63 6>>*/d(v[14],c);/*<<src/main.ml 63 6>>*/return/*<<src/main.ml 63 6>>*/b(A[11][2],f,a)/*<<src/main.ml 80 5>>*/}function
a1(b,a){/*<<src/main.ml 84 4>>*/return b/a/*<<src/main.ml 84 40>>*/}var
L=K[1]?a2:eD;function
B(a){/*<<src/main.ml 114 2>>*/switch(a){case
0:/*<<src/main.ml 115 15>>*/return a3;case
1:/*<<src/main.ml 116 14>>*/return a4;case
2:/*<<src/main.ml 117 19>>*/return a5;case
3:/*<<src/main.ml 118 14>>*/return a6;case
4:/*<<src/main.ml 119 18>>*/return a7;case
5:/*<<src/main.ml 120 25>>*/return a8;case
6:/*<<src/main.ml 121 22>>*/return a9;default:/*<<src/main.ml 122 26>>*/return a_}/*<<src/main.ml 122 46>>*/}function
ah(a){/*<<src/main.ml 126 4>>*/function
c(c){/*<<src/main.ml 128 23>>*/ /*<<src/main.ml 128 23>>*/var
d=/*<<src/main.ml 128 23>>*/B(c);/*<<src/main.ml 128 23>>*/return/*<<src/main.ml 128 23>>*/b(h[34],d,a)/*<<src/main.ml 128 46>>*/}/*<<src/main.ml 126 4>>*/return/*<<src/main.ml 126 4>>*/b(e[36],c,L)/*<<src/main.ml 130 14>>*/}function
ai(a){/*<<src/main.ml 133 2>>*/switch(a){case
0:/*<<src/main.ml 135 8>>*/return a$;case
1:/*<<src/main.ml 138 8>>*/return ba;case
2:/*<<src/main.ml 141 8>>*/return bb;case
3:/*<<src/main.ml 144 8>>*/return/*<<src/main.ml 144 8>>*/b(c[28],bd,bc);case
4:/*<<src/main.ml 148 8>>*/return/*<<src/main.ml 148 8>>*/b(c[28],bf,be);case
5:/*<<src/main.ml 152 8>>*/return bg;case
6:/*<<src/main.ml 155 8>>*/return bh;default:/*<<src/main.ml 158 8>>*/return bi}/*<<src/main.ml 158 77>>*/}function
M(a){/*<<src/main.ml 161 2>>*/switch(a){case
0:/*<<src/main.ml 163 8>>*/return bj;case
1:/*<<src/main.ml 176 46>>*/ /*<<src/main.ml 176 46>>*/var
d=/*<<src/main.ml 176 46>>*/J(bk);/*<<src/main.ml 176 12>>*/return[0,bo,[0,bn,[0,[0,bm,/*<<src/main.ml 176 12>>*/b(c[28],bl,d)],0]]];case
2:/*<<src/main.ml 181 8>>*/return bp;case
5:/*<<src/main.ml 203 8>>*/return br;case
3:case
4:/*<<src/main.ml 188 8>>*/return bq;default:/*<<src/main.ml 213 8>>*/return bs}/*<<src/main.ml 216 9>>*/}function
O(a){/*<<src/main.ml 232 2>>*/switch(a){case
0:/*<<src/main.ml 233 15>>*/return bt;case
1:/*<<src/main.ml 234 22>>*/return bu;case
2:/*<<src/main.ml 235 22>>*/return bv;case
3:/*<<src/main.ml 236 19>>*/return bw;case
4:/*<<src/main.ml 237 14>>*/return bx;default:/*<<src/main.ml 238 20>>*/return by}/*<<src/main.ml 238 28>>*/}function
aj(a){/*<<src/main.ml 242 4>>*/function
c(c){/*<<src/main.ml 244 23>>*/ /*<<src/main.ml 244 23>>*/var
d=/*<<src/main.ml 244 23>>*/O(c);/*<<src/main.ml 244 23>>*/return/*<<src/main.ml 244 23>>*/b(h[34],d,a)/*<<src/main.ml 244 48>>*/}/*<<src/main.ml 242 4>>*/return/*<<src/main.ml 242 4>>*/b(e[36],c,N)/*<<src/main.ml 246 18>>*/}function
ak(a){/*<<src/main.ml 249 2>>*/switch(a){case
0:/*<<src/main.ml 251 8>>*/return bz;case
1:/*<<src/main.ml 258 10>>*/return[0,bB,/*<<src/main.ml 258 10>>*/d(al[1],r[7][1]),bA];case
2:/*<<src/main.ml 264 10>>*/return[0,bD,/*<<src/main.ml 264 10>>*/d(c[33],t[1]),bC];case
3:/*<<src/main.ml 269 8>>*/return bE;case
4:/*<<src/main.ml 275 8>>*/return bF;default:/*<<src/main.ml 281 8>>*/return bG}/*<<src/main.ml 284 9>>*/}function
am(h,a){/*<<src/main.ml 288 4>>*/switch(h){case
0:/*<<src/main.ml 290 10>>*/return/*<<src/main.ml 290 10>>*/m(a,bH)?m(a,bI)?0:(r[2][1]=1,1):(r[2][1]=0,1);case
1:/*<<src/main.ml 297 22>>*/ /*<<src/main.ml 297 22>>*/var
b=/*<<src/main.ml 297 22>>*/d(c[36],a);/*<<src/main.ml 297 22>>*/if(b){var
e=b[1];return 0.<e?(r[7][1]=e,1):0}/*<<src/main.ml 304 22>>*/return 0;case
2:/*<<src/main.ml 308 22>>*/ /*<<src/main.ml 308 22>>*/var
f=/*<<src/main.ml 308 22>>*/d(c[34],a);/*<<src/main.ml 308 22>>*/if(f){/*<<src/main.ml 310 16>>*/ /*<<src/main.ml 310 16>>*/var
g=f[1];/*<<src/main.ml 310 16>>*/return 0<g?(t[1]=g,1):0}/*<<src/main.ml 315 22>>*/return 0;case
3:/*<<src/main.ml 319 10>>*/return/*<<src/main.ml 319 10>>*/m(a,bJ)?m(a,bK)?0:(u[1]=1,1):(u[1]=0,1);case
4:/*<<src/main.ml 326 10>>*/return/*<<src/main.ml 326 10>>*/m(a,bL)?m(a,bM)?m(a,bN)?0:(s[1]=2,1):(s[1]=1,1):(s[1]=0,1);default:/*<<src/main.ml 334 10>>*/return/*<<src/main.ml 334 10>>*/m(a,bO)?m(a,bP)?0:(q[1]=0,1):(q[1]=1,1)}/*<<src/main.ml 338 13>>*/}/*<<src/main.ml 343 2>>*/var/*<<src/main.ml 343 2>>*/P=/*<<src/main.ml 343 2>>*/i(g(0),0)[1],/*<<src/main.ml 346 2>>*/Q=/*<<src/main.ml 346 2>>*/b(c[28],bQ,P);/*<<src/main.ml 346 2>>*/function
C(a){/*<<src/main.ml 354 6>>*/ /*<<src/main.ml 354 6>>*/var
d=/*<<src/main.ml 354 6>>*/M(a);/*<<src/main.ml 354 6>>*/function
f(a){/*<<src/main.ml 362 20>>*/return/*<<src/main.ml 362 20>>*/p(D[4],bR,a[1],a[2])/*<<src/main.ml 362 78>>*/}/*<<src/main.ml 361 6>>*/var/*<<src/main.ml 361 6>>*/g=/*<<src/main.ml 361 6>>*/b(e[17],f,d),/*<<src/main.ml 361 4>>*/i=/*<<src/main.ml 361 4>>*/b(h[7],bS,g),/*<<src/main.ml 360 4>>*/j=/*<<src/main.ml 360 4>>*/b(c[28],bT,i),/*<<src/main.ml 359 10>>*/k=/*<<src/main.ml 359 10>>*/b(c[28],R,j),/*<<src/main.ml 359 4>>*/l=/*<<src/main.ml 359 4>>*/b(c[28],bU,k);/*<<src/main.ml 359 4>>*/function
m(a){/*<<src/main.ml 358 32>>*/return/*<<src/main.ml 358 32>>*/J(a[1])/*<<src/main.ml 358 66>>*/}/*<<src/main.ml 358 22>>*/var/*<<src/main.ml 358 22>>*/n=/*<<src/main.ml 358 22>>*/b(e[17],m,d),/*<<src/main.ml 358 4>>*/o=/*<<src/main.ml 358 4>>*/b(h[7],bV,n),/*<<src/main.ml 358 4>>*/q=/*<<src/main.ml 358 4>>*/b(c[28],o,l),/*<<src/main.ml 357 27>>*/r=/*<<src/main.ml 357 27>>*/b(c[28],bW,q),/*<<src/main.ml 357 4>>*/s=/*<<src/main.ml 357 4>>*/B(a),/*<<src/main.ml 357 4>>*/t=/*<<src/main.ml 357 4>>*/b(c[28],s,r),/*<<src/main.ml 356 19>>*/u=/*<<src/main.ml 356 19>>*/b(c[28],bX,t);/*<<src/main.ml 356 19>>*/return/*<<src/main.ml 356 19>>*/b(c[28],Q,u)/*<<src/main.ml 364 5>>*/}/*<<src/main.ml 346 2>>*/function
bY(a){/*<<src/main.ml 375 17>>*/var/*<<src/main.ml 375 17>>*/b=/*<<src/main.ml 375 17>>*/ai(a),/*<<src/main.ml 374 17>>*/c=/*<<src/main.ml 374 17>>*/B(a);/*<<src/main.ml 374 17>>*/return/*<<src/main.ml 374 17>>*/p(D[4],bZ,c,b)/*<<src/main.ml 375 46>>*/}/*<<src/main.ml 369 4>>*/var/*<<src/main.ml 369 4>>*/b0=/*<<src/main.ml 369 4>>*/b(e[17],bY,L),/*<<src/main.ml 369 2>>*/b2=/*<<src/main.ml 369 2>>*/b(h[7],b1,b0),/*<<src/main.ml 368 2>>*/S=/*<<src/main.ml 368 2>>*/b(c[28],b3,b2);/*<<src/main.ml 368 2>>*/function
b4(c){/*<<src/main.ml 386 17>>*/var/*<<src/main.ml 386 17>>*/d=/*<<src/main.ml 386 17>>*/O(c),/*<<src/main.ml 389 17>>*/a=/*<<src/main.ml 389 17>>*/ak(c),/*<<src/main.ml 389 17>>*/e=a[2],/*<<src/main.ml 389 17>>*/f=a[1],/*<<src/main.ml 392 17>>*/g=/*<<src/main.ml 392 17>>*/b(h[7],b5,a[3]);/*<<src/main.ml 392 17>>*/return/*<<src/main.ml 392 17>>*/eE(D[4],b6,d,g,f,e)/*<<src/main.ml 399 24>>*/}/*<<src/main.ml 382 4>>*/var/*<<src/main.ml 382 4>>*/b7=/*<<src/main.ml 382 4>>*/b(e[17],b4,N),/*<<src/main.ml 382 2>>*/b9=/*<<src/main.ml 382 2>>*/b(h[7],b8,b7),/*<<src/main.ml 381 2>>*/an=/*<<src/main.ml 381 2>>*/b(c[28],b_,b9),/*<<src/main.ml 381 2>>*/ao=K[1]?b$:eC,/*<<src/main.ml 419 2>>*/cb=/*<<src/main.ml 419 2>>*/b(c[28],P,ca),/*<<src/main.ml 418 2>>*/cd=/*<<src/main.ml 418 2>>*/b(c[28],cc,cb),/*<<src/main.ml 417 2>>*/ce=/*<<src/main.ml 417 2>>*/b(c[28],an,cd),/*<<src/main.ml 416 2>>*/cg=/*<<src/main.ml 416 2>>*/b(c[28],cf,ce),/*<<src/main.ml 415 2>>*/ch=/*<<src/main.ml 415 2>>*/b(c[28],S,cg),/*<<src/main.ml 414 56>>*/cj=/*<<src/main.ml 414 56>>*/b(c[28],ci,ch),/*<<src/main.ml 414 40>>*/ck=/*<<src/main.ml 414 40>>*/b(c[28],R,cj),/*<<src/main.ml 414 17>>*/cm=/*<<src/main.ml 414 17>>*/b(c[28],cl,ck),/*<<src/main.ml 414 2>>*/cn=/*<<src/main.ml 414 2>>*/b(c[28],Q,cm),/*<<src/main.ml 413 16>>*/cp=/*<<src/main.ml 413 16>>*/b(c[28],co,cn),/*<<src/main.ml 413 2>>*/cq=/*<<src/main.ml 413 2>>*/b(c[28],ae,cp),/*<<src/main.ml 412 53>>*/cs=/*<<src/main.ml 412 53>>*/b(c[28],cr,cq),/*<<src/main.ml 412 33>>*/ct=/*<<src/main.ml 412 33>>*/b(c[28],ao,cs),/*<<src/main.ml 412 16>>*/cu=/*<<src/main.ml 412 16>>*/b(c[28],r[1],ct),/*<<src/main.ml 412 9>>*/cw=/*<<src/main.ml 412 9>>*/b(c[28],cv,cu),/*<<src/main.ml 412 2>>*/cx=/*<<src/main.ml 412 2>>*/b(c[28],I,cw),/*<<src/main.ml 411 10>>*/cz=/*<<src/main.ml 411 10>>*/b(c[28],cy,cx),/*<<src/main.ml 411 2>>*/T=/*<<src/main.ml 411 2>>*/b(c[28],ad,cz);/*<<src/main.ml 411 2>>*/function
ap(a){/*<<src/main.ml 422 41>>*/var/*<<src/main.ml 422 41>>*/d=/*<<src/main.ml 422 41>>*/b(c[28],cA,S),/*<<src/main.ml 422 31>>*/e=/*<<src/main.ml 422 31>>*/b(c[28],a,d);/*<<src/main.ml 422 31>>*/return/*<<src/main.ml 422 31>>*/b(c[28],cB,e)/*<<src/main.ml 423 20>>*/}/*<<src/main.ml 411 2>>*/function
aq(a){/*<<src/main.ml 429 4>>*/ /*<<src/main.ml 429 4>>*/var
e=/*<<src/main.ml 429 4>>*/j.caml_ml_string_length(a);/*<<src/main.ml 432 36>>*/if(2<=e&&45===/*<<src/main.ml 432 18>>*/aL(a,0)&&45===/*<<src/main.ml 432 36>>*/aL(a,1)){/*<<src/main.ml 436 8>>*/var/*<<src/main.ml 436 8>>*/g=/*<<src/main.ml 436 8>>*/p(h[4],a,2,e-2|0),/*<<src/main.ml 436 8>>*/c=/*<<src/main.ml 436 8>>*/b(h[35],61,g);/*<<src/main.ml 436 8>>*/if(c){var
d=c[2];if(d&&!d[2]){/*<<src/main.ml 440 24>>*/var
i=d[1],/*<<src/main.ml 440 24>>*/f=/*<<src/main.ml 440 24>>*/aj(c[1]);/*<<src/main.ml 440 24>>*/return f?/*<<src/main.ml 442 18>>*/am(f[1],i):0}}/*<<src/main.ml 449 12>>*/return 0}/*<<src/main.ml 433 6>>*/return 0/*<<src/main.ml 449 17>>*/}/*<<src/main.ml 411 2>>*/function
ar(e,b){/*<<?>>*/var
a=e;/*<<src/main.ml 453 4>>*/for(;;){/*<<src/main.ml 453 4>>*/if(b.length-1<=a)/*<<src/main.ml 454 6>>*/return 0;/*<<src/main.ml 457 11>>*/if(/*<<src/main.ml 457 11>>*/aq(/*<<src/main.ml 457 30>>*/i(b,a)[1+a])){var
a=a+1|0;continue}/*<<src/main.ml 461 12>>*/ /*<<src/main.ml 461 12>>*/d(c[53],T);/*<<src/main.ml 461 12>>*/return/*<<src/main.ml 461 12>>*/d(c[99],1)}/*<<src/main.ml 464 9>>*/}/*<<src/main.ml 469 2>>*/var/*<<src/main.ml 469 2>>*/at=/*<<src/main.ml 469 2>>*/d(as[1],cC),/*<<src/main.ml 472 2>>*/au=/*<<src/main.ml 472 2>>*/b(as[16],at,cD);/*<<src/main.ml 472 2>>*/function
w(f){/*<<src/main.ml 477 4>>*/function
g(c,a){/*<<src/main.ml 479 21>>*/return/*<<src/main.ml 479 21>>*/b(cE[9],c[1],a[1])/*<<src/main.ml 479 63>>*/}/*<<src/main.ml 478 6>>*/ /*<<src/main.ml 478 6>>*/var
a=/*<<src/main.ml 478 6>>*/b(e[51],g,f);/*<<src/main.ml 478 6>>*/if(q[1]){/*<<src/main.ml 494 10>>*/var/*<<src/main.ml 494 10>>*/i=function(a){/*<<src/main.ml 497 19>>*/var/*<<src/main.ml 497 19>>*/e=a[1],/*<<src/main.ml 501 27>>*/f=/*<<src/main.ml 501 27>>*/d(au,/*<<src/main.ml 501 46>>*/d(av[3],a[2])),/*<<src/main.ml 501 27>>*/g=/*<<src/main.ml 501 27>>*/b(c[28],f,cF),/*<<src/main.ml 500 27>>*/h=/*<<src/main.ml 500 27>>*/b(c[28],cG,g),/*<<src/main.ml 499 27>>*/i=/*<<src/main.ml 499 27>>*/d(c[33],e),/*<<src/main.ml 499 27>>*/j=/*<<src/main.ml 499 27>>*/b(c[28],i,h);/*<<src/main.ml 499 27>>*/return/*<<src/main.ml 499 27>>*/b(c[28],cH,j)/*<<src/main.ml 503 20>>*/},/*<<src/main.ml 495 12>>*/j=/*<<src/main.ml 495 12>>*/b(e[17],i,a),/*<<src/main.ml 495 12>>*/k=/*<<src/main.ml 495 12>>*/b(h[7],cI,j),/*<<src/main.ml 506 17>>*/l=/*<<src/main.ml 506 17>>*/b(c[28],k,cJ);/*<<src/main.ml 506 17>>*/return/*<<src/main.ml 506 17>>*/b(c[28],cK,l)}/*<<src/main.ml 483 10>>*/function
m(a){/*<<src/main.ml 485 17>>*/var/*<<src/main.ml 485 17>>*/e=a[1],/*<<src/main.ml 489 25>>*/f=/*<<src/main.ml 489 25>>*/d(av[3],a[2]),/*<<src/main.ml 488 25>>*/g=/*<<src/main.ml 488 25>>*/b(c[28],cL,f),/*<<src/main.ml 487 25>>*/h=/*<<src/main.ml 487 25>>*/d(c[33],e),/*<<src/main.ml 487 25>>*/i=/*<<src/main.ml 487 25>>*/b(c[28],h,g);/*<<src/main.ml 487 25>>*/return/*<<src/main.ml 487 25>>*/b(c[28],cM,i)/*<<src/main.ml 490 18>>*/}/*<<src/main.ml 483 10>>*/ /*<<src/main.ml 483 10>>*/var
n=/*<<src/main.ml 483 10>>*/b(e[17],m,a);/*<<src/main.ml 483 10>>*/return/*<<src/main.ml 483 10>>*/b(h[7],cN,n)/*<<src/main.ml 506 30>>*/}/*<<src/main.ml 472 2>>*/function
aw(a){/*<<src/main.ml 510 4>>*/if(q[1]){/*<<src/main.ml 527 10>>*/var/*<<src/main.ml 527 10>>*/f=function(a){/*<<src/main.ml 531 23>>*/return/*<<src/main.ml 531 23>>*/w(a)/*<<src/main.ml 531 43>>*/},/*<<src/main.ml 528 12>>*/g=/*<<src/main.ml 528 12>>*/b(e[17],f,a),/*<<src/main.ml 528 12>>*/i=/*<<src/main.ml 528 12>>*/b(h[7],cO,g),/*<<src/main.ml 535 18>>*/j=/*<<src/main.ml 535 18>>*/b(c[28],i,cP);/*<<src/main.ml 535 18>>*/return/*<<src/main.ml 535 18>>*/b(c[28],cQ,j)}/*<<src/main.ml 512 10>>*/function
k(e,a){/*<<src/main.ml 521 24>>*/var/*<<src/main.ml 521 24>>*/f=[0,/*<<src/main.ml 521 24>>*/w(a),0],/*<<src/main.ml 519 42>>*/g=/*<<src/main.ml 519 42>>*/d(U[1],a),/*<<src/main.ml 519 28>>*/i=/*<<src/main.ml 519 28>>*/d(c[33],g),/*<<src/main.ml 519 28>>*/j=/*<<src/main.ml 519 28>>*/b(c[28],i,cR),/*<<src/main.ml 518 28>>*/k=/*<<src/main.ml 518 28>>*/b(c[28],cS,j),/*<<src/main.ml 517 28>>*/l=/*<<src/main.ml 517 28>>*/d(c[33],e+1|0),/*<<src/main.ml 517 28>>*/m=/*<<src/main.ml 517 28>>*/b(c[28],l,k),/*<<src/main.ml 516 24>>*/n=[0,/*<<src/main.ml 516 24>>*/b(c[28],cT,m),f];/*<<src/main.ml 516 24>>*/return/*<<src/main.ml 516 24>>*/b(h[7],cU,n)/*<<src/main.ml 522 23>>*/}/*<<src/main.ml 512 10>>*/var/*<<src/main.ml 512 10>>*/l=/*<<src/main.ml 512 10>>*/b(e[18],k,a),/*<<src/main.ml 524 37>>*/m=/*<<src/main.ml 524 37>>*/b(c[28],af,cV),/*<<src/main.ml 524 29>>*/n=/*<<src/main.ml 524 29>>*/b(c[28],cW,m);/*<<src/main.ml 524 29>>*/return/*<<src/main.ml 524 29>>*/b(h[7],n,l)/*<<src/main.ml 535 31>>*/}/*<<src/main.ml 472 2>>*/function
ax(g){/*<<src/main.ml 541 10>>*/ /*<<src/main.ml 541 10>>*/var
e=/*<<src/main.ml 541 10>>*/d(x[1],g);/*<<src/main.ml 541 10>>*/if(0===e[0]){/*<<src/main.ml 547 12>>*/ /*<<src/main.ml 547 12>>*/var
a=/*<<src/main.ml 547 12>>*/d(U[2],e[1][1]);/*<<src/main.ml 547 12>>*/switch(s[1]){case
0:/*<<src/main.ml 552 16>>*/return a?[0,/*<<src/main.ml 554 25>>*/w(a[1])]:cX;case
1:/*<<src/main.ml 561 28>>*/ /*<<src/main.ml 561 28>>*/var
f=/*<<src/main.ml 561 28>>*/d(U[3],a);/*<<src/main.ml 561 28>>*/if(f){/*<<src/main.ml 563 22>>*/var/*<<src/main.ml 563 22>>*/h=f[1],/*<<src/main.ml 563 22>>*/i=q[1]?cY:cZ,/*<<src/main.ml 574 26>>*/j=/*<<src/main.ml 574 26>>*/w(h);/*<<src/main.ml 573 24>>*/return[0,/*<<src/main.ml 573 24>>*/b(c[28],i,j)]}/*<<src/main.ml 578 22>>*/return c0;default:/*<<src/main.ml 582 16>>*/return 0===a?c1:[0,/*<<src/main.ml 586 20>>*/aw(/*<<src/main.ml 586 22>>*/b(v[26],3,a))]}}/*<<src/main.ml 543 16>>*/return[1,/*<<src/main.ml 543 16>>*/d(o[1],e[1])]/*<<src/main.ml 590 13>>*/}/*<<src/main.ml 472 2>>*/if(!K[1]){/*<<src/main.ml 621 6>>*/ /*<<src/main.ml 621 6>>*/d(c2[3],0);/*<<src/main.ml 621 6>>*/ /*<<src/main.ml 621 6>>*/var
V=/*<<src/main.ml 621 6>>*/g(0).length-1;/*<<src/main.ml 621 6>>*/if(!(2<=V)){/*<<src/main.ml 628 12>>*/ /*<<src/main.ml 628 12>>*/d(c[46],T);/*<<src/main.ml 629 12>>*/ /*<<src/main.ml 629 12>>*/d(c[99],0)}/*<<src/main.ml 621 6>>*/ /*<<src/main.ml 635 14>>*/var
ay=/*<<src/main.ml 635 14>>*/ah(/*<<src/main.ml 635 32>>*/i(/*<<src/main.ml 634 6>>*/g(0),1)[2]);/*<<src/main.ml 635 14>>*/if(ay)var
n=ay[1];else{/*<<src/main.ml 641 30>>*/ /*<<src/main.ml 641 30>>*/var
eB=/*<<src/main.ml 641 30>>*/ap(/*<<src/main.ml 641 49>>*/i(/*<<src/main.ml 640 14>>*/g(0),1)[2]);/*<<src/main.ml 641 16>>*/ /*<<src/main.ml 641 16>>*/d(c[53],eB);/*<<src/main.ml 641 30>>*/var
n=/*<<src/main.ml 642 16>>*/d(c[99],1)}/*<<src/main.ml 621 6>>*/var
eF=0;/*<<src/main.ml 646 42>>*/if(3===V&&/*<<src/main.ml 646 42>>*/j.caml_string_equal(/*<<src/main.ml 646 30>>*/i(g(0),2)[3],c3)){/*<<src/main.ml 648 26>>*/ /*<<src/main.ml 648 26>>*/var
c4=/*<<src/main.ml 648 26>>*/C(n);/*<<src/main.ml 648 12>>*/ /*<<src/main.ml 648 12>>*/d(c[46],c4);/*<<src/main.ml 649 12>>*/ /*<<src/main.ml 649 12>>*/d(c[99],0);eF=1}/*<<src/main.ml 621 6>>*/var/*<<src/main.ml 655 20>>*/c5=/*<<src/main.ml 655 20>>*/M(n),/*<<src/main.ml 655 8>>*/az=/*<<src/main.ml 655 8>>*/d(e[1],c5);/*<<src/main.ml 655 8>>*/if((V-2|0)<az){/*<<src/main.ml 660 26>>*/ /*<<src/main.ml 660 26>>*/var
c6=/*<<src/main.ml 660 26>>*/C(n);/*<<src/main.ml 660 12>>*/ /*<<src/main.ml 660 12>>*/d(c[53],c6);/*<<src/main.ml 661 12>>*/ /*<<src/main.ml 661 12>>*/d(c[99],1)}/*<<src/main.ml 666 6>>*/ /*<<src/main.ml 666 6>>*/ar(az+2|0,/*<<src/main.ml 666 6>>*/g(0));/*<<src/main.ml 666 6>>*/switch(n){case
0:/*<<src/main.ml 671 39>>*/var/*<<src/main.ml 671 39>>*/c7=/*<<src/main.ml 671 39>>*/i(/*<<src/main.ml 669 12>>*/g(0),2)[3],/*<<src/main.ml 670 14>>*/W=/*<<src/main.ml 670 14>>*/ax(/*<<src/main.ml 671 24>>*/d(k[2],c7));/*<<src/main.ml 670 14>>*/if(0===W[0])/*<<src/main.ml 674 18>>*/ /*<<src/main.ml 674 18>>*/d(c[46],W[1]);else{/*<<src/main.ml 677 18>>*/ /*<<src/main.ml 677 18>>*/d(c[53],W[1]);/*<<src/main.ml 678 18>>*/ /*<<src/main.ml 678 18>>*/d(c[99],1)}break;case
1:/*<<src/main.ml 686 41>>*/var/*<<src/main.ml 686 41>>*/c8=/*<<src/main.ml 686 41>>*/i(/*<<src/main.ml 682 12>>*/g(0),4)[5],/*<<src/main.ml 686 26>>*/c9=/*<<src/main.ml 686 26>>*/d(k[2],c8),/*<<src/main.ml 685 39>>*/c_=/*<<src/main.ml 685 39>>*/i(/*<<src/main.ml 686 26>>*/g(0),3)[4],/*<<src/main.ml 685 24>>*/c$=/*<<src/main.ml 685 24>>*/d(k[2],c_),/*<<src/main.ml 684 46>>*/da=/*<<src/main.ml 684 46>>*/i(/*<<src/main.ml 685 24>>*/g(0),2)[3],/*<<src/main.ml 684 31>>*/db=/*<<src/main.ml 684 31>>*/d(k[2],da),/*<<src/main.ml 683 14>>*/X=/*<<src/main.ml 683 14>>*/p(x[2],db,c$,c9);/*<<src/main.ml 683 14>>*/if(0===X[0]){/*<<src/main.ml 693 18>>*/ /*<<src/main.ml 693 18>>*/var
dc=/*<<src/main.ml 693 18>>*/d(o[2],X[1]);/*<<src/main.ml 693 18>>*/ /*<<src/main.ml 693 18>>*/d(c[46],dc)}else{/*<<src/main.ml 689 32>>*/ /*<<src/main.ml 689 32>>*/var
dd=/*<<src/main.ml 689 32>>*/d(o[1],X[1]);/*<<src/main.ml 689 18>>*/ /*<<src/main.ml 689 18>>*/d(c[53],dd);/*<<src/main.ml 690 18>>*/ /*<<src/main.ml 690 18>>*/d(c[99],1)}break;case
2:/*<<src/main.ml 699 12>>*/var/*<<src/main.ml 699 12>>*/E=/*<<src/main.ml 699 12>>*/i(/*<<src/main.ml 699 12>>*/g(0),2)[3],/*<<src/main.ml 703 32>>*/df=/*<<src/main.ml 703 32>>*/d(k[3],[0,E,de]),/*<<src/main.ml 703 14>>*/dg=/*<<src/main.ml 703 14>>*/d(k[5],df),/*<<src/main.ml 705 49>>*/dh=/*<<src/main.ml 705 49>>*/d(c[33],t[1]),/*<<src/main.ml 705 26>>*/dj=/*<<src/main.ml 705 26>>*/b(c[28],di,dh);/*<<src/main.ml 705 12>>*/ /*<<src/main.ml 705 12>>*/d(c[46],dj);/*<<src/main.ml 699 12>>*/ /*<<src/main.ml 705 12>>*/var
dk=function(a){/*<<src/main.ml 709 23>>*/function
r(f){/*<<src/main.ml 724 39>>*/var/*<<src/main.ml 724 39>>*/b=/*<<src/main.ml 724 39>>*/d(k[4],[0,E,[0,dl,[0,a,0]]]),/*<<src/main.ml 720 39>>*/c=/*<<src/main.ml 720 39>>*/d(k[4],[0,E,[0,dm,[0,a,0]]]),/*<<src/main.ml 716 39>>*/e=/*<<src/main.ml 716 39>>*/d(k[4],[0,E,[0,dn,[0,a,0]]]);/*<<src/main.ml 716 39>>*/return/*<<src/main.ml 716 39>>*/p(x[2],e,c,b)/*<<src/main.ml 726 40>>*/}/*<<src/main.ml 712 29>>*/var/*<<src/main.ml 712 29>>*/s=/*<<src/main.ml 712 29>>*/b(e[10],t[1],r),/*<<src/main.ml 711 27>>*/f=/*<<src/main.ml 711 27>>*/d(dp[6],s);/*<<src/main.ml 711 27>>*/if(0===f[0]){/*<<src/main.ml 733 37>>*/ /*<<src/main.ml 733 37>>*/var
h=/*<<src/main.ml 733 37>>*/ag(f[1]);/*<<src/main.ml 733 37>>*/if(h){/*<<src/main.ml 735 37>>*/var/*<<src/main.ml 735 37>>*/g=h[1],m=0;if(0===u[1]&&!g[3])m=1;/*<<src/main.ml 735 37>>*/var
n=0;if(!m){var
q=0;if(1===u[1]&&!g[4])q=1;if(!q){var
i=dq;n=1}}if(!n)var
i=ds;/*<<src/main.ml 735 37>>*/var/*<<src/main.ml 752 40>>*/v=/*<<src/main.ml 752 40>>*/d(o[2],g),/*<<src/main.ml 751 40>>*/w=/*<<src/main.ml 751 40>>*/b(c[28],dr,v),/*<<src/main.ml 750 40>>*/y=/*<<src/main.ml 750 40>>*/b(c[28],a,w),j=/*<<src/main.ml 749 37>>*/b(c[28],i,y)}else
var
j=/*<<src/main.ml 755 37>>*/b(c[28],dt,a);/*<<src/main.ml 733 37>>*/var
l=j}else/*<<src/main.ml 730 60>>*/var/*<<src/main.ml 730 60>>*/z=/*<<src/main.ml 730 60>>*/d(o[1],f[1]),/*<<src/main.ml 730 52>>*/A=/*<<src/main.ml 730 52>>*/b(c[28],du,z),/*<<src/main.ml 730 45>>*/B=/*<<src/main.ml 730 45>>*/b(c[28],a,A),l=/*<<src/main.ml 730 31>>*/b(c[28],dv,B);/*<<src/main.ml 758 23>>*/return/*<<src/main.ml 758 23>>*/d(c[46],l)/*<<src/main.ml 758 43>>*/};/*<<src/main.ml 706 12>>*/ /*<<src/main.ml 706 12>>*/b(e[15],dk,dg);break;case
5:/*<<src/main.ml 876 43>>*/var/*<<src/main.ml 876 43>>*/d7=/*<<src/main.ml 876 43>>*/i(/*<<src/main.ml 873 12>>*/g(0),3)[4],/*<<src/main.ml 876 28>>*/d8=/*<<src/main.ml 876 28>>*/d(k[2],d7),/*<<src/main.ml 875 46>>*/d9=/*<<src/main.ml 875 46>>*/i(/*<<src/main.ml 876 28>>*/g(0),2)[3],/*<<src/main.ml 875 31>>*/d_=/*<<src/main.ml 875 31>>*/d(k[2],d9),/*<<src/main.ml 874 14>>*/Z=/*<<src/main.ml 874 14>>*/b(x[4],d_,d8);/*<<src/main.ml 874 14>>*/if(0===Z[0]){/*<<src/main.ml 887 18>>*/var/*<<src/main.ml 887 18>>*/d$=Z[1],/*<<src/main.ml 887 18>>*/ea=function(a){/*<<src/main.ml 890 27>>*/var/*<<src/main.ml 890 27>>*/e=a[2],/*<<src/main.ml 890 27>>*/f=a[1],/*<<src/main.ml 899 39>>*/g=[0,/*<<src/main.ml 899 39>>*/d(aI[2],a[3]),0],/*<<src/main.ml 897 39>>*/i=[0,/*<<src/main.ml 897 39>>*/p(aI[1],ed,ec,e),g],/*<<src/main.ml 897 39>>*/j=f?ee:eh,/*<<src/main.ml 892 35>>*/k=/*<<src/main.ml 892 35>>*/b(h[7],ef,[0,j,i]),/*<<src/main.ml 892 35>>*/l=/*<<src/main.ml 892 35>>*/b(c[28],k,eb);/*<<src/main.ml 892 35>>*/return/*<<src/main.ml 892 35>>*/b(c[28],eg,l)/*<<src/main.ml 903 28>>*/},/*<<src/main.ml 888 20>>*/ei=/*<<src/main.ml 888 20>>*/b(e[17],ea,d$),/*<<src/main.ml 907 26>>*/el=/*<<src/main.ml 907 26>>*/b(h[7],ek,ei),/*<<src/main.ml 907 26>>*/em=/*<<src/main.ml 907 26>>*/b(c[28],el,ej),/*<<src/main.ml 906 20>>*/eo=/*<<src/main.ml 906 20>>*/b(c[28],en,em);/*<<src/main.ml 905 18>>*/ /*<<src/main.ml 905 18>>*/d(c[46],eo)}else{/*<<src/main.ml 883 26>>*/var/*<<src/main.ml 883 26>>*/ep=/*<<src/main.ml 883 26>>*/d(o[1],Z[1]),/*<<src/main.ml 882 26>>*/er=/*<<src/main.ml 882 26>>*/b(c[28],eq,ep),/*<<src/main.ml 881 26>>*/es=/*<<src/main.ml 881 26>>*/b(c[28],I,er),/*<<src/main.ml 880 20>>*/eu=/*<<src/main.ml 880 20>>*/b(c[28],et,es);/*<<src/main.ml 879 18>>*/ /*<<src/main.ml 879 18>>*/d(c[46],eu)}break;case
3:case
4:/*<<src/main.ml 764 38>>*/var/*<<src/main.ml 764 38>>*/dw=/*<<src/main.ml 764 38>>*/i(/*<<src/main.ml 763 12>>*/g(0),2)[3],/*<<src/main.ml 764 20>>*/aA=/*<<src/main.ml 764 20>>*/d(c[34],dw),aM=0;/*<<src/main.ml 764 20>>*/if(aA){/*<<src/main.ml 765 30>>*/ /*<<src/main.ml 765 30>>*/var
aB=aA[1];/*<<src/main.ml 765 30>>*/if(0<aB){var
y=aB;aM=1}}if(!aM){/*<<src/main.ml 769 20>>*/ /*<<src/main.ml 769 20>>*/d(c[53],d5);/*<<src/main.ml 770 34>>*/ /*<<src/main.ml 770 34>>*/var
d6=/*<<src/main.ml 770 34>>*/C(n);/*<<src/main.ml 770 20>>*/ /*<<src/main.ml 770 20>>*/d(c[53],d6);/*<<src/main.ml 770 34>>*/var
y=/*<<src/main.ml 771 20>>*/d(c[99],1)}/*<<src/main.ml 764 38>>*/var/*<<src/main.ml 771 26>>*/Y=/*<<src/main.ml 771 26>>*/i(/*<<src/main.ml 771 26>>*/g(0),3)[4],/*<<src/main.ml 771 26>>*/dx=/*<<src/main.ml 771 26>>*/i(/*<<src/main.ml 771 26>>*/g(0),4)[5],/*<<src/main.ml 771 26>>*/aC=/*<<src/main.ml 771 26>>*/i(/*<<src/main.ml 771 26>>*/g(0),5)[6],/*<<src/main.ml 789 34>>*/dy=/*<<src/main.ml 789 34>>*/b(aD[1],4===n?1:0,y),/*<<src/main.ml 789 18>>*/dz=/*<<src/main.ml 789 18>>*/d(aE[1],dy),/*<<src/main.ml 787 16>>*/aF=/*<<src/main.ml 787 16>>*/b(e[42],Y,dz);/*<<src/main.ml 787 16>>*/if(aF)var
aG=/*<<src/main.ml 792 20>>*/d(aF[1],0);else{/*<<src/main.ml 796 56>>*/var/*<<src/main.ml 796 56>>*/d2=/*<<src/main.ml 796 56>>*/b(c[28],Y,d1),/*<<src/main.ml 796 22>>*/d4=/*<<src/main.ml 796 22>>*/b(c[28],d3,d2);/*<<src/main.ml 795 20>>*/ /*<<src/main.ml 795 20>>*/d(c[53],d4);/*<<src/main.ml 796 56>>*/var
aG=/*<<src/main.ml 798 20>>*/d(c[99],1)}/*<<src/main.ml 764 38>>*/var/*<<src/main.ml 798 26>>*/dA=function(f){/*<<src/main.ml 803 20>>*/function
g(h){/*<<src/main.ml 811 45>>*/var/*<<src/main.ml 811 45>>*/i=/*<<src/main.ml 811 45>>*/d(k[4],[0,aC,0]),/*<<src/main.ml 810 52>>*/j=/*<<src/main.ml 810 52>>*/d(k[4],[0,dx,0]),/*<<src/main.ml 809 35>>*/e=/*<<src/main.ml 809 35>>*/p(x[3],j,i,h);/*<<src/main.ml 809 35>>*/if(0===e[0]){var
g=e[1];return[0,g[3],g[4]]}/*<<src/main.ml 811 45>>*/var
a=e[1],f=0;if(typeof
a==="number"){if(0!==a)f=1}else
if(3!==a[0])f=1;if(f){/*<<src/main.ml 830 47>>*/var/*<<src/main.ml 830 47>>*/l=/*<<src/main.ml 830 47>>*/d(o[1],a),/*<<src/main.ml 829 47>>*/m=/*<<src/main.ml 829 47>>*/b(c[28],dC,l),/*<<src/main.ml 828 47>>*/n=/*<<src/main.ml 828 47>>*/b(c[28],aC,m),/*<<src/main.ml 827 41>>*/q=/*<<src/main.ml 827 41>>*/b(c[28],dD,n);/*<<src/main.ml 826 39>>*/ /*<<src/main.ml 826 39>>*/d(c[53],q);/*<<src/main.ml 826 39>>*/return/*<<src/main.ml 826 39>>*/d(c[99],1)}/*<<src/main.ml 823 39>>*/return dB/*<<src/main.ml 832 45>>*/}/*<<src/main.ml 804 22>>*/var/*<<src/main.ml 804 22>>*/h=/*<<src/main.ml 804 22>>*/b(e[17],g,f),/*<<src/main.ml 804 22>>*/a=/*<<src/main.ml 804 22>>*/d(e[49],h),/*<<src/main.ml 804 22>>*/i=a[1],/*<<src/main.ml 837 22>>*/j=/*<<src/main.ml 837 22>>*/b(v[29],aH[1],a[2]);/*<<src/main.ml 836 22>>*/return[0,/*<<src/main.ml 836 22>>*/b(v[29],aH[1],i),j]/*<<src/main.ml 838 21>>*/},/*<<src/main.ml 801 14>>*/dE=/*<<src/main.ml 801 14>>*/b(e[17],dA,aG),/*<<src/main.ml 801 14>>*/dF=function(b,a){/*<<src/main.ml 857 32>>*/return/*<<src/main.ml 857 32>>*/eG(D[4],dG,b,a[1]/y,a[2]/y)/*<<src/main.ml 866 25>>*/},/*<<src/main.ml 853 20>>*/dH=/*<<src/main.ml 853 20>>*/b(e[18],dF,dE),/*<<src/main.ml 852 18>>*/dJ=/*<<src/main.ml 852 18>>*/b(h[7],dI,dH),/*<<src/main.ml 851 18>>*/dL=/*<<src/main.ml 851 18>>*/b(c[28],dK,dJ),/*<<src/main.ml 850 18>>*/dN=/*<<src/main.ml 850 18>>*/b(c[28],dM,dL),/*<<src/main.ml 849 18>>*/dP=/*<<src/main.ml 849 18>>*/b(c[28],dO,dN),/*<<src/main.ml 848 18>>*/dR=/*<<src/main.ml 848 18>>*/b(c[28],dQ,dP),/*<<src/main.ml 847 18>>*/dS=/*<<src/main.ml 847 18>>*/d(c[33],y),/*<<src/main.ml 847 18>>*/dT=/*<<src/main.ml 847 18>>*/b(c[28],dS,dR),/*<<src/main.ml 846 18>>*/dV=/*<<src/main.ml 846 18>>*/b(c[28],dU,dT),/*<<src/main.ml 845 18>>*/dW=/*<<src/main.ml 845 18>>*/d(al[1],r[7][1]),/*<<src/main.ml 845 18>>*/dX=/*<<src/main.ml 845 18>>*/b(c[28],dW,dV),/*<<src/main.ml 844 18>>*/dZ=/*<<src/main.ml 844 18>>*/b(c[28],dY,dX),/*<<src/main.ml 843 14>>*/d0=/*<<src/main.ml 843 14>>*/b(c[28],Y,dZ);/*<<src/main.ml 870 12>>*/ /*<<src/main.ml 870 12>>*/d(c[46],d0);break;default:/*<<src/main.ml 914 12>>*/var/*<<src/main.ml 914 12>>*/aJ=/*<<src/main.ml 914 12>>*/i(/*<<src/main.ml 914 12>>*/g(0),2)[3],/*<<src/main.ml 923 32>>*/ev=/*<<src/main.ml 923 32>>*/d(aD[2],7===n?1:0),/*<<src/main.ml 923 16>>*/ew=/*<<src/main.ml 923 16>>*/d(aE[1],ev),/*<<src/main.ml 921 14>>*/aK=/*<<src/main.ml 921 14>>*/b(e[42],aJ,ew);/*<<src/main.ml 921 14>>*/if(aK)/*<<src/main.ml 926 18>>*/ /*<<src/main.ml 926 18>>*/d(c[46],aK[1]);else{/*<<src/main.ml 930 54>>*/var/*<<src/main.ml 930 54>>*/ey=/*<<src/main.ml 930 54>>*/b(c[28],aJ,ex),/*<<src/main.ml 930 20>>*/eA=/*<<src/main.ml 930 20>>*/b(c[28],ez,ey);/*<<src/main.ml 929 18>>*/ /*<<src/main.ml 929 18>>*/d(c[53],eA);/*<<src/main.ml 932 18>>*/ /*<<src/main.ml 932 18>>*/d(c[99],1)}}}j.caml_register_global(179,[0,s,t,u,q,ad,I,ae,af,J,ag,a1,L,B,ah,ai,M,N,O,aj,ak,am,P,Q,R,C,S,an,ao,T,ap,aq,ar,at,au,w,aw,ax],"Main");return/*<<?>>*/}(function(){return this}()));

//# 1 "../.js/stdlib/std_exit.cmo.js"
(function(joo_global_object)
   {"use strict";
    var runtime=joo_global_object.jsoo_runtime;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    var global_data=runtime.caml_get_global_data(),Stdlib=global_data.Stdlib;
    caml_call1(Stdlib[103],0);
    var Std_exit=[0];
    runtime.caml_register_global(1,Std_exit,"Std_exit");
    return}
  (function(){return this}()));


//# sourceMappingURL=data:application/json;base64,